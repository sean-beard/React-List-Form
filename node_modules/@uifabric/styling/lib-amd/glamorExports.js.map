{"version":3,"file":"glamorExports.js","sourceRoot":"../src/","sources":["glamorExports.ts"],"names":[],"mappings":";;;IAUA;QACE,gBAAgB;QAChB,oDAAoD;QACpD,EAAE,CAAC,CAAC,CAAE,MAAc,CAAC,YAAY,CAAC,IAAI,CAAE,MAAc,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC9E,oDAAoD;YACnD,MAAc,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC;QAClC,CAAC;QAED,oDAAoD;QACnD,MAAc,CAAC,SAAS,CAAC,CAAC,GAAG,CAC5B,UAAC,EAAoC;gBAAlC,sBAAQ,EAAE,gBAAK;YAAyC,OAAA,CACzD;gBACE,QAAQ,UAAA;gBACR,KAAK,EAAE,YAAM,EAAE,GAAG,oBAAM,CAAC,KAAK,CAAC,GAAG,KAAK;aACxC,CACF;QAL0D,CAK1D,CAAC,CAAC;IACP,CAAC;IAED,iBAAiB,EAAE,CAAC;IAEpB;;OAEG;IACH,gBAAuB,KAAgB;QACrC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;IAFD,wBAEC;IAED;;OAEG;IACH,eAAsB,KAAgB;QACpC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IAFD,sBAEC;IAED;;OAEG;IACH,gBAAuB,QAAgB,EAAE,KAAgB;QACvD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IACxC,CAAC;IAFD,wBAEC;IAED;;;OAGG;IACH,sBAA6B,QAAgB,EAAE,KAAgB;QAC7D,MAAM,CAAC,YAAY,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IACvC,CAAC;IAFD,oCAEC;IAED;;OAEG;IACH,kBAAyB,IAA2B;QAClD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAFD,4BAEC;IAED;;;OAGG;IACH,mBAA0B,QAAyB;QACjD,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IACpC,CAAC;IAFD,8BAEC","sourcesContent":["import * as Glamor from 'glamor';\r\nimport rtlify from 'rtl-css-js';\r\nimport { IRawStyle, IProcessedStyle } from './interfaces/index';\r\nimport { getRTL } from '@uifabric/utilities/lib/rtl';\r\n\r\ninterface IGlamorRulePair {\r\n  selector: string;\r\n  style: Glamor.CSSProperties;\r\n}\r\n\r\nfunction _initializeGlamor(): void {\r\n  // force speedy.\r\n  // tslint:disable-next-line:no-string-literal no-any\r\n  if (!(Glamor as any)['styleSheet'] || !(Glamor as any)['styleSheet'].isSpeedy) {\r\n    // tslint:disable-next-line:no-string-literal no-any\r\n    (Glamor as any)['speedy'](true);\r\n  }\r\n\r\n  // tslint:disable-next-line:no-string-literal no-any\r\n  (Glamor as any)['plugins'].add(\r\n    ({ selector, style }: IGlamorRulePair): IGlamorRulePair => (\r\n      {\r\n        selector,\r\n        style: getRTL() ? rtlify(style) : style\r\n      }\r\n    ));\r\n}\r\n\r\n_initializeGlamor();\r\n\r\n/**\r\n * Defines a :before pseudo-selector scoped style object for the given raw style.\r\n */\r\nexport function before(style: IRawStyle): IProcessedStyle {\r\n  return Glamor.before(style);\r\n}\r\n\r\n/**\r\n * Defines a :after pseudo-selector scoped style object for the given raw style.\r\n */\r\nexport function after(style: IRawStyle): IProcessedStyle {\r\n  return Glamor.after(style);\r\n}\r\n\r\n/**\r\n * Defines a style under a rule which is prefixed by the given selector.\r\n */\r\nexport function parent(selector: string, style: IRawStyle): IProcessedStyle {\r\n  return Glamor.parent(selector, style);\r\n}\r\n\r\n/**\r\n * Registers a global rule. Be aware: registering global rules are not scoped;\r\n * Two versions of a global rule will colide with each other.\r\n */\r\nexport function insertGlobal(selector: string, style: IRawStyle): void {\r\n  Glamor.insertGlobal(selector, style);\r\n}\r\n\r\n/**\r\n * Registers a font face.\r\n */\r\nexport function fontFace(font: Glamor.FontProperties): string {\r\n  return Glamor.fontFace(font);\r\n}\r\n\r\n/**\r\n * Register a keyframe definition and returns the unique name to be used for\r\n * the animation name.\r\n */\r\nexport function keyframes(timeline: Glamor.TimeLine): string {\r\n  return Glamor.keyframes(timeline);\r\n}\r\n"]}