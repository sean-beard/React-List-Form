{"version":3,"file":"mergeStyleSets.js","sourceRoot":"../src/","sources":["utilities/mergeStyleSets.ts"],"names":[],"mappings":";;;IAEA;;;;OAIG;IACH;QAAkC,cAAY;aAAZ,UAAY,EAAZ,qBAAY,EAAZ,IAAY;YAAZ,yBAAY;;QAC5C,IAAM,WAAW,GAAiC,EAAE,CAAC;QACrD,kCAAkC;QAClC,IAAM,SAAS,GAAQ,EAAE,CAAC;QAE1B,IAAI,CAAC,OAAO,CAAC,UAAC,GAAM,IAAK,OAAA,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,UAAC,GAAW;YACnE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACpB,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;YACtB,CAAC;YACD,kCAAkC;YAClC,SAAS,CAAC,GAAG,CAAC,CAAC,IAAI,CAAE,GAAW,CAAC,GAAG,CAAC,CAAC,CAAC;QACzC,CAAC,CAAC,EANuB,CAMvB,CAAC,CAAC;QAEJ,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,UAAC,GAAW;YACzC,kCAAkC;YACjC,WAAmB,CAAC,GAAG,CAAC,GAAG,yBAAW,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,WAAW,CAAC;IACrB,CAAC;IAnBD,wCAmBC","sourcesContent":["import { mergeStyles } from './mergeStyles';\r\n\r\n/**\r\n * Merges a give set of styles by running mergeStyles for each unique key. Works\r\n * like Object.assign in that it layers them in the argument order specified, but will\r\n * not mutate them and will return the merged result.\r\n */\r\nexport function mergeStyleSets<T>(...args: T[]): {[key in keyof T]?: string } {\r\n  const mergedRules: {[key in keyof T]?: string } = {};\r\n  // tslint:disable-next-line:no-any\r\n  const setStyles: any = {};\r\n\r\n  args.forEach((arg: T) => arg && Object.keys(arg).forEach((key: string) => {\r\n    if (!setStyles[key]) {\r\n      setStyles[key] = [];\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    setStyles[key].push((arg as any)[key]);\r\n  }));\r\n\r\n  Object.keys(setStyles).forEach((key: string) => {\r\n    // tslint:disable-next-line:no-any\r\n    (mergedRules as any)[key] = mergeStyles(setStyles[key]);\r\n  });\r\n\r\n  return mergedRules;\r\n}\r\n"]}