{
  "_args": [
    [
      {
        "raw": "@uifabric/styling@>=0.19.1 <1.0.0",
        "scope": "@uifabric",
        "escapedName": "@uifabric%2fstyling",
        "name": "@uifabric/styling",
        "rawSpec": ">=0.19.1 <1.0.0",
        "spec": ">=0.19.1 <1.0.0",
        "type": "range"
      },
      "E:\\Development\\React-List-Form\\node_modules\\office-ui-fabric-react"
    ]
  ],
  "_from": "@uifabric/styling@>=0.19.1 <1.0.0",
  "_id": "@uifabric/styling@0.21.1",
  "_inCache": true,
  "_location": "/@uifabric/styling",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/styling-0.21.1.tgz_1504040155475_0.1252914876677096"
  },
  "_npmUser": {
    "name": "uifabric",
    "email": "dzearing@microsoft.com"
  },
  "_npmVersion": "5.0.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@uifabric/styling@>=0.19.1 <1.0.0",
    "scope": "@uifabric",
    "escapedName": "@uifabric%2fstyling",
    "name": "@uifabric/styling",
    "rawSpec": ">=0.19.1 <1.0.0",
    "spec": ">=0.19.1 <1.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/office-ui-fabric-react"
  ],
  "_resolved": "https://registry.npmjs.org/@uifabric/styling/-/styling-0.21.1.tgz",
  "_shasum": "b0355fe6de4d54047277403acd888f1f2ed26118",
  "_shrinkwrap": null,
  "_spec": "@uifabric/styling@>=0.19.1 <1.0.0",
  "_where": "E:\\Development\\React-List-Form\\node_modules\\office-ui-fabric-react",
  "dependencies": {
    "@microsoft/load-themed-styles": "^1.5.1",
    "@uifabric/utilities": ">=4.11.1 <5.0.0",
    "glamor": "^2.20.24",
    "rtl-css-js": "^1.1.1",
    "tslib": "^1.6.0"
  },
  "description": "Defines the core Office UI Fabric styles through a JavaScript interface.",
  "devDependencies": {
    "@microsoft/sp-build-web": "^1.1.0",
    "@microsoft/sp-module-interfaces": "^1.1.0",
    "@microsoft/web-library-build": "^3.2.1",
    "@types/chai": "3.4.35",
    "@types/enzyme": "2.8.0",
    "@types/mocha": "2.2.39",
    "@types/react": "15.0.38",
    "@types/react-addons-test-utils": "0.14.18",
    "@types/react-dom": "15.5.1",
    "@types/webpack-env": "1.13.0",
    "@uifabric/example-app-base": ">=4.1.1 <5.0.0",
    "chai": "^3.5.0",
    "enzyme": "^2.7.0",
    "es6-map": "^0.1.5",
    "es6-promise": "^4.1.0",
    "es6-weak-map": "^2.0.2",
    "gulp": "~3.9.1",
    "mocha": "^3.2.0",
    "mocha-loader": "^1.1.1",
    "office-ui-fabric-react-tslint": ">=1.0.0 <2.0.0",
    "react": "^15.4.2",
    "react-addons-test-utils": "^15.4.2",
    "react-dom": "^15.4.2",
    "source-map-loader": "^0.2.1",
    "ts-loader": "^2.1.0",
    "typescript": "2.4.2",
    "uglifyjs-webpack-plugin": "^0.4.3",
    "webpack": "^3.4.1",
    "webpack-bundle-analyzer": "^2.2.1",
    "webpack-dev-server": "^2.4.1",
    "webpack-notifier": "^1.5.0",
    "webpack-split-by-path": "2.0.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-SlQwGCtqnN7SIklqi534nLMTVfjLkaK1QGmTxGq5BQutz/tiJNVIJ7hVuRMNI669TNu0Gf+nkIFPcEn56DxavQ==",
    "shasum": "b0355fe6de4d54047277403acd888f1f2ed26118",
    "tarball": "https://registry.npmjs.org/@uifabric/styling/-/styling-0.21.1.tgz"
  },
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "ms-office",
      "email": "dzearing@microsoft.com"
    },
    {
      "name": "dzearing",
      "email": "dzearing@microsoft.com"
    },
    {
      "name": "uifabric",
      "email": "dzearing@microsoft.com"
    }
  ],
  "name": "@uifabric/styling",
  "optionalDependencies": {},
  "readme": "\r\n# Summary\r\n\r\n# Using the styling package\r\n\r\nIntegrating components into your project depends heavily on your setup. The recommended setup is to use a bundler such as webpack which can resolve NPM package imports in your code and can bundle the specific things you import.\r\n\r\nWithin an npm project, you should install the package and save it as a dependency:\r\n\r\n```bash\r\nnpm install --save @uifabric/styling\r\n```\r\n\r\nThis will add the styling package which gives you access to the Fabric Core style classes through JavaScript.\r\n\r\n# Using Fabric core classes\r\n\r\nFonts, colors, icons and animations are exported through the `classNames` export. The export exposes class names for `colors`, `fonts`, `animations`, and `icons`.\r\n\r\nExample of returning markup that is `themePrimary` colored using the `medium` font:\r\n\r\n```tsx\r\nimport {\r\n  colorClassNames,\r\n  fontClassNames\r\n} from '@uifabric/styling';\r\n\r\nfunction renderHtml() {\r\n  return (\r\n    `<div class=\"${ [\r\n      colorClassNames.themePrimary,\r\n      fontClassNamed.medium\r\n      ].join(' ') }\">Hello world!</div>`\r\n  );\r\n}\r\n```\r\n\r\nThere are a number of classes available under `colorClassNames`, `fontClassNames`, `AnimationClassNames`, and `iconClassNames` exports. See the [available classes](#availableClasses) below.\r\n\r\nUsing animations works the same way:\r\n\r\n```tsx\r\nimport {\r\n  AnimationClassNames\r\n} from '@uifabric/styling';\r\n\r\nfunction renderHtml() {\r\n  return (\r\n    `<div class=\"${ AnimationClassNames.fadeIn }\">Hello world!</div>`\r\n  );\r\n}\r\n```\r\n\r\nRendering icons is also simplified:\r\n\r\n```tsx\r\nimport {\r\n  classNames\r\n} from '@uifabric/styling';\r\n\r\nfunction renderHtml() {\r\n  return (\r\n    `<i class=\"${ classNames.icons.snow }\" />`\r\n  );\r\n}\r\n```\r\n\r\n# Usage via JavaScript styling libraries (Glamor, Aphrodite)\r\n\r\nIf you need access to the raw JavaScript style objects so that you can mix them into other classes and use via a css library such as Glamor or Aphrodite, you can access the raw classes like so:\r\n\r\n```tsx\r\nimport {\r\n  styles\r\n} from '@uifabric/styling';\r\nimport { css } from 'glamor';\r\n\r\nfunction renderHtml() {\r\n  let className = css({\r\n    ...styles.fonts.large,\r\n    background: 'red'\r\n  });\r\n  return (\r\n    `<div class=\"${ css(styles.fonts.large, { background: 'red' }) }\">Hello!</div>`\r\n  );\r\n}\r\n```\r\n\r\n\r\n# Overriding the theme colors\r\n\r\nThe default palette of colors matches the default Fabric core styling conventions. However, it is possible to override the color slots to match your product requirements:\r\n\r\n```tsx\r\nimport {\r\n  loadTheme({\r\n    colors: {\r\n      themePrimary: 'red',\r\n      themeSeconary: 'blue'\r\n    }\r\n  });\r\n}\r\n```\r\n\r\nIf you override theme settings, you need to do this before accessing theme colors. Otherwise you won't get a notification that the theme changed.\r\n\r\n# Available classes\r\n<a name=\"availableClasses\"></a>\r\n\r\n## Colors (classNames.colors members)\r\n\r\nMembers of `classNames.colors`:\r\n\r\n| Name | Description |\r\n|------|-------------|\r\n\r\n## Fonts\r\n\r\nMembers of `classNames.fonts`:\r\n\r\n| Name | Description |\r\n|------|-------------|\r\n\r\n\r\n## Animations (classNames.animations members)\r\n\r\nMembers of `classNames.animations`:\r\n\r\n| Name | Description |\r\n|------|-------------|\r\n\r\n## Icons (classNames.icons members)\r\n\r\nMembers of `classNames.icons`:\r\n\r\n| Name | Description |\r\n|------|-------------|\r\n",
  "readmeFilename": "README.md",
  "scripts": {
    "build": "node ../../scripts/build.js",
    "clean": "gulp clean",
    "start": "node node_modules/webpack-dev-server/bin/webpack-dev-server.js --config webpack.serve.config.js --open"
  },
  "typings": "lib/index.d.ts",
  "version": "0.21.1"
}
