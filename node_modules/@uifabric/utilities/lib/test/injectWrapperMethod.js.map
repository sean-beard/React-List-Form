{"version":3,"file":"injectWrapperMethod.js","sourceRoot":"../src/","sources":["test/injectWrapperMethod.ts"],"names":[],"mappings":";;AACA;;;;;;GAMG;AACH,6BAAoC,OAA+B,EAAE,UAAkB,EAAE,EAAc;IACrG,IAAM,cAAc,GAAI,OAAO,CAAC,QAAQ,EAAU,CAAC,UAAU,CAAC,CAAC;IAE/D,EAAE,CAAC,CAAC,OAAO,cAAc,KAAK,UAAU,CAAC,CAAC,CAAC;QACzC,MAAM,IAAI,KAAK,CAAC,kCAAgC,UAAU,wDAAqD,CAAC,CAAC;IACnH,CAAC;IAEA,OAAO,CAAC,QAAQ,EAAU,CAAC,UAAU,CAAC,GAAG,UAAU,SAAc;QAChE,EAAE,EAAE,CAAC;QACL,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IACvC,CAAC,CAAC;AACJ,CAAC;AAXD,kDAWC","sourcesContent":["import { ReactWrapper } from 'enzyme';\r\n/**\r\n * Injects a function call prior to running a method for a component\r\n * rendered using enzyme deep rendering.\r\n * @param wrapper - The enzyme deep rendering wrapper object to modify\r\n * @param methodName - The name of the method to modify on the wrapper\r\n * @param fn - The function to run prior to the call of the original method\r\n */\r\nexport function injectWrapperMethod(wrapper: ReactWrapper<any, any>, methodName: string, fn: () => void): void {\r\n  const originalMethod = (wrapper.instance() as any)[methodName];\r\n\r\n  if (typeof originalMethod !== 'function') {\r\n    throw new Error(`Tried to override the method ${methodName} on a ReactWrapper that does not have that function`);\r\n  }\r\n\r\n  (wrapper.instance() as any)[methodName] = function (prevProps: any): void {\r\n    fn();\r\n    originalMethod.call(this, prevProps);\r\n  };\r\n}"]}