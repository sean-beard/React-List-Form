import { IRectangle } from './IRectangle';
/**
 * Sets the virtual parent of an element.
 * Pass `undefined` as the `parent` to clear the virtual parent.
 *
 * @public
 */
export declare function setVirtualParent(child: HTMLElement, parent: HTMLElement): void;
/**
 * Gets the virtual parent given the child element, if it exists.
 *
 * @public
 */
export declare function getVirtualParent(child: HTMLElement): HTMLElement | undefined;
/**
 * Gets the element which is the parent of a given element.
 * If `allowVirtuaParents` is `true`, this method prefers the virtual parent over
 * real DOM parent when present.
 *
 * @public
 */
export declare function getParent(child: HTMLElement, allowVirtualParents?: boolean): HTMLElement | null;
/**
 * Determines whether or not a parent element contains a given child element.
 * If `allowVirtualParents` is true, this method may return `true` if the child
 * has the parent in its virtual element hierarchy.
 *
 * @public
 */
export declare function elementContains(parent: HTMLElement | null, child: HTMLElement | null, allowVirtualParents?: boolean): boolean;
/**
 * Helper to set ssr mode to simulate no window object returned from getWindow helper.
 *
 * @public
 */
export declare function setSSR(isEnabled: boolean): void;
/**
 * Helper to get the window object.
 *
 * @public
 */
export declare function getWindow(rootElement?: HTMLElement): Window | undefined;
/**
 * Helper to get the document object.
 *
 * @public
 */
export declare function getDocument(rootElement?: HTMLElement): Document | undefined;
/**
 * Helper to get bounding client rect, works with window.
 *
 * @public
 */
export declare function getRect(element: HTMLElement | Window | null): IRectangle | undefined;
