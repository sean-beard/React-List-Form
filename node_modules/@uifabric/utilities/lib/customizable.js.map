{"version":3,"file":"customizable.js","sourceRoot":"../src/","sources":["customizable.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,sCAAwC;AACxC,mDAAsE;AAEtE,sBAA6B,MAAgB;IAC3C,gDAAgD;IAChD,MAAM,CAAC,6BACL,iBAA4E;QAE5E,MAAM;gBAA0C,sDAAsB;gBAOpE,oCAAY,KAAQ,EAAE,OAAY;oBAAlC,YACE,kBAAM,KAAK,EAAE,OAAO,CAAC,SAGtB;oBADC,KAAI,CAAC,iBAAiB,GAAG,KAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;gBAC7D,CAAC;gBAEM,sDAAiB,GAAxB;oBACE,+BAAc,CAAC,iBAAiB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;gBAC3D,CAAC;gBAEM,yDAAoB,GAA3B;oBACE,+BAAc,CAAC,oBAAoB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;gBAC9D,CAAC;gBAEM,2CAAM,GAAb;oBACE,IAAI,YAAY,GAAG,EAAE,CAAC;oBAEtB,GAAG,CAAC,CAAiB,UAAM,EAAN,iBAAM,EAAN,oBAAM,EAAN,IAAM;wBAAtB,IAAI,QAAQ,eAAA;wBACd,YAAoB,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC;4BAC5D,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC;4BACpC,+BAAc,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;qBACrC;oBAED,MAAM,CAAC,CACL,oBAAC,iBAAiB,uBAAM,YAAY,EAAQ,IAAI,CAAC,KAAY,EAAK,CACnE,CAAC;gBACJ,CAAC;gBAEO,sDAAiB,GAAzB,UAA0B,MAA0B;oBAClD,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACpC,IAAI,CAAC,WAAW,EAAE,CAAC;oBACrB,CAAC;gBACH,CAAC;gBAEH,iCAAC;YAAD,CAAC,AAzCM,CAAyC,KAAK,CAAC,SAAS;YAC/C,eAAY,GAEtB;gBACF,aAAa,EAAE,SAAS,CAAC,MAAM;aAC/B;eAoCF;;IACJ,CAAC,CAAC;AACJ,CAAC;AAhDD,oCAgDC","sourcesContent":["import * as React from 'react';\r\nimport * as PropTypes from 'prop-types';\r\nimport { GlobalSettings, IChangeDescription } from './GlobalSettings';\r\n\r\nexport function customizable(fields: string[]): <P, S>(ComposedComponent: new (props: P, ...args: any[]) => React.Component<P, S>) => any {\r\n  // tslint:disable-next-line:no-shadowed-variable\r\n  return function customizableFactory<P, S>(\r\n    ComposedComponent: (new (props: P, ...args: any[]) => React.Component<P, S>)\r\n  ): any {\r\n    return class ComponentWithInjectedProps extends React.Component<P, {}> {\r\n      public static contextTypes: {\r\n        injectedProps: PropTypes.Requireable<any>;\r\n      } = {\r\n        injectedProps: PropTypes.object\r\n      };\r\n\r\n      constructor(props: P, context: any) {\r\n        super(props, context);\r\n\r\n        this._onSettingChanged = this._onSettingChanged.bind(this);\r\n      }\r\n\r\n      public componentDidMount(): void {\r\n        GlobalSettings.addChangeListener(this._onSettingChanged);\r\n      }\r\n\r\n      public componentWillUnmount(): void {\r\n        GlobalSettings.removeChangeListener(this._onSettingChanged);\r\n      }\r\n\r\n      public render(): JSX.Element {\r\n        let defaultProps = {};\r\n\r\n        for (let propName of fields) {\r\n          (defaultProps as any)[propName] = (this.context.injectedProps) ?\r\n            this.context.injectedProps[propName] :\r\n            GlobalSettings.getValue(propName);\r\n        }\r\n\r\n        return (\r\n          <ComposedComponent { ...defaultProps } { ...this.props as any } />\r\n        );\r\n      }\r\n\r\n      private _onSettingChanged(change: IChangeDescription): void {\r\n        if (fields.indexOf(change.key) >= 0) {\r\n          this.forceUpdate();\r\n        }\r\n      }\r\n\r\n    };\r\n  };\r\n}\r\n"]}