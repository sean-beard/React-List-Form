/**
 * Storing global state in local module variables has issues when more than one copy
 * if the module gets loaded on the page (due to a bundling error or simply by consuming
 * a prebundled script.)
 *
 * This file contains helpers to deal with the getting and setting local state, and allows
 * callers to get called back when it mutates.
 */
define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var GLOBAL_SETTINGS_PROP_NAME = '__globalSettings__';
    var CALLBACK_STATE_PROP_NAME = '__callbacks__';
    var _globalSettings = {};
    var _counter = 0;
    if (typeof window !== 'undefined') {
        var win = window;
        _globalSettings = win[GLOBAL_SETTINGS_PROP_NAME] = win[GLOBAL_SETTINGS_PROP_NAME] || (_a = {},
            _a[CALLBACK_STATE_PROP_NAME] = {},
            _a);
    }
    var _callbacks = _globalSettings[CALLBACK_STATE_PROP_NAME];
    /**
     * Global settings helper, which stores settings in the global (window) namespace.
     * If window is not provided, it will store settings in module scope. Provides a
     * way to observe changes as well when their values change.
     *
     * @public
     */
    var GlobalSettings = (function () {
        function GlobalSettings() {
        }
        GlobalSettings.getValue = function (key, defaultValue) {
            if (_globalSettings[key] === undefined) {
                _globalSettings[key] = typeof defaultValue === 'function' ? defaultValue() : defaultValue;
            }
            return _globalSettings[key];
        };
        GlobalSettings.setValue = function (key, value) {
            var oldValue = _globalSettings[key];
            if (value !== oldValue) {
                _globalSettings[key] = value;
                var changeDescription = {
                    oldValue: oldValue,
                    value: value,
                    key: key
                };
                for (var id in _callbacks) {
                    if (_callbacks.hasOwnProperty(id)) {
                        _callbacks[id](changeDescription);
                    }
                }
            }
        };
        GlobalSettings.addChangeListener = function (cb) {
            // Note: we use generated ids on the callbacks to create a map of the callbacks, which optimizes removal.
            // (It's faster to delete a key than it is to look up the index of an object and splice an array.)
            var id = cb.__id__;
            if (!id) {
                id = cb.__id__ = String(_counter++);
            }
            _callbacks[id] = cb;
        };
        GlobalSettings.removeChangeListener = function (cb) {
            delete _callbacks[cb.__id__];
        };
        return GlobalSettings;
    }());
    exports.GlobalSettings = GlobalSettings;
    var _a;
});
//# sourceMappingURL=GlobalSettings.js.map