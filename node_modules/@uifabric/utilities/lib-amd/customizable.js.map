{"version":3,"file":"customizable.js","sourceRoot":"../src/","sources":["customizable.tsx"],"names":[],"mappings":";;;IAIA,sBAA6B,MAAgB;QAC3C,gDAAgD;QAChD,MAAM,CAAC,6BACL,iBAA4E;YAE5E,MAAM;oBAA0C,sDAAsB;oBAOpE,oCAAY,KAAQ,EAAE,OAAY;wBAAlC,YACE,kBAAM,KAAK,EAAE,OAAO,CAAC,SAGtB;wBADC,KAAI,CAAC,iBAAiB,GAAG,KAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;oBAC7D,CAAC;oBAEM,sDAAiB,GAAxB;wBACE,+BAAc,CAAC,iBAAiB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;oBAC3D,CAAC;oBAEM,yDAAoB,GAA3B;wBACE,+BAAc,CAAC,oBAAoB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;oBAC9D,CAAC;oBAEM,2CAAM,GAAb;wBACE,IAAI,YAAY,GAAG,EAAE,CAAC;wBAEtB,GAAG,CAAC,CAAiB,UAAM,EAAN,iBAAM,EAAN,oBAAM,EAAN,IAAM;4BAAtB,IAAI,QAAQ,eAAA;4BACd,YAAoB,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC;gCAC5D,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC;gCACpC,+BAAc,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;yBACrC;wBAED,MAAM,CAAC,CACL,oBAAC,iBAAiB,uBAAM,YAAY,EAAQ,IAAI,CAAC,KAAY,EAAK,CACnE,CAAC;oBACJ,CAAC;oBAEO,sDAAiB,GAAzB,UAA0B,MAA0B;wBAClD,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;4BACpC,IAAI,CAAC,WAAW,EAAE,CAAC;wBACrB,CAAC;oBACH,CAAC;oBAEH,iCAAC;gBAAD,CAAC,AAzCM,CAAyC,KAAK,CAAC,SAAS;gBAC/C,eAAY,GAEtB;oBACF,aAAa,EAAE,SAAS,CAAC,MAAM;iBAC/B;mBAoCF;;QACJ,CAAC,CAAC;IACJ,CAAC;IAhDD,oCAgDC","sourcesContent":["import * as React from 'react';\r\nimport * as PropTypes from 'prop-types';\r\nimport { GlobalSettings, IChangeDescription } from './GlobalSettings';\r\n\r\nexport function customizable(fields: string[]): <P, S>(ComposedComponent: new (props: P, ...args: any[]) => React.Component<P, S>) => any {\r\n  // tslint:disable-next-line:no-shadowed-variable\r\n  return function customizableFactory<P, S>(\r\n    ComposedComponent: (new (props: P, ...args: any[]) => React.Component<P, S>)\r\n  ): any {\r\n    return class ComponentWithInjectedProps extends React.Component<P, {}> {\r\n      public static contextTypes: {\r\n        injectedProps: PropTypes.Requireable<any>;\r\n      } = {\r\n        injectedProps: PropTypes.object\r\n      };\r\n\r\n      constructor(props: P, context: any) {\r\n        super(props, context);\r\n\r\n        this._onSettingChanged = this._onSettingChanged.bind(this);\r\n      }\r\n\r\n      public componentDidMount(): void {\r\n        GlobalSettings.addChangeListener(this._onSettingChanged);\r\n      }\r\n\r\n      public componentWillUnmount(): void {\r\n        GlobalSettings.removeChangeListener(this._onSettingChanged);\r\n      }\r\n\r\n      public render(): JSX.Element {\r\n        let defaultProps = {};\r\n\r\n        for (let propName of fields) {\r\n          (defaultProps as any)[propName] = (this.context.injectedProps) ?\r\n            this.context.injectedProps[propName] :\r\n            GlobalSettings.getValue(propName);\r\n        }\r\n\r\n        return (\r\n          <ComposedComponent { ...defaultProps } { ...this.props as any } />\r\n        );\r\n      }\r\n\r\n      private _onSettingChanged(change: IChangeDescription): void {\r\n        if (fields.indexOf(change.key) >= 0) {\r\n          this.forceUpdate();\r\n        }\r\n      }\r\n\r\n    };\r\n  };\r\n}\r\n"]}