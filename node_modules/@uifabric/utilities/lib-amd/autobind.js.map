{"version":3,"file":"autobind.js","sourceRoot":"../src/","sources":["autobind.ts"],"names":[],"mappings":";;;IAAA;;;OAGG;IACH,kBAA6C,MAAW,EAAE,GAAW,EAAE,UAAsC;QAK3G,IAAI,EAAE,GAAG,UAAU,CAAC,KAAK,CAAC;QAE1B,IAAI,QAAQ,GAAG,KAAK,CAAC;QAErB,MAAM,CAAC;YACL,YAAY,EAAE,IAAI;YAElB,GAAG,EAAH;gBACE,EAAE,CAAC,CAAC,QAAQ,IAAI,CAAC,EAAE,IAAI,IAAI,KAAK,EAAE,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC1E,MAAM,CAAC,EAAO,CAAC;gBACjB,CAAC;gBAED,uFAAuF;gBACvF,IAAI,OAAO,GAAG,EAAE,IAAI,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAElC,QAAQ,GAAG,IAAI,CAAC;gBAChB,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,GAAG,EAAE;oBAC/B,YAAY,EAAE,IAAI;oBAClB,QAAQ,EAAE,IAAI;oBACd,UAAU,EAAE,IAAI;oBAChB,KAAK,EAAE,OAAO;iBACf,CAAC,CAAC;gBACH,QAAQ,GAAG,KAAK,CAAC;gBAEjB,MAAM,CAAC,OAAO,CAAC;YACjB,CAAC;YAED,GAAG,EAAH,UAAI,QAAa;gBACf,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,GAAG,EAAE;oBAC/B,YAAY,EAAE,IAAI;oBAClB,QAAQ,EAAE,IAAI;oBACd,UAAU,EAAE,IAAI;oBAChB,KAAK,EAAE,QAAQ;iBAChB,CAAC,CAAC;YACL,CAAC;SACF,CAAC;IACJ,CAAC;IAzCD,4BAyCC","sourcesContent":["/**\r\n * Autobind is a utility for binding methods in a class. This simplifies tagging methods as being \"bound\" to the this pointer\r\n * so that they can be used in scenarios that simply require a function callback.\r\n */\r\nexport function autobind<T extends Function>(target: any, key: string, descriptor: TypedPropertyDescriptor<T>): {\r\n  configurable: boolean;\r\n  get(): T;\r\n  set(newValue: any): void;\r\n} | void {\r\n  let fn = descriptor.value;\r\n\r\n  let defining = false;\r\n\r\n  return {\r\n    configurable: true,\r\n\r\n    get(): T {\r\n      if (defining || (fn && this === fn.prototype) || this.hasOwnProperty(key)) {\r\n        return fn as T;\r\n      }\r\n\r\n      // Bind method only once, and update the property to return the bound value from now on\r\n      let fnBound = fn && fn.bind(this);\r\n\r\n      defining = true;\r\n      Object.defineProperty(this, key, {\r\n        configurable: true,\r\n        writable: true,\r\n        enumerable: true,\r\n        value: fnBound\r\n      });\r\n      defining = false;\r\n\r\n      return fnBound;\r\n    },\r\n\r\n    set(newValue: any): void {\r\n      Object.defineProperty(this, key, {\r\n        configurable: true,\r\n        writable: true,\r\n        enumerable: true,\r\n        value: newValue\r\n      });\r\n    }\r\n  };\r\n}\r\n"]}