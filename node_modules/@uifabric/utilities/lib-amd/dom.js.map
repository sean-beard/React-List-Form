{"version":3,"file":"dom.js","sourceRoot":"../src/","sources":["dom.ts"],"names":[],"mappings":"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","sourcesContent":["import { IRectangle } from './IRectangle';\r\n\r\n/**\r\n * Attached interface for elements which support virtual references.\r\n * Used internally by the virtual hierarchy methods.\r\n */\r\ninterface IVirtualElement extends HTMLElement {\r\n  _virtual: {\r\n    parent?: IVirtualElement;\r\n    children: IVirtualElement[];\r\n  };\r\n}\r\n\r\n/**\r\n * Sets the virtual parent of an element.\r\n * Pass `undefined` as the `parent` to clear the virtual parent.\r\n *\r\n * @public\r\n */\r\nexport function setVirtualParent(child: HTMLElement, parent: HTMLElement): void {\r\n  let virtualChild = <IVirtualElement>child;\r\n  let virtualParent = <IVirtualElement>parent;\r\n\r\n  if (!virtualChild._virtual) {\r\n    virtualChild._virtual = {\r\n      children: []\r\n    };\r\n  }\r\n\r\n  let oldParent = virtualChild._virtual.parent;\r\n\r\n  if (oldParent && oldParent !== parent) {\r\n    // Remove the child from its old parent.\r\n    let index = oldParent._virtual.children.indexOf(virtualChild);\r\n\r\n    if (index > -1) {\r\n      oldParent._virtual.children.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  virtualChild._virtual.parent = virtualParent || undefined;\r\n\r\n  if (virtualParent) {\r\n    if (!virtualParent._virtual) {\r\n      virtualParent._virtual = {\r\n        children: []\r\n      };\r\n    }\r\n\r\n    virtualParent._virtual.children.push(virtualChild);\r\n  }\r\n}\r\n\r\n/**\r\n * Gets the virtual parent given the child element, if it exists.\r\n *\r\n * @public\r\n */\r\nexport function getVirtualParent(child: HTMLElement): HTMLElement | undefined {\r\n  let parent: HTMLElement | undefined;\r\n\r\n  if (child && isVirtualElement(child)) {\r\n    parent = child._virtual.parent;\r\n  }\r\n\r\n  return parent;\r\n}\r\n\r\n/**\r\n * Gets the element which is the parent of a given element.\r\n * If `allowVirtuaParents` is `true`, this method prefers the virtual parent over\r\n * real DOM parent when present.\r\n *\r\n * @public\r\n */\r\nexport function getParent(child: HTMLElement, allowVirtualParents: boolean = true): HTMLElement | null {\r\n  return child && (\r\n    allowVirtualParents && getVirtualParent(child) ||\r\n    child.parentNode && child.parentNode as HTMLElement\r\n  );\r\n}\r\n\r\n/**\r\n * Determines whether or not a parent element contains a given child element.\r\n * If `allowVirtualParents` is true, this method may return `true` if the child\r\n * has the parent in its virtual element hierarchy.\r\n *\r\n * @public\r\n */\r\nexport function elementContains(parent: HTMLElement | null, child: HTMLElement | null, allowVirtualParents: boolean = true): boolean {\r\n  let isContained = false;\r\n\r\n  if (parent && child) {\r\n    if (allowVirtualParents) {\r\n      isContained = false;\r\n\r\n      while (child) {\r\n        let nextParent: HTMLElement | null = getParent(child);\r\n\r\n        if (nextParent === parent) {\r\n          isContained = true;\r\n          break;\r\n        }\r\n\r\n        child = nextParent;\r\n      }\r\n    } else if (parent.contains) {\r\n      isContained = parent.contains(child);\r\n    }\r\n  }\r\n\r\n  return isContained;\r\n}\r\n\r\nlet _isSSR = false;\r\n\r\n/**\r\n * Helper to set ssr mode to simulate no window object returned from getWindow helper.\r\n *\r\n * @public\r\n */\r\nexport function setSSR(isEnabled: boolean): void {\r\n  _isSSR = isEnabled;\r\n}\r\n\r\n/**\r\n * Helper to get the window object.\r\n *\r\n * @public\r\n */\r\nexport function getWindow(rootElement?: HTMLElement): Window | undefined {\r\n  if (_isSSR || typeof window === 'undefined') {\r\n    return undefined;\r\n  } else {\r\n    return (\r\n      rootElement &&\r\n        rootElement.ownerDocument &&\r\n        rootElement.ownerDocument.defaultView ?\r\n        rootElement.ownerDocument.defaultView :\r\n        window\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Helper to get the document object.\r\n *\r\n * @public\r\n */\r\nexport function getDocument(rootElement?: HTMLElement): Document | undefined {\r\n  if (_isSSR || typeof document === 'undefined') {\r\n    return undefined;\r\n  } else {\r\n    return rootElement && rootElement.ownerDocument ? rootElement.ownerDocument : document;\r\n  }\r\n}\r\n\r\n/**\r\n * Helper to get bounding client rect, works with window.\r\n *\r\n * @public\r\n */\r\nexport function getRect(element: HTMLElement | Window | null): IRectangle | undefined {\r\n  let rect: IRectangle | undefined;\r\n\r\n  if (element) {\r\n    if (element === window) {\r\n      rect = {\r\n        left: 0,\r\n        top: 0,\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n        right: window.innerWidth,\r\n        bottom: window.innerHeight\r\n      };\r\n    } else if ((element as HTMLElement).getBoundingClientRect) {\r\n      rect = (element as HTMLElement).getBoundingClientRect();\r\n    }\r\n  }\r\n\r\n  return rect;\r\n}\r\n\r\n/**\r\n * Determines whether or not an element has the virtual hierarchy extension.\r\n *\r\n * @public\r\n */\r\nfunction isVirtualElement(element: HTMLElement | IVirtualElement): element is IVirtualElement {\r\n  return element && !!(<IVirtualElement>element)._virtual;\r\n}\r\n"]}