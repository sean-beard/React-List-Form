{"version":3,"file":"GlobalSettings.js","sourceRoot":"../src/","sources":["GlobalSettings.ts"],"names":[],"mappings":"AAAA;;;;;;;GAOG;;;;IAEH,IAAM,yBAAyB,GAAG,oBAAoB,CAAC;IACvD,IAAM,wBAAwB,GAAG,eAAe,CAAC;IAEjD,IAAI,eAAe,GAA2B,EAAE,CAAC;IACjD,IAAI,QAAQ,GAAG,CAAC,CAAC;IAEjB,EAAE,CAAC,CAAC,OAAO,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC;QAClC,IAAI,GAAG,GAAG,MAAa,CAAC;QAExB,eAAe,GAAG,GAAG,CAAC,yBAAyB,CAAC,GAAG,GAAG,CAAC,yBAAyB,CAAC;YAC/E,GAAC,wBAAwB,IAAG,EAAE;eAC/B,CAAC;IACJ,CAAC;IAED,IAAM,UAAU,GAAG,eAAe,CAAC,wBAAwB,CAAC,CAAC;IAuB7D;;;;;;OAMG;IACH;QAAA;QA6CA,CAAC;QA5Ce,uBAAQ,GAAtB,UAA0B,GAAW,EAAE,YAA4B;YACjE,EAAE,CAAC,CAAC,eAAe,CAAC,GAAG,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC;gBACvC,eAAe,CAAC,GAAG,CAAC,GAAG,OAAO,YAAY,KAAK,UAAU,GAAG,YAAY,EAAE,GAAG,YAAY,CAAC;YAC5F,CAAC;YAED,MAAM,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QAC9B,CAAC;QAEa,uBAAQ,GAAtB,UAA0B,GAAW,EAAE,KAAQ;YAC7C,IAAI,QAAQ,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC;YAEpC,EAAE,CAAC,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACvB,eAAe,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;gBAE7B,IAAI,iBAAiB,GAAG;oBACtB,QAAQ,UAAA;oBACR,KAAK,OAAA;oBACL,GAAG,KAAA;iBACJ,CAAC;gBAEF,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,UAAU,CAAC,CAAC,CAAC;oBAC1B,EAAE,CAAC,CAAC,UAAU,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;wBAClC,UAAU,CAAC,EAAE,CAAC,CAAC,iBAAiB,CAAC,CAAC;oBACpC,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC;QAEa,gCAAiB,GAA/B,UAAgC,EAAwB;YACtD,yGAAyG;YACzG,kGAAkG;YAClG,IAAI,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC;YAEnB,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACR,EAAE,GAAG,EAAE,CAAC,MAAM,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;YACtC,CAAC;YAED,UAAU,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;QACtB,CAAC;QAEa,mCAAoB,GAAlC,UAAmC,EAAwB;YACzD,OAAO,UAAU,CAAC,EAAE,CAAC,MAAgB,CAAC,CAAC;QACzC,CAAC;QAEH,qBAAC;IAAD,CAAC,AA7CD,IA6CC;IA7CY,wCAAc","sourcesContent":["/**\r\n * Storing global state in local module variables has issues when more than one copy\r\n * if the module gets loaded on the page (due to a bundling error or simply by consuming\r\n * a prebundled script.)\r\n *\r\n * This file contains helpers to deal with the getting and setting local state, and allows\r\n * callers to get called back when it mutates.\r\n */\r\n\r\nconst GLOBAL_SETTINGS_PROP_NAME = '__globalSettings__';\r\nconst CALLBACK_STATE_PROP_NAME = '__callbacks__';\r\n\r\nlet _globalSettings: { [key: string]: any } = {};\r\nlet _counter = 0;\r\n\r\nif (typeof window !== 'undefined') {\r\n  let win = window as any;\r\n\r\n  _globalSettings = win[GLOBAL_SETTINGS_PROP_NAME] = win[GLOBAL_SETTINGS_PROP_NAME] || {\r\n    [CALLBACK_STATE_PROP_NAME]: {}\r\n  };\r\n}\r\n\r\nconst _callbacks = _globalSettings[CALLBACK_STATE_PROP_NAME];\r\n\r\n/**\r\n * Change description used for change callbacks in GlobalSettings.\r\n *\r\n * @public\r\n */\r\nexport interface IChangeDescription {\r\n  key: string;\r\n  oldValue: any;\r\n  value: any;\r\n}\r\n\r\n/**\r\n * Change event callback.\r\n *\r\n * @public\r\n */\r\nexport interface IChangeEventCallback {\r\n  __id__?: string;\r\n  (changeDescription?: IChangeDescription): void;\r\n}\r\n\r\n/**\r\n * Global settings helper, which stores settings in the global (window) namespace.\r\n * If window is not provided, it will store settings in module scope. Provides a\r\n * way to observe changes as well when their values change.\r\n *\r\n * @public\r\n */\r\nexport class GlobalSettings {\r\n  public static getValue<T>(key: string, defaultValue?: T | (() => T)): T {\r\n    if (_globalSettings[key] === undefined) {\r\n      _globalSettings[key] = typeof defaultValue === 'function' ? defaultValue() : defaultValue;\r\n    }\r\n\r\n    return _globalSettings[key];\r\n  }\r\n\r\n  public static setValue<T>(key: string, value: T): void {\r\n    let oldValue = _globalSettings[key];\r\n\r\n    if (value !== oldValue) {\r\n      _globalSettings[key] = value;\r\n\r\n      let changeDescription = {\r\n        oldValue,\r\n        value,\r\n        key\r\n      };\r\n\r\n      for (let id in _callbacks) {\r\n        if (_callbacks.hasOwnProperty(id)) {\r\n          _callbacks[id](changeDescription);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public static addChangeListener(cb: IChangeEventCallback): void {\r\n    // Note: we use generated ids on the callbacks to create a map of the callbacks, which optimizes removal.\r\n    // (It's faster to delete a key than it is to look up the index of an object and splice an array.)\r\n    let id = cb.__id__;\r\n\r\n    if (!id) {\r\n      id = cb.__id__ = String(_counter++);\r\n    }\r\n\r\n    _callbacks[id] = cb;\r\n  }\r\n\r\n  public static removeChangeListener(cb: IChangeEventCallback): void {\r\n    delete _callbacks[cb.__id__ as string];\r\n  }\r\n\r\n}\r\n"]}