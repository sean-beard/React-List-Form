{
  "_args": [
    [
      {
        "raw": "glamor@^2.20.24",
        "scope": null,
        "escapedName": "glamor",
        "name": "glamor",
        "rawSpec": "^2.20.24",
        "spec": ">=2.20.24 <3.0.0",
        "type": "range"
      },
      "E:\\Development\\React-List-Form\\node_modules\\@uifabric\\styling"
    ]
  ],
  "_from": "glamor@>=2.20.24 <3.0.0",
  "_id": "glamor@2.20.40",
  "_inCache": true,
  "_location": "/glamor",
  "_nodeVersion": "8.3.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/glamor-2.20.40.tgz_1502644671188_0.9123847237788141"
  },
  "_npmUser": {
    "name": "threepointone",
    "email": "threepointone@gmail.com"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "glamor@^2.20.24",
    "scope": null,
    "escapedName": "glamor",
    "name": "glamor",
    "rawSpec": "^2.20.24",
    "spec": ">=2.20.24 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@uifabric/styling"
  ],
  "_resolved": "https://registry.npmjs.org/glamor/-/glamor-2.20.40.tgz",
  "_shasum": "f606660357b7cf18dface731ad1a2cfa93817f05",
  "_shrinkwrap": null,
  "_spec": "glamor@^2.20.24",
  "_where": "E:\\Development\\React-List-Form\\node_modules\\@uifabric\\styling",
  "author": {
    "name": "Sunil Pai",
    "email": "threepointone@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/threepointone/glamor/issues"
  },
  "dependencies": {
    "fbjs": "^0.8.12",
    "inline-style-prefixer": "^3.0.6",
    "object-assign": "^4.1.1",
    "prop-types": "^15.5.10",
    "through": "^2.3.8"
  },
  "description": "inline css for component systems",
  "devDependencies": {
    "babel-cli": "^6.24.1",
    "babel-core": "^6.25.0",
    "babel-eslint": "^7.2.3",
    "babel-loader": "^7.1.1",
    "babel-plugin-istanbul": "^4.1.4",
    "babel-plugin-react-require": "^3.0.0",
    "babel-plugin-transform-decorators-legacy": "^1.3.4",
    "babel-preset-env": "^1.6.0",
    "babel-preset-react": "^6.24.1",
    "babel-preset-stage-0": "^6.24.1",
    "classnames": "^2.2.5",
    "cross-env": "^5.0.1",
    "eslint": "^4.2.0",
    "eslint-config-rackt": "^1.1.1",
    "eslint-plugin-react": "^7.1.0",
    "expect": "^1.20.2",
    "expect-jsx": "^3.0.0",
    "karma": "^1.7.0",
    "karma-browserstack-launcher": "^1.3.0",
    "karma-chrome-launcher": "^2.2.0",
    "karma-coverage": "^1.1.1",
    "karma-firefox-launcher": "^1.0.1",
    "karma-mocha": "^1.3.0",
    "karma-mocha-reporter": "^2.2.3",
    "karma-safari-launcher": "^1.0.0",
    "karma-webpack": "^2.0.4",
    "mkdirp": "^0.5.1",
    "mocha": "^3.4.2",
    "npm-run-all": "^4.0.2",
    "pegjs": "^0.10.0",
    "react": "^16.0.0-beta.1",
    "react-addons-css-transition-group": "^15.6.0",
    "react-dom": "^16.0.0-beta.1",
    "rimraf": "^2.6.1",
    "stylelint": "^8.0.0",
    "stylelint-config-standard": "^17.0.0",
    "stylelint-processor-styled-components": "^0.2.1",
    "webpack": "^3.3.0",
    "webpack-dev-server": "^2.5.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-DNXCd+c14N9QF8aAKrfl4xakPk5FdcFwmH7sD0qnC0Pr7xoZ5W9yovhUrY/dJc3psfGGXC58vqQyRtuskyUJxA==",
    "shasum": "f606660357b7cf18dface731ad1a2cfa93817f05",
    "tarball": "https://registry.npmjs.org/glamor/-/glamor-2.20.40.tgz"
  },
  "eslintConfig": {
    "extends": [
      "rackt"
    ],
    "plugins": [
      "react"
    ],
    "rules": {
      "react/jsx-uses-vars": "error",
      "react/jsx-uses-react": "error",
      "jsx-quotes": 0
    }
  },
  "files": [
    "lib",
    "umd",
    "aphrodite.js",
    "jsxstyle.js",
    "babel.js",
    "babel-hoist.js",
    "inline.js",
    "styled.js",
    "ous.js",
    "react.js",
    "reset.js",
    "server.js",
    "utils.js",
    "index.d.ts",
    "aphrodite.d.ts",
    "jsxstyle.d.ts",
    "react.d.ts",
    "ous.d.ts",
    "utils.d.ts"
  ],
  "gitHead": "db533d7c5fe249e443756367161d0830086b0624",
  "homepage": "https://github.com/threepointone/glamor",
  "keywords": [
    "css",
    "inline"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "otbe",
      "email": "benjamin.otto@style-systems.de"
    },
    {
      "name": "donaldpipowitch",
      "email": "pipo@senaeh.de"
    },
    {
      "name": "threepointone",
      "email": "threepointone@gmail.com"
    }
  ],
  "name": "glamor",
  "optionalDependencies": {},
  "readme": "# glamor\n\n[![Join the chat at https://gitter.im/glamor-css/Lobby](https://badges.gitter.im/glamor-css/Lobby.svg)](https://gitter.im/glamor-css/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n![build status](https://travis-ci.org/threepointone/glamor.svg)\n\ncss in your javascript\n\n`npm install glamor --save`\n\nusage\n```jsx\nimport { css } from 'glamor'\n\n// make css rules\nlet rule = css({\n  color: 'red',\n  ':hover': {\n    color: 'pink'\n  },\n  '@media(min-width: 300px)': {\n    color: 'green',\n    ':hover': {\n      color: 'yellow'\n    }\n  }\n})\n\n// add as data attributes\n<div {...rule} {...another}>\n  zomg\n</div>\n\n// or as classes\n<div className={`${rule} ${another}`}>\n  zomg\n</div>\n\n// merge rules for great justice\nlet mono = css({\n  fontFamily: 'monospace'\n})\n\nlet bolder = css({\n  fontWeight: 'bolder'\n})\n\n<div {...css(mono, bolder)}>\n  bold code!\n</div>\n\n```\n\nmotivation\n---\n\nThis expands on ideas from @vjeux's [2014 css-in-js talk](https://speakerdeck.com/vjeux/react-css-in-js).\nWe introduce an api to annotate arbitrary dom nodes with style definitions (\"rules\") for, um, the greater good.\n\nfeatures\n---\n\n- fast / efficient, with a fluent api\n- framework independent\n- adds vendor prefixes / fallback values\n- supports all the pseudo :classes/::elements\n- `@media` queries\n- `@supports` statements\n- `@font-face` / `@keyframes`\n- escape hatches for parent / child / contextual selectors\n- dev helper to simulate pseudo classes like `:hover`, etc\n- server side / static rendering\n- tests / coverage\n- experimental - [write real css](https://github.com/threepointone/glamor/blob/master/docs/css.md), with syntax highlighting and linting\n\n\n(thanks to [BrowserStack](https://www.browserstack.com/) for providing the infrastructure that allows us to run our build in real browsers.)\n\ndocs\n---\n- [api documentation](https://github.com/threepointone/glamor/blob/master/docs/api.md)\n- [howto](https://github.com/threepointone/glamor/blob/master/docs/howto.md) - a comparison of css techniques in glamor\n- [plugins](https://github.com/threepointone/glamor/blob/master/docs/plugins.md)\n- [server side rendering](https://github.com/threepointone/glamor/blob/master/docs/server.md)\n- [performance tips](https://github.com/threepointone/glamor/blob/master/docs/performance.md)\n- [what happens when I call css(...rules)?](https://github.com/threepointone/glamor/blob/master/docs/implementation.md)\n\nextras\n---\n\n- `glamor/reset` - include a css reset\n- [use a `css` prop on *all* your react elements](https://github.com/threepointone/glamor/blob/master/docs/createElement.md)\n- `glamor/react` - helpers for [themes](https://github.com/threepointone/glamor/blob/master/docs/themes.md), [`@vars`](https://github.com/threepointone/glamor/blob/master/docs/vars.md)\n- `glamor/jsxstyle` - [react integration](https://github.com/threepointone/glamor/blob/master/docs/jsxstyle.md), Ã  la [jsxstyle](https://github.com/petehunt/jsxstyle/)\n- `glamor/aphrodite` - [shim](https://github.com/threepointone/glamor/blob/master/docs/aphrodite.md) for [aphrodite](https://github.com/Khan/aphrodite) stylesheets\n- `glamor/utils` - a port of [postcss-utilities](https://github.com/ismamz/postcss-utilities)\n- `glamor/ous` - a port of [the skeleton css framework](http://getskeleton.com)\n- [`glamor/styled`](https://github.com/threepointone/glamor/blob/master/docs/styled.md) - an experimental port of [styled-components](https://styled-components.com/)\n\n\nspeedy mode\n---\n\nthere are two methods by which the library adds styles to the document -\n- by appending css 'rules' to a browser backed stylesheet. This is really fast, but has the disadvantage of making the styles uneditable in the devtools sidebar.\n- by appending text nodes to a style tag. This is fairly slow, but doesn't have the editing drawback.\n\nas a compromise, we enable the former 'speedy' mode `NODE_ENV=production`, and disable it otherwise. You can manually toggle this with the `speedy()` function.\n\ncharacteristics\n---\n\nwhile glamor shares most common attributes of other inline style / css-in-js systems,\nhere are some key differences -\n\n- uses 'real' stylesheets, so you can use all css features.\n- rules can be used as data-attributes or classNames.\n- simulate pseudo-classes with the `simulate` helper. very useful, especially when combined when hot-loading and/or editing directly in devtools.\n- really fast, by way of deduping rules, and using [insertRule](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/insertRule) in production.\n\n\ntodo\n---\n\n- redo all the docs\n- [planned enhancements](https://github.com/threepointone/glamor/issues?q=is%3Aopen+is%3Aissue+label%3Aenhancement)\n- notes on composition\n\nprofit, profit\n---\n\nI get it\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/threepointone/glamor.git"
  },
  "scripts": {
    "build": "npm-run-all -s clean -s parser -p build:** -s size",
    "build:lib": "babel src -d lib --presets env,stage-0,react",
    "build:umd": "mkdirp umd && webpack --config webpack/umd.js",
    "build:umd-prod": "cross-env NODE_ENV=production npm run build:umd",
    "clean": "rimraf lib umd",
    "coverage": "rm -rf tests/coverage && COVERAGE=1 npm test && open tests/coverage/*/index.html",
    "parser": "pegjs src/css/spec.pegjs",
    "prepublish": "npm run build",
    "size": "cat umd/index.min.js | gzip | wc -c",
    "start": "webpack-dev-server --config webpack/dev.js",
    "test": "karma start tests/karma.conf.js",
    "test:server": "cross-env NODE_ENV=test babel-node tests/server.js --presets env,stage-0,react",
    "test:watch": "npm test -- --no-single-run"
  },
  "typings": "index.d.ts",
  "version": "2.20.40"
}
