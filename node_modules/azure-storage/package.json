{
  "_args": [
    [
      {
        "raw": "azure-storage@~0.10.0",
        "scope": null,
        "escapedName": "azure-storage",
        "name": "azure-storage",
        "rawSpec": "~0.10.0",
        "spec": ">=0.10.0 <0.11.0",
        "type": "range"
      },
      "E:\\Development\\React-List-Form\\node_modules\\@microsoft\\sp-build-core-tasks"
    ]
  ],
  "_from": "azure-storage@>=0.10.0 <0.11.0",
  "_id": "azure-storage@0.10.0",
  "_inCache": true,
  "_location": "/azure-storage",
  "_nodeVersion": "4.2.4",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/azure-storage-0.10.0.tgz_1459157514043_0.7091938457451761"
  },
  "_npmUser": {
    "name": "windowsazure",
    "email": "azuresdk@outlook.com"
  },
  "_npmVersion": "3.8.0",
  "_phantomChildren": {
    "aws-sign2": "0.6.0",
    "aws4": "1.6.0",
    "bl": "1.0.3",
    "chalk": "1.1.3",
    "combined-stream": "1.0.5",
    "commander": "2.11.0",
    "core-util-is": "1.0.2",
    "forever-agent": "0.6.1",
    "hawk": "3.1.3",
    "http-signature": "1.1.1",
    "inherits": "2.0.3",
    "is-my-json-valid": "2.16.1",
    "is-typedarray": "1.0.0",
    "isstream": "0.1.2",
    "json-stringify-safe": "5.0.1",
    "lodash": "4.15.0",
    "mime-types": "2.1.16",
    "oauth-sign": "0.8.2",
    "pinkie-promise": "2.0.1",
    "process-nextick-args": "1.0.7",
    "string_decoder": "0.10.31",
    "stringstream": "0.0.5",
    "util-deprecate": "1.0.2"
  },
  "_requested": {
    "raw": "azure-storage@~0.10.0",
    "scope": null,
    "escapedName": "azure-storage",
    "name": "azure-storage",
    "rawSpec": "~0.10.0",
    "spec": ">=0.10.0 <0.11.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@microsoft/sp-build-core-tasks"
  ],
  "_resolved": "https://registry.npmjs.org/azure-storage/-/azure-storage-0.10.0.tgz",
  "_shasum": "42c57bb72d6f33ebb78d2d954ddb3df49a75b2ba",
  "_shrinkwrap": null,
  "_spec": "azure-storage@~0.10.0",
  "_where": "E:\\Development\\React-List-Form\\node_modules\\@microsoft\\sp-build-core-tasks",
  "author": {
    "name": "Microsoft Corporation"
  },
  "browser": {
    "fs": "browserify-fs"
  },
  "bugs": {
    "url": "http://github.com/Azure/azure-storage-node/issues"
  },
  "dependencies": {
    "browserify-mime": "~1.2.9",
    "extend": "~1.2.1",
    "node-uuid": "~1.4.0",
    "readable-stream": "~2.0.0",
    "request": "~2.69.0",
    "underscore": "~1.4.4",
    "validator": "~3.22.2",
    "xml2js": "0.2.7",
    "xmlbuilder": "0.4.3"
  },
  "description": "Microsoft Azure Storage Client Library for Node.js",
  "devDependencies": {
    "browserify-fs": "^1.0.0",
    "coveralls": "^2.11.4",
    "grunt": "~0.4.2",
    "grunt-contrib-jshint": "~0.11.0",
    "grunt-devserver": "^0.6.0",
    "grunt-jsdoc": "~0.5.1",
    "grunt-mocha": "^0.4.12",
    "grunt-mocha-test": "^0.12.7",
    "grunt-nsp-package": "0.0.5",
    "istanbul": "^0.3.22",
    "jshint": ">= 2.1.4",
    "mocha": ">= 1.18.0",
    "mocha-lcov-reporter": "^1.0.0",
    "nock": "0.16",
    "nsp": "^2.2.0",
    "should": "1.2.x"
  },
  "directories": {},
  "dist": {
    "shasum": "42c57bb72d6f33ebb78d2d954ddb3df49a75b2ba",
    "tarball": "https://registry.npmjs.org/azure-storage/-/azure-storage-0.10.0.tgz"
  },
  "engines": {
    "node": ">= 0.8.26"
  },
  "gitHead": "6e08af851149019d2c15f066436a6dcbe4ce0dae",
  "homepage": "http://github.com/Azure/azure-storage-node",
  "keywords": [
    "node",
    "azure",
    "storage"
  ],
  "license": "Apache-2.0",
  "main": "./lib/azure-storage.js",
  "maintainers": [
    {
      "name": "windowsazure",
      "email": "azuresdk@outlook.com"
    }
  ],
  "name": "azure-storage",
  "optionalDependencies": {},
  "readme": "# Microsoft Azure Storage SDK for Node.js \r\n\r\n[![NPM version](https://badge.fury.io/js/azure-storage.svg)](http://badge.fury.io/js/azure-storage) [![Build Status](https://travis-ci.org/Azure/azure-storage-node.svg?branch=master)](https://travis-ci.org/Azure/azure-storage-node)\r\n[![Coverage Status](https://coveralls.io/repos/Azure/azure-storage-node/badge.svg?branch=master&service=github)](https://coveralls.io/github/Azure/azure-storage-node?branch=master)\r\n\r\nThis project provides a Node.js package that makes it easy to consume and manage Microsoft Azure Storage Services.\r\n\r\n> If you are looking for the Node.js SDK for other Azure services, visit [https://github.com/Azure/azure-sdk-for-node](https://github.com/Azure/azure-sdk-for-node).\r\n\r\n# Features\r\n\r\n- Tables\r\n  - Create/Delete Tables\r\n  - Query/Create/Read/Update/Delete Entities\r\n- Blobs\r\n  - Create/Delete Containers\r\n  - Create/Read/Update/Delete Blobs\r\n- Files\r\n  - Create/Delete Shares\r\n  - Create/Delete Directories\r\n  - Create/Read/Update/Delete Files\r\n- Queues\r\n  - Create/Delete Queues\r\n  - Insert/Peek Queue Messages\r\n  - Advanced Queue Operations\r\n- Service Properties\r\n  - Get Service Properties\r\n  - Set Service Properties\r\n\r\nPlease check details on [API reference documents](http://azure.github.io/azure-storage-node).\r\n\r\n# Getting Started\r\n\r\n## Install\r\n\r\n```shell\r\nnpm install azure-storage\r\n```\r\n\r\n## Usage\r\n\r\n```Javascript\r\nvar azure = require('azure-storage');\r\n```\r\n\r\nWhen using the Storage SDK, you must provide connection information for the storage account to use. This can be provided using:\r\n\r\n* Environment variables - **AZURE_STORAGE_ACCOUNT** and **AZURE_STORAGE_ACCESS_KEY**, or **AZURE_STORAGE_CONNECTION_STRING**.\r\n\r\n* Constructors - For example, `var tableSvc = azure.createTableService(accountName, accountKey);`\r\n\r\n### Table Storage\r\n\r\nTo ensure a table exists, call **createTableIfNotExists**:\r\n\r\n```Javascript\r\nvar azure = require('azure-storage');\r\nvar tableService = azure.createTableService();\r\ntableService.createTableIfNotExists('mytable', function(error, result, response) {\r\n  if (!error) {\r\n    // result contains true if created; false if already exists\r\n  }\r\n});\r\n```\r\nA new entity can be added by calling **insertEntity**:\r\n\r\n```Javascript\r\nvar azure = require('azure-storage');\r\nvar tableService = azure.createTableService();\r\nvar entGen = azure.TableUtilities.entityGenerator;\r\nvar entity = {\r\n  PartitionKey: entGen.String('part2'),\r\n  RowKey: entGen.String('row1'),\r\n  boolValueTrue: entGen.Boolean(true),\r\n  boolValueFalse: entGen.Boolean(false),\r\n  intValue: entGen.Int32(42),\r\n  dateValue: entGen.DateTime(new Date(Date.UTC(2011, 10, 25))),\r\n  complexDateValue: entGen.DateTime(new Date(Date.UTC(2013, 02, 16, 01, 46, 20)))\r\n};\r\ntableService.insertEntity('mytable', entity, function(error, result, response) {\r\n  if (!error) {\r\n    // result contains the ETag for the new entity\r\n  }\r\n});\r\n```\r\n\r\n\r\nInstead of creating entities manually, you can use **entityGenerator**:\r\n\r\n```Javascript\r\nvar azure = require('azure-storage');\r\nvar entGen = azure.TableUtilities.entityGenerator;\r\nvar task = {\r\n  PartitionKey: entGen.String('hometasks'),\r\n  RowKey: entGen.String('1'),\r\n  description: entGen.String('take out the trash'),\r\n  dueDate: entGen.DateTime(new Date(Date.UTC(2015, 6, 20))),\r\n};\r\n```\r\n\r\nThe method **retrieveEntity** can then be used to fetch the entity that was just inserted:\r\n\r\n```Javascript\r\nvar azure = require('azure-storage');\r\nvar tableService = azure.createTableService();\r\ntableService.retrieveEntity('mytable', 'part2', 'row1', function(error, result, response) {\r\n  if (!error) {\r\n    // result contains the entity\r\n  }\r\n});\r\n```\r\n\r\nUse **TableQuery** to build complex queries:\r\n\r\n```Javascript\r\nvar azure = require('azure-storage');\r\nvar tableService = azure.createTableService();\r\nvar query = new azure.TableQuery()\r\n  .top(5)\r\n  .where('PartitionKey eq ?', 'part2');\r\n\r\ntableSvc.queryEntities('mytable', query, null, function(error, result, response) {\r\n  if (!error) {\r\n    // result.entries contains entities matching the query\r\n  }\r\n});\r\n```\r\n\r\n### Blob Storage\r\n\r\nThe **createContainerIfNotExists** method can be used to create a\r\ncontainer in which to store a blob:\r\n\r\n```Javascript\r\nvar azure = require('azure-storage');\r\nvar blobService = azure.createBlobService();\r\nblobService.createContainerIfNotExists('taskcontainer', {\r\n  publicAccessLevel: 'blob'\r\n}, function(error, result, response) {\r\n  if (!error) {\r\n    // if result = true, container was created.\r\n    // if result = false, container already existed.\r\n  }\r\n});\r\n```\r\n\r\nTo upload a file (assuming it is called task1-upload.txt and it is placed in the same folder as the script below), the method **createBlockBlobFromLocalFile** can be used.\r\n\r\n```Javascript\r\nvar azure = require('azure-storage');\r\nvar blobService = azure.createBlobService();\r\n\r\nblobService.createBlockBlobFromLocalFile('mycontainer', 'taskblob', 'task1-upload.txt', function(error, result, response) {\r\n  if (!error) {\r\n    // file uploaded\r\n  }\r\n});\r\n```\r\n\r\n\r\nFor page blobs, use **createPageBlobFromLocalFile**. There are other methods for uploading blobs also, such as **createBlockBlobFromText** or **createPageBlobFromStream**.\r\n\r\nThere are also several ways to download block and page blobs. For example, **getBlobToStream** downloads the blob to a stream:\r\n  \r\n```Javascript\r\nvar blobService = azure.createBlobService();\r\nvar fs = require('fs');\r\nblobService.getBlobToStream('mycontainer', 'taskblob', fs.createWriteStream('output.txt'), function(error, result, response) {\r\n  if (!error) {\r\n    // blob retrieved\r\n  }\r\n});\r\n```\r\n\r\nTo create a Shared Access Signature (SAS), use the **generateSharedAccessSignature** method. Additionally you can use the **date** helper functions to easily create a SAS that expires at some point relative to the current time.\r\n\r\n```Javascript\r\nvar azure = require('azure-storage');\r\nvar blobService = azure.createBlobService();\r\n\r\nvar startDate = new Date();\r\nvar expiryDate = new Date(startDate);\r\nexpiryDate.setMinutes(startDate.getMinutes() + 100);\r\nstartDate.setMinutes(startDate.getMinutes() - 100);\r\n\r\nvar sharedAccessPolicy = {\r\n  AccessPolicy: {\r\n    Permissions: azure.BlobUtilities.SharedAccessPermissions.READ,\r\n    Start: startDate,\r\n    Expiry: expiryDate\r\n  },\r\n};\r\n\r\nvar token = blobService.generateSharedAccessSignature(containerName, blobName, sharedAccessPolicy);\r\nvar sasUrl = blobService.getUrl(containerName, blobName, token);\r\n```\r\n\r\n### Queue Storage\r\n\r\nThe **createQueueIfNotExists** method can be used to ensure a queue exists:\r\n\r\n```Javascript\r\nvar azure = require('azure-storage');\r\nvar queueService = azure.createQueueService();\r\nqueueService.createQueueIfNotExists('taskqueue', function(error) {\r\n  if (!error) {\r\n    // Queue exists\r\n  }\r\n});\r\n```\r\n\r\nThe **createMessage** method can then be called to insert the message into the queue:\r\n\r\n```Javascript\r\nvar queueService = azure.createQueueService();\r\nqueueService.createMessage('taskqueue', 'Hello world!', function(error) {\r\n  if (!error) {\r\n    // Message inserted\r\n  }\r\n});\r\n```\r\n\r\nIt is then possible to call the **getMessage** method, process the message and then call **deleteMessage** inside the callback. This two-step process ensures messages don't get lost when they are removed from the queue.\r\n\r\n```Javascript\r\nvar queueService = azure.createQueueService(),\r\n  queueName = 'taskqueue';\r\nqueueService.getMessages(queueName, function(error, serverMessages) {\r\n  if (!error) {\r\n    // Process the message in less than 30 seconds, the message\r\n    // text is available in serverMessages[0].messageText\r\n\r\n    queueService.deleteMessage(queueName, serverMessages[0].messageId, serverMessages[0].popReceipt, function(error) {\r\n      if (!error) {\r\n        // Message deleted\r\n      }\r\n    });\r\n  }\r\n});\r\n```\r\n\r\n### File Storage\r\n\r\nThe **createShareIfNotExists** method can be used to create a\r\nshare in which to store a file or a directory of files:\r\n\r\n```Javascript\r\nvar azure = require('azure-storage');\r\nvar fileService = azure.createFileService();\r\nfileService.createShareIfNotExists('taskshare', function(error, result, response) {\r\n  if (!error) {\r\n    // if result = true, share was created.\r\n    // if result = false, share already existed.\r\n  }\r\n});\r\n```\r\n\r\nTo create a directory, the method **createDirectoryIfNotExists** can be used.\r\n\r\n```Javascript\r\nvar azure = require('azure-storage');\r\nvar fileService = azure.createFileService();\r\n\r\nfileService.createDirectoryIfNotExists('taskshare', 'taskdirectory', function(error, result, response) {\r\n  if (!error) {\r\n    // if result = true, share was created.\r\n    // if result = false, share already existed.\r\n  }\r\n});\r\n```\r\n\r\nTo upload a file (assuming it is called task1-upload.txt and it is placed in the same folder as the script below), the method **createFileFromLocalFile** can be used.\r\n\r\n```Javascript\r\nvar azure = require('azure-storage');\r\nvar fileService = azure.createFileService();\r\n\r\nfileService.createFileFromLocalFile('taskshare', 'taskdirectory', 'taskfile', 'task1-upload.txt', function(error, result, response) {\r\n  if (!error) {\r\n    // file uploaded\r\n  }\r\n});\r\n```\r\n\r\nThere are other methods for uploading files also, such as **createFileFromText** or **createFileFromStream**.\r\n\r\nThere are also several ways to download files. For example, **getFileToStream** downloads the file to a stream:\r\n  \r\n```Javascript\r\nvar fileService = azure.createFileService();\r\nvar fs = require('fs');\r\nfileService.getFileToStream('taskshare', 'taskdirectory', 'taskfile', fs.createWriteStream('output.txt'), function(error, result, response) {\r\n  if (!error) {\r\n    // file retrieved\r\n  }\r\n});\r\n```\r\n\r\n### Service Properties \r\n\r\nThe **getServiceProperties** method can be used to fetch the logging, metrics and CORS settings on your storage account:\r\n\r\n```Javascript  \r\nvar azure = require('azure-storage');\r\nvar blobService = azure.createBlobService();\r\n\r\nblobService.getServiceProperties(function(error, result, response) {  \r\n  if (!error) {\r\n     var serviceProperties = result;\r\n     // properties are fetched\r\n  } \r\n});  \r\n```\r\n\r\nThe **setServiceProperties** method can be used to modify the logging, metrics and CORS settings on your storage account:\r\n\r\n```Javascript  \r\nvar azure = require('azure-storage');\r\nvar blobService = azure.createBlobService();\r\n\r\nvar serviceProperties = generateServiceProperties(); \r\n\r\nblobService.setServiceProperties(serviceProperties, function(error, result, response) {  \r\n  if (!error) {\r\n    // properties are set\r\n  }\r\n});  \r\n\r\nfunction generateServiceProperties() {\r\n  return serviceProperties = {\r\n    Logging: {\r\n      Version: '1.0',\r\n      Delete: true,\r\n      Read: true,\r\n      Write: true,\r\n      RetentionPolicy: {\r\n        Enabled: true,\r\n        Days: 10,\r\n      },\r\n    },\r\n    HourMetrics: {\r\n      Version: '1.0',\r\n      Enabled: true,\r\n      IncludeAPIs: true,\r\n      RetentionPolicy: {\r\n        Enabled: true,\r\n        Days: 10,\r\n      },\r\n    },\r\n    MinuteMetrics: {\r\n      Version: '1.0',\r\n      Enabled: true,\r\n      IncludeAPIs: true,\r\n      RetentionPolicy: {\r\n        Enabled: true,\r\n        Days: 10,\r\n      },\r\n    },\r\n    Cors: {\r\n      CorsRule: [\r\n        {\r\n          AllowedOrigins: ['www.azure.com', 'www.microsoft.com'],\r\n          AllowedMethods: ['GET', 'PUT'],\r\n          AllowedHeaders: ['x-ms-meta-data*', 'x-ms-meta-target*', 'x-ms-meta-xyz', 'x-ms-meta-foo'],\r\n          ExposedHeaders: ['x-ms-meta-data*', 'x-ms-meta-source*', 'x-ms-meta-abc', 'x-ms-meta-bcd'],\r\n          MaxAgeInSeconds: 500,\r\n        },\r\n        {\r\n          AllowedOrigins: ['www.msdn.com', 'www.asp.com'],\r\n          AllowedMethods: ['GET', 'PUT'],\r\n          AllowedHeaders: ['x-ms-meta-data*', 'x-ms-meta-target*', 'x-ms-meta-xyz', 'x-ms-meta-foo'],\r\n          ExposedHeaders: ['x-ms-meta-data*', 'x-ms-meta-source*', 'x-ms-meta-abc', 'x-ms-meta-bcd'],\r\n          MaxAgeInSeconds: 500,\r\n        },\r\n      ],\r\n    },\r\n  };\r\n}\r\n```\r\n\r\nWhen modifying the service properties, you can fetch the properties and then modify the them to prevent overwriting the existing settings.\r\n\r\n```Javascript\r\nvar azure = require('azure-storage');\r\nvar blobService = azure.createBlobService();\r\n\r\nblobService.getServiceProperties(function(error, result, response) {  \r\n  if (!error) {\r\n    var serviceProperties = result;\r\n     \r\n    // modify the properties\r\n\r\n    blobService.setServiceProperties(serviceProperties, function(error, result, response) {  \r\n      if (!error) {\r\n        // properties are set\r\n      }\r\n    });\r\n  } \r\n});\r\n```\r\n\r\n## Code Samples\r\n\r\nHow-Tos focused around accomplishing specific tasks are available on the [Microsoft Azure Node.js Developer Center](http://azure.microsoft.com/en-us/develop/nodejs/).\r\n\r\n* [How to use the Blob Service from Node.js](http://azure.microsoft.com/en-us/documentation/articles/storage-nodejs-how-to-use-blob-storage/)\r\n\r\n* [How to use the Table Service from Node.js](http://azure.microsoft.com/en-us/documentation/articles/storage-nodejs-how-to-use-table-storage/)\r\n\r\n* [How to use the Queue Service from Node.js](http://azure.microsoft.com/en-us/documentation/articles/storage-nodejs-how-to-use-queues/)\r\n\r\n# Running Tests\r\n\r\nUnit tests can then be run from the module's root directory using:\r\n\r\n```shell\r\nnpm test\r\n```\r\n\r\nRunning test is also supported by Grunt by:\r\n\r\n```shell\r\ngrunt # mochaTest as the default task\r\n```\r\n\r\nBy default the unit tests are ran with Nock recording data. To run tests against real storage account, please set environment variable to turn off Nock by:\r\n\r\n```\r\nset NOCK_OFF=true\r\n```\r\n\r\nand set up the following environment variables for storage account credentials by \r\n\r\n```Batchfile\r\nset AZURE_STORAGE_CONNECTION_STRING=\"valid storage connection string\"\r\n```\r\nor \r\n```Batchfile\r\nset AZURE_STORAGE_ACCOUNT=\"valid storage account name\"\r\nset AZURE_STORAGE_ACCESS_KEY=\"valid storage account key\"\r\n```\r\n\r\nTo record the data in a test pass against real storage account for future Nock usage:\r\n\r\n```Batchfile\r\nset AZURE_NOCK_RECORD=true\r\n```\r\n\r\nIn order to be able to use a proxy like fiddler, an additional environment variable should be set up:\r\n\r\n```Batchfile\r\nset HTTP_PROXY=http://127.0.0.1:8888\r\n```\r\n\r\nOn Linux, please use `export` other than `set` to set the variables.\r\n\r\n# JsDoc\r\n\r\nJsDoc can be generated by `grunt jsdoc`.\r\n\r\nTo load the docs by devserver after generation, run `grunt doc` and then browse the docs at [http://localhost:8888](http://localhost:8888).\r\n\r\n# Need Help?\r\n\r\nBe sure to check out the Microsoft Azure [Developer Forums on MSDN](http://go.microsoft.com/fwlink/?LinkId=234489) if you have trouble with the provided code or use StackOverflow.\r\n\r\n# Learn More\r\n\r\n- [Microsoft Azure Node.js Developer Center](http://azure.microsoft.com/en-us/develop/nodejs/)\r\n- [Azure Storage Team Blog](http://blogs.msdn.com/b/windowsazurestorage/)\r\n\r\n# Contribute\r\n\r\nWe gladly accept community contributions.\r\n\r\n- Issues: Please report bugs using the Issues section of GitHub\r\n- Forums: Interact with the development teams on StackOverflow or the Microsoft Azure Forums\r\n- Source Code Contributions: If you would like to become an active contributor to this project please follow the instructions provided in [Microsoft Azure Projects Contribution Guidelines](http://azure.github.com/guidelines.html).\r\n\r\nFor general suggestions about Microsoft Azure please use our [UserVoice forum](http://feedback.azure.com/forums/34192--general-feedback).\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/Azure/azure-storage-node.git"
  },
  "scripts": {
    "check": "jshint lib && nsp check",
    "cover": "istanbul cover ./node_modules/mocha/bin/_mocha -- -R spec -u bdd --no-timeouts --recursive test",
    "coveralls": "npm run cover && cat ./coverage/lcov.info | node ./node_modules/coveralls/bin/coveralls.js",
    "test": "jshint lib && nsp check && mocha --no-timeouts --recursive test",
    "testwithoutcheck": "jshint lib && mocha --no-timeouts --recursive test"
  },
  "tags": [
    "azure",
    "storage",
    "sdk"
  ],
  "version": "0.10.0"
}
