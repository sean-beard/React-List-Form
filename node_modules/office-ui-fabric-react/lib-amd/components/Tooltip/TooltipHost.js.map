{"version":3,"sources":["components/Tooltip/TooltipHost.tsx"],"names":[],"mappings":"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","file":"components/Tooltip/TooltipHost.js","sourcesContent":["/* tslint:disable:no-unused-variable */\r\nimport * as React from 'react';\r\n/* tslint:enable:no-unused-variable */\r\nimport {\r\n  BaseComponent,\r\n  autobind,\r\n  css,\r\n  divProperties,\r\n  getNativeProps,\r\n  getId,\r\n  assign,\r\n  hasOverflow\r\n} from '../../Utilities';\r\nimport { ITooltipHostProps, TooltipOverflowMode } from './TooltipHost.Props';\r\nimport { Tooltip } from './Tooltip';\r\nimport { TooltipDelay } from './Tooltip.Props';\r\n\r\nimport * as stylesImport from './TooltipHost.scss';\r\nconst styles: any = stylesImport;\r\n\r\nexport interface ITooltipHostState {\r\n  isTooltipVisible?: boolean;\r\n}\r\n\r\nexport class TooltipHost extends BaseComponent<ITooltipHostProps, ITooltipHostState> {\r\n  public static defaultProps = {\r\n    delay: TooltipDelay.medium\r\n  };\r\n\r\n  // The wrapping div that gets the hover events\r\n  private _tooltipHost: HTMLElement;\r\n\r\n  // Constructor\r\n  constructor(props: ITooltipHostProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isTooltipVisible: false\r\n    };\r\n  }\r\n\r\n  // Render\r\n  public render() {\r\n    const {\r\n      calloutProps,\r\n      tooltipProps,\r\n      content,\r\n      children,\r\n      directionalHint,\r\n      directionalHintForRTL,\r\n      delay,\r\n      id,\r\n      setAriaDescribedBy = true,\r\n      hostClassName\r\n    } = this.props;\r\n    const { isTooltipVisible } = this.state;\r\n    const tooltipId = id || getId('tooltip');\r\n    return (\r\n      <div\r\n        className={ css('ms-TooltipHost', styles.host, hostClassName) }\r\n        ref={ this._resolveRef('_tooltipHost') }\r\n        { ...{ onFocusCapture: this._onTooltipMouseEnter } }\r\n        { ...{ onBlurCapture: this._onTooltipMouseLeave } }\r\n        onMouseEnter={ this._onTooltipMouseEnter }\r\n        onMouseLeave={ this._onTooltipMouseLeave }\r\n        aria-describedby={ setAriaDescribedBy && isTooltipVisible && content ? tooltipId : undefined }\r\n      >\r\n        { children }\r\n        { isTooltipVisible && (\r\n          <Tooltip\r\n            id={ tooltipId }\r\n            delay={ delay }\r\n            content={ content }\r\n            targetElement={ this._getTargetElement() }\r\n            directionalHint={ directionalHint }\r\n            directionalHintForRTL={ directionalHintForRTL }\r\n            calloutProps={ assign(calloutProps, { onDismiss: this._onTooltipCallOutDismiss }) }\r\n            { ...getNativeProps(this.props, divProperties) }\r\n            { ...tooltipProps }\r\n          >\r\n          </Tooltip>\r\n        ) }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _getTargetElement(): HTMLElement {\r\n    const { overflowMode } = this.props;\r\n\r\n    // Select target element based on overflow mode. For parent mode, you want to position the tooltip relative\r\n    // to the parent element, otherwise it might look off.\r\n    if (overflowMode !== undefined) {\r\n      switch (overflowMode) {\r\n        case TooltipOverflowMode.Parent:\r\n          return this._tooltipHost.parentElement!;\r\n\r\n        case TooltipOverflowMode.Self:\r\n          return this._tooltipHost;\r\n      }\r\n    }\r\n\r\n    return this._tooltipHost;\r\n  }\r\n\r\n  // Show Tooltip\r\n  @autobind\r\n  private _onTooltipMouseEnter(ev: any) {\r\n    const { overflowMode } = this.props;\r\n\r\n    if (overflowMode !== undefined) {\r\n      const overflowElement = this._getTargetElement();\r\n      if (overflowElement && !hasOverflow(overflowElement)) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      isTooltipVisible: true\r\n    });\r\n  }\r\n\r\n  // Hide Tooltip\r\n  @autobind\r\n  private _onTooltipMouseLeave(ev: any) {\r\n    this.setState({\r\n      isTooltipVisible: false\r\n    });\r\n  }\r\n\r\n  // Hide Tooltip\r\n  @autobind\r\n  private _onTooltipCallOutDismiss() {\r\n    this.setState({\r\n      isTooltipVisible: false\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}