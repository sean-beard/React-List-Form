{"version":3,"sources":["components/SwatchColorPicker/SwatchColorPicker.tsx"],"names":[],"mappings":"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","file":"components/SwatchColorPicker/SwatchColorPicker.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  autobind,\r\n  BaseComponent,\r\n  css,\r\n  findIndex,\r\n  getId\r\n} from '../../Utilities';\r\nimport {\r\n  ISwatchColorPicker,\r\n  ISwatchColorPickerProps,\r\n  IColorCellProps\r\n} from './SwatchColorPicker.Props';\r\nimport { getColorFromString } from '../../utilities/color/colors';\r\nimport { Grid } from '../../utilities/grid/Grid';\r\nimport { GridCell } from '../../utilities/grid/GridCell';\r\nimport { IGridCellProps } from '../../utilities/grid/GridCell.Props';\r\nimport { CommandButton } from '../../Button';\r\nimport * as stylesImport from './SwatchColorPicker.scss';\r\nconst styles: any = stylesImport;\r\n\r\nexport interface ISwatchColorPickerState {\r\n  selectedIndex?: number;\r\n}\r\n\r\nclass ColorPickerGridCell extends GridCell<IColorCellProps, IGridCellProps<IColorCellProps>> {\r\n}\r\n\r\nexport class SwatchColorPicker extends BaseComponent<ISwatchColorPickerProps, ISwatchColorPickerState> implements ISwatchColorPicker {\r\n\r\n  public static defaultProps = {\r\n    cellShape: 'circle',\r\n    disabled: false,\r\n    shouldFocusCircularNavigate: true\r\n  };\r\n\r\n  private _id: string;\r\n\r\n  constructor(props: ISwatchColorPickerProps) {\r\n    super(props);\r\n\r\n    this._id = props.id || getId('swatchColorPicker');\r\n\r\n    let selectedIndex: number | undefined;\r\n    if (props.selectedId) {\r\n      selectedIndex = this._getSelectedIndex(props.colorCells, props.selectedId);\r\n    }\r\n\r\n    this.state = {\r\n      selectedIndex\r\n    };\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: ISwatchColorPickerProps) {\r\n    let newSelectedIndex;\r\n\r\n    if (newProps.selectedId) {\r\n      newSelectedIndex = this._getSelectedIndex(newProps.colorCells, newProps.selectedId);\r\n    }\r\n\r\n    if (newSelectedIndex !== undefined &&\r\n      newSelectedIndex !== this.state.selectedIndex) {\r\n      this.setState({\r\n        selectedIndex: newSelectedIndex\r\n      });\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    let {\r\n      disabled,\r\n      colorCells,\r\n      columnCount,\r\n      positionInSet,\r\n      setSize,\r\n      shouldFocusCircularNavigate,\r\n      className,\r\n      onCellFocused\r\n    } = this.props;\r\n\r\n    return (\r\n      <Grid\r\n        key={ this._id + colorCells[0].id + '-grid' }\r\n        items={ colorCells.map((item, index) => { return { ...item, index }; }) }\r\n        columnCount={ this.props.columnCount }\r\n        onRenderItem={ this._renderOption }\r\n        positionInSet={ positionInSet && positionInSet }\r\n        setSize={ setSize && setSize }\r\n        shouldFocusCircularNavigate={ shouldFocusCircularNavigate }\r\n        onBlur={ this.onSwatchColorPickerBlur }\r\n        containerClassName={ css('ms-swatchColorPickerBodyContainer', styles.swatchColorPickerContainer, className) }\r\n      />);\r\n  }\r\n\r\n  /**\r\n   * When the whole swatchColorPicker is blurred,\r\n   * make sure to clear the pending focused stated\r\n   */\r\n  @autobind\r\n  private onSwatchColorPickerBlur() {\r\n    if (this.props.onCellFocused) {\r\n      this.props.onCellFocused();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the selected item's index\r\n   * @param items - The items to search\r\n   * @param selectedId - The selected item's id to find\r\n   * @returns {number} - The index of the selected item's id, -1 if there was no match\r\n   */\r\n  private _getSelectedIndex(items: IColorCellProps[], selectedId: string): number | undefined {\r\n    let selectedIndex = findIndex(items, (item => (item.id === selectedId)));\r\n    return selectedIndex >= 0 ? selectedIndex : undefined;\r\n  }\r\n\r\n  /**\r\n   * Render a color cell\r\n   * @param item - The item to render\r\n   * @returns {JSX.Element} - Element representing the item\r\n   */\r\n  @autobind\r\n  private _renderOption(item: IColorCellProps): JSX.Element {\r\n    let id = this._id;\r\n\r\n    return (\r\n      <ColorPickerGridCell\r\n        item={ item }\r\n        id={ id }\r\n        key={ id + item.id }\r\n        disabled={ this.props.disabled }\r\n        className={ styles.cell }\r\n        onClick={ this._onCellClick }\r\n        onHover={ this.onGridCellHovered }\r\n        onFocus={ this.onGridCellFocused }\r\n        onRenderItem={ this._onRenderColorOption }\r\n        role={ 'gridcell' }\r\n        selected={ this.state.selectedIndex !== undefined && (this.state.selectedIndex === item.index) }\r\n        cellIsSelectedStyle={ ['is-selected ' + styles.cellIsSelected] }\r\n        cellDisabledStyle={ ['is-disabled ' + styles.disabled] }\r\n        label={ item.label }\r\n      />\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Callback passed to the GridCell class that will trigger the onCellHovered callback of the SwatchColorPicker\r\n   */\r\n  @autobind\r\n  private onGridCellHovered(item?: IColorCellProps): void {\r\n    if (this.props && this.props.onCellHovered) {\r\n      if (item) {\r\n        this.props.onCellHovered(item.id, item.color);\r\n      } else {\r\n        this.props.onCellHovered();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Callback passed to the GridCell class that will trigger the onCellFocus callback of the SwatchColorPicker\r\n   */\r\n  @autobind\r\n  private onGridCellFocused(item?: IColorCellProps): void {\r\n    if (this.props && this.props.onCellFocused) {\r\n      if (item) {\r\n        this.props.onCellFocused(item.id, item.color);\r\n      } else {\r\n        this.props.onCellFocused();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render the core of a color cell\r\n   * @returns {JSX.Element} - Element representing the core of the item\r\n   */\r\n  @autobind\r\n  private _onRenderColorOption(colorOption: IColorCellProps): JSX.Element {\r\n    // Build an SVG for the cell with the given shape and color properties\r\n    return (\r\n      <svg className={ css(styles.svg, this.props.cellShape, this.props.cellShape === 'circle' ? styles.circle : '') } viewBox='0 0 20 20' fill={ getColorFromString(colorOption.color as string).str } >\r\n        {\r\n          this.props.cellShape === 'circle' ?\r\n            <circle cx='50%' cy='50%' r='50%' /> :\r\n            <rect width='100%' height='100%' />\r\n        }\r\n      </svg>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle the click on a cell\r\n   * @param item - The cell that the click was fired against\r\n   */\r\n  @autobind\r\n  private _onCellClick(item: IColorCellProps) {\r\n    if (this.props.disabled) {\r\n      return;\r\n    }\r\n\r\n    let index = item.index as number;\r\n\r\n    // If we have a valid index and it is not already\r\n    // selected, select it\r\n    if (index >= 0 && index !== this.state.selectedIndex) {\r\n      if (this.props.onColorChanged) {\r\n        this.props.onColorChanged(item.id, item.color);\r\n      }\r\n\r\n      this.setState({\r\n        selectedIndex: index\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the colors by calling the given callbacks\r\n   * @param callbacks - The callbacks to handle the clear operation\r\n   */\r\n  private _clearColors(callbacks: ((id?: string, color?: string) => void)[]) {\r\n    callbacks.forEach((callback) => {\r\n      if (callback) {\r\n        callback();\r\n      }\r\n    });\r\n  }\r\n}"],"sourceRoot":"..\\..\\..\\src"}