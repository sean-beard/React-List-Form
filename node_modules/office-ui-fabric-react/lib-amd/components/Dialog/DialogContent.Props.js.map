{"version":3,"sources":["components/Dialog/DialogContent.Props.ts"],"names":[],"mappings":";;;IA0EA,IAAY,UAOX;IAPD,WAAY,UAAU;QACpB,sBAAsB;QACtB,+CAAU,CAAA;QACV,sCAAsC;QACtC,yDAAe,CAAA;QACf,gEAAgE;QAChE,6CAAS,CAAA;IACX,CAAC,EAPW,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAOrB","file":"components/Dialog/DialogContent.Props.js","sourcesContent":["import * as React from 'react';\r\nimport { DialogContent } from './DialogContent';\r\nimport { IButtonProps } from '../Button/Button.Props';\r\nimport { ResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\r\n\r\nexport interface IDialogContent {\r\n\r\n}\r\n\r\nexport interface IDialogContentProps extends React.Props<DialogContent> {\r\n  /**\r\n  * Optional callback to access the IDialogContent interface. Use this instead of ref for accessing\r\n  * the public methods and properties of the component.\r\n  */\r\n  componentRef?: (component: IDialogContent) => void;\r\n\r\n  /**\r\n  * Show an 'x' close button in the upper-right corner\r\n  */\r\n  showCloseButton?: boolean;\r\n\r\n  /**\r\n   * Other top buttons that will show up next to the close button\r\n   */\r\n  topButtonsProps?: IButtonProps[];\r\n\r\n  /**\r\n  * Optional override class name\r\n  */\r\n  className?: string;\r\n\r\n  /**\r\n  * A callback function for when the Dialog is dismissed from the close button or light dismiss, before the animation completes.\r\n  */\r\n  onDismiss?: (ev?: React.MouseEvent<HTMLButtonElement>) => any;\r\n\r\n  /**\r\n  * The Id for subText container\r\n  */\r\n  subTextId?: string;\r\n\r\n  /**\r\n  * The subtext to display in the dialog\r\n  */\r\n  subText?: string;\r\n\r\n  /**\r\n   * The Id for title container\r\n   */\r\n  titleId?: string;\r\n\r\n  /**\r\n  * The title text to display at the top of the dialog.\r\n  */\r\n  title?: string;\r\n\r\n  /**\r\n   * Responsive mode passed in from decorator.\r\n   */\r\n  responsiveMode?: ResponsiveMode;\r\n\r\n  /**\r\n   * Label to be passed to to aria-label of close button\r\n   * @default Close\r\n   */\r\n  closeButtonAriaLabel?: string;\r\n\r\n  /**\r\n  * The type of Dialog to display.\r\n  * @default DialogType.normal\r\n  */\r\n  type?: DialogType;\r\n}\r\n\r\nexport enum DialogType {\r\n  /** Standard dialog */\r\n  normal = 0,\r\n  /** Dialog with large header banner */\r\n  largeHeader = 1,\r\n  /** Dialog with an 'x' close button in the upper-right corner */\r\n  close = 2\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}