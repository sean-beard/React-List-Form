{"version":3,"sources":["components/ComboBox/ComboBox.classNames.ts"],"names":[],"mappings":";;;IAsBa,QAAA,aAAa,GAAG,2BAAe,CAAC,UAC3C,MAAuB,EACvB,SAAiB,EACjB,MAAe,EACf,QAAiB,EACjB,QAAiB,EACjB,OAAgB,EAChB,aAAsB,EACtB,eAAwB;QAExB,MAAM,CAAC;YACL,SAAS,EAAE,qBAAW,CACpB,uBAAuB,EACvB,SAAS,EACT,MAAM,CAAC,SAAS,CACP;YACX,KAAK,EAAE,qBAAW,CAChB,MAAM,CAAC,KAAK,CACH;YACX,IAAI,EAAE,qBAAW,CACf,aAAa,EACb,MAAM,IAAI,SAAS,EACnB,QAAQ,IAAI,aAAa,EACzB,MAAM,CAAC,IAAI,EACX,CAAC,aAAa,IAAI,MAAM,CAAC,oBAAoB,EAC7C,eAAe,IAAI,MAAM,CAAC,SAAS,EACnC,CAAC,QAAQ,IAAI,OAAO,IAAI,MAAM,CAAC,WAAW,EAC1C,CAAC,QAAQ,IAAI;gBACX,QAAQ,EAAE,MAAM,CAAC,WAAW;aAC7B,EACD,QAAQ,IAAI;gBACV,aAAa,EAAE,MAAM,CAAC,YAAY;aACnC,CACQ;YACX,KAAK,EAAE,qBAAW,CAChB,mBAAmB,EACnB,MAAM,CAAC,KAAK,EACZ,QAAQ,IAAI,MAAM,CAAC,aAAa,CACvB;YACX,YAAY,EAAE,qBAAW,CACvB,MAAM,CAAC,YAAY,CACV;YACX,OAAO,EAAE,qBAAW,CAClB,qBAAqB,EACrB,MAAM,CAAC,OAAO,CACL;YACX,gBAAgB,EAAE,qBAAW,CAC3B,8BAA8B,EAC9B,MAAM,CAAC,gBAAgB,CACd;YACX,MAAM,EAAE,qBAAW,CACjB,oBAAoB,EACpB,MAAM,CAAC,MAAM,CACJ;YACX,OAAO,EAAE,qBAAW,CAClB,qBAAqB,EACrB,MAAM,CAAC,OAAO,CACL;SACZ,CAAC;IACJ,CAAC,CAAC,CAAC;IAEU,QAAA,2BAA2B,GAAG,2BAAe,CAAC,UACzD,MAA6B,EAC7B,gBAAyB,EACzB,QAAiB;QAEjB,MAAM,CAAC;YACL,UAAU,EAAE,qBAAW,CACrB,wBAAwB,EACxB,MAAM,CAAC,UAAU,CACR;SACZ,CAAC;IACJ,CAAC,CAAC,CAAC","file":"components/ComboBox/ComboBox.classNames.js","sourcesContent":["import { IComboBoxStyles, IComboBoxOptionStyles } from './ComboBox.Props';\r\nimport { memoizeFunction } from '../../Utilities';\r\nimport {\r\n  mergeStyles,\r\n} from '../../Styling';\r\n\r\nexport interface IComboBoxClassNames {\r\n  container: string;\r\n  label: string;\r\n  root: string;\r\n  input: string;\r\n  errorMessage: string;\r\n  callout: string;\r\n  optionsContainer: string;\r\n  header: string;\r\n  divider: string;\r\n}\r\n\r\nexport interface IComboBoxOptionClassNames {\r\n  optionText: string;\r\n}\r\n\r\nexport const getClassNames = memoizeFunction((\r\n  styles: IComboBoxStyles,\r\n  className: string,\r\n  isOpen: boolean,\r\n  disabled: boolean,\r\n  required: boolean,\r\n  focused: boolean,\r\n  allowFreeForm: boolean,\r\n  hasErrorMessage: boolean\r\n): IComboBoxClassNames => {\r\n  return {\r\n    container: mergeStyles(\r\n      'ms-ComboBox-container',\r\n      className,\r\n      styles.container,\r\n    ) as string,\r\n    label: mergeStyles(\r\n      styles.label\r\n    ) as string,\r\n    root: mergeStyles(\r\n      'ms-ComboBox',\r\n      isOpen && 'is-open',\r\n      required && 'is-required',\r\n      styles.root,\r\n      !allowFreeForm && styles.rootDisallowFreeForm,\r\n      hasErrorMessage && styles.rootError,\r\n      !disabled && focused && styles.rootFocused,\r\n      !disabled && {\r\n        ':hover': styles.rootHovered\r\n      },\r\n      disabled && [\r\n        'is-disabled', styles.rootDisabled\r\n      ],\r\n    ) as string,\r\n    input: mergeStyles(\r\n      'ms-ComboBox-Input',\r\n      styles.input,\r\n      disabled && styles.inputDisabled\r\n    ) as string,\r\n    errorMessage: mergeStyles(\r\n      styles.errorMessage\r\n    ) as string,\r\n    callout: mergeStyles(\r\n      'ms-ComboBox-callout',\r\n      styles.callout\r\n    ) as string,\r\n    optionsContainer: mergeStyles(\r\n      'ms-ComboBox-optionsContainer',\r\n      styles.optionsContainer\r\n    ) as string,\r\n    header: mergeStyles(\r\n      'ms-ComboBox-header',\r\n      styles.header\r\n    ) as string,\r\n    divider: mergeStyles(\r\n      'ms-ComboBox-divider',\r\n      styles.divider\r\n    ) as string,\r\n  };\r\n});\r\n\r\nexport const getComboBoxOptionClassNames = memoizeFunction((\r\n  styles: IComboBoxOptionStyles,\r\n  optionIsSelected: boolean,\r\n  disabled: boolean,\r\n): IComboBoxOptionClassNames => {\r\n  return {\r\n    optionText: mergeStyles(\r\n      'ms-ComboBox-optionText',\r\n      styles.optionText\r\n    ) as string,\r\n  };\r\n});"],"sourceRoot":"..\\..\\..\\src"}