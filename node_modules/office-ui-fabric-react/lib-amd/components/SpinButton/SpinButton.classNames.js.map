{"version":3,"sources":["components/SpinButton/SpinButton.classNames.ts"],"names":[],"mappings":";;;IAgBa,QAAA,aAAa,GAAG,2BAAe,CAAC,UAC3C,MAAyB,EACzB,QAAiB,EACjB,SAAkB,EAClB,qBAA4C,EAC5C,aAAwC;QAAxC,8BAAA,EAAA,gBAA0B,sBAAQ,CAAC,KAAK;QAExC,MAAM,CAAC;YACL,IAAI,EAAE,qBAAW,CACf,MAAM,CAAC,IAAI,CACF;YACX,YAAY,EAAE,qBAAW,CACvB,MAAM,CAAC,YAAY,EACnB,gCAAgC,CAAC,aAAa,EAAE,MAAM,CAAC,CAC9C;YACX,IAAI,EAAE,qBAAW,CACf,MAAM,CAAC,IAAI,CACF;YACX,KAAK,EAAE,qBAAW,CAChB,MAAM,CAAC,KAAK,CACH;YACX,iBAAiB,EAAE,qBAAW,CAC5B,MAAM,CAAC,iBAAiB,EACxB,+BAA+B,CAAC,aAAa,EAAE,MAAM,CAAC,EACtD,CAAC,QAAQ,IAAI;gBACX;oBACE,QAAQ,EAAE,MAAM,CAAC,wBAAwB;iBAC1C;gBACD,SAAS,IAAI;oBACX,wDAAwD;oBACxD,iDAAiD;oBACjD,IAAI,EAAE,MAAM,CAAC,wBAAwB;iBACtC;aACF,EACD,QAAQ,IAAI,MAAM,CAAC,yBAAyB,CACnC;YACX,KAAK,EAAE,qBAAW,CAChB,qBAAqB,EACrB,MAAM,CAAC,KAAK,EACZ,CAAC,QAAQ,IAAI;gBACX,aAAa,EAAE,MAAM,CAAC,iBAAiB;aACxC,EACD,QAAQ,IAAI,MAAM,CAAC,aAAa,CACvB;YACX,QAAQ,EAAE,qBAAW,CACnB,MAAM,CAAC,qBAAqB,EAC5B,QAAQ,IAAI,MAAM,CAAC,6BAA6B,CACvC;SACZ,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH;;OAEG;IACH,0CAA0C,aAAuB,EAAE,MAAyB;QAC1F,MAAM,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YACtB,KAAK,sBAAQ,CAAC,KAAK;gBACjB,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC;YAClC,KAAK,sBAAQ,CAAC,GAAG;gBACf,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC;YAChC,KAAK,sBAAQ,CAAC,GAAG;gBACf,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC;YAChC,KAAK,sBAAQ,CAAC,MAAM;gBAClB,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC;QACrC,CAAC;IACH,CAAC;IAED;;OAEG;IACH,yCAAyC,aAAuB,EAAE,MAAyB;QACzF,MAAM,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YACtB,KAAK,sBAAQ,CAAC,GAAG,CAAC;YAClB,KAAK,sBAAQ,CAAC,MAAM;gBAClB,MAAM,CAAC,MAAM,CAAC,0BAA0B,CAAC;YAC3C;gBACE,MAAM,CAAC,EAEN,CAAC;QACN,CAAC;IACH,CAAC","file":"components/SpinButton/SpinButton.classNames.js","sourcesContent":["import { memoizeFunction } from '../../Utilities';\r\nimport { mergeStyles, IStyle } from '../../Styling';\r\nimport { ISpinButtonStyles } from './SpinButton.Props';\r\nimport { KeyboardSpinDirection } from './SpinButton';\r\nimport { Position } from '../../utilities/positioning';\r\n\r\nexport interface ISpinButtonClassNames {\r\n  root: string;\r\n  labelWrapper: string;\r\n  icon: string;\r\n  label: string;\r\n  spinButtonWrapper: string;\r\n  input: string;\r\n  arrowBox: string;\r\n}\r\n\r\nexport const getClassNames = memoizeFunction((\r\n  styles: ISpinButtonStyles,\r\n  disabled: boolean,\r\n  isFocused: boolean,\r\n  keyboardSpinDirection: KeyboardSpinDirection,\r\n  labelPosition: Position = Position.start\r\n): ISpinButtonClassNames => {\r\n  return {\r\n    root: mergeStyles(\r\n      styles.root\r\n    ) as string,\r\n    labelWrapper: mergeStyles(\r\n      styles.labelWrapper,\r\n      _getStyleForLabelBasedOnPosition(labelPosition, styles)\r\n    ) as string,\r\n    icon: mergeStyles(\r\n      styles.icon,\r\n    ) as string,\r\n    label: mergeStyles(\r\n      styles.label\r\n    ) as string,\r\n    spinButtonWrapper: mergeStyles(\r\n      styles.spinButtonWrapper,\r\n      _getStyleForRootBasedOnPosition(labelPosition, styles),\r\n      !disabled && [\r\n        {\r\n          ':hover': styles.spinButtonWrapperHovered\r\n        },\r\n        isFocused && {\r\n          // This is to increase the specifity of the focus styles\r\n          // and make it equal to that of the hover styles.\r\n          '&&': styles.spinButtonWrapperFocused\r\n        }\r\n      ],\r\n      disabled && styles.spinButtonWrapperDisabled\r\n    ) as string,\r\n    input: mergeStyles(\r\n      'ms-spinButton-input',\r\n      styles.input,\r\n      !disabled && {\r\n        '::selection': styles.inputTextSelected\r\n      },\r\n      disabled && styles.inputDisabled,\r\n    ) as string,\r\n    arrowBox: mergeStyles(\r\n      styles.arrowButtonsContainer,\r\n      disabled && styles.arrowButtonsContainerDisabled\r\n    ) as string,\r\n  };\r\n});\r\n\r\n/**\r\n * Returns the Style corresponding to the label position\r\n */\r\nfunction _getStyleForLabelBasedOnPosition(labelPosition: Position, styles: ISpinButtonStyles): IStyle {\r\n  switch (labelPosition) {\r\n    case Position.start:\r\n      return styles.labelWrapperStart;\r\n    case Position.end:\r\n      return styles.labelWrapperEnd;\r\n    case Position.top:\r\n      return styles.labelWrapperTop;\r\n    case Position.bottom:\r\n      return styles.labelWrapperBottom;\r\n  }\r\n}\r\n\r\n/**\r\n * Returns the Style corresponding to the label position\r\n */\r\nfunction _getStyleForRootBasedOnPosition(labelPosition: Position, styles: ISpinButtonStyles): IStyle {\r\n  switch (labelPosition) {\r\n    case Position.top:\r\n    case Position.bottom:\r\n      return styles.spinButtonWrapperTopBottom;\r\n    default:\r\n      return {\r\n\r\n      };\r\n  }\r\n}"],"sourceRoot":"..\\..\\..\\src"}