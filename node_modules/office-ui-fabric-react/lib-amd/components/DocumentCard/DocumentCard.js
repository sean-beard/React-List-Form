define(["require", "exports", "tslib", "react", "./DocumentCard.Props", "../../Utilities", "./DocumentCard.scss"], function (require, exports, tslib_1, React, DocumentCard_Props_1, Utilities_1, stylesImport) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var styles = stylesImport;
    var DocumentCard = (function (_super) {
        tslib_1.__extends(DocumentCard, _super);
        function DocumentCard(props) {
            var _this = _super.call(this, props) || this;
            _this._warnDeprecations({
                accentColor: undefined
            });
            return _this;
        }
        DocumentCard.prototype.render = function () {
            var _a = this.props, onClick = _a.onClick, onClickHref = _a.onClickHref, children = _a.children, className = _a.className, type = _a.type, accentColor = _a.accentColor;
            var actionable = (onClick || onClickHref) ? true : false;
            // Override the border color if an accent color was provided (compact card only)
            var style;
            if (type === DocumentCard_Props_1.DocumentCardType.compact && accentColor) {
                style = {
                    borderBottomColor: accentColor
                };
            }
            // if this element is actionable it should have an aria role
            var role = actionable ? (onClick ? 'button' : 'link') : undefined;
            var tabIndex = actionable ? 0 : undefined;
            return (React.createElement("div", { tabIndex: tabIndex, role: role, className: Utilities_1.css('ms-DocumentCard', styles.root, (_b = {},
                    _b['ms-DocumentCard--actionable ' + styles.rootIsActionable] = actionable,
                    _b['ms-DocumentCard--compact ' + styles.rootIsCompact] = type === DocumentCard_Props_1.DocumentCardType.compact ? true : false,
                    _b), className), onKeyDown: actionable ? this._onKeyDown : undefined, onClick: actionable ? this._onClick : undefined, style: style }, children));
            var _b;
        };
        DocumentCard.prototype._onClick = function (ev) {
            this._onAction(ev);
        };
        DocumentCard.prototype._onKeyDown = function (ev) {
            if (ev.which === 13 /* enter */ || ev.which === 32 /* space */) {
                this._onAction(ev);
            }
        };
        DocumentCard.prototype._onAction = function (ev) {
            var _a = this.props, onClick = _a.onClick, onClickHref = _a.onClickHref;
            if (onClick) {
                onClick(ev);
            }
            else if (!onClick && onClickHref) {
                // If no onClick Function was provided and we do have an onClickHref, redirect to the onClickHref
                window.location.href = onClickHref;
                ev.preventDefault();
                ev.stopPropagation();
            }
        };
        DocumentCard.defaultProps = {
            type: DocumentCard_Props_1.DocumentCardType.normal
        };
        tslib_1.__decorate([
            Utilities_1.autobind
        ], DocumentCard.prototype, "_onClick", null);
        tslib_1.__decorate([
            Utilities_1.autobind
        ], DocumentCard.prototype, "_onKeyDown", null);
        tslib_1.__decorate([
            Utilities_1.autobind
        ], DocumentCard.prototype, "_onAction", null);
        return DocumentCard;
    }(Utilities_1.BaseComponent));
    exports.DocumentCard = DocumentCard;
});

//# sourceMappingURL=DocumentCard.js.map
