{"version":3,"sources":["components/OverflowSet/OverflowSet.tsx"],"names":[],"mappings":";;;IAUA,IAAM,MAAM,GAAQ,YAAY,CAAC;IAEjC;QAAiC,uCAAoC;QAArE;;QAyCA,CAAC;QAnCQ,4BAAM,GAAb;YACM,IAAA,eAKU,EAJZ,gBAAK,EACL,gCAAa,EACb,kDAAsB,EACtB,wBAAS,CACI;YAEf,MAAM,CAAC,CACL,oBAAC,qBAAS,IAAC,GAAG,EAAC,WAAW,EAAC,SAAS,EAAG,eAAG,CAAC,gBAAgB,EAAE,MAAM,CAAC,IAAI,EAAE,SAAS,CAAC,EAAG,SAAS,EAAG,8BAAkB,CAAC,UAAU,EAAG,IAAI,EAAC,SAAS;gBAC7I,KAAK,IAAI,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;gBACnC,aAAa,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,IAAI,sBAAsB,CAAC,aAAa,CAAC,CAC1E,CACb,CAAC;QACJ,CAAC;QAEM,2BAAK,GAAZ;YACE,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;QAC9B,CAAC;QAGO,oCAAc,GAAtB,UAAuB,KAAY;YADnC,iBAaC;YAXC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,IAAI,EAAE,CAAC;gBACvB,IAAI,eAAe,GAAoC,EAAE,SAAS,EAAE,eAAG,CAAC,qBAAqB,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC9G,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;oBACb,eAAe,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;gBACjC,CAAC;gBACD,MAAM,CAAC,CACL,gDAAS,eAAe,GACpB,KAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,CAC3B,CACP,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC;QAZD;YADC,oBAAQ;yDAaR;QAEH,kBAAC;KAzCD,AAyCC,CAzCgC,yBAAa,GAyC7C;IAzCY,kCAAW","file":"components/OverflowSet/OverflowSet.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  css,\r\n  autobind,\r\n  BaseComponent\r\n} from '../../Utilities';\r\nimport { IOverflowSet, IOverflowSetProps } from './OverflowSet.Props';\r\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\r\n\r\nimport * as stylesImport from './OverflowSet.scss';\r\nconst styles: any = stylesImport;\r\n\r\nexport class OverflowSet extends BaseComponent<IOverflowSetProps, {}> implements IOverflowSet {\r\n\r\n  public refs: {\r\n    focusZone: FocusZone;\r\n  };\r\n\r\n  public render() {\r\n    let {\r\n      items,\r\n      overflowItems,\r\n      onRenderOverflowButton,\r\n      className\r\n    } = this.props;\r\n\r\n    return (\r\n      <FocusZone ref='focusZone' className={ css('ms-OverflowSet', styles.root, className) } direction={ FocusZoneDirection.horizontal } role='menubar' >\r\n        { items && this._onRenderItems(items) }\r\n        { overflowItems && overflowItems.length > 0 && onRenderOverflowButton(overflowItems) }\r\n      </FocusZone>\r\n    );\r\n  }\r\n\r\n  public focus() {\r\n    this.refs.focusZone.focus();\r\n  }\r\n\r\n  @autobind\r\n  private _onRenderItems(items: any[]): JSX.Element[] {\r\n    return items.map((item, i) => {\r\n      let wrapperDivProps: React.HTMLProps<HTMLDivElement> = { className: css('ms-OverflowSet-item', styles.item) };\r\n      if (item.key) {\r\n        wrapperDivProps.key = item.key;\r\n      }\r\n      return (\r\n        <div {...wrapperDivProps}>\r\n          { this.props.onRenderItem(item) }\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n}"],"sourceRoot":"..\\..\\..\\src"}