{"version":3,"sources":["components/Toggle/Toggle.tsx"],"names":[],"mappings":";;;IAsCA;QAA4B,kCAAyC;QAKnE,gBAAY,KAAmB;YAA/B,YACE,iBAAO,SAUR;YARC,KAAI,CAAC,sBAAsB,CAAC;gBAC1B,OAAO,EAAE,gBAAgB;aAC1B,CAAC,CAAC;YAEH,KAAI,CAAC,KAAK,GAAG;gBACX,SAAS,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,cAAc,CAAC;aACrD,CAAC;YACF,KAAI,CAAC,GAAG,GAAG,KAAK,CAAC,EAAE,IAAI,iBAAK,CAAC,QAAQ,CAAC,CAAC;;QACzC,CAAC;QAKD,sBAAW,2BAAO;YAHlB;;eAEG;iBACH;gBACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;YAC9B,CAAC;;;WAAA;QAEM,0CAAyB,GAAhC,UAAiC,QAAsB;YACrD,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC;gBACnC,IAAI,CAAC,QAAQ,CAAC;oBACZ,SAAS,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,wBAAwB;iBACvD,CAAC,CAAC;YACL,CAAC;QACH,CAAC;QAEM,uBAAM,GAAb;YACE,mFAAmF;YACnF,mIAAmI;YACnI,kGAAkG;YAClG,sIAAsI;YACtI,6BAA6B;YAL/B,iBA2DC;YApDK,IAAA,eAUY,EATd,wBAAS,EACT,gBAAK,EACL,wBAAoB,EACpB,sBAAQ,EACR,gBAAK,EACL,8BAAY,EACZ,oBAAO,EACP,4BAAW,EACX,kBAAM,CACS;YACX,IAAA,gCAAS,CAAgB;YAC/B,IAAI,SAAS,GAAG,SAAS,GAAG,MAAM,GAAG,OAAO,CAAC;YAC7C,IAAM,SAAS,GAAG,SAAS,GAAG,WAAW,GAAG,YAAY,CAAC;YACzD,IAAM,iBAAiB,GAAG,0BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,2BAAe,EAAE,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAC1F,IAAM,UAAU,GAAG,IAAI,CAAC,cAAc,CACpC,yBAAS,CAAC,KAAM,EAAE,YAAY,CAAC,EAC/B,SAAU,EACV,QAAS,EACT,SAAS,CACV,CAAC;YAEF,MAAM,CAAC,CACL,6BAAK,SAAS,EAAG,UAAU,CAAC,IAAI;gBAE5B,KAAK,IAAI,CACT,oBAAC,aAAK,IAAC,OAAO,EAAG,IAAI,CAAC,GAAG,EAAG,SAAS,EAAG,UAAU,CAAC,KAAK,IAAK,KAAK,CAAU,CAC7E;gBAED,6BAAK,SAAS,EAAG,UAAU,CAAC,SAAS;oBACnC,mDACO,iBAAiB,IACtB,IAAI,EAAC,QAAQ,EACb,SAAS,EAAG,UAAU,CAAC,IAAI,EAC3B,GAAG,EAAG,UAAC,CAAC,IAAwB,OAAA,KAAI,CAAC,aAAa,GAAG,CAAE,EAAvB,CAAuB,mBACvC,QAAQ,kBACT,SAAS,gBACX,SAAS,EACtB,EAAE,EAAG,IAAI,CAAC,GAAG,EACb,QAAQ,EAAG,cAAoB,CAAC,EAChC,QAAQ,EAAG,QAAQ,uBACC,IAAI,EACxB,OAAO,EAAG,IAAI,CAAC,QAAQ;wBAEvB,6BAAK,SAAS,EAAG,UAAU,CAAC,KAAK,GAAK,CAC/B;oBACP,SAAS,IAAI,CACb,oBAAC,aAAK,IAAC,SAAS,EAAG,UAAU,CAAC,IAAI,IAAK,SAAS,CAAU,CAC3D,CACG,CACD,CACR,CAAC;QACJ,CAAC;QAEM,sBAAK,GAAZ;YACE,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;gBACvB,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;YAC7B,CAAC;QACH,CAAC;QAGO,yBAAQ,GAAhB,UAAiB,EAAiC;YAC5C,IAAA,eAA4C,EAA1C,oBAAO,EAAE,wBAAS,EAAE,oBAAO,CAAgB;YAC3C,IAAA,gCAAS,CAAgB;YAE/B,wDAAwD;YACxD,EAAE,CAAC,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC;gBAC1B,IAAI,CAAC,QAAQ,CAAC;oBACZ,SAAS,EAAE,CAAC,SAAS;iBACtB,CAAC,CAAC;YACL,CAAC;YAED,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACd,SAAS,CAAC,CAAC,SAAS,CAAC,CAAC;YACxB,CAAC;YAED,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACZ,OAAO,CAAC,EAAE,CAAC,CAAC;YACd,CAAC;QACH,CAAC;QAGO,+BAAc,GAAtB,UACE,MAAqB,EACrB,SAAiB,EACjB,QAAiB,EACjB,SAAkB;YAGlB,MAAM,CAAC;gBACL,IAAI,EAAE,qBAAW,CACf,WAAW,EACX,SAAS,IAAI,YAAY,EACzB,CAAC,QAAQ,IAAI,YAAY,EACzB,QAAQ,IAAI,aAAa,EACzB,SAAS,EACT,MAAM,CAAC,IAAI,CACF;gBAEX,KAAK,EAAE,qBAAW,CAChB,iBAAiB,EACjB,MAAM,CAAC,KAAK,CACH;gBAEX,SAAS,EAAE,qBAAW,CACpB,0BAA0B,EAC1B,MAAM,CAAC,SAAS,CACP;gBAEX,IAAI,EAAE,qBAAW,CACf,sBAAsB,EACtB,MAAM,CAAC,IAAI,EACX,CAAC,QAAQ,IAAI;oBACX,CAAC,SAAS,IAAI;wBACZ,QAAQ,EAAE,MAAM,CAAC,WAAW;wBAC5B,yBAAyB,EAAE,MAAM,CAAC,YAAY;qBAC/C;oBACD,SAAS,IAAI;wBACX,MAAM,CAAC,WAAW;wBAClB;4BACE,QAAQ,EAAE,MAAM,CAAC,kBAAkB;4BACnC,yBAAyB,EAAE,MAAM,CAAC,mBAAmB;yBACtD;qBACF;iBACF,EACD,QAAQ,IAAI;oBACV,CAAC,SAAS,IAAI,MAAM,CAAC,YAAY;oBACjC,SAAS,IAAI,MAAM,CAAC,mBAAmB;iBACxC,CACQ;gBAEX,KAAK,EAAE,qBAAW,CAChB,iBAAiB,EACjB,MAAM,CAAC,KAAK,EACZ,CAAC,QAAQ,IAAI,SAAS,IAAI,MAAM,CAAC,YAAY,EAC7C,QAAQ,IAAI;oBACV,CAAC,SAAS,IAAI,MAAM,CAAC,aAAa;oBAClC,SAAS,IAAI,MAAM,CAAC,oBAAoB;iBACzC,CACQ;gBAEX,IAAI,EAAE,qBAAW,CACf,qBAAqB,EACrB,MAAM,CAAC,IAAI,CACF;aAEZ,CAAC;QACJ,CAAC;QAtFD;YADC,oBAAQ;8CAmBR;QAGD;YADC,mBAAO;oDAkEP;QA3LU,MAAM;YADlB,wBAAY,CAAC,CAAC,OAAO,CAAC,CAAC;WACX,MAAM,CA6LlB;QAAD,aAAC;KA7LD,AA6LC,CA7L2B,yBAAa,GA6LxC;IA7LY,wBAAM","file":"components/Toggle/Toggle.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  autobind,\r\n  getId,\r\n  inputProperties,\r\n  getNativeProps,\r\n  memoize\r\n} from '../../Utilities';\r\nimport {\r\n  IToggleProps,\r\n  IToggle,\r\n  IToggleStyles\r\n} from './Toggle.Props';\r\nimport { Label } from '../../Label';\r\nimport {\r\n  customizable\r\n} from '../../Utilities';\r\nimport {\r\n  mergeStyles\r\n} from '../../Styling';\r\n\r\nimport { getStyles } from './Toggle.styles';\r\n\r\nexport interface IToggleState {\r\n  isChecked: boolean;\r\n}\r\n\r\ninterface IToggleClassNames {\r\n  root: string;\r\n  label: string;\r\n  container: string;\r\n  pill: string;\r\n  thumb: string;\r\n  text: string;\r\n}\r\n\r\n@customizable(['theme'])\r\nexport class Toggle extends BaseComponent<IToggleProps, IToggleState> implements IToggle {\r\n\r\n  private _id: string;\r\n  private _toggleButton: HTMLButtonElement;\r\n\r\n  constructor(props: IToggleProps) {\r\n    super();\r\n\r\n    this._warnMutuallyExclusive({\r\n      checked: 'defaultChecked'\r\n    });\r\n\r\n    this.state = {\r\n      isChecked: !!(props.checked || props.defaultChecked)\r\n    };\r\n    this._id = props.id || getId('Toggle');\r\n  }\r\n\r\n  /**\r\n   * Gets the current checked state of the toggle.\r\n   */\r\n  public get checked(): boolean {\r\n    return this.state.isChecked;\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: IToggleProps) {\r\n    if (newProps.checked !== undefined) {\r\n      this.setState({\r\n        isChecked: !!newProps.checked // convert null to false\r\n      });\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    // This control is using an input element for more universal accessibility support.\r\n    // Previously a button and the aria-pressed attribute were used. This technique works well with Narrator + Edge and NVDA + FireFox.\r\n    // However, JAWS and VoiceOver did not announce anything when the toggle was checked or unchecked.\r\n    // In the future when more screenreaders support aria-pressed it would be a good idea to change this control back to using it as it is\r\n    // more semantically correct.\r\n\r\n    let {\r\n      className,\r\n      theme,\r\n      styles: customStyles,\r\n      disabled,\r\n      label,\r\n      offAriaLabel,\r\n      offText,\r\n      onAriaLabel,\r\n      onText\r\n      } = this.props;\r\n    let { isChecked } = this.state;\r\n    let stateText = isChecked ? onText : offText;\r\n    const ariaLabel = isChecked ? onAriaLabel : offAriaLabel;\r\n    const toggleNativeProps = getNativeProps(this.props, inputProperties, ['defaultChecked']);\r\n    const classNames = this._getClassNames(\r\n      getStyles(theme!, customStyles),\r\n      className!,\r\n      disabled!,\r\n      isChecked\r\n    );\r\n\r\n    return (\r\n      <div className={ classNames.root }>\r\n\r\n        { label && (\r\n          <Label htmlFor={ this._id } className={ classNames.label }>{ label }</Label>\r\n        ) }\r\n\r\n        <div className={ classNames.container } >\r\n          <button\r\n            { ...toggleNativeProps }\r\n            type='button'\r\n            className={ classNames.pill }\r\n            ref={ (c): HTMLButtonElement => this._toggleButton = c! }\r\n            aria-disabled={ disabled }\r\n            aria-pressed={ isChecked }\r\n            aria-label={ ariaLabel }\r\n            id={ this._id }\r\n            onChange={ () => { /* no-op */ } }\r\n            disabled={ disabled }\r\n            data-is-focusable={ true }\r\n            onClick={ this._onClick }\r\n          >\r\n            <div className={ classNames.thumb } />\r\n          </button>\r\n          { stateText && (\r\n            <Label className={ classNames.text }>{ stateText }</Label>\r\n          ) }\r\n        </div>\r\n      </div >\r\n    );\r\n  }\r\n\r\n  public focus() {\r\n    if (this._toggleButton) {\r\n      this._toggleButton.focus();\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onClick(ev: React.MouseEvent<HTMLElement>) {\r\n    let { checked, onChanged, onClick } = this.props;\r\n    let { isChecked } = this.state;\r\n\r\n    // Only update the state if the user hasn't provided it.\r\n    if (checked === undefined) {\r\n      this.setState({\r\n        isChecked: !isChecked\r\n      });\r\n    }\r\n\r\n    if (onChanged) {\r\n      onChanged(!isChecked);\r\n    }\r\n\r\n    if (onClick) {\r\n      onClick(ev);\r\n    }\r\n  }\r\n\r\n  @memoize\r\n  private _getClassNames(\r\n    styles: IToggleStyles,\r\n    className: string,\r\n    disabled: boolean,\r\n    isChecked: boolean\r\n    ): IToggleClassNames {\r\n\r\n    return {\r\n      root: mergeStyles(\r\n        'ms-Toggle',\r\n        isChecked && 'is-checked',\r\n        !disabled && 'is-enabled',\r\n        disabled && 'is-disabled',\r\n        className,\r\n        styles.root\r\n      ) as string,\r\n\r\n      label: mergeStyles(\r\n        'ms-Toggle-label',\r\n        styles.label\r\n      ) as string,\r\n\r\n      container: mergeStyles(\r\n        'ms-Toggle-innerContainer',\r\n        styles.container\r\n      ) as string,\r\n\r\n      pill: mergeStyles(\r\n        'ms-Toggle-background',\r\n        styles.pill,\r\n        !disabled && [\r\n          !isChecked && {\r\n            ':hover': styles.pillHovered,\r\n            ':hover .ms-Toggle-thumb': styles.thumbHovered\r\n          },\r\n          isChecked && [\r\n            styles.pillChecked,\r\n            {\r\n              ':hover': styles.pillCheckedHovered,\r\n              ':hover .ms-Toggle-thumb': styles.thumbCheckedHovered\r\n            }\r\n          ]\r\n        ],\r\n        disabled && [\r\n          !isChecked && styles.pillDisabled,\r\n          isChecked && styles.pillCheckedDisabled,\r\n        ]\r\n      ) as string,\r\n\r\n      thumb: mergeStyles(\r\n        'ms-Toggle-thumb',\r\n        styles.thumb,\r\n        !disabled && isChecked && styles.thumbChecked,\r\n        disabled && [\r\n          !isChecked && styles.thumbDisabled,\r\n          isChecked && styles.thumbCheckedDisabled\r\n        ]\r\n      ) as string,\r\n\r\n      text: mergeStyles(\r\n        'ms-Toggle-stateText',\r\n        styles.text\r\n      ) as string,\r\n\r\n    };\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}