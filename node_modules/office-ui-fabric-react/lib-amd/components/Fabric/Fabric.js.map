{"version":3,"sources":["components/Fabric/Fabric.tsx"],"names":[],"mappings":";;;IAcA,IAAM,qBAAqB,GAAG;;;;;;;;;;KAU7B,CAAC;IAUF,qFAAqF;IACrF,yEAAyE;IACzE,IAAI,mBAAmB,GAAY,KAAK,CAAC;IAEzC,6HAA6H;IAC7H,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,QAAQ,IAAI,QAAQ,CAAC,eAAe,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAChH,QAAQ,CAAC,eAAe,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACtD,CAAC;IAGD;QAA4B,kCAAyC;QAGnE;YAAA,YACE,iBAAO,SAKR;YAHC,KAAI,CAAC,KAAK,GAAG;gBACX,cAAc,EAAE,mBAAmB;aACpC,CAAC;;QACJ,CAAC;QAEM,kCAAiB,GAAxB;YACE,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,WAAW,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YACrE,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QACnE,CAAC;QAEM,uBAAM,GAAb;YACU,IAAA,0CAAc,CAAgB;YACtC,IAAM,MAAM,GAAG,yBAAS,CAAC,IAAI,CAAC,KAAK,CAAC,KAAM,CAAC,CAAC;YAE5C,IAAM,SAAS,GAAG,eAAG,CACnB,WAAW,EACX,MAAM,CAAC,IAAI,EACX,IAAI,CAAC,KAAK,CAAC,SAAS,EACpB,cAAc,IAAI,iBAAiB,CAC1B,CAAC;YAEZ,IAAI,QAAQ,GAAG,0BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,yBAAa,CAAC,CAAC;YACzD,MAAM,CAAC,CACL,gDACO,QAAQ,IACb,SAAS,EAAG,SAAS,EACrB,GAAG,EAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAC/B,CACH,CAAC;QACJ,CAAC;QAEO,6BAAY,GAApB;YACE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC;gBAC9B,IAAI,CAAC,QAAQ,CAAC;oBACZ,cAAc,EAAE,KAAK;iBACtB,CAAC,CAAC;gBAEH,mBAAmB,GAAG,KAAK,CAAC;YAC9B,CAAC;QACH,CAAC;QAEO,2BAAU,GAAlB,UAAmB,EAAiB;YAClC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,IAAI,qBAAqB,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC/E,IAAI,CAAC,QAAQ,CAAC;oBACZ,cAAc,EAAE,IAAI;iBACrB,CAAC,CAAC;gBAEH,mBAAmB,GAAG,IAAI,CAAC;YAC7B,CAAC;QACH,CAAC;QAvDU,MAAM;YADlB,wBAAY,CAAC,CAAC,OAAO,CAAC,CAAC;WACX,MAAM,CAwDlB;QAAD,aAAC;KAxDD,AAwDC,CAxD2B,yBAAa,GAwDxC;IAxDY,wBAAM","file":"components/Fabric/Fabric.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  KeyCodes,\r\n  customizable,\r\n  css,\r\n  getNativeProps,\r\n  divProperties\r\n} from '../../Utilities';\r\nimport {\r\n  ITheme\r\n} from '../../Styling';\r\nimport { getStyles } from './Fabric.styles';\r\n\r\nconst DIRECTIONAL_KEY_CODES = [\r\n  KeyCodes.up,\r\n  KeyCodes.down,\r\n  KeyCodes.left,\r\n  KeyCodes.right,\r\n  KeyCodes.home,\r\n  KeyCodes.end,\r\n  KeyCodes.tab,\r\n  KeyCodes.pageUp,\r\n  KeyCodes.pageDown\r\n];\r\n\r\nexport interface IFabricProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  componentRef?: () => void;\r\n  theme?: ITheme;\r\n}\r\nexport interface IFabricState {\r\n  isFocusVisible?: boolean;\r\n}\r\n\r\n// We will track the last focus visibility state so that if we tear down and recreate\r\n// the Fabric component, we will use the last known value as the default.\r\nlet _lastIsFocusVisible: boolean = false;\r\n\r\n// Ensure that the HTML element has a dir specified. This helps to ensure RTL/LTR macros in css for all components will work.\r\nif (typeof (document) === 'object' && document.documentElement && !document.documentElement.getAttribute('dir')) {\r\n  document.documentElement.setAttribute('dir', 'ltr');\r\n}\r\n\r\n@customizable(['theme'])\r\nexport class Fabric extends BaseComponent<IFabricProps, IFabricState> {\r\n  private _root: HTMLElement;\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      isFocusVisible: _lastIsFocusVisible\r\n    };\r\n  }\r\n\r\n  public componentDidMount() {\r\n    this._events.on(document.body, 'mousedown', this._onMouseDown, true);\r\n    this._events.on(document.body, 'keydown', this._onKeyDown, true);\r\n  }\r\n\r\n  public render() {\r\n    const { isFocusVisible } = this.state;\r\n    const styles = getStyles(this.props.theme!);\r\n\r\n    const rootClass = css(\r\n      'ms-Fabric',\r\n      styles.root,\r\n      this.props.className,\r\n      isFocusVisible && 'is-focusVisible'\r\n    ) as string;\r\n\r\n    let divProps = getNativeProps(this.props, divProperties);\r\n    return (\r\n      <div\r\n        { ...divProps }\r\n        className={ rootClass }\r\n        ref={ this._resolveRef('_root') }\r\n      />\r\n    );\r\n  }\r\n\r\n  private _onMouseDown() {\r\n    if (this.state.isFocusVisible) {\r\n      this.setState({\r\n        isFocusVisible: false\r\n      });\r\n\r\n      _lastIsFocusVisible = false;\r\n    }\r\n  }\r\n\r\n  private _onKeyDown(ev: KeyboardEvent) {\r\n    if (!this.state.isFocusVisible && DIRECTIONAL_KEY_CODES.indexOf(ev.which) > -1) {\r\n      this.setState({\r\n        isFocusVisible: true\r\n      });\r\n\r\n      _lastIsFocusVisible = true;\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}