{"version":3,"sources":["components/Link/Link.tsx"],"names":[],"mappings":";;;IAWA,IAAM,MAAM,GAAQ,YAAY,CAAC;IASjC;QAA0B,gCAA8B;QAAxD;;QAsDA,CAAC;QAnDQ,qBAAM,GAAb;YACM,IAAA,eAAoD,EAAlD,sBAAQ,EAAE,sBAAQ,EAAE,wBAAS,EAAE,cAAI,CAAgB;YAEzD,MAAM,CAAC,CACL,IAAI,GAAG,CACL,8CACO,0BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,4BAAgB,CAAC,IACjD,SAAS,EAAG,eAAG,CACb,SAAS,EACT,MAAM,CAAC,IAAI,EACX,SAAS,EACT,QAAQ,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,UAAU,CAAC,EAChD,CAAC,QAAQ,IAAI,MAAM,CAAC,SAAS,CAC9B,EACD,OAAO,EAAG,IAAI,CAAC,QAAQ,EACvB,GAAG,EAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,EAC/B,MAAM,EAAG,IAAI,CAAC,KAAK,CAAC,MAAM,KAExB,QAAQ,CACR,CACL,GAAG,CACA,mDACO,0BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,4BAAgB,CAAC,IACjD,SAAS,EAAG,eAAG,CACb,SAAS,EACT,MAAM,CAAC,IAAI,EACX,SAAS,EACT,QAAQ,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,UAAU,CAAC,CACjD,EACD,OAAO,EAAG,IAAI,CAAC,QAAQ,EACvB,GAAG,EAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,KAE7B,QAAQ,CACH,CACV,CAAC,CAAC;QACT,CAAC;QAEM,oBAAK,GAAZ;YACE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;gBACf,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YACrB,CAAC;QACH,CAAC;QAGO,uBAAQ,GAAhB,UAAiB,EAA2D;YACpE,IAAA,4BAAO,CAAgB;YAE7B,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACZ,OAAO,CAAC,EAAE,CAAC,CAAC;YACd,CAAC;QACH,CAAC;QAND;YADC,oBAAQ;4CAOR;QACH,WAAC;KAtDD,AAsDC,CAtDyB,yBAAa,GAsDtC;IAtDY,oBAAI","file":"components/Link/Link.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  anchorProperties,\r\n  autobind,\r\n  buttonProperties,\r\n  css,\r\n  getNativeProps\r\n} from '../../Utilities';\r\nimport { ILink, ILinkProps } from './Link.Props';\r\nimport * as stylesImport from './Link.scss';\r\nconst styles: any = stylesImport;\r\n\r\ninterface IMyScreen extends Screen {\r\n  left: number;\r\n  top: number;\r\n}\r\n\r\ndeclare var screen: IMyScreen;\r\n\r\nexport class Link extends BaseComponent<ILinkProps, any> implements ILink {\r\n  private _link: HTMLElement;\r\n\r\n  public render() {\r\n    let { disabled, children, className, href } = this.props;\r\n\r\n    return (\r\n      href ? (\r\n        <a\r\n          { ...getNativeProps(this.props, anchorProperties) }\r\n          className={ css(\r\n            'ms-Link',\r\n            styles.root,\r\n            className,\r\n            disabled && ('is-disabled ' + styles.isDisabled),\r\n            !disabled && styles.isEnabled\r\n          ) }\r\n          onClick={ this._onClick }\r\n          ref={ this._resolveRef('_link') }\r\n          target={ this.props.target }\r\n        >\r\n          { children }\r\n        </a>\r\n      ) : (\r\n          <button\r\n            { ...getNativeProps(this.props, buttonProperties) }\r\n            className={ css(\r\n              'ms-Link',\r\n              styles.root,\r\n              className,\r\n              disabled && ('is-disabled ' + styles.isDisabled)\r\n            ) }\r\n            onClick={ this._onClick }\r\n            ref={ this._resolveRef('_link') }\r\n          >\r\n            { children }\r\n          </button>\r\n        ));\r\n  }\r\n\r\n  public focus() {\r\n    if (this._link) {\r\n      this._link.focus();\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onClick(ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) {\r\n    let { onClick } = this.props;\r\n\r\n    if (onClick) {\r\n      onClick(ev);\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}