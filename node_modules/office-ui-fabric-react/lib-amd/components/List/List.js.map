{"version":3,"sources":["components/List/List.tsx"],"names":[],"mappings":"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","file":"components/List/List.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  IRectangle,\r\n  assign,\r\n  css,\r\n  findIndex,\r\n  findScrollableParent,\r\n  getParent,\r\n  divProperties,\r\n  getNativeProps\r\n} from '../../Utilities';\r\nimport { IList, IListProps, IPage } from './List.Props';\r\n\r\nconst RESIZE_DELAY = 16;\r\nconst MIN_SCROLL_UPDATE_DELAY = 100;\r\nconst MAX_SCROLL_UPDATE_DELAY = 500;\r\nconst IDLE_DEBOUNCE_DELAY = 200;\r\nconst DEFAULT_ITEMS_PER_PAGE = 10;\r\nconst DEFAULT_PAGE_HEIGHT = 30;\r\nconst DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\r\nconst DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\r\n\r\nexport interface IListState {\r\n  pages?: IPage[];\r\n\r\n  /** The last versionstamp for  */\r\n  measureVersion?: number;\r\n}\r\n\r\ninterface IPageCacheItem {\r\n  page: IPage;\r\n  pageElement?: JSX.Element;\r\n}\r\n\r\ninterface IPageCache {\r\n  [key: string]: IPageCacheItem;\r\n}\r\n\r\nconst EMPTY_RECT = {\r\n  top: -1,\r\n  bottom: -1,\r\n  left: -1,\r\n  right: -1,\r\n  width: 0,\r\n  height: 0\r\n};\r\n\r\n// Naming expensive measures so that they're named in profiles.\r\nconst _measurePageRect = (element: HTMLElement) => element.getBoundingClientRect();\r\nconst _measureSurfaceRect = _measurePageRect;\r\nconst _measureScrollRect = _measurePageRect;\r\n\r\n/**\r\n * The List renders virtualized pages of items. Each page's item count is determined by the getItemCountForPage callback if\r\n * provided by the caller, or 10 as default. Each page's height is determined by the getPageHeight callback if provided by\r\n * the caller, or by cached measurements if available, or by a running average, or a default fallback.\r\n *\r\n * The algorithm for rendering pages works like this:\r\n *\r\n * 1. Predict visible pages based on \"current measure data\" (page heights, surface position, visible window)\r\n * 2. If changes are necessary, apply changes (add/remove pages)\r\n * 3. For pages that are added, measure the page heights if we need to using getBoundingClientRect\r\n * 4. If measurements don't match predictions, update measure data and goto step 1 asynchronously\r\n *\r\n * Measuring too frequently can pull performance down significantly. To compensate, we cache measured values so that\r\n * we can avoid re-measuring during operations that should not alter heights, like scrolling.\r\n * \r\n * To optimize glass rendering performance, onShouldVirtualize can be set. When onShouldVirtualize return false,\r\n * List will run in fast mode (not virtualized) to render all items without any measurements to improve page load time. And we\r\n * start doing measurements and rendering in virtualized mode when items grows larger than this threshold.\r\n *\r\n * However, certain operations can make measure data stale. For example, resizing the list, or passing in new props,\r\n * or forcing an update change cause pages to shrink/grow. When these operations occur, we increment a measureVersion\r\n * number, which we associate with cached measurements and use to determine if a remeasure should occur.\r\n */\r\nexport class List extends BaseComponent<IListProps, IListState> implements IList {\r\n  public static defaultProps = {\r\n    startIndex: 0,\r\n    onRenderCell: (item: any, index: number, containsFocus: boolean) => (<div>{(item && item.name) || ''}</div>),\r\n    renderedWindowsAhead: DEFAULT_RENDERED_WINDOWS_AHEAD,\r\n    renderedWindowsBehind: DEFAULT_RENDERED_WINDOWS_BEHIND\r\n  };\r\n\r\n  public refs: {\r\n    [key: string]: React.ReactInstance,\r\n    root: HTMLElement,\r\n    surface: HTMLElement\r\n  };\r\n\r\n  private _estimatedPageHeight: number;\r\n  private _totalEstimates: number;\r\n  private _cachedPageHeights: {\r\n    [key: string]: {\r\n      height: number,\r\n      measureVersion: number\r\n    }\r\n  };\r\n  private _focusedIndex: number;\r\n  private _scrollElement: HTMLElement;\r\n  private _scrollingToIndex: number;\r\n  private _hasCompletedFirstRender: boolean;\r\n\r\n  // surface rect relative to window\r\n  private _surfaceRect: IRectangle;\r\n\r\n  // The visible rect that we're required to render given the current list state.\r\n  private _requiredRect: IRectangle | null;\r\n\r\n  // The visible rect that we're allowed to keep rendered. Pages outside of this rect will be removed.\r\n  private _allowedRect: IRectangle;\r\n\r\n  // materialized rect around visible items, relative to surface\r\n  private _materializedRect: IRectangle | null;\r\n\r\n  private _requiredWindowsAhead: number;\r\n  private _requiredWindowsBehind: number;\r\n\r\n  private _measureVersion: number;\r\n  private _scrollHeight: number;\r\n  private _scrollTop: number;\r\n  private _pageCache: IPageCache;\r\n\r\n  constructor(props: IListProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      pages: []\r\n    };\r\n\r\n    this._estimatedPageHeight = 0;\r\n    this._totalEstimates = 0;\r\n    this._requiredWindowsAhead = 0;\r\n    this._requiredWindowsBehind = 0;\r\n\r\n    // Track the measure version for everything.\r\n    this._measureVersion = 0;\r\n\r\n    // Ensure that scrolls are lazy updated.\r\n    this._onAsyncScroll = this._async.debounce(\r\n      this._onAsyncScroll,\r\n      MIN_SCROLL_UPDATE_DELAY,\r\n      {\r\n        leading: false,\r\n        maxWait: MAX_SCROLL_UPDATE_DELAY\r\n      });\r\n\r\n    this._onAsyncIdle = this._async.debounce(\r\n      this._onAsyncIdle,\r\n      IDLE_DEBOUNCE_DELAY, {\r\n        leading: false\r\n      });\r\n\r\n    this._onAsyncResize = this._async.debounce(\r\n      this._onAsyncResize,\r\n      RESIZE_DELAY,\r\n      {\r\n        leading: false\r\n      });\r\n\r\n    this._cachedPageHeights = {};\r\n    this._estimatedPageHeight = 0;\r\n    this._focusedIndex = -1;\r\n    this._scrollingToIndex = -1;\r\n    this._pageCache = {};\r\n  }\r\n\r\n  /**\r\n   * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback\r\n   * to measure the height of an individual item is specified, will only scroll to bring the specific item into view.\r\n   *\r\n   * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling\r\n   * when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.\r\n   *\r\n   * @param index Index of item to scroll to\r\n   * @param measureItem Optional callback to measure the height of an individual item\r\n   */\r\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number): void {\r\n    const startIndex = this.props.startIndex as number;\r\n    const renderCount = this._getRenderCount();\r\n    const endIndex = startIndex + renderCount;\r\n\r\n    let scrollTop = 0;\r\n\r\n    let itemsPerPage = 1;\r\n    for (let itemIndex = startIndex; itemIndex < endIndex; itemIndex += itemsPerPage) {\r\n      itemsPerPage = this._getItemCountForPage(itemIndex, this._allowedRect);\r\n\r\n      const requestedIndexIsInPage = itemIndex <= index && (itemIndex + itemsPerPage) > index;\r\n      if (requestedIndexIsInPage) {\r\n        // We have found the page. If the user provided a way to measure an individual item, we will try to scroll in just\r\n        // the given item, otherwise we'll only bring the page into view\r\n        if (measureItem) {\r\n          // Adjust for actual item position within page\r\n          const itemPositionWithinPage = index - itemIndex;\r\n          for (let itemIndexInPage = 0; itemIndexInPage < itemPositionWithinPage; ++itemIndexInPage) {\r\n            scrollTop += measureItem(itemIndex + itemIndexInPage);\r\n          }\r\n          const scrollBottom = scrollTop + measureItem(index);\r\n\r\n          const scrollRect = _measureScrollRect(this._scrollElement);\r\n          const scrollWindow = {\r\n            top: this._scrollElement.scrollTop,\r\n            bottom: this._scrollElement.scrollTop + scrollRect.height\r\n          };\r\n\r\n          const itemIsFullyVisible = scrollTop >= scrollWindow.top && scrollBottom <= scrollWindow.bottom;\r\n          if (itemIsFullyVisible) {\r\n            // Item is already visible, do nothing.\r\n            return;\r\n          }\r\n\r\n          const itemIsPartiallyAbove = scrollTop < scrollWindow.top;\r\n          const itemIsPartiallyBelow = scrollBottom > scrollWindow.bottom;\r\n\r\n          if (itemIsPartiallyAbove) {\r\n            // We will just scroll to 'scrollTop'\r\n            //  ______\r\n            // |Item  |   - scrollTop\r\n            // |  ____|_\r\n            // |_|____| | - scrollWindow.top\r\n            //   |      |\r\n            //   |______|\r\n          } else if (itemIsPartiallyBelow) {\r\n            // Adjust scrollTop position to just bring in the element\r\n            //  ______   - scrollTop\r\n            // |      |\r\n            // |  ____|_  - scrollWindow.bottom\r\n            // |_|____| |\r\n            //   | Item |\r\n            //   |______| - scrollBottom\r\n            scrollTop = this._scrollElement.scrollTop + (scrollBottom - scrollWindow.bottom);\r\n          }\r\n        }\r\n\r\n        this._scrollElement.scrollTop = scrollTop;\r\n        break;\r\n      }\r\n\r\n      scrollTop += this._getPageHeight(itemIndex, itemsPerPage, this._surfaceRect);\r\n    }\r\n  }\r\n\r\n  public componentDidMount() {\r\n\r\n    this._updatePages();\r\n    this._measureVersion++;\r\n    this._scrollElement = findScrollableParent(this.refs.root) as HTMLElement;\r\n\r\n    this._events.on(window, 'resize', this._onAsyncResize);\r\n    this._events.on(this.refs.root, 'focus', this._onFocus, true);\r\n    if (this._scrollElement) {\r\n      this._events.on(this._scrollElement, 'scroll', this._onScroll);\r\n      this._events.on(this._scrollElement, 'scroll', this._onAsyncScroll);\r\n    }\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: IListProps) {\r\n    if (newProps.items !== this.props.items ||\r\n      newProps.renderCount !== this.props.renderCount ||\r\n      newProps.startIndex !== this.props.startIndex) {\r\n\r\n      // We have received new items so we want to make sure that initially we only render a single window to\r\n      // fill the currently visible rect, and then later render additional windows.\r\n      this._resetRequiredWindows();\r\n      this._requiredRect = null;\r\n\r\n      this._measureVersion++;\r\n      this._invalidatePageCache();\r\n      this._updatePages(newProps);\r\n    }\r\n  }\r\n\r\n  public shouldComponentUpdate(newProps: IListProps, newState: IListState) {\r\n    let { renderedWindowsAhead, renderedWindowsBehind } = this.props;\r\n    let { pages: oldPages } = this.state;\r\n    let { pages: newPages, measureVersion } = newState;\r\n    let shouldComponentUpdate = false;\r\n\r\n    if (\r\n      this._measureVersion === measureVersion &&\r\n      newProps.renderedWindowsAhead === renderedWindowsAhead,\r\n      newProps.renderedWindowsBehind === renderedWindowsBehind,\r\n      newProps.items === this.props.items &&\r\n      oldPages!.length === newPages!.length) {\r\n      for (let i = 0; i < oldPages!.length; i++) {\r\n        let oldPage = oldPages![i];\r\n        let newPage = newPages![i];\r\n\r\n        if ((oldPage.key !== newPage.key ||\r\n          oldPage.itemCount !== newPage.itemCount)) {\r\n          shouldComponentUpdate = true;\r\n          break;\r\n        }\r\n      }\r\n    } else {\r\n      shouldComponentUpdate = true;\r\n    }\r\n\r\n    return shouldComponentUpdate;\r\n  }\r\n\r\n  public forceUpdate() {\r\n    this._invalidatePageCache();\r\n    // Ensure that when the list is force updated we update the pages first before render.\r\n    this._updateRenderRects(this.props, true);\r\n    this._updatePages();\r\n    this._measureVersion++;\r\n\r\n    super.forceUpdate();\r\n  }\r\n\r\n  public render() {\r\n    let { className, role } = this.props;\r\n    let { pages } = this.state;\r\n    let pageElements = [];\r\n    let divProps = getNativeProps(this.props, divProperties);\r\n\r\n    // assign list if no role\r\n    role = (role === undefined) ? 'list' : role;\r\n\r\n    for (let i = 0; i < pages!.length; i++) {\r\n      pageElements.push(this._renderPage(pages![i]));\r\n    }\r\n\r\n    // console.log(`Page elements ${pageElements.length}`);\r\n\r\n    return (\r\n      <div ref='root' { ...divProps } role={role} className={css('ms-List', className)} >\r\n        <div ref='surface' className='ms-List-surface' role='presentation'>\r\n          {pageElements}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _shouldVirtualize(): boolean {\r\n    const {\r\n      onShouldVirtualize\r\n    } = this.props;\r\n    return !onShouldVirtualize || onShouldVirtualize(this.props);\r\n  }\r\n\r\n  /**\r\n   * when props.items change or forceUpdate called, throw away cached pages\r\n   */\r\n  private _invalidatePageCache() {\r\n    this._pageCache = {};\r\n  }\r\n\r\n  private _renderPage(page: IPage): any {\r\n    let { onRenderCell, role, usePageCache } = this.props;\r\n    let cachedPage;\r\n    // if usePageCache is set and cached page element can be found, just return cached page\r\n    if (usePageCache) {\r\n      cachedPage = this._pageCache[page.key];\r\n      if (cachedPage && cachedPage.pageElement) {\r\n        return cachedPage.pageElement;\r\n      }\r\n    }\r\n\r\n    let cells = [];\r\n    let pageStyle = this._getPageStyle(page);\r\n\r\n    // only assign list item role if no role is assigned\r\n    role = (role === undefined) ? 'listitem' : 'presentation';\r\n\r\n    for (let i = 0; page.items && i < page.items.length; i++) {\r\n      let item = page.items[i];\r\n      const index = page.startIndex + i;\r\n      let itemKey =\r\n        this.props.getKey\r\n          ? this.props.getKey(item, index)\r\n          : item && item.key;\r\n\r\n      if (itemKey === null || itemKey === undefined) {\r\n        itemKey = index;\r\n      }\r\n\r\n      cells.push(\r\n        <div role={role} className='ms-List-cell' key={itemKey} data-list-index={i + page.startIndex} data-automationid='ListCell'>\r\n          {onRenderCell!(item, page.startIndex + i)}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const pageElement = (\r\n      <div className='ms-List-page' key={page.key} ref={page.key} style={pageStyle} role='presentation'>\r\n        {cells}\r\n      </div>\r\n    );\r\n    // cache the first page for now since it is re-rendered a lot times unncessarily.\r\n    // todo: a more aggresive caching mechanism is to cache pages constaining the items not changed.\r\n    // now we re-render pages too frequently, for example, props.items increased from 30 to 60, although the \r\n    // first 30 items did not change, we still re-rendered all of them in this props.items change.\r\n    if (usePageCache && page.startIndex === 0) {\r\n      this._pageCache[page.key] = {\r\n        page: page,\r\n        pageElement: pageElement\r\n      };\r\n    }\r\n    return pageElement;\r\n  }\r\n\r\n  /** Generate the style object for the page. */\r\n  private _getPageStyle(page: IPage) {\r\n    let style;\r\n    let { getPageStyle } = this.props;\r\n\r\n    if (getPageStyle) {\r\n      style = getPageStyle(page);\r\n    }\r\n\r\n    if (!page.items) {\r\n      style = style || {};\r\n      style.height = page.height;\r\n    }\r\n\r\n    return style;\r\n  }\r\n\r\n  /** Track the last item index focused so that we ensure we keep it rendered. */\r\n  private _onFocus(ev: any) {\r\n    let target = ev.target as HTMLElement;\r\n\r\n    while (target !== this.refs.surface) {\r\n      let indexString = target.getAttribute('data-list-index');\r\n\r\n      if (indexString) {\r\n        this._focusedIndex = Number(indexString);\r\n        break;\r\n      }\r\n\r\n      target = getParent(target) as HTMLElement;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called synchronously to reset the required render range to 0 on scrolling. After async scroll has executed,\r\n   * we will call onAsyncIdle which will reset it back to it's correct value.\r\n   */\r\n  private _onScroll() {\r\n    this._resetRequiredWindows();\r\n  }\r\n\r\n  private _resetRequiredWindows() {\r\n    this._requiredWindowsAhead = 0;\r\n    this._requiredWindowsBehind = 0;\r\n  }\r\n\r\n  /**\r\n   * Debounced method to asynchronously update the visible region on a scroll event.\r\n   */\r\n  private _onAsyncScroll() {\r\n    this._updateRenderRects();\r\n\r\n    // Only update pages when the visible rect falls outside of the materialized rect.\r\n    if (!this._materializedRect || !_isContainedWithin(this._requiredRect as IRectangle, this._materializedRect)) {\r\n      this._updatePages();\r\n    } else {\r\n      // console.log('requiredRect contained in materialized', this._requiredRect, this._materializedRect);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This is an async debounced method that will try and increment the windows we render. If we can increment\r\n   * either, we increase the amount we render and re-evaluate.\r\n   */\r\n  private _onAsyncIdle() {\r\n    const { renderedWindowsAhead, renderedWindowsBehind } = this.props;\r\n    const {\r\n      _requiredWindowsAhead: requiredWindowsAhead,\r\n      _requiredWindowsBehind: requiredWindowsBehind\r\n    } = this;\r\n    const windowsAhead = Math.min(renderedWindowsAhead as number, requiredWindowsAhead + 1);\r\n    const windowsBehind = Math.min(renderedWindowsBehind as number, requiredWindowsBehind + 1);\r\n\r\n    if (windowsAhead !== requiredWindowsAhead || windowsBehind !== requiredWindowsBehind) {\r\n\r\n      // console.log('idling', windowsBehind, windowsAhead);\r\n\r\n      this._requiredWindowsAhead = windowsAhead;\r\n      this._requiredWindowsBehind = windowsBehind;\r\n      this._updateRenderRects();\r\n      this._updatePages();\r\n    }\r\n\r\n    if (renderedWindowsAhead! > windowsAhead || renderedWindowsBehind! > windowsBehind) {\r\n      // Async increment on next tick.\r\n      this._onAsyncIdle();\r\n    }\r\n  }\r\n\r\n  private _onAsyncResize() {\r\n    this.forceUpdate();\r\n  }\r\n\r\n  private _updatePages(props?: IListProps) {\r\n    let { items, startIndex, renderCount } = (props || this.props);\r\n\r\n    renderCount = this._getRenderCount(props);\r\n\r\n    // console.log('updating pages');\r\n\r\n    if (!this._requiredRect) {\r\n      this._updateRenderRects(props);\r\n    }\r\n\r\n    let newListState = this._buildPages(items as any[], startIndex as number, renderCount);\r\n    let oldListPages = this.state.pages;\r\n\r\n    this.setState(newListState, () => {\r\n      // If measured version is invalid since we've updated the DOM\r\n      const heightsChanged = this._updatePageMeasurements(oldListPages as IPage[], newListState.pages as IPage[]);\r\n\r\n      // On first render, we should re-measure so that we don't get a visual glitch.\r\n      if (heightsChanged) {\r\n        this._materializedRect = null;\r\n        if (!this._hasCompletedFirstRender) {\r\n          this._hasCompletedFirstRender = true;\r\n          this._updatePages();\r\n        } else {\r\n          this._onAsyncScroll();\r\n        }\r\n      } else {\r\n        // Enqueue an idle bump.\r\n        this._onAsyncIdle();\r\n      }\r\n    });\r\n  }\r\n\r\n  private _updatePageMeasurements(oldPages: IPage[], newPages: IPage[]) {\r\n    let renderedIndexes = {};\r\n    let heightChanged = false;\r\n    let renderCount = this._getRenderCount();\r\n\r\n    // when not in virtualize mode, we render all the items without page measurement\r\n    if (!this._shouldVirtualize()) {\r\n      return heightChanged;\r\n    }\r\n\r\n    for (let i = 0; i < oldPages.length; i++) {\r\n      let page = oldPages[i];\r\n\r\n      if (page.items) {\r\n        (renderedIndexes as any)[page.startIndex] = page;\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < newPages.length; i++) {\r\n      let page = newPages[i];\r\n\r\n      if (page.items) {\r\n        heightChanged = this._measurePage(page) || heightChanged;\r\n\r\n        if (!(renderedIndexes as any)[page.startIndex]) {\r\n          this._onPageAdded(page);\r\n        } else {\r\n          delete (renderedIndexes as any)[page.startIndex];\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let index in renderedIndexes) {\r\n      if (renderedIndexes.hasOwnProperty(index)) {\r\n        this._onPageRemoved((renderedIndexes as any)[index]);\r\n      }\r\n    }\r\n\r\n    return heightChanged;\r\n  }\r\n\r\n  /**\r\n   * Given a page, measure its dimensions, update cache.\r\n   * @returns True if the height has changed.\r\n   */\r\n  private _measurePage(page: IPage): boolean {\r\n    let hasChangedHeight = false;\r\n    let pageElement = this.refs[page.key] as HTMLElement;\r\n    let cachedHeight = this._cachedPageHeights[page.startIndex];\r\n\r\n    // console.log('   * measure attempt', page.startIndex, cachedHeight);\r\n\r\n    if (pageElement && this._shouldVirtualize() && (!cachedHeight || cachedHeight.measureVersion !== this._measureVersion)) {\r\n      let newClientRect = {\r\n        width: pageElement.clientWidth,\r\n        height: pageElement.clientHeight\r\n      };\r\n\r\n      if (newClientRect.height || newClientRect.width) {\r\n        hasChangedHeight = page.height !== newClientRect.height;\r\n\r\n        // console.warn(' *** expensive page measure', page.startIndex, page.height, newClientRect.height);\r\n\r\n        page.height = newClientRect.height;\r\n\r\n        this._cachedPageHeights[page.startIndex] = {\r\n          height: newClientRect.height,\r\n          measureVersion: this._measureVersion\r\n        };\r\n\r\n        this._estimatedPageHeight = Math.round(\r\n          ((this._estimatedPageHeight * this._totalEstimates) + newClientRect.height) /\r\n          (this._totalEstimates + 1));\r\n\r\n        this._totalEstimates++;\r\n      }\r\n    }\r\n\r\n    return hasChangedHeight;\r\n  }\r\n\r\n  /** Called when a page has been added to the DOM. */\r\n  private _onPageAdded(page: IPage) {\r\n    let { onPageAdded } = this.props;\r\n\r\n    // console.log('page added', page.startIndex, this.state.pages.map(page => page.key).join(', '));\r\n\r\n    if (onPageAdded) {\r\n      onPageAdded(page);\r\n    }\r\n  }\r\n\r\n  /** Called when a page has been removed from the DOM. */\r\n  private _onPageRemoved(page: IPage) {\r\n    let { onPageRemoved } = this.props;\r\n\r\n    // console.log('  --- page removed', page.startIndex, this.state.pages.map(page => page.key).join(', '));\r\n\r\n    if (onPageRemoved) {\r\n      onPageRemoved(page);\r\n    }\r\n  }\r\n\r\n  /** Build up the pages that should be rendered. */\r\n  private _buildPages(items: any[], startIndex: number, renderCount: number): IListState {\r\n    let materializedRect = assign({}, EMPTY_RECT) as IRectangle;\r\n    let itemsPerPage = 1;\r\n    let pages = [];\r\n    let pageTop = 0;\r\n    let currentSpacer = null;\r\n    let focusedIndex = this._focusedIndex;\r\n    let endIndex = startIndex + renderCount;\r\n    const shouldVirtualize = this._shouldVirtualize();\r\n\r\n    // First render is very important to track; when we render cells, we have no idea of estimated page height.\r\n    // So we should default to rendering only the first page so that we can get information.\r\n    // However if the user provides a measure function, let's just assume they know the right heights.\r\n    let isFirstRender = this._estimatedPageHeight === 0 && !this.props.getPageHeight;\r\n\r\n    for (let itemIndex = startIndex; itemIndex < endIndex; itemIndex += itemsPerPage) {\r\n      itemsPerPage = this._getItemCountForPage(itemIndex, this._allowedRect);\r\n\r\n      let pageHeight = this._getPageHeight(itemIndex, itemsPerPage, this._surfaceRect);\r\n      let pageBottom = pageTop + pageHeight - 1;\r\n\r\n      let isPageRendered = findIndex(this.state.pages as IPage[], (page) => page.items && page.startIndex === itemIndex) > -1;\r\n      let isPageInAllowedRange = !this._allowedRect || pageBottom >= this._allowedRect.top && pageTop <= this._allowedRect.bottom!;\r\n      let isPageInRequiredRange = !this._requiredRect || pageBottom >= this._requiredRect!.top && pageTop <= this._requiredRect!.bottom!;\r\n      let isPageVisible = !isFirstRender && (isPageInRequiredRange || (isPageInAllowedRange && isPageRendered)) || !shouldVirtualize;\r\n      let isPageFocused = focusedIndex >= itemIndex && focusedIndex < (itemIndex + itemsPerPage);\r\n      let isFirstPage = itemIndex === startIndex;\r\n\r\n      // console.log('building page', itemIndex, 'pageTop: ' + pageTop, 'inAllowed: ' + isPageInAllowedRange, 'inRequired: ' + isPageInRequiredRange);\r\n\r\n      // Only render whats visible, focused, or first page, \r\n      // or when running in fast rendering mode (not in virtualized mode), we render all current items in pages\r\n      if (isPageVisible || isPageFocused || isFirstPage) {\r\n        if (currentSpacer) {\r\n          pages.push(currentSpacer);\r\n          currentSpacer = null;\r\n        }\r\n\r\n        let itemsInPage = Math.min(itemsPerPage, endIndex - itemIndex);\r\n        let newPage = this._createPage(null, items.slice(itemIndex, itemIndex + itemsInPage), itemIndex);\r\n\r\n        newPage.top = pageTop;\r\n        newPage.height = pageHeight;\r\n\r\n        pages.push(newPage);\r\n\r\n        if (isPageInRequiredRange && this._allowedRect) {\r\n          _mergeRect(materializedRect, {\r\n            top: pageTop,\r\n            bottom: pageBottom,\r\n            height: pageHeight,\r\n            left: this._allowedRect.left,\r\n            right: this._allowedRect.right,\r\n            width: this._allowedRect.width\r\n          });\r\n        }\r\n\r\n      } else {\r\n        if (!currentSpacer) {\r\n          currentSpacer = this._createPage('spacer-' + itemIndex, null, itemIndex, 0);\r\n        }\r\n        currentSpacer.height = (currentSpacer.height || 0) + (pageBottom - pageTop) + 1;\r\n        currentSpacer.itemCount += itemsPerPage;\r\n      }\r\n      pageTop += (pageBottom - pageTop + 1);\r\n\r\n      // in virtualized mode, we render need to render first page then break and measure,\r\n      // otherwise, we render all items without measurement to make rendering fast\r\n      if (isFirstRender && shouldVirtualize) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (currentSpacer) {\r\n      currentSpacer.key = 'spacer-end';\r\n      pages.push(currentSpacer);\r\n    }\r\n\r\n    this._materializedRect = materializedRect;\r\n\r\n    // console.log('materialized: ', materializedRect);\r\n    return {\r\n      pages: pages,\r\n      measureVersion: this._measureVersion\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get the pixel height of a give page. Will use the props getPageHeight first, and if not provided, fallback to\r\n   * cached height, or estimated page height, or default page height.\r\n   */\r\n  private _getPageHeight(itemIndex: number, itemsPerPage: number, visibleRect: IRectangle): number {\r\n    if (this.props.getPageHeight) {\r\n      return this.props.getPageHeight(itemIndex, visibleRect);\r\n    } else {\r\n      let cachedHeight = (this._cachedPageHeights[itemIndex]);\r\n\r\n      return cachedHeight ? cachedHeight.height : (this._estimatedPageHeight || DEFAULT_PAGE_HEIGHT);\r\n    }\r\n  }\r\n\r\n  private _getItemCountForPage(itemIndex: number, visibileRect: IRectangle): number {\r\n    let itemsPerPage = this.props.getItemCountForPage ? this.props.getItemCountForPage(itemIndex, visibileRect) : DEFAULT_ITEMS_PER_PAGE;\r\n\r\n    return itemsPerPage ? itemsPerPage : DEFAULT_ITEMS_PER_PAGE;\r\n  }\r\n\r\n  private _createPage(pageKey: string | null, items: any[] | null, startIndex?: number, count?: number, style?: any): IPage {\r\n    pageKey = pageKey || ('page-' + startIndex);\r\n    const cachedPage = this._pageCache[pageKey];\r\n    if (cachedPage && cachedPage.page) {\r\n      return cachedPage.page;\r\n    }\r\n\r\n    // Fill undefined cells because array.map will ignore undefined cells.\r\n    if (items) {\r\n      for (let i = 0; i < items.length; i++) {\r\n        items[i] = items[i] || null;\r\n      }\r\n    }\r\n\r\n    return {\r\n      key: pageKey,\r\n      startIndex: startIndex === undefined ? -1 : startIndex,\r\n      itemCount: (count === undefined) ? (items ? items.length : 0) : count,\r\n      items: items as any[],\r\n      style: style || {},\r\n      top: 0,\r\n      height: 0\r\n    };\r\n  }\r\n\r\n  private _getRenderCount(props?: IListProps): number {\r\n    let { items, startIndex, renderCount } = props || this.props;\r\n\r\n    return (renderCount === undefined ? (items ? items.length - startIndex! : 0) : renderCount);\r\n  }\r\n\r\n  /** Calculate the visible rect within the list where top: 0 and left: 0 is the top/left of the list. */\r\n  private _updateRenderRects(props?: IListProps, forceUpdate?: boolean) {\r\n    props = props || this.props;\r\n    const { renderedWindowsAhead, renderedWindowsBehind } = props;\r\n    const { pages } = this.state;\r\n    const renderCount = this._getRenderCount(props);\r\n    // when not in virtualize mode, we render all items without measurement to optimize page rendering perf\r\n    if (!this._shouldVirtualize()) {\r\n      return;\r\n    }\r\n\r\n    let surfaceRect = this._surfaceRect;\r\n    let scrollHeight = this._scrollElement && this._scrollElement.scrollHeight;\r\n    let scrollTop = this._scrollElement ? this._scrollElement.scrollTop : 0;\r\n\r\n    // WARNING: EXPENSIVE CALL! We need to know the surface top relative to the window.\r\n    // This needs to be called to recalculate when new pages should be loaded.\r\n    // We check to see how far we've scrolled and if it's further than a third of a page we run it again.\r\n    if (\r\n      forceUpdate ||\r\n      !pages ||\r\n      !this._surfaceRect ||\r\n      !scrollHeight ||\r\n      scrollHeight !== this._scrollHeight ||\r\n      Math.abs(this._scrollTop - scrollTop) > this._estimatedPageHeight / 3) {\r\n      surfaceRect = this._surfaceRect = _measureSurfaceRect(this.refs.surface);\r\n      this._scrollTop = scrollTop;\r\n    }\r\n\r\n    // If the scroll height has changed, something in the container likely resized and\r\n    // we should redo the page heights incase their content resized.\r\n    if (forceUpdate ||\r\n      !scrollHeight ||\r\n      scrollHeight !== this._scrollHeight) {\r\n      this._measureVersion++;\r\n    }\r\n\r\n    this._scrollHeight = scrollHeight;\r\n\r\n    // If the surface is above the container top or below the container bottom, or if this is not the first\r\n    // render return empty rect.\r\n    // The first time the list gets rendered we need to calculate the rectangle. The width of the list is\r\n    // used to calculate the width of the list items.\r\n    const visibleTop = Math.max(0, -surfaceRect.top);\r\n    const visibleRect = {\r\n      top: visibleTop,\r\n      left: surfaceRect.left,\r\n      bottom: visibleTop + window.innerHeight,\r\n      right: surfaceRect.right,\r\n      width: surfaceRect.width,\r\n      height: window.innerHeight\r\n    };\r\n\r\n    // The required/allowed rects are adjusted versions of the visible rect.\r\n    this._requiredRect = _expandRect(visibleRect, this._requiredWindowsBehind, this._requiredWindowsAhead);\r\n    this._allowedRect = _expandRect(visibleRect, renderedWindowsBehind!, renderedWindowsAhead!);\r\n  }\r\n}\r\n\r\nfunction _expandRect(rect: IRectangle, pagesBefore: number, pagesAfter: number): IRectangle {\r\n  const top = rect.top - (pagesBefore * rect.height);\r\n  const height = rect.height + ((pagesBefore + pagesAfter) * rect.height);\r\n\r\n  return {\r\n    top: top,\r\n    bottom: top + height,\r\n    height: height,\r\n    left: rect.left,\r\n    right: rect.right,\r\n    width: rect.width\r\n  };\r\n}\r\n\r\nfunction _isContainedWithin(innerRect: IRectangle, outerRect: IRectangle): boolean {\r\n  return (\r\n    innerRect.top >= outerRect.top &&\r\n    innerRect.left >= outerRect.left &&\r\n    innerRect.bottom! <= outerRect.bottom! &&\r\n    innerRect.right! <= outerRect.right!);\r\n}\r\n\r\nfunction _mergeRect(targetRect: IRectangle, newRect: IRectangle): IRectangle {\r\n  targetRect.top = (newRect.top < targetRect.top || targetRect.top === -1) ? newRect.top : targetRect.top;\r\n  targetRect.left = (newRect.left < targetRect.left || targetRect.left === -1) ? newRect.left : targetRect.left;\r\n  targetRect.bottom = (newRect.bottom! > targetRect.bottom! || targetRect.bottom === -1) ? newRect.bottom : targetRect.bottom;\r\n  targetRect.right = (newRect.right! > targetRect.right! || targetRect.right === -1) ? newRect.right : targetRect.right;\r\n  targetRect.width = targetRect.right! - targetRect.left + 1;\r\n  targetRect.height = targetRect.bottom! - targetRect.top + 1;\r\n\r\n  return targetRect;\r\n}"],"sourceRoot":"..\\..\\..\\src"}