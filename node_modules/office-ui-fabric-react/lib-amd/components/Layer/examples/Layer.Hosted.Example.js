define(["require", "exports", "tslib", "react", "office-ui-fabric-react/lib/Checkbox", "office-ui-fabric-react/lib/Layer", "office-ui-fabric-react/lib/Toggle", "../../../Styling", "./Layer.Example.scss"], function (require, exports, tslib_1, React, Checkbox_1, Layer_1, Toggle_1, Styling_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var LayerHostedExample = (function (_super) {
        tslib_1.__extends(LayerHostedExample, _super);
        function LayerHostedExample() {
            var _this = _super.call(this) || this;
            _this.state = {
                showLayer: false,
                showHost: true
            };
            return _this;
        }
        LayerHostedExample.prototype.render = function () {
            var _this = this;
            var _a = this.state, showLayer = _a.showLayer, showHost = _a.showHost;
            var content = (React.createElement("div", { className: 'LayerExample-content ' + Styling_1.AnimationClassNames.scaleUpIn100 }, "This is example layer content."));
            return (React.createElement("div", null,
                React.createElement(Toggle_1.Toggle, { label: 'Show host', checked: showHost, onChanged: function (checked) { return _this.setState({ showHost: checked }); } }),
                showHost && (React.createElement(Layer_1.LayerHost, { id: 'layerhost1', className: 'LayerExample-customHost' })),
                React.createElement("p", { id: 'foo' }, "In some cases, you may need to contain layered content within an area. Create an instance of a LayerHost along with an id, and provide a hostId on the layer to render it within the specific host. (Note that it's important that you don't include children within the LayerHost. It's meant to contain Layered content only.)"),
                React.createElement(Checkbox_1.Checkbox, { label: 'Render the box below in a Layer and target it at hostId=layerhost1', checked: showLayer, onChange: function (ev, checked) { return _this.setState({ showLayer: checked }); } }),
                showLayer ? (React.createElement(Layer_1.Layer, { hostId: 'layerhost1', onLayerDidMount: function () { return console.log('didmount'); }, onLayerWillUnmount: function () { return console.log('willunmount'); } }, content)) : content,
                React.createElement("div", { className: 'LayerExample-nonLayered' }, "I am normally below the content.")));
        };
        return LayerHostedExample;
    }(React.Component));
    exports.LayerHostedExample = LayerHostedExample;
});

//# sourceMappingURL=Layer.Hosted.Example.js.map
