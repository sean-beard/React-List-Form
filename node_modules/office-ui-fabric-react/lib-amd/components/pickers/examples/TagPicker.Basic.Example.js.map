{"version":3,"sources":["components/pickers/examples/TagPicker.Basic.Example.tsx"],"names":[],"mappings":";;;IAKA,IAAI,SAAS,GAAG;QACd,OAAO;QACP,MAAM;QACN,OAAO;QACP,MAAM;QACN,OAAO;QACP,SAAS;QACT,OAAO;QACP,QAAQ;QACR,MAAM;QACN,QAAQ;QACR,KAAK;QACL,MAAM;QACN,QAAQ;QACR,OAAO;QACP,QAAQ;KACT,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAA3B,CAA2B,CAAC,CAAC;IAE3C;QAA2C,iDAA4C;QACrF;YAAA,YACE,iBAAO,SAIR;YAHC,KAAI,CAAC,KAAK,GAAG;gBACX,gBAAgB,EAAE,KAAK;aACxB,CAAC;;QACJ,CAAC;QAEM,sCAAM,GAAb;YACE,MAAM,CAAC,CACL;gBACE,oBAAC,mBAAQ,IAAC,KAAK,EAAC,oBAAoB,EAAC,OAAO,EAAG,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAG,QAAQ,EAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,GAAK;gBACnI,oBAAC,qBAAS,IAAC,GAAG,EAAC,WAAW,EACxB,oBAAoB,EAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,EACvD,eAAe,EAAG,UAAC,IAAS,IAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EACtD,sBAAsB,EACpB;wBACE,qBAAqB,EAAE,gBAAgB;wBACvC,kBAAkB,EAAE,qBAAqB;qBAC1C,EAEH,QAAQ,EAAG,IAAI,CAAC,KAAK,CAAC,gBAAgB,EACtC,UAAU,EAAG;wBACX,MAAM,EAAE,UAAC,EAAsC,IAAK,OAAA,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,EAA5B,CAA4B;wBAChF,OAAO,EAAE,UAAC,EAAsC,IAAK,OAAA,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,EAA7B,CAA6B;qBACnF,GACD,CACE,CACP,CAAC;QACJ,CAAC;QAEO,sDAAsB,GAA9B;YACE,IAAI,CAAC,QAAQ,CAAC;gBACZ,gBAAgB,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB;aAC/C,CAAC,CAAC;QACL,CAAC;QAEO,gDAAgB,GAAxB,UAAyB,UAAkB,EAAE,OAAwC;YAArF,iBAEC;YADC,MAAM,CAAC,UAAU,GAAG,SAAS,CAAC,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,EAA9D,CAA8D,CAAC,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,KAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE,OAAO,CAAC,EAA1C,CAA0C,CAAC,GAAG,EAAE,CAAC;QAC9K,CAAC;QAEO,qDAAqB,GAA7B,UAA8B,GAAkC,EAAE,OAAwC;YACxG,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBACxD,MAAM,CAAC,KAAK,CAAC;YACf,CAAC;YACD,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,EAA1B,CAA0B,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;QAC7E,CAAC;QACH,4BAAC;IAAD,CA/CA,AA+CC,CA/C0C,KAAK,CAAC,SAAS,GA+CzD;IA/CY,sDAAqB","file":"components/pickers/examples/TagPicker.Basic.Example.js","sourcesContent":["import * as React from 'react';\r\nimport { TagPicker } from 'office-ui-fabric-react/lib/components/pickers/TagPicker/TagPicker';\r\nimport { Checkbox } from 'office-ui-fabric-react/lib/Checkbox';\r\nimport { ITagPickerDemoPageState } from 'office-ui-fabric-react/lib/components/pickers/examples/ITagPickerDemoPageState';\r\n\r\nlet _testTags = [\r\n  'black',\r\n  'blue',\r\n  'brown',\r\n  'cyan',\r\n  'green',\r\n  'magenta',\r\n  'mauve',\r\n  'orange',\r\n  'pink',\r\n  'purple',\r\n  'red',\r\n  'rose',\r\n  'violet',\r\n  'white',\r\n  'yellow'\r\n].map(item => ({ key: item, name: item }));\r\n\r\nexport class TagPickerBasicExample extends React.Component<{}, ITagPickerDemoPageState> {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isPickerDisabled: false\r\n    };\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div>\r\n        <Checkbox label='Disable Tag Picker' checked={ this.state.isPickerDisabled } onChange={ this._onDisabledButtonClick.bind(this) } />\r\n        <TagPicker ref='tagPicker'\r\n          onResolveSuggestions={ this._onFilterChanged.bind(this) }\r\n          getTextFromItem={ (item: any) => { return item.name; } }\r\n          pickerSuggestionsProps={\r\n            {\r\n              suggestionsHeaderText: 'Suggested Tags',\r\n              noResultsFoundText: 'No Color Tags Found'\r\n            }\r\n          }\r\n          disabled={ this.state.isPickerDisabled }\r\n          inputProps={ {\r\n            onBlur: (ev: React.FocusEvent<HTMLInputElement>) => console.log('onBlur called'),\r\n            onFocus: (ev: React.FocusEvent<HTMLInputElement>) => console.log('onFocus called')\r\n          } }\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _onDisabledButtonClick(): void {\r\n    this.setState({\r\n      isPickerDisabled: !this.state.isPickerDisabled\r\n    });\r\n  }\r\n\r\n  private _onFilterChanged(filterText: string, tagList: { key: string, name: string }[]) {\r\n    return filterText ? _testTags.filter(tag => tag.name.toLowerCase().indexOf(filterText.toLowerCase()) === 0).filter(item => !this._listContainsDocument(item, tagList)) : [];\r\n  }\r\n\r\n  private _listContainsDocument(tag: { key: string, name: string }, tagList: { key: string, name: string }[]) {\r\n    if (!tagList || !tagList.length || tagList.length === 0) {\r\n      return false;\r\n    }\r\n    return tagList.filter(compareTag => compareTag.key === tag.key).length > 0;\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\src"}