{"version":3,"sources":["components/Button/BaseButton.tsx"],"names":[],"mappings":"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","file":"components/Button/BaseButton.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  IRenderFunction,\r\n  anchorProperties,\r\n  assign,\r\n  autobind,\r\n  buttonProperties,\r\n  getId,\r\n  getNativeProps,\r\n  KeyCodes,\r\n  css,\r\n} from '../../Utilities';\r\nimport { mergeStyles, hideText } from '../../Styling';\r\nimport { Icon, IIconProps } from '../../Icon';\r\nimport { DirectionalHint } from '../../common/DirectionalHint';\r\nimport { ContextualMenu, IContextualMenuProps } from '../../ContextualMenu';\r\nimport { IButtonProps, IButton } from './Button.Props';\r\nimport { IButtonClassNames, getClassNames } from './BaseButton.classNames';\r\nimport { getClassNames as getSplitButtonClassNames } from './SplitButton/SplitButton.classNames';\r\n\r\nexport interface IBaseButtonProps extends IButtonProps {\r\n  baseClassName?: string;\r\n  variantClassName?: string;\r\n}\r\n\r\nexport interface IBaseButtonState {\r\n  menuProps?: IContextualMenuProps | null;\r\n}\r\n\r\nexport class BaseButton extends BaseComponent<IBaseButtonProps, IBaseButtonState> implements IButton {\r\n\r\n  private get _isSplitButton(): boolean {\r\n    return (!!this.props.menuProps && !!this.props.onClick) && this.props.split === true;\r\n  }\r\n\r\n  private get _isExpanded(): boolean {\r\n    return !!this.state.menuProps;\r\n  }\r\n\r\n  public static defaultProps = {\r\n    baseClassName: 'ms-Button',\r\n    classNames: {},\r\n    styles: {},\r\n    split: false\r\n  };\r\n\r\n  private _buttonElement: HTMLElement;\r\n  private _labelId: string;\r\n  private _descriptionId: string;\r\n  private _ariaDescriptionId: string;\r\n  private _classNames: IButtonClassNames;\r\n\r\n  constructor(props: IBaseButtonProps, rootClassName: string) {\r\n    super(props);\r\n\r\n    this._warnConditionallyRequiredProps(\r\n      ['menuProps', 'onClick'],\r\n      'split',\r\n      this.props.split!\r\n    );\r\n\r\n    this._warnDeprecations({\r\n      rootProps: undefined,\r\n      icon: 'iconProps',\r\n      menuIconName: 'menuIconProps',\r\n      toggled: 'checked'\r\n    });\r\n\r\n    this._labelId = getId();\r\n    this._descriptionId = getId();\r\n    this._ariaDescriptionId = getId();\r\n    this.state = {\r\n      menuProps: null\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const {\r\n      ariaDescription,\r\n      ariaLabel,\r\n      className,\r\n      description,\r\n      disabled,\r\n      href,\r\n      iconProps,\r\n      styles,\r\n      text,\r\n      checked,\r\n      variantClassName\r\n         } = this.props;\r\n\r\n    this._classNames = getClassNames(\r\n      styles!,\r\n      className!,\r\n      variantClassName!,\r\n      iconProps && iconProps.className,\r\n      disabled!,\r\n      checked!,\r\n      this.state.menuProps != null && !this.props.split\r\n    );\r\n\r\n    const { _ariaDescriptionId, _labelId, _descriptionId } = this;\r\n    // Anchor tag cannot be disabled hence in disabled state rendering\r\n    // anchor button as normal button\r\n    const renderAsAnchor: boolean = !disabled && !!href;\r\n    const tag = renderAsAnchor ? 'a' : 'button';\r\n    const nativeProps = getNativeProps(\r\n      assign(\r\n        renderAsAnchor ? {} : { type: 'button' },\r\n        this.props.rootProps,\r\n        this.props),\r\n      renderAsAnchor ? anchorProperties : buttonProperties,\r\n      [\r\n        'disabled' // Let disabled buttons be focused and styled as disabled.\r\n      ]);\r\n\r\n    // Check for ariaDescription, description or aria-describedby in the native props to determine source of aria-describedby\r\n    // otherwise default to null.\r\n    let ariaDescribedBy;\r\n    if (ariaDescription) {\r\n      ariaDescribedBy = _ariaDescriptionId;\r\n    } else if (description) {\r\n      ariaDescribedBy = _descriptionId;\r\n    } else if ((nativeProps as any)['aria-describedby']) {\r\n      ariaDescribedBy = (nativeProps as any)['aria-describedby'];\r\n    } else {\r\n      ariaDescribedBy = null;\r\n    }\r\n\r\n    // If an explicit ariaLabel is given, use that as the label and we're done.\r\n    // If an explicit aria-labelledby is given, use that and we're done.\r\n    // If any kind of description is given (which will end up as an aria-describedby attribute),\r\n    // set the labelledby element. Otherwise, the button is labeled implicitly by the descendent\r\n    // text on the button (if it exists). Never set both aria-label and aria-labelledby.\r\n    let ariaLabelledBy = null;\r\n    if (!ariaLabel) {\r\n      if ((nativeProps as any)['aria-labelledby']) {\r\n        ariaLabelledBy = (nativeProps as any)['aria-labelledby'];\r\n      } else if (ariaDescribedBy) {\r\n        ariaLabelledBy = text ? _labelId : null;\r\n      }\r\n    }\r\n\r\n    const tabIndex = (this.props.tabIndex === undefined) ? (this._isSplitButton ? -1 : 0) : this.props.tabIndex;\r\n\r\n    const buttonProps = assign(\r\n      nativeProps,\r\n      {\r\n        className: this._classNames.root,\r\n        ref: this._resolveRef('_buttonElement'),\r\n        'disabled': disabled,\r\n        tabIndex: tabIndex,\r\n        'aria-label': ariaLabel,\r\n        'aria-labelledby': ariaLabelledBy,\r\n        'aria-describedby': ariaDescribedBy,\r\n        'data-is-focusable': ((this.props as any)['data-is-focusable'] === false || disabled) ? false : true,\r\n        'aria-pressed': checked\r\n      }\r\n    );\r\n\r\n    if (this._isSplitButton) {\r\n      return (\r\n        this._onRenderSplitButtonContent(tag, buttonProps)\r\n      );\r\n    } else if (this.props.menuProps) {\r\n      assign(\r\n        buttonProps,\r\n        {\r\n          'onClick': this._onToggleMenu,\r\n          'aria-expanded': this._isExpanded,\r\n          'aria-owns': this.state.menuProps ? this._labelId + '-menu' : null,\r\n          'aria-haspopup': true\r\n        }\r\n      );\r\n    }\r\n\r\n    return this._onRenderContent(tag, buttonProps);\r\n  }\r\n\r\n  public focus(): void {\r\n    if (this._buttonElement) {\r\n      this._buttonElement.focus();\r\n    }\r\n  }\r\n\r\n  private _onRenderContent(tag: any, buttonProps: IButtonProps): JSX.Element {\r\n    let props = this.props;\r\n    let {\r\n      baseClassName,\r\n      styles,\r\n      menuIconName,\r\n      menuIconProps,\r\n      menuProps,\r\n      onRenderIcon = this._onRenderIcon,\r\n      onRenderText = this._onRenderText,\r\n      onRenderDescription = this._onRenderDescription,\r\n      onRenderAriaDescription = this._onRenderAriaDescription,\r\n      onRenderChildren = this._onRenderChildren,\r\n      onRenderMenu = this._onRenderMenu,\r\n      onRenderMenuIcon = this._onRenderMenuIcon\r\n    } = props;\r\n\r\n    return React.createElement(\r\n      tag,\r\n      buttonProps,\r\n      React.createElement(\r\n        'div' as any,\r\n        { className: this._classNames.flexContainer },\r\n        onRenderIcon(props, this._onRenderIcon),\r\n        onRenderText(props, this._onRenderText),\r\n        onRenderDescription(props, this._onRenderDescription),\r\n        onRenderAriaDescription(props, this._onRenderAriaDescription),\r\n        onRenderChildren(props, this._onRenderChildren),\r\n        !this._isSplitButton && (menuProps || menuIconName || menuIconProps || this.props.onRenderMenuIcon) && onRenderMenuIcon(this.props, this._onRenderMenuIcon),\r\n        this.state.menuProps && onRenderMenu(menuProps, this._onRenderMenu)\r\n      ));\r\n  }\r\n\r\n  @autobind\r\n  private _onRenderIcon(buttonProps?: IButtonProps, defaultRender?: IRenderFunction<IButtonProps>): JSX.Element | null {\r\n    let {\r\n      baseClassName,\r\n      disabled,\r\n      icon,\r\n      iconProps,\r\n      styles,\r\n      checked\r\n       } = this.props;\r\n\r\n    if (icon || iconProps) {\r\n      iconProps = iconProps || {\r\n        iconName: icon\r\n      } as IIconProps;\r\n    }\r\n\r\n    if (iconProps) {\r\n      return Icon({\r\n        ...iconProps,\r\n        className: this._classNames.icon\r\n      });\r\n    }\r\n    return null;\r\n  }\r\n\r\n  @autobind\r\n  private _onRenderText(): JSX.Element | null {\r\n    let {\r\n      children,\r\n      disabled,\r\n      styles,\r\n      text\r\n            } = this.props;\r\n\r\n    // For backwards compat, we should continue to take in the text content from children.\r\n    if (text === undefined && typeof (children) === 'string') {\r\n      text = children;\r\n    }\r\n\r\n    if (text) {\r\n      return (\r\n        <span\r\n          className={ this._classNames.label }\r\n          id={ this._labelId }\r\n        >\r\n          { text }\r\n        </span>\r\n      );\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  @autobind\r\n  private _onRenderChildren(): JSX.Element | null {\r\n    const { children } = this.props;\r\n\r\n    // If children is just a string, either it or the text will be rendered via onRenderLabel\r\n    // If children is another component, it will be rendered after text\r\n    if (typeof (children) === 'string') {\r\n      return null;\r\n    }\r\n\r\n    return children as any;\r\n  }\r\n\r\n  @autobind\r\n  private _onRenderDescription(props: IButtonProps) {\r\n    const {\r\n    description\r\n    } = this.props;\r\n\r\n    // ms-Button-description is only shown when the button type is compound.\r\n    // In other cases it will not be displayed.\r\n    return description ? (\r\n      <span className={ this._classNames.description } id={ this._descriptionId }>\r\n        { description }\r\n      </span>\r\n    ) : (\r\n        null\r\n      );\r\n  }\r\n\r\n  @autobind\r\n  private _onRenderAriaDescription() {\r\n    const {\r\n     ariaDescription,\r\n      styles\r\n     } = this.props;\r\n\r\n    // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan,\r\n    // otherwise it will be assigned to descriptionSpan.\r\n    return ariaDescription ? (\r\n      <span className={ `${styles!.screenReaderText || mergeStyles(hideText)}` } id={ this._ariaDescriptionId }>{ ariaDescription }</span>\r\n    ) : (\r\n        null\r\n      );\r\n  }\r\n\r\n  @autobind\r\n  private _onRenderMenuIcon(props: IButtonProps): JSX.Element | null {\r\n    let {\r\n      baseClassName,\r\n      checked,\r\n      disabled,\r\n      menuIconName,\r\n      menuIconProps\r\n       } = this.props;\r\n\r\n    if (menuIconProps === undefined) {\r\n      menuIconProps = {\r\n        iconName: menuIconName === undefined ? 'ChevronDown' : menuIconName\r\n      };\r\n    }\r\n\r\n    return (\r\n      menuIconProps ?\r\n        <Icon\r\n          { ...menuIconProps }\r\n          className={ this._classNames.icon }\r\n        />\r\n        :\r\n        null\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  private _onRenderMenu(menuProps: IContextualMenuProps): JSX.Element {\r\n    return (\r\n      <ContextualMenu\r\n        id={ this._labelId + '-menu' }\r\n        directionalHint={ DirectionalHint.bottomLeftEdge }\r\n        {...menuProps}\r\n        className={ 'ms-BaseButton-menuhost ' + menuProps.className }\r\n        target={ this._buttonElement }\r\n        labelElementId={ this._labelId }\r\n        onDismiss={ this._onToggleMenu }\r\n      />\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  private _onToggleMenu(): void {\r\n    const { menuProps } = this.props;\r\n    let currentMenuProps = this.state.menuProps;\r\n\r\n    this.setState({ menuProps: currentMenuProps ? null : menuProps });\r\n  }\r\n\r\n  private _onRenderSplitButtonContent(tag: any, buttonProps: IButtonProps): JSX.Element {\r\n    const {\r\n      styles,\r\n      disabled\r\n    } = this.props;\r\n\r\n    return (\r\n      <div\r\n        aria-labelledby={ buttonProps.ariaLabel }\r\n        aria-disabled={ disabled }\r\n        aria-haspopup={ true }\r\n        aria-expanded={ this._isExpanded }\r\n        aria-pressed={ this.props.checked }\r\n        aria-describedby={ buttonProps.ariaDescription }\r\n        className={ css(disabled ? styles!.splitButtonContainerDisabled : styles!.splitButtonContainer) }\r\n        tabIndex={ 0 }\r\n        onKeyDown={ this.props.disabled ? undefined : this._onSplitButtonKeyDown }\r\n      >\r\n        <span aria-hidden={ true } style={ { 'display': 'flex' } }>\r\n          { this._onRenderContent(tag, buttonProps) }\r\n          { this._onRenderSplitButtonMenuButton() }\r\n        </span>\r\n      </div >\r\n    );\r\n  }\r\n\r\n  private _onRenderSplitButtonMenuButton(): JSX.Element {\r\n    let {\r\n      menuIconName,\r\n      menuIconProps,\r\n      styles,\r\n      disabled,\r\n      checked\r\n    } = this.props;\r\n\r\n    if (menuIconProps === undefined) {\r\n      menuIconProps = {\r\n        iconName: menuIconName === undefined ? 'ChevronDown' : menuIconName\r\n      };\r\n    }\r\n\r\n    const classNames = styles ? getSplitButtonClassNames(styles!, disabled || false, !!this.state.menuProps, checked || false) : undefined;\r\n\r\n    return (\r\n      <BaseButton\r\n        tabIndex={ -1 }\r\n        styles={ classNames }\r\n        checked={ this.props.checked }\r\n        disabled={ this.props.disabled }\r\n        onClick={ this._onToggleMenu }\r\n        menuProps={ undefined }\r\n        iconProps={ menuIconProps } />\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  private _onSplitButtonKeyDown(ev: React.KeyboardEvent<HTMLElement>) {\r\n    switch (ev.which) {\r\n      case KeyCodes.enter:\r\n      case KeyCodes.space:\r\n        (this.props.onClick as any)(null);\r\n        return;\r\n    }\r\n\r\n    if (ev.altKey) {\r\n      switch (ev.which) {\r\n        case KeyCodes.down:\r\n          this._onToggleMenu();\r\n          return;\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}