{"version":3,"sources":["utilities/decorators/withContainsFocus.tsx"],"names":[],"mappings":";;;IAGA,2BAA4E,iBAA8E;QAExJ,MAAM;YAA0C,sDAA2E;YAQzH;gBAAA,YACE,iBAAO,SAQR;gBANC,KAAI,CAAC,KAAK,GAAG;oBACX,aAAa,EAAE,KAAK;iBACrB,CAAC;gBAEF,KAAI,CAAC,wBAAwB,GAAG,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAI,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;gBACjF,KAAI,CAAC,2BAA2B,GAAG,KAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;YACjF,CAAC;YAEM,yDAAoB,GAA3B;gBACE,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;YACxB,CAAC;YAEM,2CAAM,GAAb;gBACQ,IAAA,wCAAa,CAAgB;gBAEnC,MAAM,CAAC,CACL,6BAAK,GAAG,EAAC,MAAM,EAAC,OAAO,EAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAAG,MAAM,EAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC;oBAC3F,oBAAC,iBAAiB,qBAChB,GAAG,EAAG,IAAI,CAAC,2BAA2B,EACtC,aAAa,EAAG,aAAa,IACxB,IAAI,CAAC,KAAY,EACtB,CACE,CACP,CAAC;YACJ,CAAC;YAEM,gDAAW,GAAlB;gBACE,IAAI,CAAC,0BAA0B,CAAC,WAAW,EAAE,CAAC;YAChD,CAAC;YAEO,iDAAY,GAApB,UAAqB,EAAoC;gBACvD,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;gBAC9B,IAAI,CAAC,wBAAwB,EAAE,CAAC;YAClC,CAAC;YAEO,gDAAW,GAAnB,UAAoB,EAAoC;gBACtD,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;gBAC/B,IAAI,CAAC,wBAAwB,EAAE,CAAC;YAClC,CAAC;YAEO,sDAAiB,GAAzB;gBACE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,KAAK,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;oBACxD,IAAI,CAAC,QAAQ,CAAC,EAAE,aAAa,EAAE,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC;gBAC3D,CAAC;YACH,CAAC;YACH,iCAAC;QAAD,CAxDO,AAwDN,CAxD+C,6BAAa,GAwD3D;IACJ,CAAC;IA3DD,8CA2DC","file":"utilities/decorators/withContainsFocus.js","sourcesContent":["import * as React from 'react';\r\nimport { BaseDecorator } from './BaseDecorator';\r\n\r\nexport function withContainsFocus<P extends { containsFocus?: boolean }, S>(ComposedComponent: (new (props: P, ...args: any[]) => (React.Component<P, S>))): any {\r\n\r\n  return class WithContainsFocusComponent extends BaseDecorator<P & { containsFocus?: boolean }, { containsFocus?: boolean }> {\r\n    public refs: {\r\n      [key: string]: React.ReactInstance,\r\n    };\r\n\r\n    private _newContainsFocus: boolean;\r\n    private _delayedSetContainsFocus: () => void;\r\n\r\n    constructor() {\r\n      super();\r\n\r\n      this.state = {\r\n        containsFocus: false\r\n      };\r\n\r\n      this._delayedSetContainsFocus = this._async.debounce(this._setContainsFocus, 20);\r\n      this._updateComposedComponentRef = this._updateComposedComponentRef.bind(this);\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n      this._async.dispose();\r\n    }\r\n\r\n    public render() {\r\n      let { containsFocus } = this.state;\r\n\r\n      return (\r\n        <div ref='root' onFocus={ this._handleFocus.bind(this) } onBlur={ this._handleBlur.bind(this) }>\r\n          <ComposedComponent\r\n            ref={ this._updateComposedComponentRef }\r\n            containsFocus={ containsFocus }\r\n            { ...this.props as any }\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    public forceUpdate() {\r\n      this._composedComponentInstance.forceUpdate();\r\n    }\r\n\r\n    private _handleFocus(ev: React.FocusEvent<HTMLDivElement>) {\r\n      this._newContainsFocus = true;\r\n      this._delayedSetContainsFocus();\r\n    }\r\n\r\n    private _handleBlur(ev: React.FocusEvent<HTMLDivElement>) {\r\n      this._newContainsFocus = false;\r\n      this._delayedSetContainsFocus();\r\n    }\r\n\r\n    private _setContainsFocus() {\r\n      if (this.state.containsFocus !== this._newContainsFocus) {\r\n        this.setState({ containsFocus: this._newContainsFocus });\r\n      }\r\n    }\r\n  };\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}