"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function defaultScreenshot(params) {
    var imageSelector = params.imageSelector || params.selector;
    casper.then(function () {
        phantomcss.screenshot(imageSelector, params.fileName + '_default');
    });
    if (params.childParams) {
        params.childParams.commands.forEach(function (commandList) {
            commandList(params.childParams);
        });
    }
}
exports.defaultScreenshot = defaultScreenshot;
function mouseMoveScreenshot(params) {
    var imageSelector = params.imageSelector || params.selector;
    casper.then(function () {
        this.mouse.move(params.selector);
        phantomcss.screenshot(imageSelector, params.fileName + '_mouseMove');
    });
    if (params.childParams) {
        params.childParams.commands.forEach(function (commandList) {
            commandList(params.childParams);
        });
    }
}
exports.mouseMoveScreenshot = mouseMoveScreenshot;
function mouseDownScreenshot(params) {
    var imageSelector = params.imageSelector || params.selector;
    casper.then(function () {
        this.mouse.down(params.selector);
        phantomcss.screenshot(imageSelector, params.fileName + '_mouseDown');
    });
    if (params.childParams) {
        params.childParams.commands.forEach(function (commandList) {
            commandList(params.childParams);
        });
    }
}
exports.mouseDownScreenshot = mouseDownScreenshot;
function mouseClickScreenshot(params) {
    var imageSelector = params.imageSelector || params.selector;
    casper.then(function () {
        this.click(params.selector);
        phantomcss.screenshot(imageSelector, params.fileName + '_mouseClick');
    });
    casper.then(function () {
        this.click(params.selector);
    });
    if (params.childParams) {
        params.childParams.commands.forEach(function (commandList) {
            commandList(params.childParams);
        });
    }
}
exports.mouseClickScreenshot = mouseClickScreenshot;
function mouseSingleClickScreenshot(params) {
    params.imageSelector = params.imageSelector || params.selector;
    casper.then(function () {
        this.click(params.selector);
    });
    if (params.childParams) {
        params.childParams.commands.forEach(function (commandList) {
            commandList(params.childParams);
        });
    }
}
exports.mouseSingleClickScreenshot = mouseSingleClickScreenshot;
function testRunner(componentIds) {
    componentIds.forEach(function (element) {
        element.commands.forEach(function (command) {
            command(element);
        });
    });
}
exports.testRunner = testRunner;

//# sourceMappingURL=RunVisualTest.js.map
