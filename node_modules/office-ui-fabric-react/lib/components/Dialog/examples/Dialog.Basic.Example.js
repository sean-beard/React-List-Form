"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var Dialog_1 = require("office-ui-fabric-react/lib/Dialog");
var Button_1 = require("office-ui-fabric-react/lib/Button");
var ChoiceGroup_1 = require("office-ui-fabric-react/lib/ChoiceGroup");
require("./Dialog.Basic.Example.scss");
var DialogBasicExample = (function (_super) {
    tslib_1.__extends(DialogBasicExample, _super);
    function DialogBasicExample() {
        var _this = _super.call(this) || this;
        _this.state = {
            hideDialog: true
        };
        return _this;
    }
    DialogBasicExample.prototype.render = function () {
        return (React.createElement("div", null,
            React.createElement(Button_1.DefaultButton, { description: 'Opens the Sample Dialog', onClick: this._showDialog.bind(this), text: 'Open Dialog' }),
            React.createElement("label", { id: 'myLabelId', className: 'screenReaderOnly' }, "My sample Label"),
            React.createElement("label", { id: 'mySubTextId', className: 'screenReaderOnly' }, "My Sample description"),
            React.createElement(Dialog_1.Dialog, { hidden: this.state.hideDialog, onDismiss: this._closeDialog.bind(this), dialogContentProps: {
                    type: Dialog_1.DialogType.normal,
                    title: 'All emails together',
                    subText: 'Your Inbox has changed. No longer does it include favorites, it is a singular destination for your emails.'
                }, modalProps: {
                    titleAriaId: 'myLabelId',
                    subtitleAriaId: 'mySubTextId',
                    isBlocking: false,
                    containerClassName: 'ms-dialogMainOverride'
                } },
                React.createElement(ChoiceGroup_1.ChoiceGroup, { options: [
                        {
                            key: 'A',
                            text: 'Option A'
                        },
                        {
                            key: 'B',
                            text: 'Option B',
                            checked: true
                        },
                        {
                            key: 'C',
                            text: 'Option C',
                            disabled: true
                        }
                    ], onChange: this._onChoiceChanged }),
                null /** You can also include null values as the result of conditionals */,
                React.createElement(Dialog_1.DialogFooter, null,
                    React.createElement(Button_1.PrimaryButton, { onClick: this._closeDialog.bind(this), text: 'Save' }),
                    React.createElement(Button_1.DefaultButton, { onClick: this._closeDialog.bind(this), text: 'Cancel' })))));
    };
    DialogBasicExample.prototype._showDialog = function () {
        this.setState({ hideDialog: false });
    };
    DialogBasicExample.prototype._closeDialog = function () {
        this.setState({ hideDialog: true });
    };
    DialogBasicExample.prototype._onChoiceChanged = function () {
        console.log('Choice option change');
    };
    return DialogBasicExample;
}(React.Component));
exports.DialogBasicExample = DialogBasicExample;

//# sourceMappingURL=Dialog.Basic.Example.js.map
