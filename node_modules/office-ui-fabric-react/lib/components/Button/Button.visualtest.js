"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var VisualTest_1 = require("../../common/VisualTest");
var RunVisualTest_1 = require("../../visualtest/RunVisualTest");
var componentIds = [];
componentIds.push({
    selector: '#' + 'DefaultButton',
    fileName: 'buttonDefault',
    commands: [RunVisualTest_1.defaultScreenshot, RunVisualTest_1.mouseClickScreenshot, RunVisualTest_1.mouseDownScreenshot, RunVisualTest_1.mouseMoveScreenshot]
});
componentIds.push({
    selector: '#' + 'DefaultButtonDisabled',
    fileName: 'buttonDefaultDisabled',
    commands: [RunVisualTest_1.defaultScreenshot]
});
componentIds.push({
    selector: '#' + 'DefaultButtonChecked',
    fileName: 'buttonDefaultChecked',
    commands: [RunVisualTest_1.defaultScreenshot]
});
componentIds.push({
    selector: '#' + 'PrimaryButton',
    fileName: 'buttonPrimary',
    commands: [RunVisualTest_1.defaultScreenshot, RunVisualTest_1.mouseClickScreenshot, RunVisualTest_1.mouseDownScreenshot, RunVisualTest_1.mouseMoveScreenshot]
});
componentIds.push({
    selector: '#' + 'PrimaryButtonDisabled',
    fileName: 'buttonPrimaryDisabled',
    commands: [RunVisualTest_1.defaultScreenshot]
});
componentIds.push({
    selector: '#' + 'PrimaryButtonChecked',
    fileName: 'buttonPrimaryChecked',
    commands: [RunVisualTest_1.defaultScreenshot]
});
componentIds.push({
    selector: '#' + 'CommandButton',
    fileName: 'buttonCommand',
    commands: [RunVisualTest_1.defaultScreenshot, RunVisualTest_1.mouseDownScreenshot, RunVisualTest_1.mouseMoveScreenshot, RunVisualTest_1.mouseClickScreenshot]
});
componentIds.push({
    selector: '#' + 'CommandButtonDisabled',
    fileName: 'buttonCommandDisabled',
    commands: [RunVisualTest_1.defaultScreenshot]
});
componentIds.push({
    selector: '#' + 'CommandButtonChecked',
    fileName: 'buttonCommandChecked',
    commands: [RunVisualTest_1.defaultScreenshot]
});
componentIds.push({
    selector: '#' + 'CompoundButton',
    fileName: 'buttonCompound',
    commands: [RunVisualTest_1.defaultScreenshot, RunVisualTest_1.mouseClickScreenshot, RunVisualTest_1.mouseDownScreenshot, RunVisualTest_1.mouseMoveScreenshot]
});
componentIds.push({
    selector: '#' + 'CompoundButtonDisabled',
    fileName: 'buttonCompoundDisabled',
    commands: [RunVisualTest_1.defaultScreenshot]
});
componentIds.push({
    selector: '#' + 'CompoundButtonChecked',
    fileName: 'buttonCompoundChecked',
    commands: [RunVisualTest_1.defaultScreenshot]
});
componentIds.push({
    selector: '#' + 'ContextualButton',
    fileName: 'buttonContextual',
    commands: [RunVisualTest_1.defaultScreenshot, RunVisualTest_1.mouseClickScreenshot, RunVisualTest_1.mouseDownScreenshot, RunVisualTest_1.mouseMoveScreenshot]
});
componentIds.push({
    selector: '#' + 'ContextualButton',
    fileName: 'buttonContextual',
    commands: [RunVisualTest_1.mouseSingleClickScreenshot],
    childParams: {
        selector: '.' + 'ms-ContextualMenu-list',
        fileName: 'buttonContextualMenu',
        commands: [RunVisualTest_1.defaultScreenshot]
    }
});
componentIds.push({
    selector: '#' + 'ContextualButtonChecked',
    fileName: 'buttonContextualChecked',
    commands: [RunVisualTest_1.defaultScreenshot, RunVisualTest_1.mouseClickScreenshot, RunVisualTest_1.mouseDownScreenshot, RunVisualTest_1.mouseMoveScreenshot]
});
casper.
    start(VisualTest_1.baseUrl + 'button').
    then(function () {
    RunVisualTest_1.testRunner(componentIds);
});
casper.run(function () { casper.test.done(); });

//# sourceMappingURL=Button.visualtest.js.map
