"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var index_1 = require("./index");
/* tslint:disable:no-unused-variable */
var React = require("react");
/* tslint:enable:no-unused-variable */
var ButtonVPage = (function (_super) {
    tslib_1.__extends(ButtonVPage, _super);
    function ButtonVPage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ButtonVPage.prototype.render = function () {
        var iconName = 'Snow';
        return React.createElement("div", null,
            React.createElement("div", null,
                React.createElement("label", null, " Default Button:   "),
                React.createElement(index_1.DefaultButton, { id: 'DefaultButton', icon: 'Add', text: 'Default Button' })),
            React.createElement("div", null,
                React.createElement("label", null, " Default Button Disabled:   "),
                "\u00A0",
                React.createElement(index_1.DefaultButton, { id: 'DefaultButtonDisabled', disabled: true, icon: 'Add', text: 'Default Button' })),
            "\u00A0",
            React.createElement("div", null,
                React.createElement("label", null, " Default Button Checked:   "),
                React.createElement(index_1.DefaultButton, { id: 'DefaultButtonChecked', icon: 'Add', checked: true, text: 'Default Button' })),
            "\u00A0",
            React.createElement("div", { style: { backgroundColor: 'white' } },
                React.createElement(index_1.IconButton, { id: 'IconButton', iconProps: { iconName: iconName } })),
            "\u00A0",
            React.createElement("div", { style: { backgroundColor: 'white' } },
                React.createElement(index_1.IconButton, { id: 'IconButtonChecked', checked: true, iconProps: { iconName: iconName } })),
            "\u00A0",
            React.createElement("div", { style: { backgroundColor: 'white' } },
                React.createElement(index_1.CommandButton, { id: 'CommandButton', icon: 'AddFriend', text: 'Command Button' })),
            "\u00A0",
            React.createElement("div", { style: { backgroundColor: 'white' } },
                React.createElement(index_1.CommandButton, { id: 'CommandButtonDisabled', icon: 'AddFriend', disabled: true, text: 'Command Button' })),
            "\u00A0",
            React.createElement("div", { style: { backgroundColor: 'white' } },
                React.createElement(index_1.CommandButton, { id: 'CommandButtonChecked', checked: true, icon: 'AddFriend', text: 'Command Button' })),
            "\u00A0",
            React.createElement("div", null,
                React.createElement(index_1.CompoundButton, { id: 'CompoundButton', description: 'You can create a new account here.', text: 'Compound Button' })),
            "\u00A0",
            React.createElement("div", null,
                React.createElement(index_1.CompoundButton, { id: 'CompoundButtonDisabled', disabled: true, description: 'You can create a new account here.', text: 'Compound Button' })),
            "\u00A0",
            React.createElement("div", null,
                React.createElement(index_1.CompoundButton, { id: 'CompoundButtonChecked', checked: true, description: 'You can create a new account here.', text: 'Compound Button' })),
            "\u00A0",
            React.createElement("div", null,
                React.createElement(index_1.PrimaryButton, { id: 'PrimaryButton', icon: 'Add', text: 'Primary Button' })),
            "\u00A0",
            React.createElement("div", null,
                React.createElement(index_1.PrimaryButton, { id: 'PrimaryButtonDisabled', disabled: true, icon: 'Add', text: 'Primary Button' })),
            "\u00A0",
            React.createElement("div", null,
                React.createElement(index_1.PrimaryButton, { id: 'PrimaryButtonToggled', checked: true, icon: 'Add', text: 'Primary Button' })),
            "\u00A0",
            React.createElement("div", null,
                React.createElement(index_1.DefaultButton, { id: 'ContextualButton', disabled: false, icon: 'Add', text: 'New', menuProps: {
                        className: 'ContextualButtonMenu',
                        id: 'ContextualButtonMenu',
                        items: [
                            {
                                key: 'emailMessage',
                                name: 'Email message',
                                icon: 'Mail'
                            },
                            {
                                key: 'calendarEvent',
                                name: 'Calendar event',
                                icon: 'Calendar'
                            }
                        ]
                    } }),
                React.createElement(index_1.DefaultButton, { id: 'ContextualButtonToggled', checked: true, icon: 'Add', text: 'New', menuProps: {
                        className: 'ContextualButtonMenu',
                        id: 'ContextualButtonMenu',
                        items: [
                            {
                                key: 'emailMessage',
                                name: 'Email message',
                                icon: 'Mail'
                            },
                            {
                                key: 'calendarEvent',
                                name: 'Calendar event',
                                icon: 'Calendar'
                            }
                        ]
                    } })));
    };
    return ButtonVPage;
}(React.Component));
exports.default = ButtonVPage;

//# sourceMappingURL=ButtonPage.visualtest.js.map
