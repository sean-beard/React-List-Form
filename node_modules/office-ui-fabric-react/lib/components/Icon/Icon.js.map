{"version":3,"sources":["components/Icon/Icon.tsx"],"names":[],"mappings":";;;AAAA,oBAAoB;AACpB,6BAA+B;AAC/B,mBAAmB;AAEnB,2CAAoD;AACpD,wCAAuC;AACvC,6CAIyB;AACzB,yCAA0C;AAC1C,6CAA0C;AAE1C,cAAqB,KAAiB;IAElC,IAAA,2BAAS,EACT,2BAAS,EACT,2BAAoB,EACpB,yBAAQ,CACC;IACX,IAAI,MAAM,GAAG,uBAAS,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;IAEhD,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,KAAK,qBAAQ,CAAC,KAAK,IAAI,KAAK,CAAC,QAAQ,KAAK,qBAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;QAC3E,IAAI,kBAAkB,GAAG,eAAG,CAC1B,SAAS,EACT,wBAAwB,EACxB,MAAM,CAAC,IAAI,EACX,MAAM,CAAC,cAAc,EACrB,SAAS,CACV,CAAC;QAEF,MAAM,CAAC,CACL,6BAAK,SAAS,EACZ,eAAG,CACD,kBAAkB,EAClB,MAAM,CAAC,IAAI,CACZ;YAED,oBAAC,aAAK,uBAAM,KAAK,CAAC,UAAiB,EAAK,CACpC,CACP,CAAC;IACJ,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,IAAI,cAAc,GAAG,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;QAE3F,MAAM,CAAC,CACL,0DACe,SAAS,IACjB,CAAC,SAAS,GAAG,EAAE,GAAG;YACrB,IAAI,EAAE,cAAc;YACpB,aAAa,EAAE,IAAI;YACnB,gBAAgB,EAAE,QAAQ;SAC3B,CAAC,EACG,0BAAc,CAAC,KAAK,EAAE,iCAAqB,CAAC,IACjD,SAAS,EACP,eAAG,CACD,SAAS,EACT,MAAM,CAAC,IAAI,EACX,KAAK,CAAC,SAAS,CAChB,KAEA,mBAAiB,CAAC,cAAc,CAAC,CAClC,CACL,CAAC;IACJ,CAAC;AACH,CAAC;AAnDD,oBAmDC","file":"components/Icon/Icon.js","sourcesContent":["/* tslint:disable */\r\nimport * as React from 'react';\r\n/* tslint:enable */\r\n\r\nimport { IIconProps, IconType } from './Icon.Props';\r\nimport { Image } from '../Image/Image';\r\nimport {\r\n  css,\r\n  getNativeProps,\r\n  htmlElementProperties\r\n} from '../../Utilities';\r\nimport { IconCodes } from '../../Styling';\r\nimport { getStyles } from './Icon.styles';\r\n\r\nexport function Icon(props: IIconProps): JSX.Element {\r\n  let {\r\n    ariaLabel,\r\n    className,\r\n    styles: customStyles,\r\n    iconName\r\n   } = props;\r\n  let styles = getStyles(undefined, customStyles);\r\n\r\n  if (props.iconType === IconType.image || props.iconType === IconType.Image) {\r\n    let containerClassName = css(\r\n      'ms-Icon',\r\n      'ms-Icon-imageContainer',\r\n      styles.root,\r\n      styles.imageContainer,\r\n      className\r\n    );\r\n\r\n    return (\r\n      <div className={\r\n        css(\r\n          containerClassName,\r\n          styles.root\r\n        ) }\r\n      >\r\n        <Image { ...props.imageProps as any } />\r\n      </div>\r\n    );\r\n  } else {\r\n    let iconMemberName = iconName ? iconName.charAt(0).toLowerCase() + iconName.substr(1) : '';\r\n\r\n    return (\r\n      <i\r\n        aria-label={ ariaLabel }\r\n        { ...(ariaLabel ? {} : {\r\n          role: 'presentation',\r\n          'aria-hidden': true,\r\n          'data-icon-name': iconName,\r\n        }) }\r\n        { ...getNativeProps(props, htmlElementProperties) }\r\n        className={\r\n          css(\r\n            'ms-Icon',\r\n            styles.root,\r\n            props.className\r\n          ) }\r\n      >\r\n        { (IconCodes as any)[iconMemberName] }\r\n      </i>\r\n    );\r\n  }\r\n}"],"sourceRoot":"..\\..\\..\\src"}