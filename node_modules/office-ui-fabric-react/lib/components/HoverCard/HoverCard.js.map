{"version":3,"sources":["components/HoverCard/HoverCard.tsx"],"names":[],"mappings":"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","file":"components/HoverCard/HoverCard.js","sourcesContent":["/* tslint:disable:no-unused-variable */\r\nimport * as React from 'react';\r\n/* tslint:enable:no-unused-variable */\r\nimport {\r\n  BaseComponent,\r\n  autobind,\r\n  css,\r\n  divProperties,\r\n  getNativeProps,\r\n  getId\r\n} from '../../Utilities';\r\nimport { IHoverCardProps, IHoverCardStyles } from './HoverCard.Props';\r\nimport { ExpandingCard } from './ExpandingCard';\r\nimport { ExpandingCardMode } from './ExpandingCard.Props';\r\n\r\nimport { getStyles } from './HoverCard.styles';\r\n\r\nexport interface IHoverCardState {\r\n  isHoverCardVisible: boolean;\r\n  mode: ExpandingCardMode;\r\n}\r\n\r\nexport class HoverCard extends BaseComponent<IHoverCardProps, IHoverCardState> {\r\n  public static defaultProps = {\r\n    cardOpenDelay: 500,\r\n    cardDismissDelay: 100,\r\n    expandedCardOpenDelay: 1500,\r\n    instantOpenOnClick: false\r\n  };\r\n\r\n  // The wrapping div that gets the hover events\r\n  private _hoverCard: HTMLElement;\r\n  private _dismissTimerId: number;\r\n  private _openTimerId: number;\r\n\r\n  private _styles: IHoverCardStyles;\r\n\r\n  // Constructor\r\n  constructor(props: IHoverCardProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isHoverCardVisible: false,\r\n      mode: ExpandingCardMode.compact\r\n    };\r\n  }\r\n\r\n  public componentDidMount() {\r\n    const target = this._getTargetElement();\r\n\r\n    this._events.on(target, 'mouseenter', this._cardOpen);\r\n    this._events.on(target, 'mouseleave', this._cardDismiss);\r\n    this._events.on(target, 'focus', this._cardOpen);\r\n    this._events.on(target, 'blur', this._cardDismiss);\r\n    this.props.instantOpenOnClick && this._events.on(target, 'click', this._instantOpenExpanded);\r\n  }\r\n\r\n  public componentWillUpdate(newProps: IHoverCardProps, newState: IHoverCardState) {\r\n    if (newState.isHoverCardVisible !== this.state.isHoverCardVisible) {\r\n      if (newState.isHoverCardVisible) {\r\n        this._async.setTimeout(() => {\r\n          this.setState({\r\n            mode: ExpandingCardMode.expanded\r\n          });\r\n        }, this.props.expandedCardOpenDelay!);\r\n      } else {\r\n        this.setState({\r\n          mode: ExpandingCardMode.compact\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  // Render\r\n  public render() {\r\n    const {\r\n      expandingCardProps,\r\n      children,\r\n      id,\r\n      instantOpenOnClick,\r\n      setAriaDescribedBy = true,\r\n      styles: customStyles\r\n    } = this.props;\r\n    const { isHoverCardVisible, mode } = this.state;\r\n    const hoverCardId = id || getId('hoverCard');\r\n\r\n    this._styles = getStyles(customStyles);\r\n\r\n    let onClick;\r\n    if (instantOpenOnClick) {\r\n      onClick = this._instantOpenExpanded;\r\n    }\r\n    return (\r\n      <div\r\n        className={ css(this._styles.host) }\r\n        ref={ this._resolveRef('_hoverCard') }\r\n        aria-describedby={ setAriaDescribedBy && isHoverCardVisible ? hoverCardId : undefined }\r\n      >\r\n        { children }\r\n        { isHoverCardVisible &&\r\n          <ExpandingCard\r\n            { ...getNativeProps(this.props, divProperties) }\r\n            id={ hoverCardId }\r\n            targetElement={ this._getTargetElement() }\r\n            onEnter={ this._cardOpen }\r\n            onLeave={ this._cardDismiss }\r\n            mode={ mode }\r\n            { ...expandingCardProps }\r\n          />\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _getTargetElement(): HTMLElement {\r\n    return this.props.target ? this.props.target : this._hoverCard;\r\n  }\r\n\r\n  // Show HoverCard\r\n  @autobind\r\n  private _cardOpen(ev: MouseEvent) {\r\n    this._async.clearTimeout(this._dismissTimerId);\r\n\r\n    this._openTimerId = this._async.setTimeout(() => {\r\n      if (!this.state.isHoverCardVisible) {\r\n        this.setState({\r\n          isHoverCardVisible: true,\r\n          mode: ExpandingCardMode.compact\r\n        });\r\n      }\r\n    }, this.props.cardOpenDelay!);\r\n  }\r\n\r\n  // Hide HoverCard\r\n  @autobind\r\n  private _cardDismiss(ev: MouseEvent) {\r\n    const { type, x, y } = ev;\r\n    this._async.clearTimeout(this._openTimerId);\r\n\r\n    this._dismissTimerId = this._async.setTimeout(() => {\r\n      if (!(this.props.sticky && type === 'mouseleave')) {\r\n        const rect = this._hoverCard.getBoundingClientRect();\r\n        // handle the case when dismiss is called by target when cursor moves towards the card.\r\n        const isInsideCard: boolean = x <= rect.right && x >= rect.left && y >= rect.top;\r\n        if (!isInsideCard) {\r\n          this.setState({\r\n            isHoverCardVisible: false,\r\n            mode: ExpandingCardMode.compact\r\n          });\r\n        }\r\n      }\r\n    }, this.props.cardDismissDelay!);\r\n  }\r\n\r\n  // Instant Open the card in Expanded mode\r\n  @autobind\r\n  private _instantOpenExpanded(ev: React.MouseEvent<HTMLDivElement>) {\r\n    this.setState({\r\n      isHoverCardVisible: true,\r\n      mode: ExpandingCardMode.expanded\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}