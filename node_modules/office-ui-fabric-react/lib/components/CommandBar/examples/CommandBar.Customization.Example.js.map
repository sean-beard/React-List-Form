{"version":3,"sources":["components/CommandBar/examples/CommandBar.Customization.Example.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,4DAAkE;AAClE,oEAAmE;AACnE,kEAAsE;AACtE,kDAAqD;AAOrD;IAAoD,0DAA8C;IAGhG,wCAAY,KAAS;QAArB,YACE,kBAAM,KAAK,CAAC,SAEb;QADC,KAAI,CAAC,KAAK,GAAG,EAAE,kBAAkB,EAAE,KAAK,EAAE,CAAC;;IAC7C,CAAC;IAEM,+CAAM,GAAb;QACE,MAAM,CAAC,CACL;YACE,oBAAC,uBAAU,IACT,kBAAkB,EAAG,KAAK,EAC1B,KAAK,EACH;oBACE;wBACE,GAAG,EAAE,KAAK;wBACV,IAAI,EAAE,KAAK;wBACX,QAAQ,EAAE,IAAI,CAAC,0BAA0B;wBACzC,SAAS,EAAE,mBAAmB;wBAC9B,YAAY,EAAE;4BACZ,KAAK,EAAE;;wCAEH,GAAG,EAAE,cAAc;wCACnB,IAAI,EAAE,eAAe;wCACrB,IAAI,EAAE,MAAM;;oCACZ,GAAC,oBAAoB,IAAG,gBAAgB;;;wCAGxC,GAAG,EAAE,eAAe;wCACpB,IAAI,EAAE,gBAAgB;wCACtB,IAAI,EAAE,UAAU;;oCAChB,GAAC,oBAAoB,IAAG,mBAAmB;;6BAE9C;yBACF;qBACF;iBACF,GAEH,CACE,CACP,CAAC;;IACJ,CAAC;IAGO,mEAA0B,GAAlC,UAAmC,IAAyB;QAD5D,iBAmCC;QAjCC,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,IAAI,MAAM,CAAC,QAAQ,CAAC;QAEhE,IAAI,mBAAmB,GAAG,eAAG,CAC3B,MAAM,CAAC,MAAM,EACb,QAAQ,CACT,CAAC;QACF,IAAI,gBAAgB,GAAG,eAAG,CACxB,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,2BAA2B,CAAC,EAC3C,MAAM,CAAC,MAAM,EACb,QAAQ,CACT,CAAC;QAEF,MAAM,CAAC,CACL;YACE,6BAAK,SAAS,EAAG,eAAG,CAClB,MAAM,CAAC,qBAAqB,EAC5B,QAAQ,CACT,EAAG,GAAG,EAAG,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,SAAS,GAAG,GAAI,EAArB,CAAqB;gBACpC,oBAAC,sBAAa,IACZ,SAAS,EAAG,gBAAgB,EAC5B,SAAS,EAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,EAC/B,IAAI,EAAC,KAAK,GAAG;gBACf,8BAAM,SAAS,EAAG,MAAM,CAAC,QAAQ,QAAW;gBAC5C,oBAAC,sBAAa,IACZ,OAAO,EAAG,IAAI,CAAC,cAAc,EAC7B,SAAS,EAAG,mBAAmB,EAC/B,SAAS,EAAG;wBACV,SAAS,EAAE,eAAG,CAAC,wBAAwB,CAAC;wBACxC,KAAK,EAAE,IAAI,CAAC,YAAa,CAAC,KAAK;qBAChC,GAAK,CACJ,CACD,CACR,CAAC;IACJ,CAAC;IAGO,uDAAc,GAAtB,UAAuB,EAAO;QAC5B,EAAE,CAAC,eAAe,EAAE,CAAC;QACrB,IAAI,CAAC,uBAAuB,CAAC,EAAE,CAAC,CAAC;IACnC,CAAC;IAGO,gEAAuB,GAA/B,UAAgC,EAAO;QACrC,IAAI,CAAC,QAAQ,CAAC;YACZ,kBAAkB,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,kBAAkB;SACnD,CAAC,CAAC;IACL,CAAC;IA/CD;QADC,oBAAQ;oFAmCR;IAGD;QADC,oBAAQ;wEAIR;IAGD;QADC,oBAAQ;iFAKR;IACH,qCAAC;CA7FD,AA6FC,CA7FmD,KAAK,CAAC,SAAS,GA6FlE;AA7FY,wEAA8B","file":"components/CommandBar/examples/CommandBar.Customization.Example.js","sourcesContent":["import * as React from 'react';\r\nimport { CommandButton } from 'office-ui-fabric-react/lib/Button';\r\nimport { CommandBar } from 'office-ui-fabric-react/lib/CommandBar';\r\nimport { css, autobind, } from 'office-ui-fabric-react/lib/Utilities';\r\nimport styles = require('./CommandBar.Example.scss');\r\nimport { IContextualMenuItem } from '../../ContextualMenu';\r\n\r\nexport interface ISplitDropDownButtonState {\r\n  isContextMenuShown: boolean;\r\n}\r\n\r\nexport class CommandBarCustomizationExample extends React.Component<{}, ISplitDropDownButtonState> {\r\n  private container: HTMLElement;\r\n\r\n  constructor(props: {}) {\r\n    super(props);\r\n    this.state = { isContextMenuShown: false };\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div>\r\n        <CommandBar\r\n          isSearchBoxVisible={ false }\r\n          items={\r\n            [\r\n              {\r\n                key: 'new',\r\n                name: 'Add',\r\n                onRender: this._renderSplitButtonMenuItem,\r\n                className: 'ms-CommandBarItem',\r\n                subMenuProps: {\r\n                  items: [\r\n                    {\r\n                      key: 'emailMessage',\r\n                      name: 'Email message',\r\n                      icon: 'Mail',\r\n                      ['data-automation-id']: 'newEmailButton'\r\n                    },\r\n                    {\r\n                      key: 'calendarEvent',\r\n                      name: 'Calendar event',\r\n                      icon: 'Calendar',\r\n                      ['data-automation-id']: 'newCalendarButton'\r\n                    }\r\n                  ],\r\n                },\r\n              },\r\n            ]\r\n          }\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  private _renderSplitButtonMenuItem(item: IContextualMenuItem) {\r\n    let darkerBG = this.state.isContextMenuShown && styles.darkerBG;\r\n\r\n    let dropDownButtonClass = css(\r\n      styles.button,\r\n      darkerBG\r\n    );\r\n    let mainBtnClassName = css(\r\n      !item.name && ('ms-CommandBarItem--noName'),\r\n      styles.button,\r\n      darkerBG\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        <div className={ css(\r\n          styles.customButtonContainer,\r\n          darkerBG\r\n        ) } ref={ ref => this.container = ref! }>\r\n          <CommandButton\r\n            className={ mainBtnClassName }\r\n            iconProps={ { iconName: 'Add' } }\r\n            text='New' />\r\n          <span className={ styles.splitter }>|</span>\r\n          <CommandButton\r\n            onClick={ this.onClickChevron }\r\n            className={ dropDownButtonClass }\r\n            menuProps={ {\r\n              className: css('ms-CommandBar-menuHost'),\r\n              items: item.subMenuProps!.items\r\n            } } />\r\n        </div>\r\n      </div >\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  private onClickChevron(ev: any) {\r\n    ev.stopPropagation();\r\n    this.toggleDropDownMenuShown(ev);\r\n  }\r\n\r\n  @autobind\r\n  private toggleDropDownMenuShown(ev: any) {\r\n    this.setState({\r\n      isContextMenuShown: !this.state.isContextMenuShown\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\src"}