{"version":3,"sources":["components/Breadcrumb/Breadcrumb.tsx"],"names":[],"mappings":"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","file":"components/Breadcrumb/Breadcrumb.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  autobind,\r\n  css,\r\n  getRTL\r\n} from '../../Utilities';\r\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\r\nimport { Link } from '../../Link';\r\nimport { Icon } from '../../Icon';\r\nimport { IconButton } from '../../Button';\r\nimport { IBreadcrumbProps, IBreadcrumbItem } from './Breadcrumb.Props';\r\nimport { DirectionalHint } from '../../common/DirectionalHint';\r\nimport { ResizeGroup } from '../../ResizeGroup';\r\nimport { TooltipHost, TooltipOverflowMode } from '../../Tooltip';\r\n\r\nimport * as stylesImport from './Breadcrumb.scss';\r\nconst styles: any = stylesImport;\r\n\r\nexport interface IBreadCrumbData {\r\n  props: IBreadcrumbProps;\r\n  renderedItems: IBreadcrumbItem[];\r\n  renderedOverflowItems: IBreadcrumbItem[];\r\n}\r\n\r\nconst OVERFLOW_KEY = 'overflow';\r\n\r\nexport class Breadcrumb extends BaseComponent<IBreadcrumbProps, any> {\r\n  public static defaultProps: IBreadcrumbProps = {\r\n    items: [],\r\n    maxDisplayedItems: 999\r\n  };\r\n\r\n  private _id: string;\r\n\r\n  constructor(props: IBreadcrumbProps) {\r\n    super(props);\r\n  }\r\n\r\n  public render() {\r\n    const { onReduceData = this._onReduceData, maxDisplayedItems, items } = this.props;\r\n    const breadCrumbData: IBreadCrumbData = {\r\n      props: this.props,\r\n      renderedItems: items.slice(-maxDisplayedItems!),\r\n      renderedOverflowItems: items.slice(0, -maxDisplayedItems!)\r\n    };\r\n\r\n    return (\r\n      <ResizeGroup\r\n        onRenderData={ this._onRenderBreadcrumb }\r\n        onReduceData={ onReduceData }\r\n        data={ breadCrumbData }\r\n      />\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  private _onReduceData(data: IBreadCrumbData): IBreadCrumbData | undefined {\r\n    let { renderedItems, renderedOverflowItems } = data;\r\n    let movedItem = renderedItems[0];\r\n    renderedItems = renderedItems.slice(1);\r\n\r\n    renderedOverflowItems = [...renderedOverflowItems, movedItem];\r\n\r\n    if (movedItem !== undefined) {\r\n      return { ...data, renderedItems, renderedOverflowItems };\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onRenderBreadcrumb(data: IBreadCrumbData) {\r\n    let { className, ariaLabel, items, onRenderItem = this._onRenderItem } = data.props;\r\n    let { renderedOverflowItems, renderedItems } = data;\r\n\r\n    let contextualItems = renderedOverflowItems.map(\r\n      (item, index) => ({\r\n        name: item.text,\r\n        key: item.key,\r\n        onClick: item.onClick ? this._onBreadcrumbClicked.bind(this, item) : null,\r\n        href: item.href\r\n      })\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={ css('ms-Breadcrumb', className, styles.root) }\r\n        ref='renderingArea'\r\n        role='navigation'\r\n        aria-label={ ariaLabel }\r\n      >\r\n        <FocusZone direction={ FocusZoneDirection.horizontal } >\r\n          <ol className={ css('ms-Breadcrumb-list', styles.list) }>\r\n            { renderedOverflowItems && renderedOverflowItems.length !== 0 && (\r\n              <li className={ css('ms-Breadcrumb-overflow', styles.overflow) } key={ OVERFLOW_KEY } ref={ OVERFLOW_KEY }>\r\n                <IconButton\r\n                  className={ css('ms-Breadcrumb-overflowButton', styles.overflowButton) }\r\n                  iconProps={ { iconName: 'More' } }\r\n                  role='button'\r\n                  aria-haspopup='true'\r\n                  menuIconProps={ undefined }\r\n                  menuProps={ {\r\n                    items: contextualItems,\r\n                    directionalHint: DirectionalHint.bottomLeftEdge\r\n                  } }\r\n                />\r\n                { Icon({\r\n                  className: css('ms-Breadcrumb-chevron', styles.chevron),\r\n                  iconName: getRTL() ? 'ChevronLeft' : 'ChevronRight'\r\n                }) }\r\n              </li>\r\n            ) }\r\n            { renderedItems.map(\r\n              (item, index) => (\r\n                <li className={ css('ms-Breadcrumb-listItem', styles.listItem) } key={ item.key || String(index) } ref={ item.key || String(index) }>\r\n                  { onRenderItem(item, this._onRenderItem) }\r\n                  <Icon\r\n                    className={ css('ms-Breadcrumb-chevron', styles.chevron) }\r\n                    iconName={ getRTL() ? 'ChevronLeft' : 'ChevronRight' } />\r\n                </li>\r\n              )) }\r\n          </ol>\r\n        </FocusZone>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  private _onRenderItem(item: IBreadcrumbItem) {\r\n    if (item.onClick || item.href) {\r\n      return (\r\n        <Link\r\n          className={ css('ms-Breadcrumb-itemLink', styles.itemLink) }\r\n          href={ item.href }\r\n          aria-current={ item.isCurrentItem ? 'page' : null }\r\n          onClick={ this._onBreadcrumbClicked.bind(this, item) }>\r\n          <TooltipHost\r\n            content={ item.text }\r\n            overflowMode={ TooltipOverflowMode.Parent }\r\n          >\r\n            { item.text }\r\n          </TooltipHost>\r\n        </Link>\r\n      );\r\n    } else {\r\n      return (\r\n        <span className={ css('ms-Breadcrumb-item', styles.item) }>\r\n          <TooltipHost\r\n            content={ item.text }\r\n            overflowMode={ TooltipOverflowMode.Parent }\r\n          >\r\n            { item.text }\r\n          </TooltipHost>\r\n        </span>\r\n      );\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onBreadcrumbClicked(item: IBreadcrumbItem, ev: React.MouseEvent<HTMLElement>) {\r\n    if (item.onClick) {\r\n      item.onClick(ev, item);\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}