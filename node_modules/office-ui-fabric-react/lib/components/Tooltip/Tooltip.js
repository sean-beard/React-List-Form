"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/* tslint:disable:no-unused-variable */
var React = require("react");
/* tslint:enable:no-unused-variable */
var Utilities_1 = require("../../Utilities");
var Tooltip_Props_1 = require("./Tooltip.Props");
var Callout_1 = require("../../Callout");
var DirectionalHint_1 = require("../../common/DirectionalHint");
var stylesImport = require("./Tooltip.scss");
var styles = stylesImport;
var Styling_1 = require("../../Styling");
var Tooltip = (function (_super) {
    tslib_1.__extends(Tooltip, _super);
    function Tooltip() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Tooltip.prototype.render = function () {
        var _a = this.props, targetElement = _a.targetElement, content = _a.content, calloutProps = _a.calloutProps, directionalHint = _a.directionalHint, directionalHintForRTL = _a.directionalHintForRTL, delay = _a.delay, id = _a.id, _b = _a.onRenderContent, onRenderContent = _b === void 0 ? this._onRenderContent : _b;
        return (React.createElement(Callout_1.Callout, tslib_1.__assign({ className: Utilities_1.css('ms-Tooltip', Styling_1.AnimationClassNames.fadeIn200, styles.root, (_c = {},
                _c[styles.hasMediumDelay] = delay === Tooltip_Props_1.TooltipDelay.medium,
                _c)), targetElement: targetElement, directionalHint: directionalHint, directionalHintForRTL: directionalHintForRTL }, calloutProps, Utilities_1.getNativeProps(this.props, Utilities_1.divProperties)),
            React.createElement("div", { className: Utilities_1.css('ms-Tooltip-content', styles.content), id: id, role: 'tooltip' }, onRenderContent(this.props, this._onRenderContent))));
        var _c;
    };
    Tooltip.prototype._onRenderContent = function (props) {
        return (React.createElement("p", { className: Utilities_1.css('ms-Tooltip-subText', styles.subText) }, props.content));
    };
    // Specify default props values
    Tooltip.defaultProps = {
        directionalHint: DirectionalHint_1.DirectionalHint.topCenter,
        delay: Tooltip_Props_1.TooltipDelay.medium,
        calloutProps: {
            isBeakVisible: true,
            beakWidth: 16,
            gapSpace: 0,
            setInitialFocus: true,
            doNotLayer: false
        }
    };
    return Tooltip;
}(Utilities_1.BaseComponent));
exports.Tooltip = Tooltip;

//# sourceMappingURL=Tooltip.js.map
