{"version":3,"sources":["utilities/grid/Grid.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,6CAIyB;AACzB,6CAA4C;AAI5C;IAA0B,gCAA6B;IAIrD,cAAY,KAAiB;QAA7B,YACE,kBAAM,KAAK,CAAC,SAEb;QADC,KAAI,CAAC,GAAG,GAAG,iBAAK,EAAE,CAAC;;IACrB,CAAC;IAEM,qBAAM,GAAb;QAAA,iBAqDC;QApDK,IAAA,eASU,EARZ,gBAAK,EACL,4BAAW,EACX,8BAAY,EACZ,gCAAa,EACb,oBAAO,EACP,4DAA2B,EAC3B,0CAAkB,EAClB,kBAAM,CACO;QAEf,oDAAoD;QACpD,IAAI,WAAW,GAAY,oBAAQ,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;QAExD,wBAAwB;QACxB,MAAM,CAAC,CACL,oBAAC,qBAAS,IACR,oBAAoB,EAAG,IAAI,CAAC,KAAK,CAAC,2BAA2B,EAC7D,SAAS,EAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,EACzC,MAAM,EAAG,IAAI,CAAC,KAAK,CAAC,MAAM;YAE1B,+BACE,EAAE,EAAG,IAAI,CAAC,GAAG,EACb,IAAI,EAAG,MAAM,mBACG,aAAa,kBACd,OAAO,EACtB,KAAK,EAAG,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE;gBAC3C,mCAEI,WAAW,CAAC,GAAG,CAAC,UAAC,IAAW,EAAE,QAAQ;oBACpC,MAAM,CAAC,CACL,4BACE,IAAI,EAAG,KAAK,EACZ,GAAG,EAAG,KAAI,CAAC,GAAG,GAAG,GAAG,GAAG,QAAQ,GAAG,MAAM,IACtC,IAAI,CAAC,GAAG,CAAC,UAAC,IAAI;wBACd,MAAM,CAAC,CACL,4BACE,IAAI,EAAG,cAAc,EACrB,GAAG,EAAG,KAAI,CAAC,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,KAAK,GAAG,OAAO,EAC3C,KAAK,EAAG,EAAE,OAAO,EAAE,KAAK,EAAE,IACxB,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAC7B,CACN,CAAC;oBACJ,CAAC,CAAC,CACC,CACN,CAAC;gBACJ,CAAC,CAAC,CAEE,CACF,CACE,CACb,CAAC;IACJ,CAAC;IACH,WAAC;AAAD,CA/DA,AA+DC,CA/DyB,yBAAa,GA+DtC;AA/DY,oBAAI","file":"utilities/grid/Grid.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  getId,\r\n  toMatrix\r\n} from '../../Utilities';\r\nimport { FocusZone } from '../../FocusZone';\r\nimport { IGridProps } from './Grid.Props';\r\nimport { GridCell } from './GridCell';\r\n\r\nexport class Grid extends BaseComponent<IGridProps, {}> {\r\n\r\n  private _id: string;\r\n\r\n  constructor(props: IGridProps) {\r\n    super(props);\r\n    this._id = getId();\r\n  }\r\n\r\n  public render() {\r\n    let {\r\n      items,\r\n      columnCount,\r\n      onRenderItem,\r\n      positionInSet,\r\n      setSize,\r\n      shouldFocusCircularNavigate,\r\n      containerClassName,\r\n      onBlur\r\n    } = this.props;\r\n\r\n    // Array to store the cells in the correct row index\r\n    let rowsOfItems: any[][] = toMatrix(items, columnCount);\r\n\r\n    // Create the table/grid\r\n    return (\r\n      <FocusZone\r\n        isCircularNavigation={ this.props.shouldFocusCircularNavigate }\r\n        className={ this.props.containerClassName }\r\n        onBlur={ this.props.onBlur }\r\n      >\r\n        <table\r\n          id={ this._id }\r\n          role={ 'grid' }\r\n          aria-posinset={ positionInSet }\r\n          aria-setsize={ setSize }\r\n          style={ { padding: '2px', outline: 'none' } }>\r\n          <tbody>\r\n            {\r\n              rowsOfItems.map((rows: any[], rowIndex) => {\r\n                return (\r\n                  <tr\r\n                    role={ 'row' }\r\n                    key={ this._id + '-' + rowIndex + '-row' }>\r\n                    { rows.map((cell) => {\r\n                      return (\r\n                        <td\r\n                          role={ 'presentation' }\r\n                          key={ this._id + '-' + cell.index + '-cell' }\r\n                          style={ { padding: '0px' } }>\r\n                          { onRenderItem(cell, cell.index) }\r\n                        </td>\r\n                      );\r\n                    }) }\r\n                  </tr>\r\n                );\r\n              })\r\n            }\r\n          </tbody>\r\n        </table>\r\n      </FocusZone>\r\n    );\r\n  }\r\n}"],"sourceRoot":"..\\..\\..\\src"}