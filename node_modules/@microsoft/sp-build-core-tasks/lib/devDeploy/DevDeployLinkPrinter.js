"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var colors = require("colors");
var os = require("os");
var SpfxServeTask_1 = require("../spfxServe/SpfxServeTask");
var TEST_URL_ENVIRONMENT_VARIABLE = 'dev_deploy_url';
/**
 * Prints out a link to a page where you can test your changes. Note that loaderUrl and debugManifestFile
 * should both be fully qualified URLs. If the dev_deploy_url environment variable is not set,
 * advice is given on how to set it and the query parameters & hash are printed separately.
 */
// tslint:disable-next-line:export-name
function printDevDeployLink(log, loaderUrl, debugManifestUrl) {
    var queryParameters = new Map();
    queryParameters.set('debug', 'true').set('noredir', 'true');
    if (loaderUrl) {
        queryParameters.set('moduleLoader', loaderUrl);
    }
    if (debugManifestUrl) {
        queryParameters.set(SpfxServeTask_1.DEBUG_MANIFESTS_QUERY_PARAMETER, debugManifestUrl);
    }
    var deployUrl = process.env[TEST_URL_ENVIRONMENT_VARIABLE];
    if (!deployUrl) {
        _printHelperMessage(log, queryParameters);
    }
    else {
        _printDeployString(log, deployUrl, queryParameters);
    }
}
exports.printDevDeployLink = printDevDeployLink;
function _printHelperMessage(log, queryParameters) {
    var message = "For an improved debugging experience, please set the " +
        ("'" + TEST_URL_ENVIRONMENT_VARIABLE + "' environment variable to the URL of the page you are") +
        " testing.";
    log(colors.yellow(message));
    log(_getAdvice());
    log(colors.yellow('Debug query parameters:') + " \"" + _concatenateQueryParams(queryParameters) + "\"");
}
function _getAdvice() {
    var sampleTestPageUrl = 'https://contoso.sharepoint.com/SitePages/TestPage.aspx';
    // tslint:disable-next-line:typedef
    var osAdvice = {
        'win32': "For example, in Windows:" + os.EOL +
            colors.yellow("set " + TEST_URL_ENVIRONMENT_VARIABLE + "=" + sampleTestPageUrl),
        'darwin': "For example, in MacOS:" + os.EOL +
            colors.yellow("export " + TEST_URL_ENVIRONMENT_VARIABLE + "=" + sampleTestPageUrl),
        'default': 'Please consult your operating system documentation for information on setting environment variables'
    };
    return osAdvice[process.platform] || osAdvice.default;
}
function _printDeployString(log, deployUrl, queryParams) {
    var testUrl = deployUrl + _concatenateQueryParams(queryParams);
    log(colors.yellow('Test URL:') + " " + testUrl);
}
/**
 * Concatenates the query parameters. Note that no URL escaping is performed
 */
function _concatenateQueryParams(queryParameters) {
    if (!queryParameters.size) {
        return '';
    }
    var queryString = [];
    var firstParameter = true;
    queryParameters.forEach(function (value, key) {
        queryString.push("" + (firstParameter ? '?' : '&') + key + "=" + value);
        firstParameter = false;
    });
    return queryString.join('');
}

//# sourceMappingURL=DevDeployLinkPrinter.js.map
