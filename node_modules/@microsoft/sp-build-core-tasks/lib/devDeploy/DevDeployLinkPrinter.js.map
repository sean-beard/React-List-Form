{"version":3,"sources":["devDeploy/DevDeployLinkPrinter.ts"],"names":[],"mappings":"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","file":"devDeploy/DevDeployLinkPrinter.js","sourcesContent":["import * as colors from 'colors';\r\nimport * as os from 'os';\r\n\r\nimport { DEBUG_MANIFESTS_QUERY_PARAMETER } from '../spfxServe/SpfxServeTask';\r\n\r\nconst TEST_URL_ENVIRONMENT_VARIABLE: string = 'dev_deploy_url';\r\n\r\n/**\r\n * Prints out a link to a page where you can test your changes. Note that loaderUrl and debugManifestFile\r\n * should both be fully qualified URLs. If the dev_deploy_url environment variable is not set,\r\n * advice is given on how to set it and the query parameters & hash are printed separately.\r\n */\r\n// tslint:disable-next-line:export-name\r\nexport function printDevDeployLink(log: (text: string) => void, loaderUrl: string, debugManifestUrl: string): void {\r\n  const queryParameters: Map<string, string> = new Map<string, string>();\r\n  queryParameters.set('debug', 'true').set('noredir', 'true');\r\n  if (loaderUrl) {\r\n    queryParameters.set('moduleLoader', loaderUrl);\r\n  }\r\n\r\n  if (debugManifestUrl) {\r\n    queryParameters.set(DEBUG_MANIFESTS_QUERY_PARAMETER, debugManifestUrl);\r\n  }\r\n\r\n  const deployUrl: string = process.env[TEST_URL_ENVIRONMENT_VARIABLE];\r\n\r\n  if (!deployUrl) {\r\n    _printHelperMessage(log, queryParameters);\r\n  } else {\r\n    _printDeployString(log, deployUrl, queryParameters);\r\n  }\r\n}\r\n\r\nfunction _printHelperMessage(log: (text: string) => void, queryParameters: Map<string, string>): void {\r\n  const message: string = `For an improved debugging experience, please set the ` +\r\n    `'${TEST_URL_ENVIRONMENT_VARIABLE}' environment variable to the URL of the page you are` +\r\n    ` testing.`;\r\n\r\n  log(colors.yellow(message));\r\n  log(_getAdvice());\r\n\r\n  log(`${colors.yellow('Debug query parameters:')} \"${_concatenateQueryParams(queryParameters)}\"`);\r\n}\r\n\r\nfunction _getAdvice(): string {\r\n  const sampleTestPageUrl: string = 'https://contoso.sharepoint.com/SitePages/TestPage.aspx';\r\n\r\n  // tslint:disable-next-line:typedef\r\n  const osAdvice = {\r\n    'win32': `For example, in Windows:${os.EOL}` +\r\n              colors.yellow(`set ${TEST_URL_ENVIRONMENT_VARIABLE}=${sampleTestPageUrl}`),\r\n    'darwin': `For example, in MacOS:${os.EOL}` +\r\n              colors.yellow(`export ${TEST_URL_ENVIRONMENT_VARIABLE}=${sampleTestPageUrl}`),\r\n    'default': 'Please consult your operating system documentation for information on setting environment variables'\r\n  };\r\n  return osAdvice[process.platform] || osAdvice.default;\r\n}\r\n\r\nfunction _printDeployString(log: (text: string) => void, deployUrl: string, queryParams: Map<string, string>): void {\r\n  const testUrl: string = deployUrl + _concatenateQueryParams(queryParams);\r\n  log(`${colors.yellow('Test URL:')} ${testUrl}`);\r\n}\r\n\r\n/**\r\n * Concatenates the query parameters. Note that no URL escaping is performed\r\n */\r\nfunction _concatenateQueryParams(queryParameters: Map<string, string>): string {\r\n  if (!queryParameters.size) {\r\n    return '';\r\n  }\r\n\r\n  const queryString: string[] = [];\r\n  let firstParameter: boolean = true;\r\n\r\n  queryParameters.forEach((value: string, key: string) => {\r\n    queryString.push(`${firstParameter ? '?' : '&'}${key}=${value}`);\r\n    firstParameter = false;\r\n  });\r\n\r\n  return queryString.join('');\r\n}\r\n"],"sourceRoot":"..\\..\\src"}