/// <reference types="webpack" />
/// <reference types="node" />
import * as Gulp from 'gulp';
import { compiler as webpackCompiler } from 'webpack';
import { GulpTask } from '@microsoft/gulp-core-build';
import { IClientSideComponentManifest } from '@microsoft/sp-module-interfaces';
import { IConfigJson } from './configJson/index';
import { IBundleEntry } from './configureWebpack/ConfigureWebpackTask';
import { IDeployEntry } from './copyAssets/CopyAssetsTask';
import { IExternalProjectMap } from './configureWebpack/ExternalsProcessor';
/**
 * Common properties that are shared between tasks.
 */
export interface IOdspGulpTaskProperties extends IConfigJson {
    /**
     * The webpack stats object for the last-run webpack task.
     */
    webpackStats?: webpackCompiler.Stats;
    /**
     * The webpack stats object for the base bundle.
     */
    initialWebpackStats?: webpackCompiler.Stats;
    /**
     * Memoization of the manifest objects.
     */
    manifests?: {
        [key: string]: IClientSideComponentManifest;
    };
    /**
     * Data describing each bundled entry.
     */
    bundleEntries?: IBundleEntry[];
    /**
     * Data describing each deployed entry
     */
    deployEntries?: IDeployEntry[];
    /**
     * Files discovered for the localized resources specified in config.json
     */
    discoveredLocalizedResources?: {
        [key: string]: ILocaleMap;
    };
    /**
     * The URL to which the manifests.js file has been deployed after running dev-deploy.
     */
    devDeployManifestFileUrl?: string;
    /**
     * The URL to which the module loader, if deployed, has been deployed after running dev-deploy.
     */
    devDeployModuleLoaderUrl?: string;
    /**
     * A list of externals that were specified in config.json that were later bundled.
     */
    bundledExternals?: string[];
    /**
     * A map of linked externals.
     */
    linkedExternals?: IExternalProjectMap;
    /**
     * The name to use in the "library" property of the webpack configuration.
     */
    webpackLibraryName?: string;
    /**
     * If true, webpackLibraryName is the temporary name used in the webpack config when we have multiple
     *  entrypoints. In the post-webpack steps, we need to update the library name to the standard
     *  format in the "define(<name>, ..." function.
     */
    webpackLibraryNameIsTemporary?: boolean;
}
export interface ILocaleMap {
    [locale: string]: string;
}
export interface IResolveResourcesResult {
    locales: string[];
    localizedResourcesToBundle: string[];
}
declare abstract class OdspGulpTask<TASK_CONFIG> extends GulpTask<TASK_CONFIG> {
    private _outputDirectory;
    abstract executeTask(gulp: typeof Gulp, completeCallback: (error?: string) => void): NodeJS.ReadWriteStream | Promise<any> | void;
    readonly npmBuild: boolean;
    readonly properties: IOdspGulpTaskProperties;
    readonly outputDirectory: string;
    getManifest(manifestPath: string): IClientSideComponentManifest;
    getPackageVersion(): string;
    resolveResources(localizedResources: string[], debugLocale: string, singleLocale?: boolean, parentTask?: GulpTask<any>): IResolveResourcesResult;
    private _filterLocales(locales, debugLocale, singleLocale, parentTask);
}
export default OdspGulpTask;
