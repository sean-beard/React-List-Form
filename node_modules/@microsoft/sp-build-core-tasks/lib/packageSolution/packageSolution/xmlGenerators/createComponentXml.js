"use strict";
/**
 * @file createComponentXml.ts
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * Creates an package's Element.Xml for a WebPart or ClientSideSolution
 */
/// <reference path='./xml.d.ts' />
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var XmlGenerator = require("xml");
var serializationOptions_1 = require("./serializationOptions");
function createComponentXml(options, featureId) {
    var xml = {
        Elements: [
            __assign({}, createClientSideComponentElement(options))
        ]
    };
    switch (options.manifest.componentType) {
        case 'WebPart':
            xml.Elements.push({
                Module: createModule(featureId, options)
            });
            break;
        case 'Application':
        case 'Extension':
        case 'Library':
            break;
        default:
            throw new Error("Invalid Component Type: " + options.manifest.componentType);
    }
    xml.Elements.push({
        _attr: {
            xmlns: 'http://schemas.microsoft.com/sharepoint/'
        }
    });
    // @todo Note that the options.id is NOT necessarily the feature ID
    return {
        filename: path.posix.join(featureId, options.manifest.componentType + "_" + options.id + ".xml"),
        xml: XmlGenerator(xml, serializationOptions_1.default)
    };
}
exports.default = createComponentXml;
/**
 * Creates a ClientSideComponent element.
 */
function createClientSideComponentElement(options) {
    return {
        ClientSideComponent: [
            {
                _attr: {
                    Name: options.name,
                    Id: options.id,
                    ComponentManifest: JSON.stringify(options.manifest),
                    Type: options.manifest.componentType,
                    ReturnIfCustomScriptDisabled: !options.requiresCustomScript
                }
            }
        ]
    };
}
/**
 * Creates a Module xml element with all the files.
 */
function createModule(featureId, component) {
    var result = [{
            _attr: {
                Name: component.name,
                Url: '_catalogs/wp',
                List: '113'
            }
        }];
    return result;
}

//# sourceMappingURL=createComponentXml.js.map
