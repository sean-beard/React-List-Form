'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var gulp_core_build_1 = require("@microsoft/gulp-core-build");
var deployToAzure_1 = require("./uploadCDN/deployToAzure");
var DeployAzureStorageTask = (function (_super) {
    __extends(DeployAzureStorageTask, _super);
    function DeployAzureStorageTask() {
        return _super.call(this, 'deploy-azure-storage', {
            uploadPath: '**/*.*'
        }) || this;
    }
    DeployAzureStorageTask.prototype.loadSchema = function () {
        return require('./deploy-azure-storage.schema.json');
    };
    DeployAzureStorageTask.prototype.executeTask = function (gulp, completeCallback) {
        var _this = this;
        if (!this.taskConfig.workingDir) {
            this.taskConfig.workingDir = this.buildConfig.distFolder;
        }
        return deployToAzure_1.default(this.taskConfig, this.log.bind(this), this.logError.bind(this)).then(completeCallback, function (error) {
            _this.logError(error.message);
            if (error.stack) {
                _this.logError(error.stack);
            }
        });
    };
    return DeployAzureStorageTask;
}(gulp_core_build_1.GulpTask));
exports.DeployAzureStorageTask = DeployAzureStorageTask;

//# sourceMappingURL=DeployAzureStorageTask.js.map
