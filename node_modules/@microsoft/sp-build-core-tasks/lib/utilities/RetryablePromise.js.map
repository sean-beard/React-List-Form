{"version":3,"sources":["utilities/RetryablePromise.ts"],"names":[],"mappings":";;AAAA;IAyCE,0BAAoB,UAAwF;QAAxF,eAAU,GAAV,UAAU,CAA8E;QAC1G,IAAI,CAAC,aAAa,GAAG,IAAI,OAAO,CAAC,UAAU,CAAC,CAAC;IAC/C,CAAC;IAxCa,+BAAc,GAA5B,UACE,QAA+B,EAC/B,UAAkB,EAClB,cAA0B;QAA1B,+BAAA,EAAA,kBAA0B;QAE1B,MAAM,CAAC,IAAI,OAAO,CAAM,UAAC,OAA6B,EAAE,MAA8B;YACpF,IAAI,YAAY,GAAW,CAAC,CAAC;YAC7B,IAAM,OAAO,GAAQ,EAAE,CAAC;YACxB,IAAM,aAAa,GAAa,EAAE,CAAC;YAEnC,8BAA8B,OAA4B,EAAE,KAAa;gBACvE,OAAO,CAAC,IAAI,CAAC,UAAC,KAAQ;oBACpB,OAAO,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;oBACvB,YAAY,EAAE,CAAC;oBAEf,EAAE,CAAC,CAAC,YAAY,KAAK,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;wBACrC,OAAO,CAAC,OAAO,CAAC,CAAC;oBACnB,CAAC;gBACH,CAAC,CAAC,CAAC,KAAK,CAAC;oBACP,EAAE,CAAC,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,SAAS,IAAI,aAAa,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;wBAChG,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;wBAC5E,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;4BACpB,oBAAoB,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,KAAK,CAAC,CAAC;wBAC/C,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACN,UAAU,CAAC,cAAM,OAAA,oBAAoB,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,KAAK,CAAC,EAA5C,CAA4C,EAAE,cAAc,CAAC,CAAC;wBACjF,CAAC;oBACH,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,MAAM,CAAC,IAAI,KAAK,CAAC,sBAAoB,UAAU,gBAAa,CAAC,CAAC,CAAC;oBACjE,CAAC;gBACH,CAAC,CAAC,CAAC;YACL,CAAC;YAED,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACjD,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACvC,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAMM,gCAAK,GAAZ;QACE,MAAM,CAAC,IAAI,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC/C,CAAC;IAEM,+BAAI,GAAX,UACE,WAA6D,EAC7D,UAAgE;QAEhE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;IAC1D,CAAC;IAEM,gCAAK,GAAZ,UAAsB,UAA0D;QAC9E,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IAC9C,CAAC;IACH,uBAAC;AAAD,CA3DA,AA2DC,IAAA","file":"utilities/RetryablePromise.js","sourcesContent":["export default class RetryablePromise<TResult> implements Promise<TResult> {\r\n  private _innerPromise: Promise<TResult>;\r\n\r\n  public static allWithRetries<T>(\r\n    promises: RetryablePromise<T>[],\r\n    maxRetries: number,\r\n    retryDelayInMs: number = 0\r\n  ): Promise<T[]> {\r\n    return new Promise<T[]>((resolve: (value: T[]) => void, reject: (error: Error) => void) => {\r\n      let successCount: number = 0;\r\n      const results: T[] = [];\r\n      const failureCounts: number[] = [];\r\n\r\n      function attachPromiseHandler(promise: RetryablePromise<T>, index: number): void {\r\n        promise.then((value: T) => {\r\n          results[index] = value;\r\n          successCount++;\r\n\r\n          if (successCount === promises.length) {\r\n            resolve(results);\r\n          }\r\n        }).catch(() => {\r\n          if (maxRetries > 0 && (failureCounts[index] === undefined || failureCounts[index] < maxRetries)) {\r\n            failureCounts[index] = !failureCounts[index] ? 1 : failureCounts[index] + 1;\r\n            if (!retryDelayInMs) {\r\n              attachPromiseHandler(promise.retry(), index);\r\n            } else {\r\n              setTimeout(() => attachPromiseHandler(promise.retry(), index), retryDelayInMs);\r\n            }\r\n          } else {\r\n            reject(new Error(`Maximum retries (${maxRetries}) exceeded.`));\r\n          }\r\n        });\r\n      }\r\n\r\n      for (let i: number = 0; i < promises.length; i++) {\r\n        attachPromiseHandler(promises[i], i);\r\n      }\r\n    });\r\n  }\r\n\r\n  constructor(private _promiseFn: (resolve: (value?: TResult) => void, reject: (error: Error) => void) => void) {\r\n    this._innerPromise = new Promise(_promiseFn);\r\n  }\r\n\r\n  public retry(): RetryablePromise<TResult> {\r\n    return new RetryablePromise(this._promiseFn);\r\n  }\r\n\r\n  public then<TReturn>(\r\n    onFulfilled?: (value: TResult) => TReturn | Thenable<TReturn>,\r\n    onRejected?: (error: Error) => TReturn | Promise<TReturn> | void\r\n  ): Promise<TReturn> {\r\n    return this._innerPromise.then(onFulfilled, onRejected);\r\n  }\r\n\r\n  public catch<TReturn>(onRejected?: (error: Error) => TReturn | Thenable<TReturn>): Promise<TReturn> {\r\n    return this._innerPromise.catch(onRejected);\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}