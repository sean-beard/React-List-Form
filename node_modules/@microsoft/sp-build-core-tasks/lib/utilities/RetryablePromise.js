"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var RetryablePromise = (function () {
    function RetryablePromise(_promiseFn) {
        this._promiseFn = _promiseFn;
        this._innerPromise = new Promise(_promiseFn);
    }
    RetryablePromise.allWithRetries = function (promises, maxRetries, retryDelayInMs) {
        if (retryDelayInMs === void 0) { retryDelayInMs = 0; }
        return new Promise(function (resolve, reject) {
            var successCount = 0;
            var results = [];
            var failureCounts = [];
            function attachPromiseHandler(promise, index) {
                promise.then(function (value) {
                    results[index] = value;
                    successCount++;
                    if (successCount === promises.length) {
                        resolve(results);
                    }
                }).catch(function () {
                    if (maxRetries > 0 && (failureCounts[index] === undefined || failureCounts[index] < maxRetries)) {
                        failureCounts[index] = !failureCounts[index] ? 1 : failureCounts[index] + 1;
                        if (!retryDelayInMs) {
                            attachPromiseHandler(promise.retry(), index);
                        }
                        else {
                            setTimeout(function () { return attachPromiseHandler(promise.retry(), index); }, retryDelayInMs);
                        }
                    }
                    else {
                        reject(new Error("Maximum retries (" + maxRetries + ") exceeded."));
                    }
                });
            }
            for (var i = 0; i < promises.length; i++) {
                attachPromiseHandler(promises[i], i);
            }
        });
    };
    RetryablePromise.prototype.retry = function () {
        return new RetryablePromise(this._promiseFn);
    };
    RetryablePromise.prototype.then = function (onFulfilled, onRejected) {
        return this._innerPromise.then(onFulfilled, onRejected);
    };
    RetryablePromise.prototype.catch = function (onRejected) {
        return this._innerPromise.catch(onRejected);
    };
    return RetryablePromise;
}());
exports.default = RetryablePromise;

//# sourceMappingURL=RetryablePromise.js.map
