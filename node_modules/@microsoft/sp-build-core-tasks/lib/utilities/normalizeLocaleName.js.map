{"version":3,"sources":["utilities/normalizeLocaleName.ts"],"names":[],"mappings":";;AAAA;;;;GAIG;AACH,6BAA4C,UAAkB;IAC5D,UAAU,GAAG,UAAU,CAAC,WAAW,EAAE,CAAC;IAEtC,IAAM,YAAY,GAAa,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACrD,EAAE,CAAC,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;QAC9B,IAAM,SAAS,GAAW,YAAY,CAAC,CAAC,CAAC,CAAC;QAC1C,EAAE,CAAE,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YAC5B,YAAY,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,WAAW,EAAE,CAAC;QAC5C,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,KAAK,MAAM,IAAI,SAAS,KAAK,OAAO,IAAI,SAAS,KAAK,OAAO,CAAC,CAAC,CAAC;YAClF,mDAAmD;QACrD,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,uCAAuC;YACvC,YAAY,CAAC,CAAC,CAAC,GAAG,qBAAqB,CAAC,SAAS,CAAC,CAAC;QACrD,CAAC;IACH,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;QACrC,IAAM,SAAS,GAAW,YAAY,CAAC,CAAC,CAAC,CAAC;QAC1C,EAAE,CAAE,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YAC5B,YAAY,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,WAAW,EAAE,CAAC;YAC1C,YAAY,CAAC,CAAC,CAAC,GAAG,qBAAqB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3D,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,qCAAqC;YACrC,YAAY,CAAC,CAAC,CAAC,GAAG,qBAAqB,CAAC,SAAS,CAAC,CAAC;YACnD,YAAY,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;QAClD,CAAC;IACH,CAAC;IAED,IAAM,gBAAgB,GAAW,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACxD,MAAM,CAAC,gBAAgB,CAAC;AAC1B,CAAC;AA5BD,sCA4BC;AAED,+BAA+B,GAAW;IACxC,MAAM,CAAC,KAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAG,CAAC;AAC3D,CAAC","file":"utilities/normalizeLocaleName.js","sourcesContent":["/**\r\n * Normalizes a locale name. So \"en-us\" becomes \"en-US\" and \"sr-cyrl-rs\" becomes \"sr-Cyrl-RS\". There are two special\r\n *  cases. For pseudo-locales like \"qps-ploc\", everything stays lowecase. For language-script locales like \"uz-Cyrl\",\r\n *  only the script name's first character should be uppercased.\r\n */\r\nexport default function normalizeLocaleName(localeName: string): string {\r\n  localeName = localeName.toLowerCase();\r\n\r\n  const localeTokens: string[] = localeName.split('-');\r\n  if (localeTokens.length === 2) {\r\n    const lastToken: string = localeTokens[1];\r\n    if  (lastToken.length === 2) {\r\n      localeTokens[1] = lastToken.toUpperCase();\r\n    } else if (lastToken === 'ploc' || lastToken === 'plocm' || lastToken === 'ploca') {\r\n      // Special case for pseudo-locales, leave lowercase\r\n    } else {\r\n      // The second token is the script token\r\n      localeTokens[1] = _uppercaseFirstLetter(lastToken);\r\n    }\r\n  } else if (localeTokens.length === 3) {\r\n    const lastToken: string = localeTokens[2];\r\n    if  (lastToken.length === 2) {\r\n      localeTokens[2] = lastToken.toUpperCase();\r\n      localeTokens[1] = _uppercaseFirstLetter(localeTokens[1]);\r\n    } else {\r\n      // The last token is the script token\r\n      localeTokens[2] = _uppercaseFirstLetter(lastToken);\r\n      localeTokens[1] = localeTokens[1].toUpperCase();\r\n    }\r\n  }\r\n\r\n  const normalizedLocale: string = localeTokens.join('-');\r\n  return normalizedLocale;\r\n}\r\n\r\nfunction _uppercaseFirstLetter(str: string): string {\r\n  return `${str.slice(0, 1).toUpperCase()}${str.slice(1)}`;\r\n}\r\n"],"sourceRoot":"..\\..\\src"}