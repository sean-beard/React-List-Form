"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var gulpUtil = require("gulp-util");
var stream = require("stream");
var crypto = require("crypto");
var through2 = require("through2");
var path = require("path");
function writeStringToFile(content, filename) {
    if (filename === void 0) { filename = 'tempfile'; }
    return getGulpUtilFileStream(writeStringToGulpUtilFile(content, filename));
}
exports.writeStringToFile = writeStringToFile;
function writeStringToGulpUtilFile(content, filename) {
    if (filename === void 0) { filename = 'tempfile'; }
    return new gulpUtil.File({
        contents: new Buffer(content),
        path: filename
    });
}
exports.writeStringToGulpUtilFile = writeStringToGulpUtilFile;
function getGulpUtilFileStream(file) {
    var fileStream = new stream.Readable({ objectMode: true });
    // tslint:disable-next-line:no-any
    fileStream._read = function () {
        this.push(file);
        /* tslint:disable:no-null-keyword */
        this.push(null);
        /* tslint:enable:no-null-keyword */
    };
    return fileStream;
}
exports.getGulpUtilFileStream = getGulpUtilFileStream;
function getShortHash(content) {
    return crypto.createHash('md5').update(content).digest('base64').replace('==', '');
}
exports.getShortHash = getShortHash;
function getFullHash(data) {
    return crypto.createHash('md5').update(data).digest('hex');
}
exports.getFullHash = getFullHash;
/**
 * Function for renaming a stream of file(s).
 * @param gulpStream Stream of files to be renamed.
 * @param getFilename Callback for setting the resulting file(s) name.
 * @param filenameCallback Callback for performing operations with the original and final file name.
 */
function rename(gulpStream, getFilename, filenameCallback) {
    return gulpStream.pipe(through2.obj(_getRenameTransformFunction(getFilename, filenameCallback)));
}
exports.rename = rename;
/**
 * Function for renaming a stream of file(s) with a hash of the file contents.
 * @param gulpStream Stream of files to be renamed.
 * @param getFilename Callback for setting the resulting file(s) name.
 * @param filenameCallback Callback for performing operations with the original and final file name.
 */
function renameWithHash(gulpStream, getFilename, filenameCallback) {
    return gulpStream.pipe(through2.obj(_getRenameHashTransformFunction(getFilename, filenameCallback)));
}
exports.renameWithHash = renameWithHash;
function _getRenameTransformFunction(getFilename, filenameCallback) {
    return function (file, enc, callback) {
        var originalFilename = file.path;
        var filename = getFilename(file.path);
        file.path = path.join(path.dirname(file.path), filename);
        filenameCallback(filename, originalFilename);
        this.push(file);
        callback();
    };
}
function _getRenameHashTransformFunction(getFilename, filenameCallback) {
    return function (file, enc, callback) {
        var checksum = getFullHash(file.contents.toString(enc));
        var originalFilename = file.path;
        var filename = getFilename(checksum, originalFilename);
        file.path = path.join(path.dirname(file.path), filename);
        filenameCallback(filename, originalFilename);
        this.push(file);
        callback();
    };
}

//# sourceMappingURL=FileUtils.js.map
