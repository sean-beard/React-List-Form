{"version":3,"sources":["utilities/FileUtils.ts"],"names":[],"mappings":"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","file":"utilities/FileUtils.js","sourcesContent":["import * as gulpUtil from 'gulp-util';\r\nimport * as stream from 'stream';\r\nimport * as crypto from 'crypto';\r\nimport * as through2 from 'through2';\r\nimport * as path from 'path';\r\n\r\nexport function writeStringToFile(content: string, filename: string = 'tempfile'): NodeJS.ReadableStream {\r\n  return getGulpUtilFileStream(writeStringToGulpUtilFile(content, filename));\r\n}\r\n\r\nexport function writeStringToGulpUtilFile(content: string, filename: string = 'tempfile'): gulpUtil.File {\r\n  return new gulpUtil.File({\r\n    contents: new Buffer(content),\r\n    path: filename\r\n  });\r\n}\r\n\r\nexport function getGulpUtilFileStream(file: gulpUtil.File): NodeJS.ReadableStream {\r\n  const fileStream: stream.Readable = new stream.Readable({ objectMode: true });\r\n  // tslint:disable-next-line:no-any\r\n  (fileStream as any)._read = function(): void {\r\n    this.push(file);\r\n    /* tslint:disable:no-null-keyword */\r\n    this.push(null);\r\n    /* tslint:enable:no-null-keyword */\r\n  };\r\n\r\n  return fileStream;\r\n}\r\n\r\nexport function getShortHash(content: string): string {\r\n  return crypto.createHash('md5').update(content).digest('base64').replace('==', '');\r\n}\r\n\r\nexport function getFullHash(data: any): string { // tslint:disable-line:no-any\r\n  return crypto.createHash('md5').update(data).digest('hex');\r\n}\r\n\r\n/**\r\n * Function for renaming a stream of file(s).\r\n * @param gulpStream Stream of files to be renamed.\r\n * @param getFilename Callback for setting the resulting file(s) name.\r\n * @param filenameCallback Callback for performing operations with the original and final file name.\r\n */\r\nexport function rename(\r\n  gulpStream: NodeJS.ReadWriteStream,\r\n  getFilename: (originalFilename: string) => string,\r\n  filenameCallback: (filename: string, originalFilename: string) => void\r\n): NodeJS.ReadWriteStream {\r\n  return gulpStream.pipe(through2.obj(_getRenameTransformFunction(getFilename, filenameCallback)));\r\n}\r\n/**\r\n * Function for renaming a stream of file(s) with a hash of the file contents.\r\n * @param gulpStream Stream of files to be renamed.\r\n * @param getFilename Callback for setting the resulting file(s) name.\r\n * @param filenameCallback Callback for performing operations with the original and final file name.\r\n */\r\nexport function renameWithHash(\r\n  gulpStream: NodeJS.ReadWriteStream,\r\n  getFilename: (hash: string, originalFilename: string) => string,\r\n  filenameCallback: (filename: string, originalFilename: string) => void\r\n): NodeJS.ReadWriteStream {\r\n  return gulpStream.pipe(through2.obj(_getRenameHashTransformFunction(getFilename, filenameCallback)));\r\n}\r\n\r\nfunction _getRenameTransformFunction(\r\n  getFilename: (originalFilename: string) => string,\r\n  filenameCallback: (filename: string, originalFilename: string) => void\r\n): (file: gulpUtil.File, enc: string, callback: () => void) => void {\r\n    return function (file: gulpUtil.File, enc: string, callback: () => void): void {\r\n      const originalFilename: string = file.path;\r\n      const filename: string = getFilename(file.path);\r\n      file.path = path.join(path.dirname(file.path), filename);\r\n      filenameCallback(filename, originalFilename);\r\n      this.push(file);\r\n      callback();\r\n    };\r\n}\r\n\r\nfunction _getRenameHashTransformFunction(\r\n  getFilename: (hash: string, originalFilename: string) => string,\r\n  filenameCallback: (filename: string, originalFilename: string) => void\r\n): (file: gulpUtil.File, enc: string, callback: () => void) => void {\r\n    return function (file: gulpUtil.File, enc: string, callback: () => void): void {\r\n      const checksum: string = getFullHash((file.contents as Buffer).toString(enc));\r\n      const originalFilename: string = file.path;\r\n      const filename: string = getFilename(checksum, originalFilename);\r\n      file.path = path.join(path.dirname(file.path), filename);\r\n      filenameCallback(filename, originalFilename);\r\n      this.push(file);\r\n      callback();\r\n    };\r\n}\r\n"],"sourceRoot":"..\\..\\src"}