"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var gulp_core_build_1 = require("@microsoft/gulp-core-build");
var constants_1 = require("./constants");
var OdspGulpTask = (function (_super) {
    __extends(OdspGulpTask, _super);
    function OdspGulpTask() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(OdspGulpTask.prototype, "npmBuild", {
        get: function () {
            return this.buildConfig.args && !!this.buildConfig.args.npm;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OdspGulpTask.prototype, "properties", {
        get: function () {
            if (!this.buildConfig.properties) {
                this.buildConfig.properties = {};
            }
            return this.buildConfig.properties;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OdspGulpTask.prototype, "outputDirectory", {
        get: function () {
            if (!this._outputDirectory) {
                this._outputDirectory = path.join(this.buildConfig.rootPath, this.buildConfig.distFolder);
            }
            return this._outputDirectory;
        },
        enumerable: true,
        configurable: true
    });
    OdspGulpTask.prototype.getManifest = function (manifestPath) {
        if (!this.properties.manifests) {
            this.properties.manifests = {};
        }
        var manifests = this.properties.manifests;
        if (manifests[manifestPath] === undefined) {
            if (!manifestPath) {
                manifests[manifestPath] = null; // tslint:disable-line:no-null-keyword
            }
            else {
                var fullManifestPath = path.join(this.buildConfig.rootPath, manifestPath);
                manifests[manifestPath] = gulp_core_build_1.SchemaValidator.readCommentedJsonFile(fullManifestPath);
            }
        }
        return manifests[manifestPath];
    };
    OdspGulpTask.prototype.getPackageVersion = function () {
        var packageJson = require(path.join(this.buildConfig.rootPath, 'package.json'));
        var version = packageJson.version;
        // Remove pre-release name if any, because pre-release is not handled by SPFx yet.
        var indexOfDelimiter = version.indexOf('-');
        if (indexOfDelimiter > 0) {
            version = version.substr(0, indexOfDelimiter);
        }
        return version;
    };
    OdspGulpTask.prototype.resolveResources = function (localizedResources, debugLocale, singleLocale, parentTask // tslint:disable-line:no-any
    ) {
        if (singleLocale === void 0) { singleLocale = false; }
        if (parentTask === void 0) { parentTask = this; } // tslint:disable-line:no-any
        // Ensure that all localized resources specified exist.
        var localizedResourcesToBundle = [];
        var notFoundResources = [];
        var mismatchResources = [];
        var locales;
        for (var _i = 0, localizedResources_1 = localizedResources; _i < localizedResources_1.length; _i++) {
            var resourceName = localizedResources_1[_i];
            var discoveredResources = (this.properties.discoveredLocalizedResources || {})[resourceName];
            if (!discoveredResources || Object.keys(discoveredResources).length === 0) {
                notFoundResources.push(resourceName);
            }
            else {
                var resourcesKeys = Object.keys(discoveredResources);
                var resourceLocales = this._filterLocales(resourcesKeys, debugLocale, singleLocale, parentTask);
                if (!locales) {
                    locales = resourceLocales;
                    localizedResourcesToBundle.push(resourceName);
                    continue;
                }
                var notMatch = resourceLocales.length !== locales.length;
                for (var i = 0; i < resourceLocales.length && !notMatch; i++) {
                    notMatch = notMatch || (locales.indexOf(resourceLocales[i]) === -1);
                }
                if (notMatch) {
                    mismatchResources.push(resourceName);
                }
                else {
                    localizedResourcesToBundle.push(resourceName);
                }
            }
        }
        if (notFoundResources.length > 0) {
            throw "Specified resources not found: " + notFoundResources.join(', ') + ".";
        }
        if (mismatchResources.length > 0) {
            throw 'All resources must have exactly the same locales. Some resources do not match the locales ' +
                ("specified by the first (" + locales.join(', ') + "): " + mismatchResources.join(', '));
        }
        return { locales: locales || [], localizedResourcesToBundle: localizedResourcesToBundle };
    };
    OdspGulpTask.prototype._filterLocales = function (locales, debugLocale, singleLocale, parentTask // tslint:disable-line:no-any
    ) {
        if (!this.buildConfig.production || singleLocale) {
            // If this is a non-production build, don't build every locale. Just build the specified or default locale.
            var localeHasBeenFiltered = false;
            if (locales.indexOf(debugLocale) !== -1) {
                locales = [debugLocale];
                localeHasBeenFiltered = true;
            }
            else if (locales.indexOf(constants_1.default.defaultLocale) !== -1) {
                locales = [constants_1.default.defaultLocale];
                localeHasBeenFiltered = true;
            }
            else {
                var errorMessage = "Unable to find a debug locale (" + (debugLocale || 'unspecified') + ") or a default " +
                    ("locale (" + constants_1.default.defaultLocale + ").");
                if (singleLocale) {
                    throw errorMessage;
                }
                else {
                    parentTask.logError(errorMessage + " All locales will be built. This may be time-consuming.");
                }
            }
            if (localeHasBeenFiltered) {
                parentTask.logVerbose("Locales have been filtered to " + JSON.stringify(locales) + " for debug build.");
            }
        }
        return locales;
    };
    return OdspGulpTask;
}(gulp_core_build_1.GulpTask));
exports.default = OdspGulpTask;

//# sourceMappingURL=OdspGulpTask.js.map
