{"version":3,"sources":["OdspGulpTask.ts"],"names":[],"mappings":"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","file":"OdspGulpTask.js","sourcesContent":["import * as Gulp from 'gulp';\r\nimport * as path from 'path';\r\nimport { compiler as webpackCompiler } from 'webpack';\r\n\r\nimport { GulpTask, SchemaValidator } from '@microsoft/gulp-core-build';\r\nimport { IClientSideComponentManifest } from '@microsoft/sp-module-interfaces';\r\n\r\nimport { IConfigJson } from './configJson/index';\r\nimport { IBundleEntry } from './configureWebpack/ConfigureWebpackTask';\r\nimport { IDeployEntry } from './copyAssets/CopyAssetsTask';\r\nimport { IExternalProjectMap } from './configureWebpack/ExternalsProcessor';\r\nimport constants from './constants';\r\n\r\n/**\r\n * Common properties that are shared between tasks.\r\n */\r\nexport interface IOdspGulpTaskProperties extends IConfigJson {\r\n  /**\r\n   * The webpack stats object for the last-run webpack task.\r\n   */\r\n  webpackStats?: webpackCompiler.Stats;\r\n\r\n  /**\r\n   * The webpack stats object for the base bundle.\r\n   */\r\n  initialWebpackStats?: webpackCompiler.Stats;\r\n\r\n  /**\r\n   * Memoization of the manifest objects.\r\n   */\r\n  manifests?: { [key: string]: IClientSideComponentManifest };\r\n\r\n  /**\r\n   * Data describing each bundled entry.\r\n   */\r\n  bundleEntries?: IBundleEntry[];\r\n\r\n  /**\r\n   * Data describing each deployed entry\r\n   */\r\n  deployEntries?: IDeployEntry[];\r\n\r\n  /**\r\n   * Files discovered for the localized resources specified in config.json\r\n   */\r\n  discoveredLocalizedResources?: { [key: string]: ILocaleMap };\r\n\r\n  /**\r\n   * The URL to which the manifests.js file has been deployed after running dev-deploy.\r\n   */\r\n  devDeployManifestFileUrl?: string;\r\n\r\n  /**\r\n   * The URL to which the module loader, if deployed, has been deployed after running dev-deploy.\r\n   */\r\n  devDeployModuleLoaderUrl?: string;\r\n\r\n  /**\r\n   * A list of externals that were specified in config.json that were later bundled.\r\n   */\r\n  bundledExternals?: string[];\r\n\r\n  /**\r\n   * A map of linked externals.\r\n   */\r\n  linkedExternals?: IExternalProjectMap;\r\n\r\n  /**\r\n   * The name to use in the \"library\" property of the webpack configuration.\r\n   */\r\n  webpackLibraryName?: string;\r\n\r\n  /**\r\n   * If true, webpackLibraryName is the temporary name used in the webpack config when we have multiple\r\n   *  entrypoints. In the post-webpack steps, we need to update the library name to the standard\r\n   *  format in the \"define(<name>, ...\" function.\r\n   */\r\n  webpackLibraryNameIsTemporary?: boolean;\r\n}\r\n\r\nexport interface ILocaleMap {\r\n  [locale: string]: string;\r\n}\r\n\r\nexport interface IResolveResourcesResult {\r\n  locales: string[];\r\n  localizedResourcesToBundle: string[];\r\n}\r\n\r\nabstract class OdspGulpTask<TASK_CONFIG> extends GulpTask<TASK_CONFIG> {\r\n  private _outputDirectory: string;\r\n\r\n  public abstract executeTask(\r\n    gulp: typeof Gulp, completeCallback: (error?: string) => void\r\n  ): NodeJS.ReadWriteStream | Promise<any> | void; // tslint:disable-line:no-any\r\n\r\n  public get npmBuild(): boolean {\r\n    return this.buildConfig.args && !!this.buildConfig.args.npm;\r\n  }\r\n\r\n  public get properties(): IOdspGulpTaskProperties {\r\n    if (!this.buildConfig.properties) {\r\n      this.buildConfig.properties = {};\r\n    }\r\n\r\n    return this.buildConfig.properties as IOdspGulpTaskProperties;\r\n  }\r\n\r\n  public get outputDirectory(): string {\r\n    if (!this._outputDirectory) {\r\n      this._outputDirectory = path.join(this.buildConfig.rootPath, this.buildConfig.distFolder);\r\n    }\r\n\r\n    return this._outputDirectory;\r\n  }\r\n\r\n  public getManifest(manifestPath: string): IClientSideComponentManifest {\r\n    if (!this.properties.manifests) {\r\n      this.properties.manifests = {};\r\n    }\r\n\r\n    const manifests: { [key: string]: IClientSideComponentManifest } = this.properties.manifests;\r\n\r\n    if (manifests[manifestPath] === undefined) {\r\n      if (!manifestPath) {\r\n        manifests[manifestPath] = null; // tslint:disable-line:no-null-keyword\r\n      } else {\r\n        const fullManifestPath: string = path.join(this.buildConfig.rootPath, manifestPath);\r\n        manifests[manifestPath] = SchemaValidator.readCommentedJsonFile<IClientSideComponentManifest>(fullManifestPath);\r\n      }\r\n    }\r\n\r\n    return manifests[manifestPath];\r\n  }\r\n\r\n  public getPackageVersion(): string {\r\n    const packageJson: PackageJson = require(path.join(this.buildConfig.rootPath, 'package.json'));\r\n    let version: string = packageJson.version;\r\n    // Remove pre-release name if any, because pre-release is not handled by SPFx yet.\r\n    const indexOfDelimiter: number = version.indexOf('-');\r\n    if (indexOfDelimiter > 0) {\r\n      version = version.substr(0, indexOfDelimiter);\r\n    }\r\n    return version;\r\n  }\r\n\r\n  public resolveResources(\r\n    localizedResources: string[],\r\n    debugLocale: string,\r\n    singleLocale: boolean = false,\r\n    parentTask: GulpTask<any> = this // tslint:disable-line:no-any\r\n  ): IResolveResourcesResult {\r\n    // Ensure that all localized resources specified exist.\r\n    const localizedResourcesToBundle: string[] = [];\r\n    const notFoundResources: string[] = [];\r\n    const mismatchResources: string[] = [];\r\n    let locales: string[];\r\n    for (const resourceName of localizedResources) {\r\n      const discoveredResources: ILocaleMap = (this.properties.discoveredLocalizedResources || {})[resourceName];\r\n      if (!discoveredResources || Object.keys(discoveredResources).length === 0) {\r\n        notFoundResources.push(resourceName);\r\n      } else {\r\n        const resourcesKeys: string[] = Object.keys(discoveredResources);\r\n        const resourceLocales: string[] = this._filterLocales(resourcesKeys, debugLocale, singleLocale, parentTask);\r\n        if (!locales) {\r\n          locales = resourceLocales;\r\n          localizedResourcesToBundle.push(resourceName);\r\n          continue;\r\n        }\r\n\r\n        let notMatch: boolean = resourceLocales.length !== locales.length;\r\n        for (let i: number = 0; i < resourceLocales.length && !notMatch; i++) {\r\n          notMatch = notMatch || (locales.indexOf(resourceLocales[i]) === -1);\r\n        }\r\n\r\n        if (notMatch) {\r\n          mismatchResources.push(resourceName);\r\n        } else {\r\n          localizedResourcesToBundle.push(resourceName);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (notFoundResources.length > 0) {\r\n      throw `Specified resources not found: ${notFoundResources.join(', ')}.`;\r\n    }\r\n\r\n    if (mismatchResources.length > 0) {\r\n      throw 'All resources must have exactly the same locales. Some resources do not match the locales ' +\r\n            `specified by the first (${locales.join(', ')}): ${mismatchResources.join(', ')}`;\r\n    }\r\n\r\n    return { locales: locales || [], localizedResourcesToBundle };\r\n  }\r\n\r\n  private _filterLocales(\r\n    locales: string[],\r\n    debugLocale: string,\r\n    singleLocale: boolean,\r\n    parentTask: GulpTask<any> // tslint:disable-line:no-any\r\n  ): string[] {\r\n    if (!this.buildConfig.production || singleLocale) {\r\n      // If this is a non-production build, don't build every locale. Just build the specified or default locale.\r\n      let localeHasBeenFiltered: boolean = false;\r\n      if (locales.indexOf(debugLocale) !== -1) {\r\n        locales = [debugLocale];\r\n        localeHasBeenFiltered = true;\r\n      } else if (locales.indexOf(constants.defaultLocale) !== -1) {\r\n        locales = [constants.defaultLocale];\r\n        localeHasBeenFiltered = true;\r\n      } else {\r\n        const errorMessage: string = `Unable to find a debug locale (${debugLocale || 'unspecified'}) or a default ` +\r\n                                     `locale (${constants.defaultLocale}).`;\r\n        if (singleLocale) {\r\n          throw errorMessage;\r\n        } else {\r\n          parentTask.logError(`${errorMessage} All locales will be built. This may be time-consuming.`);\r\n        }\r\n      }\r\n\r\n      if (localeHasBeenFiltered) {\r\n        parentTask.logVerbose(`Locales have been filtered to ${JSON.stringify(locales)} for debug build.`);\r\n      }\r\n    }\r\n\r\n    return locales;\r\n  }\r\n}\r\n\r\nexport default OdspGulpTask;\r\n"],"sourceRoot":"..\\src"}