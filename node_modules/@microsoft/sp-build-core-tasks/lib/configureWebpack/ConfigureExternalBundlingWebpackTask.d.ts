/// <reference types="webpack" />
/// <reference types="node" />
import * as Gulp from 'gulp';
import * as webpack from 'webpack';
import { WebpackTask } from '@microsoft/gulp-core-build-webpack';
import OdspGulpTask from './../OdspGulpTask';
import { ConfigureWebpackTask } from './ConfigureWebpackTask';
export interface IConfigureExternalBundlingWebpackTaskConfig {
    webpack?: WebpackTask;
    localizedResources?: string[];
    configureWebpackTask?: ConfigureWebpackTask;
    debugLocale?: string;
    additionalLoaders?: webpack.Rule[];
    bundleAllLocalizedResources?: boolean;
}
/**
 * Configures the @microsoft/gulp-core-build-webpack task to bundle localized externals into another, pre-built package.
 *
 * Example:
 *  IN:
 *    setConfig({
 *      webpack: <reference to webpack task>,
 *      localizedResources: <optional - list of localized externals>
 *      configureWebpackTask: <reference to the ConfigureWebpackTask task>,
 *      debugLocale: <optional - locale to use for a debug build>,
 *      additionalLoaders: <optional - additional loaders for localized resources>
 *    })
 *
 *  OUT:
 *    If any resources are specified and found, set webpack config to:
 *      {
 *        entry: <entries with locales>,
 *        module: {
 *          rules: ([
 *          ] <and additional loaders, if specified>,
 *          noParse: [ /\.map$/ ],
 *        },
 *        resolve: {
 *          alias: <localized resources>,
 *          modulesDirectories: [
 *            '',
 *            'node_modules',
 *            'lib'
 *          ]
 *        },
 *        context: <dist directory>,
 *        devtool: 'source-map',
 *        externals: <externals and non-specified locales>,
 *        entry: webpackEntries,
 *        output: {
 *          libraryTarget: <library target from configureWebpackTask, if specified> or 'amd',
 *          path: this.outputDirectory
 *        },
 *        plugins: []
 *      }
 */
export declare class ConfigureExternalBundlingWebpackTask extends OdspGulpTask<IConfigureExternalBundlingWebpackTaskConfig> {
    constructor();
    loadSchema(): Object;
    setConfig(config: IConfigureExternalBundlingWebpackTaskConfig): void;
    executeTask(gulp: typeof Gulp, completeCallback: (error?: string) => void): NodeJS.ReadWriteStream;
    /**
     * Modify the base webpack config to make sure we get what we need after that webpack instance runs.
     *
     * @internal
     */
    tinkerWithBaseWebpackConfig(config: webpack.Configuration): void;
    private _generateWebpackEntries(locales);
    private _pruneLocalizedResources();
    private readonly _shouldBeEnabled;
    private _setWebpackConfig(config);
}
