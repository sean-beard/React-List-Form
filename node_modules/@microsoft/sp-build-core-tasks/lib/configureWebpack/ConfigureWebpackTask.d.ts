/// <reference types="webpack" />
/// <reference types="node" />
import * as Gulp from 'gulp';
import * as webpack from 'webpack';
import { WebpackTask } from '@microsoft/gulp-core-build-webpack';
import { KarmaTask } from '@microsoft/gulp-core-build-karma/lib/KarmaTask';
import { ISetWebpackPublicPathPluginOptions } from '@microsoft/set-webpack-public-path-plugin';
import { IClientSideComponentManifest } from '@microsoft/sp-module-interfaces';
import { IConfigComponent } from './../configJson/index';
import { ConfigureExternalBundlingWebpackTask } from './ConfigureExternalBundlingWebpackTask';
import OdspGulpTask, { ILocaleMap } from './../OdspGulpTask';
export interface IConfigureWebpackTaskConfig {
    webpack?: WebpackTask;
    webpackPublicPathOptions?: ISetWebpackPublicPathPluginOptions;
    libraryName?: string;
    libraryTarget?: string;
    configureExternalBundlingWebpackTask?: ConfigureExternalBundlingWebpackTask;
    /**
     * If set, drop the webpack stats object and visualization in this directory in addition to the temp directory.
     */
    statsObjectsDropLocation?: string;
    /**
     * An optional callback can be provided that allows the generated webpack configuration to be modified.
     */
    additionalConfiguration?: (generatedConfiguration: webpack.Configuration) => webpack.Configuration;
    /**
     * An optional list of linked externals to include. For example, if you want to bundle react, list "react" in this
     *  array. This is only designed to be used in very special cases and is not intended to be used regularly.
     */
    linkedExternalsToBundle?: string[];
}
export interface IBundleComponent extends IConfigComponent {
    manifestData: IClientSideComponentManifest;
}
export interface IBundleEntry {
    bundleName: string;
    nonLocalizedEntrypointPath?: string;
    localizedEntrypointPaths?: ILocaleMap;
    components: {
        [id: string]: IBundleComponent;
    };
}
export declare function getComponentsBundleId(manifests: IClientSideComponentManifest[]): string;
export declare function getBundleId(bundle: IBundleEntry): string;
export declare const fileLoaderExts: string[];
/**
 * Configures the @microsoft/gulp-core-build-webpack task with some smart defaults based on the package configuration.
 *
 * Example:
 *  IN:
 *    setConfig({
 *      webpack: <reference to webpack task>,
 *      webpackPublicPathOptions: <options for @microsoft/loader-set-webpack-public-path>,
 *      libraryName: <optional library name - set this if the library should be a global on the window>,
 *      configureExternalBundlingWebpackTask: <optional reference to ConfigureExternalBundlingWebpackTask task>
 *    })
 *    buildConfig.properties.entries = [{
 *      "entry": "./lib/App.js",
 *      "manifest": "./src/app.manifest.json",
 *      "outputPath": "dist/app.bundle.js"
 *    }]
 *    buildConfig.properties.externals = {
 *      "react-dom": "node_modules/react-dom/dist/react-dom.js",
 *      "react": "node_modules/react/dist/react.js",
 *      "flux": "node_modules/flux/dist/flux.js",
 *    }
 *
 *  OUT:
 *    set webpack config to (approximately):
 *    {
 *        context: ... root path ...,
 *        entry: { ... mapping of names to entries ... },
 *        resolve: {
 *          modules: [ ... root path + /node_modules ],
 *          alias: { }
 *        },
 *        output: {
 *          library: <library name, if provided>,
 *          libraryTarget: <library target, if specified> or 'amd',
 *          path: ... dist folder ...,
 *          filename: '[name].js',
 *          devtoolModuleFilenameTemplate: 'webpack:///../[resource-path]',
 *          devtoolFallbackModuleFilenameTemplate: 'webpack:///../[resource-path]?[hash]'
 *        },
 *        externals: [ ... externals names ... ],
 *        module: {
 *          noParse: [ /\.map$/ ],
 *          rules: [
 *            {
 *              test: /\.css$/,
 *              use: [
 *                {
 *                  loader: `@microsoft/load-themed-styles'
 *                },
 *                {
 *                  loader: 'css-loader',
 *                  options: {
 *                    minimize: true
 *                  }
 *                }
 *              ]
 *            },
 *            {
 *              test: /\.(jpg|png|woff|eot|ttf|svg|gif)$/,
 *              use: [
 *                {
 *                  loader: '@microsoft/loader-cased-file',
 *                  options: {
 *                    name: '[name:lower]_[hash].[ext]'
 *                  }
 *                }
 *              ]
 *            },
 *            {
 *              test: /\.html$/,
 *              use: [
 *                {
 *                  loader: 'html-loader'
 *                }
 *              ]
 *            }
 *          ]
 *        },
 *        plugins: []
 *      }
 */
export declare class ConfigureWebpackTask extends OdspGulpTask<IConfigureWebpackTaskConfig> {
    private _baseConfig;
    constructor();
    loadSchema(): Object;
    setConfig(config: IConfigureWebpackTaskConfig): void;
    getKarmaConfig(extraRules: webpack.Rule[], externals: webpack.ExternalsElement[], karmaTask: KarmaTask): webpack.Configuration;
    executeTask(gulp: typeof Gulp, completeCallback: (error?: string) => void): NodeJS.ReadWriteStream;
    /**
     * Modify the localized webpack config to make sure the end result is correct.
     *
     * @internal
     */
    tinkerWithLocConfig(config: webpack.Configuration): void;
    private _includeStatsPlugin(dropPath, config);
    private _appendToBaseConfig(config);
    private _logNoEntriesWarning();
    private _setWebpackConfig(config);
    private _validateEntries();
    /**
     * Writes the entrypoint file to the temp directory and returns the path to the file.
     */
    private _generateBundleEntrypointFile(bundleEntry);
}
