{"version":3,"sources":["configureWebpack/ExternalsProcessor.ts"],"names":[],"mappings":"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","file":"configureWebpack/ExternalsProcessor.js","sourcesContent":["import * as path from 'path';\r\n\r\nimport {\r\n  default as CumulativeManifestProcessor,\r\n  IReferencedProject,\r\n  IReferencedProjectMap,\r\n  ForceSearch\r\n} from './../cumulativeManifestProcessor';\r\nimport OdspGulpTask from './../OdspGulpTask';\r\nimport { resolvePackage } from './../utilities/Resolve';\r\n\r\nexport interface IExternalProjectMap {\r\n  [name: string]: IExternalProject;\r\n}\r\n\r\nexport interface IExternalProject {\r\n  /**\r\n   * The ID of the project from the manifest.\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * The name of the project.\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * The version of the project from the manifest.\r\n   */\r\n  version: string | undefined;\r\n\r\n  /**\r\n   * The failover path, if one exists.\r\n   */\r\n  failoverPath?: string;\r\n}\r\n\r\nexport interface IDynamicExternalProject extends IExternalProject {\r\n  /**\r\n   * A function to get the failover path given the package's root.\r\n   */\r\n  getFailoverPath?: (projectRootPath: string) => string;\r\n\r\n  /**\r\n   * A function to get the version of the package. Return undefined if the package is not a dependency.\r\n   */\r\n  getVersion: (projectRootPath: string) => string | undefined;\r\n}\r\n\r\nlet _nonStandardExternalMapIsInitialized: boolean = false;\r\nconst _nonStandardExternalMap: { [name: string]: IDynamicExternalProject } = {\r\n  'react': {\r\n    name: 'react',\r\n    version: undefined,\r\n    id: '0d910c1c-13b9-4e1c-9aa4-b008c5e42d7d',\r\n    getFailoverPath: (packageRoot: string) => path.join(packageRoot, 'dist', 'react.js'),\r\n    getVersion: getVersionFunction('react')\r\n  },\r\n\r\n  'react-dom': {\r\n    name: 'react-dom',\r\n    version: undefined,\r\n    id: 'aa0a46ec-1505-43cd-a44a-93f3a5aa460a',\r\n    getFailoverPath: (packageRoot: string) => path.join(packageRoot, 'dist', 'react-dom.js'),\r\n    getVersion: getVersionFunction('react-dom')\r\n  }\r\n};\r\n\r\n/**\r\n * Get an array of a project's externals' names. To be used when creating a webpack configuration.\r\n */\r\n// tslint:disable-next-line:no-any\r\nexport function getExternalsKeys(gulpTask: OdspGulpTask<any>): string[] {\r\n  // Set the linked externals if they aren't already set\r\n  setLinkedExternals(gulpTask);\r\n\r\n  const result: string[] = [];\r\n\r\n  result.push(...Object.keys(gulpTask.properties.linkedExternals));\r\n\r\n  if (gulpTask.properties.externals) {\r\n    result.push(...Object.keys(gulpTask.properties.externals));\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Set the linked externals in the task's shared properties object if it isn't already set\r\n */\r\n// tslint:disable-next-line:no-any\r\nexport function setLinkedExternals(gulpTask: OdspGulpTask<any>): void {\r\n  if (!gulpTask.properties.linkedExternals) {\r\n    const linkedExternals: IExternalProjectMap = _getLinkedExternals(gulpTask);\r\n    gulpTask.properties.linkedExternals = linkedExternals;\r\n  }\r\n}\r\n\r\nexport function includeNonStandardExternal(name: string, external: IDynamicExternalProject): void {\r\n  if (_nonStandardExternalMapIsInitialized) {\r\n    throw new Error('The non-standard external map has already been initialized, which means it\\'s probably already ' +\r\n                    'been used. Adding an additional non-standard external is likely to not have any effect.');\r\n  }\r\n\r\n  _nonStandardExternalMap[name] = external;\r\n}\r\n\r\n/**\r\n * Gets the referenced externals for a project.\r\n */\r\n// tslint:disable-next-line:no-any\r\nfunction _getLinkedExternals(gulpTask: OdspGulpTask<any>): IExternalProjectMap {\r\n  // Discover packages that should be externalized because they have manifests\r\n  const cumulativeManifestProcessor: CumulativeManifestProcessor = new CumulativeManifestProcessor(gulpTask);\r\n  const discoveredManifests: IReferencedProjectMap =\r\n    cumulativeManifestProcessor.discoverManifests(process.cwd(), ForceSearch.deepSparseIgnoreFirstProject);\r\n\r\n  const result: IExternalProjectMap = {};\r\n\r\n  // Add these projects to externalized packages\r\n  for (const manifestId in discoveredManifests) {\r\n    const referencedProject: IReferencedProject = discoveredManifests[manifestId];\r\n    if (referencedProject.packageName) {\r\n      result[referencedProject.packageName] = {\r\n        id: manifestId,\r\n        name: referencedProject.packageName,\r\n        version: referencedProject.manifestData.version\r\n      };\r\n    }\r\n  }\r\n\r\n  const nonStandardExternals: IExternalProjectMap = _getNonStandardExternals(gulpTask.buildConfig.rootPath);\r\n  for (const externalName in nonStandardExternals) {\r\n    result[externalName] = nonStandardExternals[externalName];\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * This is a temporary function that will soon be replaced by something more robust. It\r\n *  currently serves to include linked externals referenced in projects that don't have manifests.\r\n */\r\nfunction _getNonStandardExternals(projectRootPath: string): IExternalProjectMap {\r\n  const result: IExternalProjectMap = {};\r\n\r\n  _initializeNonStandardExternalMap(projectRootPath);\r\n  for (const dependency in _nonStandardExternalMap) {\r\n    _tryFillFailoverPath(projectRootPath, _nonStandardExternalMap[dependency]);\r\n    result[dependency] = _nonStandardExternalMap[dependency];\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction _initializeNonStandardExternalMap(projectRootPath: string): void {\r\n  if (!_nonStandardExternalMapIsInitialized) {\r\n    for (const packageName in _nonStandardExternalMap) {\r\n      if (_nonStandardExternalMap.hasOwnProperty(packageName)) {\r\n        const project: IDynamicExternalProject = _nonStandardExternalMap[packageName];\r\n        project.version = project.getVersion(projectRootPath) || '';\r\n      }\r\n    }\r\n\r\n    _nonStandardExternalMapIsInitialized = true;\r\n  }\r\n}\r\n\r\nexport function getVersionFunction(packageName: string): (projectRootPath: string) => string | undefined {\r\n  return (projectRootPath: string): string | undefined => {\r\n    try {\r\n      const resolvedPath: string = resolvePackage(packageName, projectRootPath);\r\n      if (resolvedPath) {\r\n        const packageJson: { version: string } = require(path.join(resolvedPath, 'package.json'));\r\n        const version: string = packageJson.version;\r\n        const matches: string[] = version.match(/([^-]*)(?:.*)/);\r\n        return matches[1];\r\n      }\r\n    } catch (e) {\r\n      return undefined;\r\n    }\r\n  };\r\n}\r\n\r\nfunction _tryFillFailoverPath(projectRootPath: string, dependency: IDynamicExternalProject): void {\r\n  if (!dependency.failoverPath && dependency.getFailoverPath) {\r\n    try {\r\n      const resolvedPath: string = resolvePackage(dependency.name, projectRootPath);\r\n      dependency.failoverPath = dependency.getFailoverPath(resolvedPath);\r\n    } catch (e) { /* no-op */ }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}