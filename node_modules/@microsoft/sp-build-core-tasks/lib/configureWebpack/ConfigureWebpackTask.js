"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var lodash = require("lodash");
var path = require("path");
var webpack = require("webpack");
var fsx = require("fs-extra");
var os_1 = require("os");
var set_webpack_public_path_plugin_1 = require("@microsoft/set-webpack-public-path-plugin");
var ExternalsProcessor_1 = require("./ExternalsProcessor");
var OdspGulpTask_1 = require("./../OdspGulpTask");
var FileUtils_1 = require("./../utilities/FileUtils");
function getComponentsBundleId(manifests) {
    return manifests.map(function (manifest) { return manifest.id + "_" + manifest.version; }).join('+');
}
exports.getComponentsBundleId = getComponentsBundleId;
function getBundleId(bundle) {
    var manifests = [];
    Object.keys(bundle.components).forEach(function (id) { return manifests.push(bundle.components[id].manifestData); });
    return getComponentsBundleId(manifests);
}
exports.getBundleId = getBundleId;
exports.fileLoaderExts = ['jpg', 'png', 'woff', 'eot', 'ttf', 'svg', 'gif'];
/**
 * Configures the @microsoft/gulp-core-build-webpack task with some smart defaults based on the package configuration.
 *
 * Example:
 *  IN:
 *    setConfig({
 *      webpack: <reference to webpack task>,
 *      webpackPublicPathOptions: <options for @microsoft/loader-set-webpack-public-path>,
 *      libraryName: <optional library name - set this if the library should be a global on the window>,
 *      configureExternalBundlingWebpackTask: <optional reference to ConfigureExternalBundlingWebpackTask task>
 *    })
 *    buildConfig.properties.entries = [{
 *      "entry": "./lib/App.js",
 *      "manifest": "./src/app.manifest.json",
 *      "outputPath": "dist/app.bundle.js"
 *    }]
 *    buildConfig.properties.externals = {
 *      "react-dom": "node_modules/react-dom/dist/react-dom.js",
 *      "react": "node_modules/react/dist/react.js",
 *      "flux": "node_modules/flux/dist/flux.js",
 *    }
 *
 *  OUT:
 *    set webpack config to (approximately):
 *    {
 *        context: ... root path ...,
 *        entry: { ... mapping of names to entries ... },
 *        resolve: {
 *          modules: [ ... root path + /node_modules ],
 *          alias: { }
 *        },
 *        output: {
 *          library: <library name, if provided>,
 *          libraryTarget: <library target, if specified> or 'amd',
 *          path: ... dist folder ...,
 *          filename: '[name].js',
 *          devtoolModuleFilenameTemplate: 'webpack:///../[resource-path]',
 *          devtoolFallbackModuleFilenameTemplate: 'webpack:///../[resource-path]?[hash]'
 *        },
 *        externals: [ ... externals names ... ],
 *        module: {
 *          noParse: [ /\.map$/ ],
 *          rules: [
 *            {
 *              test: /\.css$/,
 *              use: [
 *                {
 *                  loader: `@microsoft/load-themed-styles'
 *                },
 *                {
 *                  loader: 'css-loader',
 *                  options: {
 *                    minimize: true
 *                  }
 *                }
 *              ]
 *            },
 *            {
 *              test: /\.(jpg|png|woff|eot|ttf|svg|gif)$/,
 *              use: [
 *                {
 *                  loader: '@microsoft/loader-cased-file',
 *                  options: {
 *                    name: '[name:lower]_[hash].[ext]'
 *                  }
 *                }
 *              ]
 *            },
 *            {
 *              test: /\.html$/,
 *              use: [
 *                {
 *                  loader: 'html-loader'
 *                }
 *              ]
 *            }
 *          ]
 *        },
 *        plugins: []
 *      }
 */
var ConfigureWebpackTask = (function (_super) {
    __extends(ConfigureWebpackTask, _super);
    function ConfigureWebpackTask() {
        var _this = _super.call(this, 'configure-webpack', {
            libraryName: undefined,
            webpack: undefined,
            webpackPublicPathOptions: undefined,
            additionalConfiguration: undefined,
            configureExternalBundlingWebpackTask: undefined,
            statsObjectsDropLocation: undefined
        }) || this;
        _this._baseConfig = {
            module: {
                rules: [
                    {
                        use: [
                            {
                                loader: require.resolve('@microsoft/loader-load-themed-styles'),
                                options: {
                                    async: true
                                }
                            },
                            {
                                loader: require.resolve('css-loader'),
                                options: {
                                    minimize: true
                                }
                            }
                        ],
                        test: /\.css$/
                    },
                    {
                        use: [
                            {
                                loader: require.resolve('@microsoft/loader-cased-file'),
                                options: {
                                    name: '[name:lower]_[hash].[ext]'
                                }
                            }
                        ],
                        test: new RegExp(".(" + exports.fileLoaderExts.map(function (e) { return lodash.escapeRegExp(e); }).join('|') + ")((\\?|\\#).+)?$")
                    },
                    {
                        use: [
                            {
                                loader: require.resolve('html-loader')
                            }
                        ],
                        test: /\.html$/
                    }
                ],
                noParse: [/\.map$/]
            },
            resolve: {
                alias: {},
                modules: [
                    'node_modules',
                    'lib'
                ]
            }
        };
        return _this;
    }
    ConfigureWebpackTask.prototype.loadSchema = function () {
        return require('./configure-webpack.schema.json');
    };
    ConfigureWebpackTask.prototype.setConfig = function (config) {
        if (config.webpack && config.webpack.name !== 'webpack') {
            this.logWarning('Setting webpack property to non-"@microsoft/gulp-core-build-webpack"-type will ' +
                'prevent configuration');
        }
        _super.prototype.mergeConfig.call(this, config);
    };
    ConfigureWebpackTask.prototype.getKarmaConfig = function (extraRules, externals, karmaTask) {
        var locAliases = {};
        try {
            var locResourceKeys = Object.keys(this.properties.discoveredLocalizedResources || {});
            var resolveResult = this.resolveResources(locResourceKeys, undefined, true, karmaTask);
            var locale = resolveResult.locales[0];
            for (var _i = 0, _a = resolveResult.localizedResourcesToBundle; _i < _a.length; _i++) {
                var resourceId = _a[_i];
                // Appending "$" to the resource ID to ensure paths under it aren't matched. See
                //  https://webpack.js.org/configuration/resolve/#resolve-alias
                locAliases[resourceId + "$"] = this.properties.discoveredLocalizedResources[resourceId][locale];
            }
        }
        catch (e) {
            karmaTask.logError("Error resolving localized resources for test. Tests may fail unexpectedly. Error: " + e);
        }
        var testAddons = {
            externals: externals,
            module: {
                rules: [
                    {
                        use: [
                            {
                                loader: 'imports',
                                options: {
                                    define: false
                                }
                            }
                        ],
                        test: /sinon\.js$/
                    }
                ]
            },
            plugins: [new webpack.DefinePlugin({
                    DEBUG: !this.buildConfig.production,
                    UNIT_TEST: true,
                    NPM_BUILD: false,
                    BUILD_NUMBER: '\'unit_test\'',
                    DATACENTER: !this.buildConfig.args['on-prem']
                })],
            resolve: {
                alias: locAliases
            }
        };
        (_b = testAddons.module.rules).push.apply(_b, extraRules);
        return this._appendToBaseConfig(testAddons);
        var _b;
    };
    ConfigureWebpackTask.prototype.executeTask = function (gulp, completeCallback) {
        var _this = this;
        if (!this.taskConfig.webpack) {
            this.logWarning('"webpack" is not defined in the task configuration. Nothing to configure.');
            completeCallback();
            return;
        }
        var configValidationResult = this._validateEntries();
        if (configValidationResult) {
            completeCallback(configValidationResult);
            return;
        }
        if (!this.buildConfig.properties) {
            this._logNoEntriesWarning();
            this._setWebpackConfig({});
            completeCallback();
            return;
        }
        // The ConfigureExternalBundlingWebpackTask will disable the second webpack task
        // when doing a dev build or in a project without localized resources.
        // This, however, breaks gulp serve. Therefore, we should ensure the webpack task is activated.
        // @todo 261553 - this should be removed when we do this refactor
        this.taskConfig.webpack.isEnabled = function () { return true; };
        var configBundleEntries = this.properties.bundles || {};
        var externalsKeys = ExternalsProcessor_1.getExternalsKeys(this);
        // Remove the specified linked externals to ensure they're bundled
        if (this.taskConfig.linkedExternalsToBundle && this.taskConfig.linkedExternalsToBundle.length) {
            for (var _i = 0, _a = this.taskConfig.linkedExternalsToBundle; _i < _a.length; _i++) {
                var linkedExternalToBundle = _a[_i];
                var linkedExternalToBundleIndex = externalsKeys.indexOf(linkedExternalToBundle);
                if (linkedExternalToBundleIndex !== -1) {
                    externalsKeys.splice(linkedExternalToBundleIndex, 1);
                }
            }
        }
        var localizedResources = this.properties.localizedResources || {};
        var localizedResourcesKeys = Object.keys(localizedResources);
        var configBundleEntriesCount = Object.keys(configBundleEntries).length;
        if (configBundleEntriesCount === 0) {
            this._logNoEntriesWarning();
            this.taskConfig.webpack.isEnabled = function () { return false; };
            completeCallback();
            return;
        }
        this.logVerbose(configBundleEntriesCount + " entries specified.");
        this.logVerbose(externalsKeys.length + " externals specified.");
        this.logVerbose(localizedResourcesKeys.length + " localized resources specified.");
        localizedResourcesKeys.forEach(function (key) {
            if (externalsKeys.indexOf(key) !== -1) {
                _this.logError("Invalid Configuration: Key \"" + key + "\" is specified in both externals and localizedResources.");
            }
        });
        var webpackPublicPathOptions = lodash.clone(this.taskConfig.webpackPublicPathOptions) || {};
        if (!webpackPublicPathOptions.systemJs) {
            lodash.merge(webpackPublicPathOptions, {
                scriptName: {
                    name: '[name]_?[a-zA-Z0-9-_]*\.js',
                    isTokenized: true
                }
            });
        }
        // Users can use the --entry to control which entries actually get bundled
        // This value can match the GUID or the alias
        var entryParam = this.buildConfig.args['entry']; // tslint:disable-line:no-string-literal
        this.properties.bundleEntries = [];
        var webpackEntries = {};
        var foundEntry;
        for (var bundleName in configBundleEntries) {
            if (configBundleEntries.hasOwnProperty(bundleName)) {
                var configEntry = configBundleEntries[bundleName];
                var shouldBundleEntry = entryParam === undefined;
                var bundleEntry = {
                    bundleName: bundleName,
                    nonLocalizedEntrypointPath: path.join(this.outputDirectory, bundleName + ".js"),
                    components: {}
                };
                for (var _b = 0, _c = configEntry.components; _b < _c.length; _b++) {
                    var componentEntry = _c[_b];
                    var manifestData = this.getManifest(componentEntry.manifest);
                    // If the manifest version is "*", replace it with the package version. Do this here to make sure the
                    //  bundle's name doesn't contain the "*" version
                    if (manifestData.version === '*') {
                        var manifestVersion = this.getPackageVersion();
                        manifestData.version = manifestVersion;
                    }
                    shouldBundleEntry = shouldBundleEntry ||
                        (entryParam && manifestData &&
                            (manifestData.id.toLowerCase() === entryParam.toLowerCase() ||
                                manifestData.alias.toLowerCase() === entryParam.toLowerCase()));
                    if (entryParam === undefined || shouldBundleEntry) {
                        foundEntry = true;
                        // Keep a counter of the manifests inside the bundle so we can set the exportName property in the produced
                        //  manifest(s) and generate a JS file to bundle both components' entrypoints
                        bundleEntry.components[manifestData.id] = __assign({}, componentEntry, { manifestData: manifestData });
                    }
                }
                if (shouldBundleEntry) {
                    var componentKeys = Object.keys(bundleEntry.components);
                    if (componentKeys.length === 1) {
                        // Single component, just point to its entrypoint in the webpack config
                        webpackEntries[bundleName] = path.join(this.buildConfig.rootPath, bundleEntry.components[componentKeys[0]].entrypoint);
                    }
                    else {
                        // Multiple components, we need to generate an entry to point the webpack config at
                        webpackEntries[bundleName] = this._generateBundleEntrypointFile(bundleEntry);
                    }
                    this.properties.bundleEntries.push(bundleEntry);
                }
            }
        }
        if (entryParam && !foundEntry) {
            completeCallback("The \"--entry\" flag was specified, but \"" + entryParam + "\" did not match " +
                "the id or alias of any entries listed in config.json");
            return;
        }
        this.properties.webpackLibraryName = this.taskConfig.libraryName || (function () {
            if (_this.properties.bundleEntries.length === 0) {
                // We're not producing any bundles, so we don't need to worry about the library name
                return undefined;
            }
            else if (_this.properties.bundleEntries.length === 1) {
                // We're producing one bundle, so we can generate a simple name
                return getBundleId(_this.properties.bundleEntries[0]);
            }
            else {
                // There are multiple bundles. Because we need something unique for the webpack JSONP function, we'll just
                //  concatenate the IDs and then hash them. In the post-bundle steps, we'll replace the "define(<name>, ..."
                //  name with the real IDs. When we update this task to support multiple webpack configurations, we can
                //  separate each bundle to have its own library name.
                _this.properties.webpackLibraryNameIsTemporary = true;
                return FileUtils_1.getFullHash(_this.properties.bundleEntries.map(function (bundle) { return getBundleId(bundle); }).join(''));
            }
        })();
        var configAddons = {
            context: this.buildConfig.rootPath,
            devtool: this.buildConfig.production ? undefined : 'source-map',
            entry: webpackEntries,
            externals: externalsKeys.concat(localizedResourcesKeys),
            module: {
                rules: [
                    {
                        test: /\.js$/,
                        enforce: 'pre',
                        use: require.resolve('source-map-loader')
                    }
                ]
            },
            output: {
                chunkFilename: '[id].[name]_[chunkhash].js',
                filename: '[name].js',
                library: this.properties.webpackLibraryName,
                libraryTarget: this.taskConfig.libraryTarget || 'amd',
                path: this.outputDirectory,
                devtoolModuleFilenameTemplate: 'webpack:///../[resource-path]',
                devtoolFallbackModuleFilenameTemplate: 'webpack:///../[resource-path]?[hash]'
            },
            plugins: [
                new set_webpack_public_path_plugin_1.SetPublicPathPlugin(webpackPublicPathOptions)
            ]
        };
        this._includeStatsPlugin(path.join(this.buildConfig.rootPath, this.buildConfig.tempFolder, "stats"), configAddons);
        if (this.taskConfig.statsObjectsDropLocation) {
            var resolvedPath = path.resolve(this.buildConfig.rootPath, this.taskConfig.statsObjectsDropLocation);
            this._includeStatsPlugin(resolvedPath, configAddons);
        }
        if (this.buildConfig.production) {
            configAddons.plugins.push(new webpack.optimize.UglifyJsPlugin({
                compress: {
                    dead_code: true,
                    warnings: false
                },
                mangle: true
            }));
        }
        var buildNumber = undefined;
        if (process.env.BUILD_BUILDNUMBER) {
            buildNumber = "'" + process.env.BUILD_BUILDNUMBER.toLowerCase() + "'";
        }
        configAddons.plugins.push(new webpack.DefinePlugin({
            DEBUG: !this.buildConfig.production,
            UNIT_TEST: false,
            NPM_BUILD: this.npmBuild,
            BUILD_NUMBER: buildNumber
        }));
        var config = this._appendToBaseConfig(configAddons);
        if (this.taskConfig.configureExternalBundlingWebpackTask) {
            this.taskConfig.configureExternalBundlingWebpackTask.tinkerWithBaseWebpackConfig(config);
        }
        if (this.taskConfig.additionalConfiguration) {
            config = this.taskConfig.additionalConfiguration(config);
        }
        this._setWebpackConfig(config);
        completeCallback();
        return;
    };
    /**
     * Modify the localized webpack config to make sure the end result is correct.
     *
     * @internal
     */
    ConfigureWebpackTask.prototype.tinkerWithLocConfig = function (config) {
        config.output.libraryTarget = this.taskConfig.libraryTarget || 'amd';
    };
    ConfigureWebpackTask.prototype._includeStatsPlugin = function (dropPath, config) {
        // tslint:disable-next-line:typedef variable-name
        var BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;
        var lastDirName = path.basename(this.buildConfig.rootPath);
        config.plugins.push(new BundleAnalyzerPlugin({
            openAnalyzer: false,
            analyzerMode: 'static',
            reportFilename: path.join(dropPath, lastDirName + ".stats.html"),
            generateStatsFile: true,
            statsFilename: path.join(dropPath, lastDirName + ".stats.json"),
            logLevel: 'error'
        }));
    };
    ConfigureWebpackTask.prototype._appendToBaseConfig = function (config) {
        return lodash.mergeWith({}, this._baseConfig, config, function (value1, value2) {
            if (lodash.isArray(value1) && lodash.isArray(value2)) {
                return lodash.concat(value1, value2);
            }
            else {
                return undefined;
            }
        });
    };
    ConfigureWebpackTask.prototype._logNoEntriesWarning = function () {
        this.logWarning('No entries are defined, so no bundles will be produced.');
    };
    ConfigureWebpackTask.prototype._setWebpackConfig = function (config) {
        var webpackTask = this.taskConfig.webpack;
        var sourceMapWarningSuppression = /Cannot find SourceMap \'.+\'\: Error\:/;
        var suppressedWarnings = webpackTask.taskConfig.suppressWarnings || [];
        if (webpackTask) {
            webpackTask.setConfig({
                config: config,
                configPath: null,
                suppressWarnings: suppressedWarnings.concat([sourceMapWarningSuppression])
            });
        }
    };
    ConfigureWebpackTask.prototype._validateEntries = function () {
        if (this.properties.bundles) {
            var entrypointPaths = new Set();
            var manifestPaths = new Set();
            for (var bundleName in this.properties.bundles) {
                if (this.properties.bundles.hasOwnProperty(bundleName)) {
                    var bundleEntry = this.properties.bundles[bundleName];
                    for (var _i = 0, _a = bundleEntry.components; _i < _a.length; _i++) {
                        var component = _a[_i];
                        var entrypointPath = path.resolve(path.join(this.buildConfig.rootPath, component.entrypoint)).toUpperCase();
                        if (entrypointPaths.has(entrypointPath)) {
                            return "Entry path \"" + entrypointPath + "\" occurs in multiple config.json components. This is not supported.";
                        }
                        else {
                            entrypointPaths.add(entrypointPath);
                        }
                        var manifestPath = path.resolve(path.join(this.buildConfig.rootPath, component.manifest)).toUpperCase();
                        if (manifestPaths.has(manifestPath)) {
                            return "Manifest path \"" + manifestPath + "\" occurs in multiple config.json components. This is not " +
                                'supported.';
                        }
                        else {
                            manifestPaths.add(manifestPath);
                        }
                    }
                }
            }
        }
    };
    /**
     * Writes the entrypoint file to the temp directory and returns the path to the file.
     */
    ConfigureWebpackTask.prototype._generateBundleEntrypointFile = function (bundleEntry) {
        var _this = this;
        var filePath = path.join(this.buildConfig.rootPath, this.buildConfig.tempFolder, 'bundle-entries', bundleEntry.bundleName + ".js");
        var fileContents = [
            'Object.defineProperty(exports, "__esModule", { value: true });'
        ].concat(Object.keys(bundleEntry.components).map(function (id) {
            var fullEntrypointPath = path.join(_this.buildConfig.rootPath, bundleEntry.components[id].entrypoint);
            return "exports['" + id + "'] = require('" + fullEntrypointPath.replace(/\\/g, '\\\\') + "');";
        })).join(os_1.EOL);
        fsx.ensureDirSync(path.dirname(filePath));
        fsx.writeFileSync(filePath, fileContents);
        return filePath;
    };
    return ConfigureWebpackTask;
}(OdspGulpTask_1.default));
exports.ConfigureWebpackTask = ConfigureWebpackTask;

//# sourceMappingURL=ConfigureWebpackTask.js.map
