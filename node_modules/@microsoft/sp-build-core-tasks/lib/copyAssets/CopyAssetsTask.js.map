{"version":3,"sources":["copyAssets/CopyAssetsTask.ts"],"names":[],"mappings":"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","file":"copyAssets/CopyAssetsTask.js","sourcesContent":["import * as webpack from 'webpack';\r\nimport * as path from 'path';\r\nimport * as Gulp from 'gulp';\r\nimport * as through2 from 'through2';\r\nimport * as gulpUtil from 'gulp-util';\r\nimport * as merge from 'merge2';\r\nimport * as gulpReplace from 'gulp-replace';\r\nimport { escapeRegExp } from 'lodash';\r\n\r\nimport setWebpackPublicPath = require('@microsoft/set-webpack-public-path-plugin');\r\nimport { IClientSideComponentManifest } from '@microsoft/sp-module-interfaces';\r\nimport { INonAMDExternalModuleConfig } from './../configJson/index';\r\nimport {\r\n  IComponentModuleConfiguration,\r\n  IPathModuleConfiguration,\r\n  ILocalizedPathModuleConfiguration\r\n} from '@microsoft/sp-module-interfaces';\r\n\r\nimport { IExternalProject } from './../configureWebpack/ExternalsProcessor';\r\nimport {\r\n  ILocaleMap,\r\n  default as OdspGulpTask\r\n} from './../OdspGulpTask';\r\nimport {\r\n  IBundleEntry,\r\n  getBundleId\r\n} from './../configureWebpack/ConfigureWebpackTask';\r\nimport constants from '../constants';\r\nimport { isUrl } from '../utilities/url';\r\nimport {\r\n  getFullHash,\r\n  rename,\r\n  renameWithHash\r\n} from './../utilities/FileUtils';\r\n\r\n// If we change the type of bundle we're producing, we need to update this\r\nconst escapedStringsName: string = escapeRegExp(constants.stringsExternalBundleName);\r\nconst defaultStringsModuleRegex: RegExp =\r\n  new RegExp(`^(define\\\\(.*\\\\[.*(\\\\\"|\\\\'))(?:${escapedStringsName})((?:\\\\2).*\\])`);\r\n\r\nexport const externalsRegex: RegExp = /external \\\"(.+)\\\"$/;\r\n\r\nexport interface ICopyAssetsTaskConfig {\r\n  /**\r\n   * Path to where assets should be staged for deployment to CDN during a production build\r\n   */\r\n  deployCdnPath?: string;\r\n\r\n  /**\r\n   * Extensions of webpack-produced assets to ignore\r\n   */\r\n  extsToIgnore?: string[];\r\n\r\n  /**\r\n   * If true, production builds will no longer generate file names that have a hash. Defaults to false.\r\n   */\r\n  excludeHashFromFileNames?: boolean;\r\n\r\n  /**\r\n   * If true, production builds will place localized files in directories named according to the locale. For example\r\n   *  an output file called \"my-component.js\" will be written to \"<deployCdnPath>/my-component_en-us-<hash>.js\" if this\r\n   *  property is false and it will be written to \"<deployCdnPath>/en-us/my-component-<hash>.js\" if this property\r\n   *  is true. Non-localized resources will be placed in the same directory regardless of whether this property is true\r\n   *  or false. Defaults to false.\r\n   */\r\n  localeInDirectoryName?: boolean;\r\n}\r\n\r\nexport interface IWebpackStatsObject {\r\n  assets: IWebpackAsset[];\r\n  chunks: IWebpackChunk[];\r\n  modules: IWebpackModule[];\r\n}\r\n\r\nexport interface IWebpackAsset {\r\n  name: string;\r\n  chunks: number[];\r\n}\r\n\r\nexport interface IWebpackChunk {\r\n  entry: boolean;\r\n  id: number;\r\n  files: string[];\r\n  names: string[];\r\n  hash: string;\r\n  size: number;\r\n}\r\n\r\nexport interface IWebpackModule {\r\n  name: string;\r\n  chunks: number[];\r\n}\r\n\r\ninterface IExtendedWebpackModule extends IWebpackModule {\r\n  externalName?: string;\r\n  renameCallbacks?: ((filename: string) => void)[];\r\n  configExternalFullPath?: string;\r\n  isExternalUrl: boolean;\r\n  nonAmdConfig: INonAMDExternalModuleConfig;\r\n}\r\n\r\nexport interface IDeployEntry {\r\n  bundleEntry: IBundleEntry;\r\n  entryName?: string;\r\n  debugModules?: IDeployModules;\r\n  productionModules?: IDeployModules;\r\n}\r\n\r\nexport interface IDeployModules {\r\n  entryModuleId?: string;\r\n  localizedPathModules: Map<string, ILocalizedPathModuleConfiguration>;\r\n  pathModules: Map<string, IPathModuleConfiguration>;\r\n  componentModules: Map<string, IComponentModuleConfiguration>;\r\n}\r\n\r\ninterface IDefaultLocale {\r\n  defaultLocale: string;\r\n  defaultLocaleInPaths: boolean;\r\n}\r\n\r\n/**\r\n * Prepares deployment to CDNs and the manifest server through onedrive-buildtools.\r\n *\r\n * Example:\r\n *  IN:\r\n *   webpack stats\r\n *   deployCdnPath - a path where files should be placed for upload to CDNs and the manifest server\r\n *\r\n *  OUT:\r\n *   all assets for the package copied to {deployCdnPath}\r\n *   all externals for the package copied to {deployCdnPath}\r\n *   data required to produce manifests in the properties object\r\n */\r\nexport class CopyAssetsTask extends OdspGulpTask<ICopyAssetsTaskConfig> {\r\n  constructor() {\r\n    super(\r\n      'copy-assets',\r\n      {\r\n        deployCdnPath: undefined,\r\n        extsToIgnore: ['.map', '.stats.json', '.stats.html'],\r\n        excludeHashFromFileNames: false,\r\n        localeInDirectoryName: false\r\n      }\r\n    );\r\n  }\r\n\r\n  public loadSchema(): Object {\r\n    return require('./copy-assets.schema.json');\r\n  }\r\n\r\n  public executeTask(gulp: typeof Gulp, completeCallback: (error?: string) => void): NodeJS.ReadWriteStream {\r\n    let shouldPrepareProductionDeployment: boolean = this.buildConfig.production;\r\n    if (!this.taskConfig.deployCdnPath && this.buildConfig.production) {\r\n      shouldPrepareProductionDeployment = false;\r\n      // Suppressed warning for now to unblock CI. VSO#219493\r\n      this.log/*Warning*/('No deploy CDN path specified. Unable to prepare production deployment.');\r\n    }\r\n\r\n    const webpackStats: webpack.compiler.Stats = this.properties.initialWebpackStats || this.properties.webpackStats;\r\n    if (!webpackStats) {\r\n      if (this.properties.bundles && Object.keys(this.properties.bundles).length > 0) {\r\n        // Only warn if webpack should have done something\r\n        this.logWarning('Missing webpack stats object. Nothing to prepare for deployment.');\r\n      }\r\n\r\n      completeCallback();\r\n      return;\r\n    }\r\n\r\n    const bundleEntries: IBundleEntry[]  = this.properties.bundleEntries;\r\n    if (!bundleEntries || !bundleEntries.length || bundleEntries.length === 0) {\r\n      this.logWarning('Missing config entries list. Nothing to prepare for deployment.');\r\n      completeCallback();\r\n      return;\r\n    }\r\n\r\n    const tasks: NodeJS.ReadWriteStream[] = [];\r\n\r\n    const webpackEntryChunks: Map<string, IWebpackChunk> = new Map<string, IWebpackChunk>();\r\n    const externalModules: IExtendedWebpackModule[] = [];\r\n\r\n    const webpackStatsJson: IWebpackStatsObject = webpackStats.toJson();\r\n    const {\r\n      assets: webpackAssets,\r\n      chunks: webpackChunks,\r\n      modules: webpackModules\r\n    }: IWebpackStatsObject  = webpackStatsJson;\r\n\r\n    webpackChunks.forEach((webpackChunk: IWebpackChunk) => {\r\n      if (webpackChunk.entry) {\r\n        webpackChunk.names.forEach((name: string) => {\r\n          webpackEntryChunks.set(name, webpackChunk);\r\n        });\r\n      }\r\n    });\r\n\r\n    const configExternals: { [name: string]: string | INonAMDExternalModuleConfig } = this.properties.externals || {};\r\n\r\n    webpackModules.forEach((webpackModule: IExtendedWebpackModule) => {\r\n      const matches: RegExpMatchArray = webpackModule.name.match(externalsRegex);\r\n      if (matches) {\r\n        const externalName: string = matches[1];\r\n        const configExternal: string | INonAMDExternalModuleConfig = configExternals[externalName];\r\n        const linkedExternal: IExternalProject = (this.properties.linkedExternals || {})[externalName];\r\n        let configExternalPath: string;\r\n\r\n        if (configExternal) {\r\n          if (linkedExternal) {\r\n            this.logError(`External \"${externalName}\" is specified both as a linked package in the node_modules ` +\r\n                          'dependency tree and as an external in in the config.json file. Remove one of the external ' +\r\n                          'references. Only one external reference type is allowed per external package.');\r\n            return;\r\n          } else {\r\n            if (typeof configExternal === 'string') {\r\n              // it is an AMD external\r\n              configExternalPath = configExternal as string;\r\n            } else {\r\n              // it is a non-AMD external\r\n              configExternalPath = configExternal.path;\r\n\r\n              if (!configExternal.globalName) {\r\n                this.logError(`External \"${externalName}\" is defined as a Non-AMD script,` +\r\n                  `but is missing a globalName property.`);\r\n                return;\r\n              }\r\n\r\n              webpackModule.nonAmdConfig = configExternal as INonAMDExternalModuleConfig;\r\n\r\n              (configExternal.globalDependencies || []).forEach((nonAMDDependency: string) => {\r\n                const dependencyConfig: INonAMDExternalModuleConfig =\r\n                  configExternals[nonAMDDependency] as INonAMDExternalModuleConfig;\r\n\r\n                if (!dependencyConfig) {\r\n                  this.logError(`External \"${externalName}\" is referencing dependency \"${nonAMDDependency}\" which is ` +\r\n                                'not defined.');\r\n                  return;\r\n                } else if (!dependencyConfig.globalName) {\r\n                  this.logError(`External \"${externalName}\" is referencing dependency \"${nonAMDDependency}\", ` +\r\n                                'which is not defined as a global, non-AMD external.');\r\n                  return;\r\n                } else if (this.properties.bundledExternals &&\r\n                          this.properties.bundledExternals.indexOf(nonAMDDependency) !== -1) {\r\n                  this.logError(`External \"${externalName}\" is referencing dependency \"${nonAMDDependency}\", which ` +\r\n                                'has been bundled.');\r\n                  return;\r\n                }\r\n              });\r\n            }\r\n          }\r\n        }\r\n\r\n        if (configExternalPath) {\r\n          // Keep the whole path if it is a full URL\r\n          webpackModule.isExternalUrl = isUrl(configExternalPath);\r\n\r\n          const configExternalFullPath: string = webpackModule.isExternalUrl\r\n              ? configExternalPath : path.join(this.buildConfig.rootPath, configExternalPath);\r\n\r\n          webpackModule.configExternalFullPath = configExternalFullPath;\r\n        } else if (!this.properties.discoveredLocalizedResources[externalName] &&\r\n                   !linkedExternal) {\r\n          // Make sure if we haven't found other references to this external, it's been discovered as a localized\r\n          // external\r\n          this.logError(`External \"${externalName}\" is not correctly referenced in config.json. Deployed ` +\r\n                        'modules will produce unexpected behavior.');\r\n        }\r\n\r\n        if (!this.properties.bundledExternals || this.properties.bundledExternals.indexOf(externalName) === -1) {\r\n          // Only record the external it if hasn't been bundled by a second webpack run\r\n          webpackModule.externalName = externalName; // Add the external name as a new property\r\n          webpackModule.renameCallbacks = []; // Create a list of callbacks here\r\n          externalModules.push(webpackModule);\r\n        }\r\n      }\r\n    });\r\n\r\n    // Copy non-entry assets to the CDN deploy directory\r\n    if (shouldPrepareProductionDeployment) {\r\n      const assetsToCopy: string[] = [];\r\n      for (const webpackAsset of webpackAssets) {\r\n        const notIgnoredExt: boolean = !this.taskConfig.extsToIgnore ||\r\n          this.taskConfig.extsToIgnore.reduce((state: boolean, ext: string) =>\r\n            state && webpackAsset.name.slice(-ext.length) !== ext, true);\r\n        const notEntryChunk: boolean = webpackAsset.chunks.reduce((state: boolean, chunkId: number) =>\r\n            state && !webpackChunks[chunkId].entry, true);\r\n\r\n        if (notIgnoredExt && notEntryChunk) {\r\n            // If we make it here, we aren't ignoring this chunk's extension and it isn't an entrypoint asset\r\n            // so we should copy it to the CDN deploy directory\r\n\r\n            if (!this.taskConfig.excludeHashFromFileNames) {\r\n              // Try to ensure the file has a checksum in the filename\r\n              let checksumFound: boolean = false;\r\n              if (webpackAsset.chunks.length > 0) {\r\n                // Look through all of the asset's chunks and ensure the asset's name contains one of the chunks' hashes\r\n                checksumFound = webpackAsset.chunks.reduce((state: boolean, chunkId: number) =>\r\n                  state || webpackAsset.name.indexOf(webpackChunks[chunkId].hash) > -1 , false);\r\n              } else {\r\n                // Split the filename by \"-\" and \"_\", and test each part to see if it looks like a\r\n                //  5+ character hex digest\r\n                const name: string = webpackAsset.name;\r\n                const filenameParts: string[] = path.basename(name, path.extname(name)).split(/[-_]/);\r\n                checksumFound = filenameParts.reduce((state: boolean, filenamePart: string) =>\r\n                  state || !!filenamePart.match(/[a-fA-F0-9]{5,}/), false);\r\n              }\r\n\r\n              if (!checksumFound) {\r\n                this.logError(`Webpack-produced asset \"${webpackAsset.name}\" does not appear to have a checksum ` +\r\n                              'in its filename, meaning that it is not safe to deploy to the CDN.');\r\n              }\r\n            }\r\n\r\n            const assetPath: string = path.join(this.outputDirectory, webpackAsset.name);\r\n            assetsToCopy.push(assetPath);\r\n\r\n            if (webpackAsset.name.toLowerCase() !== webpackAsset.name) {\r\n              this.logWarning(`Asset \"${webpackAsset.name}\"'s name is not all lowercase and will likely not be ` +\r\n                              'accessible after being copied to the CDN. Ensure that its name is all lowercase, ' +\r\n                              'and consider using the \"@microsoft/loader-cased-file\" loader.');\r\n            }\r\n        }\r\n      }\r\n\r\n      // Copy the assets we've queued\r\n      tasks.push(gulp.src(assetsToCopy).pipe(gulp.dest(this.taskConfig.deployCdnPath)));\r\n    }\r\n\r\n    const deployEntries: IDeployEntry[] = [];\r\n\r\n    const stringsCopyCallbackMap: Map<string, ((locale: string, filename: string) => void)[]> =\r\n              new Map<string, ((locale: string, filename: string) => void)[]>();\r\n\r\n    bundleEntries.forEach((bundleEntry: IBundleEntry) => {\r\n      const deployEntry: IDeployEntry = {\r\n        bundleEntry: bundleEntry,\r\n        entryName: bundleEntry.bundleName\r\n      };\r\n      deployEntries.push(deployEntry);\r\n\r\n      deployEntry.debugModules = {\r\n        localizedPathModules: new Map<string, ILocalizedPathModuleConfiguration>(),\r\n        pathModules: new Map<string, IPathModuleConfiguration>(),\r\n        componentModules: new Map<string, IComponentModuleConfiguration>()\r\n      };\r\n      deployEntry.productionModules = {\r\n        localizedPathModules: new Map<string, ILocalizedPathModuleConfiguration>(),\r\n        pathModules: new Map<string, IPathModuleConfiguration>(),\r\n        componentModules: new Map<string, IComponentModuleConfiguration>()\r\n      };\r\n\r\n      const manifestIds: string[] = [];\r\n      Object.keys(bundleEntry.components).forEach((id) => {\r\n        const manifest: IClientSideComponentManifest = bundleEntry.components[id].manifestData;\r\n        if (manifest) {\r\n          manifestIds.push(manifest.id);\r\n        }\r\n      });\r\n\r\n      if (manifestIds.length === 0) {\r\n        this.logWarning(`Missing manifest for entry \"${bundleEntry.components[0].entrypoint}\". ` +\r\n                        'Unable to prepare deployment for this entry.');\r\n        return;\r\n      }\r\n\r\n      const stringsBaseName: string = manifestIds.length === 1 ? manifestIds[0] : getFullHash(manifestIds.join(''));\r\n      const stringsModuleId: string = `${stringsBaseName}_strings`;\r\n\r\n      this._processEntry(\r\n        gulp,\r\n        deployEntry,\r\n        shouldPrepareProductionDeployment,\r\n        stringsModuleId,\r\n        tasks\r\n      );\r\n\r\n      const entryWebpackChunk: IWebpackChunk = webpackEntryChunks.get(bundleEntry.bundleName);\r\n      const webpackChunkId: number = entryWebpackChunk.id;\r\n      this._processExternalsForEntry(webpackChunkId,\r\n                                     deployEntry,\r\n                                     externalModules,\r\n                                     stringsModuleId,\r\n                                     shouldPrepareProductionDeployment,\r\n                                     stringsCopyCallbackMap);\r\n    });\r\n\r\n    this._copyStrings(gulp, stringsCopyCallbackMap, tasks);\r\n\r\n    this._processExternals(gulp, externalModules, tasks);\r\n\r\n    // Save the deploy entries so they can be picked up by the WriteManifests task.\r\n    this.properties.deployEntries = deployEntries;\r\n\r\n    return merge(tasks).on('finish', () => completeCallback());\r\n  }\r\n\r\n  private _copyStrings(\r\n    gulp: typeof Gulp,\r\n    stringsCopyCallbackMap: Map<string, ((locale: string, filename: string) => void)[]>,\r\n    tasks: NodeJS.ReadWriteStream[]\r\n  ): void {\r\n    const moduleBaseName: string = path.basename(this.buildConfig.rootPath).toLowerCase();\r\n\r\n    stringsCopyCallbackMap.forEach((callbacks: ((locale: string, filename: string) => void)[], key: string) => {\r\n      const isStandardStringsModule: boolean = key === constants.stringsExternalBundleName;\r\n      const baseFilename: string = isStandardStringsModule\r\n                                    ? moduleBaseName\r\n                                    : `${moduleBaseName}-${key.toLowerCase().replace(/\\//g, '_')}`;\r\n      const localizedFiles: ILocaleMap = this.properties.discoveredLocalizedResources[key];\r\n      for (const locale in localizedFiles) {\r\n        if (localizedFiles.hasOwnProperty(locale)) {\r\n          const filenameCallback: (filename: string) => void =\r\n            (filename: string) => callbacks.forEach((callback) => callback(locale, filename));\r\n          const gulpStream: NodeJS.ReadWriteStream = this.taskConfig.excludeHashFromFileNames ?\r\n            rename(\r\n              gulp.src(localizedFiles[locale]),\r\n              (hash: string) => `${baseFilename}_${locale}.js`,\r\n              filenameCallback) :\r\n            renameWithHash(\r\n              gulp.src(localizedFiles[locale]),\r\n              (hash: string) => `${baseFilename}_${locale}_${hash}.js`,\r\n              filenameCallback);\r\n\r\n          tasks.push(gulpStream.pipe(gulp.dest(this.taskConfig.deployCdnPath)));\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private _processEntry(\r\n    gulp: typeof Gulp,\r\n    deployEntry: IDeployEntry,\r\n    shouldPrepareProductionDeployment: boolean,\r\n    stringsModuleId: string,\r\n    tasks: NodeJS.ReadWriteStream[]\r\n  ): boolean {\r\n    const bundleEntry: IBundleEntry = deployEntry.bundleEntry;\r\n    if (bundleEntry.nonLocalizedEntrypointPath && bundleEntry.localizedEntrypointPaths) {\r\n      this.logError('Both localized and non-localized entrypoint files are specified for ' +\r\n                    `entry ${deployEntry.bundleEntry}. Only one may be specified.`);\r\n      return false;\r\n    }\r\n\r\n    const entryName: string = deployEntry.entryName;\r\n\r\n    let entrypointFilesGlob: string[];\r\n    let productionRenameCallback: (filename: string, originalFilename: string) => void;\r\n    let getFilenameWithHashCallback: (hash: string, originalFilename?: string) => string;\r\n    let getFilenameCallback: (originalFilename?: string) => string;\r\n\r\n    if (bundleEntry.nonLocalizedEntrypointPath) {\r\n      const entryBundlePath: string = bundleEntry.nonLocalizedEntrypointPath;\r\n\r\n      entrypointFilesGlob = [entryBundlePath];\r\n\r\n      // Record the debug entry module\r\n      const debugModules: IDeployModules = deployEntry.debugModules;\r\n      const debugEntryModule: IPathModuleConfiguration = {\r\n        type: 'path',\r\n        path: entryBundlePath\r\n      };\r\n      debugModules.pathModules.set(entryName, debugEntryModule);\r\n      debugModules.entryModuleId = entryName;\r\n\r\n      if (shouldPrepareProductionDeployment) {\r\n        // Record the production entry module\r\n        const productionModules: IDeployModules = deployEntry.productionModules;\r\n        const productionEntryModule: IPathModuleConfiguration = {\r\n          type: 'path',\r\n          path: undefined\r\n        };\r\n        productionModules.pathModules.set(entryName, productionEntryModule);\r\n        productionModules.entryModuleId = entryName;\r\n\r\n        productionRenameCallback = (filename: string) => productionEntryModule.path = filename;\r\n        getFilenameWithHashCallback = (hash: string) => `${entryName.toLowerCase()}_${hash}.js`;\r\n        getFilenameCallback = () => `${entryName.toLowerCase()}.js`;\r\n      }\r\n    } else if (bundleEntry.localizedEntrypointPaths) {\r\n      const reverseEntrypointLookup: { [filePath: string]: string } = {};\r\n      entrypointFilesGlob = [];\r\n\r\n      for (const locale in bundleEntry.localizedEntrypointPaths) {\r\n        if (bundleEntry.localizedEntrypointPaths.hasOwnProperty(locale)) {\r\n          const entrypointPath: string = bundleEntry.localizedEntrypointPaths[locale];\r\n          reverseEntrypointLookup[entrypointPath] = locale;\r\n          entrypointFilesGlob.push(entrypointPath);\r\n        }\r\n      }\r\n\r\n      const defaultLocale: IDefaultLocale =\r\n        this._selectDefaultLocaleForResource(bundleEntry.localizedEntrypointPaths, entryName);\r\n\r\n      // Record the debug entry module\r\n      const debugModules: IDeployModules = deployEntry.debugModules;\r\n      const debugEntryModule: ILocalizedPathModuleConfiguration = {\r\n        type: 'localizedPath',\r\n        paths: {},\r\n        defaultPath: undefined\r\n      };\r\n      debugModules.localizedPathModules.set(entryName, debugEntryModule);\r\n      debugModules.entryModuleId = entryName;\r\n\r\n      this._fillLocalizedPaths(bundleEntry.localizedEntrypointPaths, defaultLocale, debugEntryModule);\r\n\r\n      if (shouldPrepareProductionDeployment) {\r\n        // Record the production entry module\r\n        const productionModules: IDeployModules = deployEntry.productionModules;\r\n        const productionEntryModule: ILocalizedPathModuleConfiguration = {\r\n          type: 'localizedPath',\r\n          paths: {},\r\n          defaultPath: undefined\r\n        };\r\n        productionModules.localizedPathModules.set(entryName, productionEntryModule);\r\n        productionModules.entryModuleId = entryName;\r\n\r\n        productionRenameCallback = (filename: string, originalFilename: string) => {\r\n          const locale: string = reverseEntrypointLookup[originalFilename];\r\n          this._fillLocalizedPath(filename, locale, defaultLocale, productionEntryModule);\r\n        };\r\n\r\n        getFilenameWithHashCallback = (hash: string, originalFilename: string) => {\r\n          const locale: string = reverseEntrypointLookup[originalFilename];\r\n          if (this.taskConfig.localeInDirectoryName) {\r\n            return `${locale}/${entryName.toLowerCase()}_${hash}.js`;\r\n          } else {\r\n            return `${entryName.toLowerCase()}_${locale}_${hash}.js`;\r\n          }\r\n        };\r\n\r\n        getFilenameCallback = (originalFilename: string) => {\r\n          const locale: string = reverseEntrypointLookup[originalFilename];\r\n          if (this.taskConfig.localeInDirectoryName) {\r\n            return `${locale}/${entryName.toLowerCase()}.js`;\r\n          } else {\r\n            return `${entryName.toLowerCase()}_${locale}.js`;\r\n          }\r\n        };\r\n      }\r\n    } else {\r\n      this.logError('Neither a localized entrypoint file nor non-localized entrypoint files are specified for ' +\r\n                    `entry ${deployEntry.bundleEntry}. One must be specified.`);\r\n      return false;\r\n    }\r\n\r\n    // Initialize the entry gulp stream and make a few initial transformations\r\n    let entryGulpStream: NodeJS.ReadWriteStream =\r\n          gulp.src(entrypointFilesGlob)\r\n              .pipe(through2.obj(this._insertGlobalRegisterCodeIfNecessary(this, !this.buildConfig.production)))\r\n              .pipe(gulpReplace(defaultStringsModuleRegex, `$1${stringsModuleId}$3`));\r\n\r\n    entryGulpStream = this._transformBundleHeader(entryGulpStream, bundleEntry);\r\n\r\n    // Write entry file(s) back to 'dist'\r\n    entryGulpStream = entryGulpStream.pipe(gulp.dest(this.outputDirectory));\r\n\r\n    if (shouldPrepareProductionDeployment) {\r\n      // conditionally rename files with hashes\r\n      entryGulpStream = this.taskConfig.excludeHashFromFileNames ?\r\n        rename(entryGulpStream, getFilenameCallback, productionRenameCallback) :\r\n        renameWithHash(entryGulpStream, getFilenameWithHashCallback, productionRenameCallback);\r\n\r\n      // Write production file(s) to the CDN deploy path\r\n      entryGulpStream = entryGulpStream.pipe(gulp.dest(this.taskConfig.deployCdnPath));\r\n    }\r\n\r\n    tasks.push(entryGulpStream);\r\n  }\r\n\r\n  private _transformBundleHeader(\r\n    entryGulpStream: NodeJS.ReadWriteStream,\r\n    bundleEntry: IBundleEntry\r\n  ): NodeJS.ReadWriteStream {\r\n    const escapedName: string = escapeRegExp(this.properties.webpackLibraryName);\r\n    if (Object.keys(bundleEntry.components).length > 1) {\r\n      // If there are multiple components, clear out the name to make sure the bundle can be correctly loaded.\r\n      const bundleTemporaryNameRegex: RegExp = new RegExp(`^(define\\\\()(\\\\\"|\\\\')${escapedName}\\\\2,\\\\s*`);\r\n      return entryGulpStream.pipe(gulpReplace(bundleTemporaryNameRegex, '$1'));\r\n    } else if (this.properties.webpackLibraryNameIsTemporary) {\r\n      // If webpackLibraryNameIsTemporary is true, we need to create a regex to find it and replace it in the\r\n      //  \"define(<name>, ...\" statement\r\n      // If we change the type of bundle we're producing, we need to update this\r\n      const bundleTemporaryNameRegex: RegExp = new RegExp(`^(define\\\\((\\\\\"|\\\\'))(?:${escapedName})((?:\\\\2)\\,)`);\r\n      const correctName: string = getBundleId(bundleEntry);\r\n      return entryGulpStream.pipe(gulpReplace(bundleTemporaryNameRegex, `$1${correctName}$3`));\r\n    } else {\r\n      return entryGulpStream;\r\n    }\r\n  }\r\n\r\n  private _processExternals(\r\n    gulp: typeof Gulp,\r\n    externalModules: IExtendedWebpackModule[],\r\n    tasks: NodeJS.ReadWriteStream[]\r\n  ): void {\r\n    externalModules.forEach((externalModule: IExtendedWebpackModule) => {\r\n      if (externalModule.renameCallbacks.length > 0) {\r\n        // Replace slashes in the filename with dashes so we don't end up with unexpected subfolders\r\n        const baseFilename: string = externalModule.externalName.replace(/[\\/\\\\]/, '-');\r\n        const fileCallback: (filename: string) => void =\r\n          (filename: string) => externalModule.renameCallbacks.forEach((renameCallback) => renameCallback(filename));\r\n\r\n        const gulpStream: NodeJS.ReadWriteStream = this.taskConfig.excludeHashFromFileNames ?\r\n          rename(\r\n            gulp.src(externalModule.configExternalFullPath),\r\n            () => `${baseFilename.toLowerCase()}.js`,\r\n            fileCallback\r\n          ) :\r\n          renameWithHash(\r\n            gulp.src(externalModule.configExternalFullPath),\r\n            (hash: string) => `${baseFilename.toLowerCase()}_${hash}.js`,\r\n            fileCallback\r\n          );\r\n\r\n        tasks.push(gulpStream.pipe(gulp.dest(this.taskConfig.deployCdnPath)));\r\n      }\r\n    });\r\n  }\r\n\r\n  private _processExternalsForEntry(webpackChunkId: number,\r\n                                    deployEntry: IDeployEntry,\r\n                                    externalModules: IExtendedWebpackModule[],\r\n                                    stringsModuleId: string,\r\n                                    shouldPrepareProductionDeployment: boolean,\r\n                                    stringsCopyCallbackMap: Map<string,\r\n                                                                ((locale: string, filename: string) => void)[]>): void {\r\n    externalModules.forEach((externalModule: IExtendedWebpackModule) => {\r\n      // Determine if this external is referenced by the entry chunk\r\n      if (externalModule.chunks.reduce((state: boolean, chunkId: number) => state || webpackChunkId === chunkId,\r\n                                        false)) {\r\n        const externalName: string = externalModule.externalName;\r\n\r\n        const localizedResource: ILocaleMap =  this.properties.discoveredLocalizedResources[externalName];\r\n        if (localizedResource) {\r\n          // This is a localized resource\r\n          const isStandardStringsModule: boolean = externalName === constants.stringsExternalBundleName;\r\n          const resourceName: string = isStandardStringsModule ? stringsModuleId : externalName;\r\n\r\n          const debugModule: ILocalizedPathModuleConfiguration = {\r\n            defaultPath: undefined,\r\n            type: 'localizedPath',\r\n            paths: {}\r\n          };\r\n          deployEntry.debugModules.localizedPathModules.set(resourceName, debugModule);\r\n\r\n          const defaultLocale: IDefaultLocale = this._selectDefaultLocaleForResource(localizedResource, resourceName);\r\n\r\n          this._fillLocalizedPaths(localizedResource, defaultLocale, debugModule);\r\n\r\n          if (shouldPrepareProductionDeployment) {\r\n            const productionModule: ILocalizedPathModuleConfiguration = {\r\n              defaultPath: undefined,\r\n              type: 'localizedPath',\r\n              paths: {}\r\n            };\r\n            deployEntry.productionModules.localizedPathModules.set(resourceName, productionModule);\r\n\r\n            if (!stringsCopyCallbackMap.has(externalName)) {\r\n              stringsCopyCallbackMap.set(externalName, []);\r\n            }\r\n\r\n            const callbacks: ((locale: string, filename: string) => void)[] = stringsCopyCallbackMap.get(externalName);\r\n            callbacks.push(((locale: string, filename: string): void => {\r\n              this._fillLocalizedPath(filename, locale, defaultLocale, productionModule);\r\n            }));\r\n          }\r\n        } else if ((this.properties.linkedExternals || {})[externalName]) {\r\n          // This is a component module, so we need to record that this entry is using it, but we don't need to\r\n          // copy it to the CDN directory\r\n\r\n          const linkedExternal: IExternalProject = this.properties.linkedExternals[externalName];\r\n\r\n          const debugModule: IComponentModuleConfiguration = {\r\n            type: 'component',\r\n            version: linkedExternal.version,\r\n            id: linkedExternal.id,\r\n            failoverPath: linkedExternal.failoverPath\r\n          };\r\n          deployEntry.debugModules.componentModules.set(externalName, debugModule);\r\n\r\n          if (shouldPrepareProductionDeployment) {\r\n            const productionModule: IComponentModuleConfiguration = {\r\n              type: 'component',\r\n              version: linkedExternal.version,\r\n              id: linkedExternal.id\r\n            };\r\n            deployEntry.productionModules.componentModules.set(externalName, productionModule);\r\n          }\r\n        } else if (!externalModule.configExternalFullPath) {\r\n          this.logError(`External \"${externalName}\" was specified without a path, and it is neither a ` +\r\n                        'component nor a localized module. The produced manifest will likely not load.');\r\n          return;\r\n        } else {\r\n          // This is a plain path module, so we do need to copy it to the CDN directory if we're in production\r\n          // mode and it is not a fully qualified URL\r\n\r\n          deployEntry.debugModules.pathModules.set(externalName, externalModule.nonAmdConfig ?\r\n            {\r\n              type: 'path',\r\n              path: externalModule.configExternalFullPath,\r\n              globalDependencies: externalModule.nonAmdConfig.globalDependencies,\r\n              globalName: externalModule.nonAmdConfig.globalName\r\n            } : {\r\n              type: 'path',\r\n              path: externalModule.configExternalFullPath\r\n            });\r\n\r\n          if (shouldPrepareProductionDeployment) {\r\n            const productionModule: IPathModuleConfiguration = externalModule.nonAmdConfig ?\r\n              {\r\n                type: 'path',\r\n                path: undefined,\r\n                globalDependencies: externalModule.nonAmdConfig.globalDependencies,\r\n                globalName: externalModule.nonAmdConfig.globalName\r\n              } : {\r\n                type: 'path',\r\n                path: undefined\r\n              };\r\n            deployEntry.productionModules.pathModules.set(externalName, productionModule);\r\n\r\n            if (externalModule.isExternalUrl) {\r\n              // There won't be a rename since this is not on the local filesystem\r\n              productionModule.path = externalModule.configExternalFullPath;\r\n            } else {\r\n              externalModule.renameCallbacks.push((filename: string) => productionModule.path = filename);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private _selectDefaultLocaleForResource(paths: ILocaleMap, externalName: string): IDefaultLocale {\r\n    let defaultLocale: string;\r\n    let defaultLocaleInPaths: boolean = false;\r\n    const localeKeys: string[] = Object.keys(paths);\r\n    if (localeKeys.length === 1) {\r\n      // We only have one locale, so pick that one as the default\r\n      defaultLocale = localeKeys[0];\r\n    } else if ('default' in paths) {\r\n      // We have a \"default\" default locale, so make \"default\" the default\r\n      defaultLocale = 'default';\r\n    } else if (constants.defaultLocale in paths) {\r\n      // We have the constants.defaultLocale locale (\"en-us\"), so pick that one as the default\r\n      defaultLocale = constants.defaultLocale;\r\n      defaultLocaleInPaths = true; // In this case, the default locale is en-us, but that's also a regular path\r\n    } else {\r\n      // We couldn't pick a default locale, so issue a warning\r\n      this.logWarning(`Unable to select a default locale for external resource \"${externalName}\". ` +\r\n                      'Packaging a production build will fail.');\r\n    }\r\n\r\n    return { defaultLocale, defaultLocaleInPaths };\r\n  }\r\n\r\n  private _fillLocalizedPaths(paths: ILocaleMap,\r\n                              defaultLocale: IDefaultLocale,\r\n                              moduleConfig: ILocalizedPathModuleConfiguration): void {\r\n    for (const locale in paths) {\r\n      if (paths.hasOwnProperty(locale)) {\r\n        const localizedPath: string = paths[locale];\r\n        this._fillLocalizedPath(localizedPath, locale, defaultLocale, moduleConfig);\r\n      }\r\n    }\r\n  }\r\n\r\n  private _fillLocalizedPath(localizedPath: string,\r\n                             locale: string,\r\n                             defaultLocale: IDefaultLocale,\r\n                             moduleConfig: ILocalizedPathModuleConfiguration): void {\r\n    const isDefaultLocale: boolean = locale === defaultLocale.defaultLocale;\r\n    if (isDefaultLocale) {\r\n      moduleConfig.defaultPath = localizedPath;\r\n    }\r\n\r\n    if (!isDefaultLocale || defaultLocale.defaultLocaleInPaths) {\r\n      moduleConfig.paths[locale] = localizedPath;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * For webpack entries that are imported using SystemJS, the script is injected into the page, but\r\n   * the element is removed before the entry is initialized. Webpack requires a public path be set,\r\n   * and because we don't have a single host location, we need to set the public path dynamically.\r\n   * The public path is set when the entry is initialized, and in certain cases (like in development),\r\n   * it will look at the script tags on the page to determine what the root path is.\r\n   *\r\n   * We can append a small bit of code to the end of the entry's JS file that will mitigate this issue\r\n   * by maintaining a registry of scripts that have been injected onto the page, so the public path\r\n   * can be correctly set even if the script element that pointed to the entry's JS file has been removed\r\n   * already.\r\n   */\r\n  private _insertGlobalRegisterCodeIfNecessary(self: CopyAssetsTask, debug: boolean):\r\n      (file: gulpUtil.File, enc: string, callback: () => void) => void {\r\n    return function(file: gulpUtil.File, enc: string, callback: () => void): void {\r\n      if (!file.isNull() && file.contents) {\r\n        const contents: string = (file.contents as Buffer).toString(enc);\r\n        if (contents.match(new RegExp(setWebpackPublicPath.registryVariableName, 'g'))) {\r\n          const registerCode: string = setWebpackPublicPath.getGlobalRegisterCode(debug);\r\n          file.contents = new Buffer(`${contents}${registerCode}`);\r\n        }\r\n\r\n        this.push(file);\r\n      }\r\n\r\n      callback();\r\n    };\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}