"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
var fsx = require("fs-extra");
var OdspGulpTask_1 = require("./../OdspGulpTask");
var index_1 = require("./index");
var UPGRADE_PARAM_NAME = 'upgrade';
var ConfigureRigTask = (function (_super) {
    __extends(ConfigureRigTask, _super);
    function ConfigureRigTask() {
        return _super.call(this, 'configure-sp-build-rig') || this;
    }
    ConfigureRigTask.prototype.executeTask = function (gulp, completeCallback) {
        try {
            var configResult = index_1.readConfigFile(this.logVerbose.bind(this));
            if (configResult.missingFile) {
                this.logWarning('Missing config.json file. If this is a non-web project, consider using a non-web build rig ' +
                    'like @microsoft/sp-build-node');
            }
            if (configResult.readError) {
                completeCallback("Error reading config.json file: " + configResult.readError);
                return;
            }
            if (!configResult.isLatestVersion) {
                if (this.buildConfig.args[UPGRADE_PARAM_NAME]) {
                    index_1.migrateToLatestVersion(this.logWarning.bind(this), configResult.configData);
                    fsx.writeFileSync(index_1.defaultConfigPath, JSON.stringify(configResult.configData, undefined, 2));
                }
                else {
                    this.logWarning("This project is using an old config.json file version (" + configResult.version + "). Run the " +
                        ("build again with the --" + UPGRADE_PARAM_NAME + " (gulp --" + UPGRADE_PARAM_NAME + ") flag to ") +
                        'upgrade the config.json file to the latest version.');
                }
            }
            lodash_1.merge(this.properties, configResult.configData);
            completeCallback();
        }
        catch (e) {
            completeCallback(e);
        }
    };
    return ConfigureRigTask;
}(OdspGulpTask_1.default));
exports.ConfigureRigTask = ConfigureRigTask;

//# sourceMappingURL=ConfigureRigTask.js.map
