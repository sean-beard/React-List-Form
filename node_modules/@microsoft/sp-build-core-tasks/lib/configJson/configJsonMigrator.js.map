{"version":3,"sources":["configJson/configJsonMigrator.ts"],"names":[],"mappings":"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","file":"configJson/configJsonMigrator.js","sourcesContent":["import * as path from 'path';\r\nimport { SchemaValidator } from '@microsoft/gulp-core-build/lib/jsonUtilities/SchemaValidator';\r\nimport { JSONSchema4 } from 'json-schema';\r\n\r\nimport {\r\n  readConfigFile,\r\n  IConfigJson,\r\n  IConfigJsonResult,\r\n  defaultConfigPath\r\n} from './index';\r\n\r\nconst MIN_BUNDLE_NAME_LENGTH: number = 6;\r\nconst MAX_BUNDLE_NAME_LENGTH: number = 64;\r\n\r\nexport function migrateToLatestVersion(logWarning: (message: string) => void, configJson: IConfigJson): void {\r\n  const config2SchemaPath: string = path.join(__dirname, './schemas/config.2.0.schema.json');\r\n  const config2Schema: JSONSchema4 = SchemaValidator.readCommentedJsonFile(config2SchemaPath);\r\n  const bundleNameRegexString: string = Object.keys(config2Schema.properties.bundles.patternProperties)[0];\r\n  const bundleNameRegex: RegExp = new RegExp(bundleNameRegexString);\r\n\r\n  // Create a new bundle object to keep bundles in the same order\r\n  const bundles: typeof configJson.bundles = {};\r\n\r\n  const modifiedNames: string[] = [];\r\n  const tooShortNames: string[] = [];\r\n\r\n  // We need to make sure all bundle names follow the V2 naming convention\r\n  for (const bundleName in configJson.bundles) {\r\n    if (bundleName.match(bundleNameRegex)) {\r\n      bundles[bundleName] = configJson.bundles[bundleName];\r\n    } else {\r\n      modifiedNames.push(bundleName);\r\n      const newBundleName: string = _migrateBundleName(bundleName);\r\n      bundles[newBundleName] = configJson.bundles[bundleName];\r\n\r\n      if (newBundleName.length < MIN_BUNDLE_NAME_LENGTH) {\r\n        tooShortNames.push(newBundleName);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (modifiedNames.length) {\r\n    logWarning('Bundle names have been migrated to follow the V2 config.json schema. Modified bundle names: ' +\r\n               `[${modifiedNames.join(', ')}]`);\r\n  }\r\n\r\n  if (tooShortNames.length) {\r\n    logWarning('One or more of your bundle names are too short (less than 6 characters). Please update them: ' +\r\n               `[${tooShortNames.join(', ')}]`);\r\n  }\r\n\r\n  configJson.bundles = bundles;\r\n}\r\n\r\nexport function readConfigFileAndMigrate(\r\n  logWarning: (message: string) => void,\r\n  logVerbose: (message: string) => void,\r\n  filename: string = defaultConfigPath\r\n): IConfigJsonResult {\r\n  const configJsonResult: IConfigJsonResult = readConfigFile(logVerbose, filename);\r\n  if (configJsonResult.configData) {\r\n    migrateToLatestVersion(logWarning, configJsonResult.configData);\r\n  }\r\n\r\n  return configJsonResult;\r\n}\r\n\r\n/**\r\n * This algorithm takes a V1-allowed bundle name and modifies it to fit the V2 requirements. It:\r\n *  - Trims non-alphanumeric characters from the beginning and end of the string\r\n *  - Replaces uppercase characters with lowercase characters\r\n *  - Replaces non-alphanumeric characters with dashes (\"-\")\r\n *  - Truncates the string to 64 characters\r\n */\r\nfunction _migrateBundleName(bundleName: string): string {\r\n  bundleName = bundleName.toLowerCase();\r\n  bundleName = bundleName.replace(/^[^a-z0-9]+|[^a-z0-9]+$/g, '').replace(/[^a-z0-9]/g, '-');\r\n\r\n  if (bundleName.length > MAX_BUNDLE_NAME_LENGTH) {\r\n    return _migrateBundleName(bundleName.substr(0, MAX_BUNDLE_NAME_LENGTH));\r\n  } else {\r\n    return bundleName;\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}