{"version":3,"sources":["spfxServe/SpfxServeTask.ts"],"names":[],"mappings":"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","file":"spfxServe/SpfxServeTask.js","sourcesContent":["import * as Gulp from 'gulp';\r\nimport * as path from 'path';\r\nimport { SchemaValidator } from '@microsoft/gulp-core-build/lib/jsonUtilities/SchemaValidator';\r\nimport { JSONSchema4 } from 'json-schema';\r\nimport {\r\n  ServeTask,\r\n  IServeTaskConfig\r\n} from '@microsoft/gulp-core-build-serve/lib/ServeTask';\r\n\r\n// NodeJS currently lacks an implementation of the URL class, so we should use our polyfill until NodeJS gets one\r\n// We need to use a vanilla \"Require\" statement here because the published sp-polyfills is missing the\r\n//  whatwg-url typings\r\nconst { default: URL } = require('@microsoft/sp-polyfills/lib/url/experimental/URL-complete');\r\n\r\nexport interface ICustomActionConfiguration {\r\n  /**\r\n   * The type of custom action, use \"ClientSideExtension.ApplicationCustomizer\" for the Application Customizer\r\n   *  extension.\r\n   */\r\n  location: 'ClientSideExtension.ApplicationCustomizer' |\r\n            'ClientSideExtension.ListViewCommandSet.ContextMenu' |\r\n            'ClientSideExtension.ListViewCommandSet.CommandBar' |\r\n            'ClientSideExtension.ListViewCommandSet';\r\n\r\n  properties?: any; // tslint:disable-line:no-any\r\n}\r\n\r\nexport interface IFieldCustomizerConfiguration {\r\n  /**\r\n   * The ID of the field customizer component.\r\n   */\r\n  id: string;\r\n\r\n  properties?: any; // tslint:disable-line:no-any\r\n}\r\n\r\nexport interface ISpfxServeSessionConfiguration {\r\n  /**\r\n   * The fully-qualified URL of the page to launch\r\n   */\r\n  pageUrl: string;\r\n\r\n  /**\r\n   * An optional list of custom actions to provide as query parameters to the page. The key of this\r\n   *  object must be the ID of the custom action component.\r\n   */\r\n  customActions?: { [id: string]: ICustomActionConfiguration };\r\n\r\n  /**\r\n   * An optional list of field customizers to provide as query parameters to the page. The key of this\r\n   *  object must be the field ID the customizer applies to.\r\n   */\r\n  fieldCustomizers?: { [fieldName: string]: IFieldCustomizerConfiguration };\r\n}\r\n\r\nexport interface ISpfxServeTaskConfig extends IServeTaskConfig {\r\n  /**\r\n   * Specify a set of configurations that the serve task can use to load a test page\r\n   */\r\n  serveConfigurations?: {\r\n    default: ISpfxServeSessionConfiguration;\r\n    [configurationName: string]: ISpfxServeSessionConfiguration;\r\n  };\r\n}\r\n\r\nconst CONFIG_CLI_PARAMETER: string = 'config';\r\nexport const DEBUG_MANIFESTS_QUERY_PARAMETER: string = 'debugManifestsFile';\r\nconst LOAD_SPFX_QUERY_PARAMETER: string = 'loadSPFX';\r\nconst CUSTOM_ACTIONS_QUERY_PARAMETER: string = 'customActions';\r\nconst FIELD_CUSTOMIZERS_QUERY_PARAMETER: string = 'fieldCustomizers';\r\n\r\nexport class SpfxServeTask extends ServeTask<ISpfxServeTaskConfig> {\r\n  private _defaultInitialPage: string | undefined;\r\n\r\n  constructor() {\r\n    super('spfx-serve', {});\r\n\r\n    this._defaultInitialPage = this.taskConfig.initialPage;\r\n  }\r\n\r\n  public executeTask(gulp: typeof Gulp, completeCallback: (error?: string) => void): void {\r\n    const selectedServeConfiguration: string | undefined = this.buildConfig.args[CONFIG_CLI_PARAMETER] as string;\r\n    let serveConfiguration: ISpfxServeSessionConfiguration | undefined;\r\n    if (selectedServeConfiguration) {\r\n      this.logVerbose(`Attempting to use serve configuration: \"${selectedServeConfiguration}\"`);\r\n      serveConfiguration = this.taskConfig.serveConfigurations[selectedServeConfiguration];\r\n      if (!serveConfiguration) {\r\n        this.logWarning(`Selected serve configuration \"${selectedServeConfiguration}\" is not present in the ` +\r\n                        'task configuration. Falling back to default configuration.');\r\n      }\r\n    }\r\n\r\n    if (!serveConfiguration && this.taskConfig.serveConfigurations) {\r\n      serveConfiguration = this.taskConfig.serveConfigurations.default;\r\n\r\n      if (serveConfiguration && this.taskConfig.initialPage !== this._defaultInitialPage) {\r\n        this.logWarning('Both a default serve configuration and an initialPage are specified. In this task, ' +\r\n                        'the default configuration takes precedence. Consider removing the initialPage property.');\r\n      }\r\n    }\r\n\r\n    if (serveConfiguration) {\r\n      this.taskConfig.initialPage = this._convertServeConfigurationToPageUrl(serveConfiguration);\r\n    }\r\n\r\n    return super.executeTask(gulp, completeCallback);\r\n  }\r\n\r\n  public loadSchema(): JSONSchema4 {\r\n    const baseSchema: JSONSchema4 = super.loadSchema();\r\n    const spfxServeSchema: JSONSchema4 =\r\n      SchemaValidator.readCommentedJsonFile(path.join(__dirname, 'spfx-serve.schema.json'));\r\n\r\n    // Include all of the properties from the base schema\r\n    for (const propertyName in baseSchema.properties) {\r\n      if (baseSchema.properties.hasOwnProperty(propertyName)) {\r\n        spfxServeSchema.properties[propertyName] = baseSchema.properties[propertyName];\r\n      }\r\n    }\r\n\r\n    if (baseSchema.definitions) {\r\n      // Include all of the definitions from the base schema\r\n      for (const definitionName in baseSchema.definitions) {\r\n        if (baseSchema.definitions.hasOwnProperty(definitionName)) {\r\n          spfxServeSchema.definitions[definitionName] = baseSchema.definitions[definitionName];\r\n        }\r\n      }\r\n    }\r\n\r\n    return spfxServeSchema;\r\n  }\r\n\r\n  protected _getConfigFilePath(): string {\r\n    // Make sure this task uses the \"serve.json\" config file, not \"spfx-serve.json\"\r\n    return path.join(path.dirname(super._getConfigFilePath()), 'serve.json');\r\n  }\r\n\r\n  private _convertServeConfigurationToPageUrl(serveConfiguration: ISpfxServeSessionConfiguration): string {\r\n    if (!serveConfiguration.pageUrl) {\r\n      this.logError('The pageUrl property of the selected serve configuration must be set.');\r\n      return undefined;\r\n    }\r\n\r\n    const url: URL = new URL(serveConfiguration.pageUrl);\r\n\r\n    if (!url.searchParams.has(DEBUG_MANIFESTS_QUERY_PARAMETER)) {\r\n      const manifestsJsUrl: URL = this._getBaseServeUrl();\r\n      manifestsJsUrl.pathname = 'temp/manifests.js';\r\n      url.searchParams.set(DEBUG_MANIFESTS_QUERY_PARAMETER, manifestsJsUrl.href);\r\n    }\r\n\r\n    if (serveConfiguration.customActions || serveConfiguration.fieldCustomizers) {\r\n      if (!url.searchParams.has(LOAD_SPFX_QUERY_PARAMETER)) {\r\n        url.searchParams.set(LOAD_SPFX_QUERY_PARAMETER, 'true');\r\n      }\r\n    }\r\n\r\n    if (serveConfiguration.customActions) {\r\n      url.searchParams.set(CUSTOM_ACTIONS_QUERY_PARAMETER, JSON.stringify(serveConfiguration.customActions));\r\n    }\r\n\r\n    if (serveConfiguration.fieldCustomizers) {\r\n      url.searchParams.set(FIELD_CUSTOMIZERS_QUERY_PARAMETER, JSON.stringify(serveConfiguration.fieldCustomizers));\r\n    }\r\n\r\n    return url.href;\r\n  }\r\n\r\n  private _getBaseServeUrl(): URL {\r\n    const taskConfig: IServeTaskConfig = this.taskConfig;\r\n    return new URL(`${taskConfig.https ? 'https' : 'http'}://${taskConfig.hostname}:${taskConfig.port}/`);\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}