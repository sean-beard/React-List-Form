import * as Gulp from 'gulp';
import { JSONSchema4 } from 'json-schema';
import { ServeTask, IServeTaskConfig } from '@microsoft/gulp-core-build-serve/lib/ServeTask';
export interface ICustomActionConfiguration {
    /**
     * The type of custom action, use "ClientSideExtension.ApplicationCustomizer" for the Application Customizer
     *  extension.
     */
    location: 'ClientSideExtension.ApplicationCustomizer' | 'ClientSideExtension.ListViewCommandSet.ContextMenu' | 'ClientSideExtension.ListViewCommandSet.CommandBar' | 'ClientSideExtension.ListViewCommandSet';
    properties?: any;
}
export interface IFieldCustomizerConfiguration {
    /**
     * The ID of the field customizer component.
     */
    id: string;
    properties?: any;
}
export interface ISpfxServeSessionConfiguration {
    /**
     * The fully-qualified URL of the page to launch
     */
    pageUrl: string;
    /**
     * An optional list of custom actions to provide as query parameters to the page. The key of this
     *  object must be the ID of the custom action component.
     */
    customActions?: {
        [id: string]: ICustomActionConfiguration;
    };
    /**
     * An optional list of field customizers to provide as query parameters to the page. The key of this
     *  object must be the field ID the customizer applies to.
     */
    fieldCustomizers?: {
        [fieldName: string]: IFieldCustomizerConfiguration;
    };
}
export interface ISpfxServeTaskConfig extends IServeTaskConfig {
    /**
     * Specify a set of configurations that the serve task can use to load a test page
     */
    serveConfigurations?: {
        default: ISpfxServeSessionConfiguration;
        [configurationName: string]: ISpfxServeSessionConfiguration;
    };
}
export declare const DEBUG_MANIFESTS_QUERY_PARAMETER: string;
export declare class SpfxServeTask extends ServeTask<ISpfxServeTaskConfig> {
    private _defaultInitialPage;
    constructor();
    executeTask(gulp: typeof Gulp, completeCallback: (error?: string) => void): void;
    loadSchema(): JSONSchema4;
    protected _getConfigFilePath(): string;
    private _convertServeConfigurationToPageUrl(serveConfiguration);
    private _getBaseServeUrl();
}
