"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var SchemaValidator_1 = require("@microsoft/gulp-core-build/lib/jsonUtilities/SchemaValidator");
var ServeTask_1 = require("@microsoft/gulp-core-build-serve/lib/ServeTask");
// NodeJS currently lacks an implementation of the URL class, so we should use our polyfill until NodeJS gets one
// We need to use a vanilla "Require" statement here because the published sp-polyfills is missing the
//  whatwg-url typings
var URL = require('@microsoft/sp-polyfills/lib/url/experimental/URL-complete').default;
var CONFIG_CLI_PARAMETER = 'config';
exports.DEBUG_MANIFESTS_QUERY_PARAMETER = 'debugManifestsFile';
var LOAD_SPFX_QUERY_PARAMETER = 'loadSPFX';
var CUSTOM_ACTIONS_QUERY_PARAMETER = 'customActions';
var FIELD_CUSTOMIZERS_QUERY_PARAMETER = 'fieldCustomizers';
var SpfxServeTask = (function (_super) {
    __extends(SpfxServeTask, _super);
    function SpfxServeTask() {
        var _this = _super.call(this, 'spfx-serve', {}) || this;
        _this._defaultInitialPage = _this.taskConfig.initialPage;
        return _this;
    }
    SpfxServeTask.prototype.executeTask = function (gulp, completeCallback) {
        var selectedServeConfiguration = this.buildConfig.args[CONFIG_CLI_PARAMETER];
        var serveConfiguration;
        if (selectedServeConfiguration) {
            this.logVerbose("Attempting to use serve configuration: \"" + selectedServeConfiguration + "\"");
            serveConfiguration = this.taskConfig.serveConfigurations[selectedServeConfiguration];
            if (!serveConfiguration) {
                this.logWarning("Selected serve configuration \"" + selectedServeConfiguration + "\" is not present in the " +
                    'task configuration. Falling back to default configuration.');
            }
        }
        if (!serveConfiguration && this.taskConfig.serveConfigurations) {
            serveConfiguration = this.taskConfig.serveConfigurations.default;
            if (serveConfiguration && this.taskConfig.initialPage !== this._defaultInitialPage) {
                this.logWarning('Both a default serve configuration and an initialPage are specified. In this task, ' +
                    'the default configuration takes precedence. Consider removing the initialPage property.');
            }
        }
        if (serveConfiguration) {
            this.taskConfig.initialPage = this._convertServeConfigurationToPageUrl(serveConfiguration);
        }
        return _super.prototype.executeTask.call(this, gulp, completeCallback);
    };
    SpfxServeTask.prototype.loadSchema = function () {
        var baseSchema = _super.prototype.loadSchema.call(this);
        var spfxServeSchema = SchemaValidator_1.SchemaValidator.readCommentedJsonFile(path.join(__dirname, 'spfx-serve.schema.json'));
        // Include all of the properties from the base schema
        for (var propertyName in baseSchema.properties) {
            if (baseSchema.properties.hasOwnProperty(propertyName)) {
                spfxServeSchema.properties[propertyName] = baseSchema.properties[propertyName];
            }
        }
        if (baseSchema.definitions) {
            // Include all of the definitions from the base schema
            for (var definitionName in baseSchema.definitions) {
                if (baseSchema.definitions.hasOwnProperty(definitionName)) {
                    spfxServeSchema.definitions[definitionName] = baseSchema.definitions[definitionName];
                }
            }
        }
        return spfxServeSchema;
    };
    SpfxServeTask.prototype._getConfigFilePath = function () {
        // Make sure this task uses the "serve.json" config file, not "spfx-serve.json"
        return path.join(path.dirname(_super.prototype._getConfigFilePath.call(this)), 'serve.json');
    };
    SpfxServeTask.prototype._convertServeConfigurationToPageUrl = function (serveConfiguration) {
        if (!serveConfiguration.pageUrl) {
            this.logError('The pageUrl property of the selected serve configuration must be set.');
            return undefined;
        }
        var url = new URL(serveConfiguration.pageUrl);
        if (!url.searchParams.has(exports.DEBUG_MANIFESTS_QUERY_PARAMETER)) {
            var manifestsJsUrl = this._getBaseServeUrl();
            manifestsJsUrl.pathname = 'temp/manifests.js';
            url.searchParams.set(exports.DEBUG_MANIFESTS_QUERY_PARAMETER, manifestsJsUrl.href);
        }
        if (serveConfiguration.customActions || serveConfiguration.fieldCustomizers) {
            if (!url.searchParams.has(LOAD_SPFX_QUERY_PARAMETER)) {
                url.searchParams.set(LOAD_SPFX_QUERY_PARAMETER, 'true');
            }
        }
        if (serveConfiguration.customActions) {
            url.searchParams.set(CUSTOM_ACTIONS_QUERY_PARAMETER, JSON.stringify(serveConfiguration.customActions));
        }
        if (serveConfiguration.fieldCustomizers) {
            url.searchParams.set(FIELD_CUSTOMIZERS_QUERY_PARAMETER, JSON.stringify(serveConfiguration.fieldCustomizers));
        }
        return url.href;
    };
    SpfxServeTask.prototype._getBaseServeUrl = function () {
        var taskConfig = this.taskConfig;
        return new URL((taskConfig.https ? 'https' : 'http') + "://" + taskConfig.hostname + ":" + taskConfig.port + "/");
    };
    return SpfxServeTask;
}(ServeTask_1.ServeTask));
exports.SpfxServeTask = SpfxServeTask;

//# sourceMappingURL=SpfxServeTask.js.map
