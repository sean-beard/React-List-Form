{"version":3,"sources":["url/BaseURL.ts"],"names":[],"mappings":";;AAAA,qDAAgD;AAEhD,uCAAuC;AACvC,IAAM,gBAAgB,GAAkC,CAAC,OAAO,MAAM,KAAK,WAAW,CAAC,GAAG,MAAM,CAAC,GAAG,GAAG,SAAS,CAAC;AAEjH;;;GAGG;AACH;IAqBE,iBAAY,GAAW,EAAE,IAAa;IAAgB,CAAC;IAlBzC,uBAAe,GAA7B;QAA8B,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,yBAAc;;QAC1C,EAAE,CAAC,CAAC,gBAAgB,IAAI,gBAAgB,CAAC,eAAe,CAAC,CAAC,CAAC;YACzD,0EAA0E;YAC1E,MAAM,CAAC,gBAAgB,CAAC,eAAe,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAC9D,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;QACnD,CAAC;IACH,CAAC;IAEa,uBAAe,GAA7B;QAA8B,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,yBAAc;;QAC1C,EAAE,CAAC,CAAC,gBAAgB,IAAI,gBAAgB,CAAC,eAAe,CAAC,CAAC,CAAC;YACzD,yEAAyE;YACzE,gBAAgB,CAAC,eAAe,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QACvD,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;QACnD,CAAC;IACH,CAAC;IA8BD,sBAAW,2BAAM;aAAjB;YACE,MAAM,CAAC,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC;QAC3B,CAAC;aACD,UAAkB,QAAgB;YAChC,IAAI,CAAC,WAAW,EAAE,CAAC;YAEnB,yFAAyF;YACzF,IAAM,YAAY,GAAoB,CAAA,KAAG,QAAU,CAAA,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YACtE,EAAE,CAAC,CAAC,YAAY,IAAI,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACtC,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;YAChC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,sCAAsC;YAC5D,CAAC;YAED,IAAM,oBAAoB,GAAW,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;YACnE,EAAE,CAAC,CAAC,oBAAoB,KAAK,IAAI,CAAC,MAAM,IAAI,MAAI,oBAAsB,KAAK,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBACvF,sBAAsB;gBACrB,IAAI,CAAC,aAAqB,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,6BAA6B;YACrF,CAAC;QACH,CAAC;;;OAjBA;IAmBD,sBAAW,iCAAY;aAAvB;YACE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;QAC5B,CAAC;;;OAAA;IAID,sBAAW,iCAAY;QAFvB,uFAAuF;QACvF,mDAAmD;aACnD;YACE,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;QACnD,CAAC;;;OAAA;IAKM,wBAAM,GAAb;QACE,0BAA0B;QAC1B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAIS,yCAAuB,GAAjC;QACE,IAAI,CAAC,aAAa,GAAG,IAAI,yBAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACtD,oDAAoD;QACnD,IAAI,CAAC,aAAqB,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,6BAA6B;IACxE,CAAC;IAIH,cAAC;AAAD,CAlGA,AAkGC,IAAA;AAED,kBAAe,OAAO,CAAC","file":"url/BaseURL.js","sourcesContent":["import URLSearchParams from './URLSearchParams';\r\n\r\n// 'window' isn't defined in mocha test\r\nconst currentWindowUrl: typeof window.URL | undefined = (typeof window !== 'undefined') ? window.URL : undefined;\r\n\r\n/**\r\n * This class contains functionality that is common between the smaller \"URL\" class and the experimental\r\n *  complete \"URL\" class.\r\n */\r\nabstract class BaseURL implements URL {\r\n  private _searchParams: URLSearchParams;\r\n\r\n  public static createObjectURL(...args: any[]): string { // tslint:disable-line:no-any\r\n    if (currentWindowUrl && currentWindowUrl.createObjectURL) {\r\n      // Passthrough to the existing currentWindowUrl if the browser supports it\r\n      return currentWindowUrl.createObjectURL.apply(window, args);\r\n    } else {\r\n      throw new Error('createObjectURL not supported');\r\n    }\r\n  }\r\n\r\n  public static revokeObjectURL(...args: any[]): void { // tslint:disable-line:no-any\r\n    if (currentWindowUrl && currentWindowUrl.revokeObjectURL) {\r\n      // Passthrough to the existing revokeObjectURL if the browser supports it\r\n      currentWindowUrl.revokeObjectURL.apply(window, args);\r\n    } else {\r\n      throw new Error('revokeObjectURL not supported');\r\n    }\r\n  }\r\n\r\n  constructor(url: string, base?: string) { /* empty */ }\r\n\r\n  public abstract get href(): string;\r\n  public abstract set href(value: string);\r\n\r\n  public abstract get origin(): string;\r\n\r\n  public abstract get protocol(): string;\r\n  public abstract set protocol(value: string);\r\n\r\n  public abstract get username(): string;\r\n  public abstract set username(value: string);\r\n\r\n  public abstract get password(): string;\r\n  public abstract set password(value: string);\r\n\r\n  public abstract get host(): string;\r\n  public abstract set host(value: string);\r\n\r\n  public abstract get hostname(): string;\r\n  public abstract set hostname(value: string);\r\n\r\n  public abstract get port(): string;\r\n  public abstract set port(value: string)\r\n\r\n  public abstract get pathname(): string;\r\n  public abstract set pathname(value: string);\r\n\r\n  public get search(): string {\r\n    return this._query || '';\r\n  }\r\n  public set search(newValue: string) {\r\n    this._invalidate();\r\n\r\n    // Trim the leading \"?\" and serialize \"null\" or \"undefined\" as a weird caveat of the spec\r\n    const queryMatches: string[] | null = `${newValue}`.match(/^\\??(.*)/);\r\n    if (queryMatches && !!queryMatches[1]) {\r\n      this._query = queryMatches[1];\r\n    } else {\r\n      this._query = null; // tslint:disable-line:no-null-keyword\r\n    }\r\n\r\n    const existingSearchParams: string = this._searchParams.toString();\r\n    if (existingSearchParams !== this.search && `?${existingSearchParams}` !== this.search) {\r\n      // Update searchParams\r\n      (this._searchParams as any)._initialize(this.search); // tslint:disable-line:no-any\r\n    }\r\n  }\r\n\r\n  public get searchParams(): URLSearchParams {\r\n    return this._searchParams;\r\n  }\r\n\r\n  // Need to include this because the TypeScript lib.d.ts typings have the incorrect case\r\n  // Remove when the TS typings are fixed. VSO#339963\r\n  public get searchparams(): URLSearchParams {\r\n    throw new Error('This function does not exist.');\r\n  }\r\n\r\n  public abstract get hash(): string;\r\n  public abstract set hash(value: string);\r\n\r\n  public toJson(): string {\r\n    // Same behavior as \"href\"\r\n    return this.href;\r\n  }\r\n\r\n  protected abstract _invalidate(): void;\r\n\r\n  protected _initializeSearchParams(): void {\r\n    this._searchParams = new URLSearchParams(this.search);\r\n    // Ensure searchParams has a pointer to this object.\r\n    (this._searchParams as any)._url = this; // tslint:disable-line:no-any\r\n  }\r\n\r\n  protected abstract get _query(): string | null;\r\n  protected abstract set _query(value: string | null);\r\n}\r\n\r\nexport default BaseURL;\r\n"],"sourceRoot":"..\\..\\src"}