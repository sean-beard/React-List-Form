{"version":3,"sources":["url/URL.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;;;;;;;;;;;;AAEH,qCAAgC;AAEhC,IAAM,yBAAyB,GAAiC;IAC9D,MAAM,EAAE,IAAI;IACZ,SAAS,EAAE,IAAI;IACf,OAAO,EAAE,IAAI;IACb,QAAQ,EAAE,KAAK;IACf,KAAK,EAAE,IAAI;IACX,MAAM,EAAE,KAAK;CACd,CAAC;AAEF;;GAEG;AACH,oBAAoB,GAAW;IAC7B,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AAC9B,CAAC;AAED;IAAiC,uBAAO;IAetC,aAAY,GAAW,EAAE,aAAsB;QAA/C,iBAiBC;QAhBC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACrB,MAAM,IAAI,SAAS,CAAC,aAAa,CAAC,CAAC;QACrC,CAAC;QAED,QAAA,kBAAM,GAAG,EAAE,aAAa,CAAC,SAAC;QAE1B,KAAI,CAAC,eAAe,GAAG,QAAQ,CAAC,cAAc,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC;QACtE,KAAI,CAAC,mBAAmB,GAAG,KAAI,CAAC,eAAe,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QAEnE,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YAClB,MAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAC;QACnF,CAAC;QAED,KAAI,CAAC,mBAAmB,CAAC,IAAI,GAAG,GAAG,CAAC;QAEpC,KAAI,CAAC,uBAAuB,EAAE,CAAC;;IACjC,CAAC;IAED,sBAAW,qBAAI;aAAf;YACE,IAAI,MAAM,GAAW,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;YAEnD,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC;gBAC9B,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBACxB,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBAC/C,CAAC;gBAED,EAAE,CAAC,CAAC,IAAI,CAAC,qBAAqB,IAAI,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBACtD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBAC/C,CAAC;YACH,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;gBACtC,IAAM,gBAAgB,GAAW,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBACrD,EAAE,CAAC,CAAC,gBAAgB,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC5B,cAAc;oBACd,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;wBACxB,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;oBAC/C,CAAC;gBACH,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;oBACvD,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,gBAAgB,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;gBACvF,CAAC;YACH,CAAC;YAED,MAAM,CAAC,MAAM,CAAC;QAChB,CAAC;aACD,UAAgB,QAAgB;YAC9B,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBAC1B,MAAM,IAAI,SAAS,CAAC,aAAa,CAAC,CAAC;YACrC,CAAC;YAED,IAAI,CAAC,WAAW,EAAE,CAAC;YACnB,IAAI,CAAC,mBAAmB,CAAC,IAAI,GAAG,QAAQ,CAAC;QAC3C,CAAC;;;OARA;IAUD,sBAAW,uBAAM;aAAjB;YACE,EAAE,CAAC,CAAC,yBAAyB,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBAC5D,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,yBAAyB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;oBACzE,0CAA0C;oBAC1C,MAAM,CAAI,IAAI,CAAC,QAAQ,UAAK,IAAI,CAAC,mBAAmB,CAAC,QAAU,CAAC;gBAClE,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,wCAAwC;oBACxC,MAAM,CAAI,IAAI,CAAC,QAAQ,UAAK,IAAI,CAAC,mBAAmB,CAAC,QAAQ,SAAI,IAAI,CAAC,IAAM,CAAC;gBAC/E,CAAC;YACH,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,CAAC,MAAM,CAAC;YAChB,CAAC;QACH,CAAC;;;OAAA;IAED,sBAAW,yBAAQ;aAAnB;YACE,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC;QAC3C,CAAC;aACD,UAAoB,QAAgB;YAClC,0FAA0F;YAC1F,IAAM,eAAe,GAAoB,CAAA,KAAG,QAAU,CAAA,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YAC7E,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;gBACpB,IAAI,CAAC,WAAW,EAAE,CAAC;gBACnB,IAAI,CAAC,mBAAmB,CAAC,QAAQ,GAAM,eAAe,CAAC,CAAC,CAAC,MAAG,CAAC;YAC/D,CAAC;QACH,CAAC;;;OARA;IAUD,sBAAW,yBAAQ;aAAnB;YACE,MAAM,CAAC,EAAE,CAAC,CAAC,gBAAgB;QAC7B,CAAC;aACD,UAAoB,QAAgB;YAClC,gBAAgB;QAClB,CAAC;;;OAHA;IAKD,sBAAW,yBAAQ;aAAnB;YACE,MAAM,CAAC,EAAE,CAAC,CAAC,gBAAgB;QAC7B,CAAC;aACD,UAAoB,QAAgB;YAClC,gBAAgB;QAClB,CAAC;;;OAHA;IAKD,sBAAW,qBAAI;aAAf;YACE,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;QACvC,CAAC;aACD,UAAgB,QAAgB;YAC9B,IAAI,CAAC,WAAW,EAAE,CAAC;YACnB,IAAI,CAAC,mBAAmB,CAAC,IAAI,GAAG,QAAQ,CAAC;QAC3C,CAAC;;;OAJA;IAMD,sBAAW,yBAAQ;aAAnB;YACE,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC;QAC3C,CAAC;aACD,UAAoB,QAAgB;YAClC,IAAI,CAAC,WAAW,EAAE,CAAC;YACnB,IAAI,CAAC,mBAAmB,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC/C,CAAC;;;OAJA;IAMD,sBAAW,qBAAI;aAAf;YACE,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;QACvC,CAAC;aACD,UAAgB,QAAgB;YAC9B,IAAI,CAAC,WAAW,EAAE,CAAC;YACnB,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACb,IAAI,CAAC,mBAAmB,CAAC,IAAI,GAAG,QAAQ,CAAC;YAC3C,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,CAAC,mBAAmB,CAAC,IAAI,GAAG,yBAAyB,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC;YACvF,CAAC;QACH,CAAC;;;OARA;IAUD,sBAAW,yBAAQ;aAAnB;YACE,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC;QAC3C,CAAC;aACD,UAAoB,QAAgB;YAClC,IAAI,CAAC,WAAW,EAAE,CAAC;YACnB,IAAI,CAAC,mBAAmB,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC/C,CAAC;;;OAJA;IAMD,sBAAW,qBAAI;aAAf;YACE,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;QACvC,CAAC;aACD,UAAgB,QAAgB;YAC9B,IAAI,CAAC,WAAW,EAAE,CAAC;YACnB,IAAI,CAAC,mBAAmB,CAAC,IAAI,GAAG,EAAE,CAAC;YACnC,yFAAyF;YACzF,IAAM,eAAe,GAAoB,CAAA,KAAG,QAAU,CAAA,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YACxE,EAAE,CAAC,CAAC,eAAe,IAAI,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5C,IAAI,CAAC,mBAAmB,CAAC,IAAI,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC;gBACnD,IAAI,CAAC,oBAAoB,GAAG,KAAK,CAAC;YACpC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;YACnC,CAAC;QACH,CAAC;;;OAZA;IAcD,sBAAc,uBAAM;aAApB;YACE,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC;QACzC,CAAC;aACD,UAAqB,QAAuB;YAC1C,IAAI,CAAC,mBAAmB,CAAC,MAAM,GAAG,EAAE,CAAC;YACrC,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACf,IAAI,CAAC,mBAAmB,CAAC,MAAM,GAAG,QAAQ,CAAC;gBAC3C,IAAI,CAAC,qBAAqB,GAAG,KAAK,CAAC;YACrC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;YACpC,CAAC;QACH,CAAC;;;OATA;IAWS,yBAAW,GAArB,cAA4C,CAAC;IAC/C,UAAC;AAAD,CA9KA,AA8KC,CA9KgC,iBAAO,GA8KvC","file":"url/URL.js","sourcesContent":["/**\r\n * This is an incomplete implementation of a URL polyfill. These things are not supported, or not fully supported:\r\n *  - baseURLString constructor property\r\n *      This means that `new URL('http://contoso.com/path/to/something', 'http://fabrikam.com')` will not work,\r\n *        but the same thing can be accomplished with:\r\n *      const url = new new URL('http://contoso.com/path/to/something');\r\n *      url.host = 'fabrikam.com';\r\n *\r\n *  - Username\r\n *      The username property is not supported and will always return the empty string. Setting the username has\r\n *        no effect.\r\n *\r\n *  - Password\r\n *      The password property is not supported and will always return the empty string. Setting the password has\r\n *        no effect.\r\n *\r\n *  - Setting the pathname property with a value containing encoded values will double-encode the encoded values.\r\n *      For example. myUrl.pathname = \"path%2Bto/resource.json\" => myUrl.pathname === \"/path%252Bto/resource.json\"\r\n *      To set the pathname to a value that contains a special character, set it with the un-encoded character.\r\n *      The encoded \"/\" character (%2F) is not supported\r\n *\r\n * MDN documentation: https://developer.mozilla.org/en-US/docs/Web/API/URL\r\n *\r\n * WhatWG Spec: https://url.spec.whatwg.org/\r\n */\r\n\r\nimport BaseURL from './BaseURL';\r\n\r\nconst SPECIAL_SCHEMES_AND_PORTS: { [scheme: string]: string } = {\r\n  'ftp:': '21',\r\n  'gopher:': '70',\r\n  'http:': '80',\r\n  'https:': '443',\r\n  'ws:': '80',\r\n  'wss:': '443'\r\n};\r\n\r\n/**\r\n * Ensures the URL has a scheme\r\n */\r\nfunction urlIsValid(url: string): boolean {\r\n  return !!url.match(/^.+\\:/);\r\n}\r\n\r\nexport default class URL extends BaseURL {\r\n  /**\r\n   * The anchor element that backs this URL instance.\r\n   */\r\n  private _innerAnchorElement: HTMLAnchorElement;\r\n\r\n  /**\r\n   * The HTML document that the _innerAnchorElement element exists on. This avoids adding elements to the\r\n   *  main page's document.\r\n   */\r\n  private _shadowDocument: HTMLDocument;\r\n\r\n  private _searchHasBeenCleared: boolean;\r\n  private _hashHashBeenCleared: boolean;\r\n\r\n  constructor(url: string, baseURLString?: string) {\r\n    if (!urlIsValid(url)) {\r\n      throw new TypeError('Invalid URL');\r\n    }\r\n\r\n    super(url, baseURLString);\r\n\r\n    this._shadowDocument = document.implementation.createHTMLDocument('');\r\n    this._innerAnchorElement = this._shadowDocument.createElement('a');\r\n\r\n    if (baseURLString) {\r\n      throw new Error('baseURLString parameter is not supported by the URL polyfill.');\r\n    }\r\n\r\n    this._innerAnchorElement.href = url;\r\n\r\n    this._initializeSearchParams();\r\n  }\r\n\r\n  public get href(): string {\r\n    let result: string = this._innerAnchorElement.href;\r\n\r\n    if (this._hashHashBeenCleared) {\r\n      if (result.match(/\\#$/)) {\r\n        result = result.substr(0, result.length - 1);\r\n      }\r\n\r\n      if (this._searchHasBeenCleared && result.match(/\\?$/)) {\r\n        result = result.substr(0, result.length - 1);\r\n      }\r\n    } else if (this._searchHasBeenCleared) {\r\n      const firstIndexOfHash: number = result.indexOf('#');\r\n      if (firstIndexOfHash === -1) {\r\n        // No fragment\r\n        if (result.match(/\\?$/)) {\r\n          result = result.substr(0, result.length - 1);\r\n        }\r\n      } else if (result.charAt(firstIndexOfHash - 1) === '?') {\r\n        result = result.substring(0, firstIndexOfHash - 1) + result.substr(firstIndexOfHash);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n  public set href(newValue: string) {\r\n    if (!urlIsValid(newValue)) {\r\n      throw new TypeError('Invalid URL');\r\n    }\r\n\r\n    this._invalidate();\r\n    this._innerAnchorElement.href = newValue;\r\n  }\r\n\r\n  public get origin(): string {\r\n    if (SPECIAL_SCHEMES_AND_PORTS.hasOwnProperty(this.protocol)) {\r\n      if (!this.port || SPECIAL_SCHEMES_AND_PORTS[this.protocol] === this.port) {\r\n        // Standard port, don't serialize the port\r\n        return `${this.protocol}//${this._innerAnchorElement.hostname}`;\r\n      } else {\r\n        // Non-standard port, serialize the port\r\n        return `${this.protocol}//${this._innerAnchorElement.hostname}:${this.port}`;\r\n      }\r\n    } else {\r\n      return 'null';\r\n    }\r\n  }\r\n\r\n  public get protocol(): string {\r\n    return this._innerAnchorElement.protocol;\r\n  }\r\n  public set protocol(newValue: string) {\r\n    // Trim the trailing \":\" and serialize \"null\" or \"undefined\" as a weird caveat of the spec\r\n    const protocolMatches: string[] | null = `${newValue}`.match(/^([^\\:]+):?$/);\r\n    if (protocolMatches) {\r\n      this._invalidate();\r\n      this._innerAnchorElement.protocol = `${protocolMatches[1]}:`;\r\n    }\r\n  }\r\n\r\n  public get username(): string {\r\n    return ''; // Not supported\r\n  }\r\n  public set username(newValue: string) {\r\n    // Not supported\r\n  }\r\n\r\n  public get password(): string {\r\n    return ''; // Not supported\r\n  }\r\n  public set password(newValue: string) {\r\n    // Not supported\r\n  }\r\n\r\n  public get host(): string {\r\n    return this._innerAnchorElement.host;\r\n  }\r\n  public set host(newValue: string) {\r\n    this._invalidate();\r\n    this._innerAnchorElement.host = newValue;\r\n  }\r\n\r\n  public get hostname(): string {\r\n    return this._innerAnchorElement.hostname;\r\n  }\r\n  public set hostname(newValue: string) {\r\n    this._invalidate();\r\n    this._innerAnchorElement.hostname = newValue;\r\n  }\r\n\r\n  public get port(): string {\r\n    return this._innerAnchorElement.port;\r\n  }\r\n  public set port(newValue: string) {\r\n    this._invalidate();\r\n    if (newValue) {\r\n      this._innerAnchorElement.port = newValue;\r\n    } else {\r\n      this._innerAnchorElement.port = SPECIAL_SCHEMES_AND_PORTS[this.protocol] || newValue;\r\n    }\r\n  }\r\n\r\n  public get pathname(): string {\r\n    return this._innerAnchorElement.pathname;\r\n  }\r\n  public set pathname(newValue: string) {\r\n    this._invalidate();\r\n    this._innerAnchorElement.pathname = newValue;\r\n  }\r\n\r\n  public get hash(): string {\r\n    return this._innerAnchorElement.hash;\r\n  }\r\n  public set hash(newValue: string) {\r\n    this._invalidate();\r\n    this._innerAnchorElement.hash = '';\r\n    // Trim the leading \"#\" and serialize \"null\" or \"undefined\" as a weird caveat of the spec\r\n    const fragmentMatches: string[] | null = `${newValue}`.match(/^#?(.*)/);\r\n    if (fragmentMatches && !!fragmentMatches[1]) {\r\n      this._innerAnchorElement.hash = fragmentMatches[1];\r\n      this._hashHashBeenCleared = false;\r\n    } else {\r\n      this._hashHashBeenCleared = true;\r\n    }\r\n  }\r\n\r\n  protected get _query(): string | null { // tslint:disable-line:no-null-keyword\r\n    return this._innerAnchorElement.search;\r\n  }\r\n  protected set _query(newValue: string | null) { // tslint:disable-line:no-null-keyword\r\n    this._innerAnchorElement.search = '';\r\n    if (!!newValue) {\r\n      this._innerAnchorElement.search = newValue;\r\n      this._searchHasBeenCleared = false;\r\n    } else {\r\n      this._searchHasBeenCleared = true;\r\n    }\r\n  }\r\n\r\n  protected _invalidate(): void { /* empty */ }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}