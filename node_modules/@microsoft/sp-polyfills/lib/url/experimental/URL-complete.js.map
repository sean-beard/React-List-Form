{"version":3,"sources":["url/experimental/URL-complete.ts"],"names":[],"mappings":"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","file":"url/experimental/URL-complete.js","sourcesContent":["/// <reference path=\"./whatwg-url.d.ts\" />\r\n\r\n/**\r\n * Polyfill for the URL class. This polyfill is more complete then URL.ts because it uses the state machine\r\n *  described in the WhatWG spec, but it's currently far too large for our needs.\r\n *\r\n * VSO#346852 - open-source this.\r\n *\r\n * MDN documentation: https://developer.mozilla.org/en-US/docs/Web/API/URL\r\n *\r\n * WhatWG Spec: https://url.spec.whatwg.org/\r\n */\r\n\r\nimport * as urlStateMachine from 'url-state-machine';\r\nconst usm: typeof urlStateMachine = require<typeof urlStateMachine>('whatwg-url/lib/url-state-machine');\r\n\r\nimport BaseURL from './../BaseURL';\r\n\r\nfunction ensureParsedUrlValid(\r\n  parsedUrl: WhatwgUrl.BasicURLParseResult,\r\n  failureString: string = 'Invalid URL'\r\n): WhatwgUrl.ParsedUrl {\r\n  if (parsedUrl === 'failure') {\r\n    throw new TypeError(failureString);\r\n  } else {\r\n    return parsedUrl as WhatwgUrl.ParsedUrl;\r\n  }\r\n}\r\n\r\nexport default class URL extends BaseURL {\r\n  private _serializedUrl: string | undefined;\r\n  private _parsedUrl: WhatwgUrl.ParsedUrl;\r\n\r\n  constructor(url: string, base?: string) {\r\n    super(url, base);\r\n\r\n    let parsedBase: WhatwgUrl.ParsedUrl | undefined;\r\n    if (base) {\r\n      const intermediateParseBase: WhatwgUrl.BasicURLParseResult = usm.basicURLParse(base);\r\n      parsedBase = ensureParsedUrlValid(intermediateParseBase, 'Invalid base URL');\r\n    }\r\n\r\n    const parsedUrl: WhatwgUrl.BasicURLParseResult = usm.basicURLParse(url, { baseURL: parsedBase });\r\n    this._parsedUrl = ensureParsedUrlValid(parsedUrl);\r\n\r\n    this._initializeSearchParams();\r\n  }\r\n\r\n  public get href(): string {\r\n    if (!this._serializedUrl) {\r\n      // Serialized URL is dirty - re serialize\r\n      this._serializedUrl = usm.serializeURL(this._parsedUrl);\r\n    }\r\n\r\n    return this._serializedUrl;\r\n  }\r\n  public set href(newValue: string) {\r\n    this._invalidate();\r\n    const parsedUrl: WhatwgUrl.BasicURLParseResult = usm.basicURLParse(newValue);\r\n    this._parsedUrl = ensureParsedUrlValid(parsedUrl);\r\n  }\r\n\r\n  public get origin(): string {\r\n    return usm.serializeURLToUnicodeOrigin(this._parsedUrl);\r\n  }\r\n\r\n  public get protocol(): string {\r\n    return `${this._parsedUrl.scheme}:`;\r\n  }\r\n  public set protocol(newValue: string) {\r\n    // Trim the trailing \":\" and serialize \"null\" or \"undefined\" as a weird caveat of the spec\r\n    const protocolMatches: string[] | null = `${newValue}`.match(/^([^\\:]+):?$/);\r\n    if (protocolMatches) {\r\n      this._invalidate();\r\n      usm.basicURLParse(`${protocolMatches[1]}:`, { url: this._parsedUrl, stateOverride: 'scheme start' });\r\n    }\r\n  }\r\n\r\n  public get username(): string {\r\n    return this._parsedUrl.username;\r\n  }\r\n  public set username(newValue: string) {\r\n    // Make sure a username and password are allowed\r\n    if (!usm.cannotHaveAUsernamePasswordPort(this._parsedUrl)) {\r\n      this._invalidate();\r\n      // serialize \"null\" or \"undefined\" as a weird caveat of the spec\r\n      usm.setTheUsername(this._parsedUrl, `${newValue}`);\r\n    }\r\n  }\r\n\r\n  public get password(): string {\r\n    return this._parsedUrl.password;\r\n  }\r\n  public set password(newValue: string) {\r\n    // Make sure a username and password are allowed\r\n    if (!usm.cannotHaveAUsernamePasswordPort(this._parsedUrl)) {\r\n      this._invalidate();\r\n      usm.setThePassword(this._parsedUrl, newValue);\r\n    }\r\n  }\r\n\r\n  public get host(): string {\r\n    if (!this._parsedUrl.host) {\r\n      return '';\r\n    } else if (!this._parsedUrl.port) {\r\n      return usm.serializeHost(this._parsedUrl.host);\r\n    } else {\r\n      return `${usm.serializeHost(this._parsedUrl.host)}:${usm.serializeInteger(this._parsedUrl.port)}`;\r\n    }\r\n  }\r\n  public set host(newValue: string) {\r\n    if (!this._parsedUrl.cannotBeABaseURL) {\r\n      this._invalidate();\r\n      usm.basicURLParse(newValue, { url: this._parsedUrl, stateOverride: 'host' });\r\n    }\r\n  }\r\n\r\n  public get hostname(): string {\r\n    if (!this._parsedUrl.host) {\r\n      return '';\r\n    } else {\r\n      return usm.serializeHost(this._parsedUrl.host);\r\n    }\r\n  }\r\n  public set hostname(newValue: string) {\r\n    if (!this._parsedUrl.cannotBeABaseURL) {\r\n      this._invalidate();\r\n      usm.basicURLParse(newValue, { url: this._parsedUrl, stateOverride: 'hostname' });\r\n    }\r\n  }\r\n\r\n  public get port(): string {\r\n    if (!this._parsedUrl.port) {\r\n      return '';\r\n    } else {\r\n      return usm.serializeInteger(this._parsedUrl.port);\r\n    }\r\n  }\r\n  public set port(newValue: string) {\r\n    if (!usm.cannotHaveAUsernamePasswordPort(this._parsedUrl)) {\r\n      this._invalidate();\r\n      if (newValue === '') {\r\n        this._parsedUrl.port = undefined;\r\n      } else {\r\n        usm.basicURLParse(newValue, { url: this._parsedUrl, stateOverride: 'port' });\r\n      }\r\n    }\r\n  }\r\n\r\n  public get pathname(): string {\r\n    if (this._parsedUrl.cannotBeABaseURL) {\r\n      return this._parsedUrl.path[0];\r\n    } else if (this._parsedUrl.path.length === 0) {\r\n      return '';\r\n    } else {\r\n      return `/${this._parsedUrl.path.join('/')}`;\r\n    }\r\n  }\r\n  public set pathname(newValue: string) {\r\n    if (!this._parsedUrl.cannotBeABaseURL) {\r\n      this._invalidate();\r\n      this._parsedUrl.path = [];\r\n      usm.basicURLParse(newValue, { url: this._parsedUrl, stateOverride: 'path start' });\r\n    }\r\n  }\r\n\r\n  public get hash(): string {\r\n    if (!this._parsedUrl.fragment) {\r\n      return '';\r\n    } else {\r\n      return `#${this._parsedUrl.fragment}`;\r\n    }\r\n  }\r\n  public set hash(newValue: string) {\r\n    this._invalidate();\r\n    // Trim the leading \"#\" and serialize \"null\" or \"undefined\" as a weird caveat of the spec\r\n    const fragmentMatches: string[] | null = `${newValue}`.match(/^#?(.*)/);\r\n    if (fragmentMatches && !!fragmentMatches[1]) {\r\n      this._parsedUrl.fragment = '';\r\n      usm.basicURLParse(fragmentMatches[1], { url: this._parsedUrl, stateOverride: 'fragment' });\r\n    } else {\r\n      this._parsedUrl.fragment = null; // tslint:disable-line:no-null-keyword\r\n    }\r\n  }\r\n\r\n  protected get _query(): string | null { // tslint:disable-line:no-null-keyword\r\n    if (this._parsedUrl.query) {\r\n      return `?${this._parsedUrl.query}`;\r\n    } else {\r\n      return this._parsedUrl.query;\r\n    }\r\n  }\r\n  protected set _query(value: string | null) { // tslint:disable-line:no-null-keyword\r\n    if (value === null) { // tslint:disable-line:no-null-keyword\r\n      this._parsedUrl.query = null; // tslint:disable-line:no-null-keyword\r\n    } else {\r\n      this._parsedUrl.query = '';\r\n      usm.basicURLParse(value, { url: this._parsedUrl, stateOverride: 'query' });\r\n    }\r\n  }\r\n\r\n  protected _invalidate(): void {\r\n    this._serializedUrl = undefined;\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}