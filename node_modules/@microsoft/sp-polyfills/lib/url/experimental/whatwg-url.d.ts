declare namespace WhatwgUrl {
  interface IHost { }

  interface ParsedUrl { // tslint:disable-line:interface-name
    scheme: string;
    username: string;
    password: string;
    host: IHost;
    port: number | undefined;
    cannotBeABaseURL: boolean;
    path: string[];
    query: string | null;
    fragment: string | null;
  }

  export type BasicURLParseResult = string | ParsedUrl;

  interface IBasicURLParseOptions {
    baseURL?: ParsedUrl;
    url?: ParsedUrl;
    stateOverride?:
      'scheme start' |
      'host' |
      'hostname' |
      'port' |
      'path start' |
      'query' |
      'fragment';
  }

  interface UrlStateMachineStatic { // tslint:disable-line:interface-name
    basicURLParse(url: string, options?: IBasicURLParseOptions): BasicURLParseResult;

    serializeURL(parsedUrl: ParsedUrl): string;

    serializeURLToUnicodeOrigin(parsedUrl: ParsedUrl): string;

    cannotHaveAUsernamePasswordPort(parsedUrl: ParsedUrl): boolean;

    setTheUsername(parsedUrl: ParsedUrl, username: string): void;

    setThePassword(parsedUrl: ParsedUrl, username: string): void;

    serializeHost(host: IHost): string;

    serializeInteger(port: Number): string;
  }
}

declare var urlStateMachine: WhatwgUrl.UrlStateMachineStatic;

declare module 'url-state-machine' {
  export = urlStateMachine; // tslint:disable-line:export-name
}