"use strict";
/// <reference path="./whatwg-url.d.ts" />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var usm = require('whatwg-url/lib/url-state-machine');
var BaseURL_1 = require("./../BaseURL");
function ensureParsedUrlValid(parsedUrl, failureString) {
    if (failureString === void 0) { failureString = 'Invalid URL'; }
    if (parsedUrl === 'failure') {
        throw new TypeError(failureString);
    }
    else {
        return parsedUrl;
    }
}
var URL = (function (_super) {
    __extends(URL, _super);
    function URL(url, base) {
        var _this = _super.call(this, url, base) || this;
        var parsedBase;
        if (base) {
            var intermediateParseBase = usm.basicURLParse(base);
            parsedBase = ensureParsedUrlValid(intermediateParseBase, 'Invalid base URL');
        }
        var parsedUrl = usm.basicURLParse(url, { baseURL: parsedBase });
        _this._parsedUrl = ensureParsedUrlValid(parsedUrl);
        _this._initializeSearchParams();
        return _this;
    }
    Object.defineProperty(URL.prototype, "href", {
        get: function () {
            if (!this._serializedUrl) {
                // Serialized URL is dirty - re serialize
                this._serializedUrl = usm.serializeURL(this._parsedUrl);
            }
            return this._serializedUrl;
        },
        set: function (newValue) {
            this._invalidate();
            var parsedUrl = usm.basicURLParse(newValue);
            this._parsedUrl = ensureParsedUrlValid(parsedUrl);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(URL.prototype, "origin", {
        get: function () {
            return usm.serializeURLToUnicodeOrigin(this._parsedUrl);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(URL.prototype, "protocol", {
        get: function () {
            return this._parsedUrl.scheme + ":";
        },
        set: function (newValue) {
            // Trim the trailing ":" and serialize "null" or "undefined" as a weird caveat of the spec
            var protocolMatches = ("" + newValue).match(/^([^\:]+):?$/);
            if (protocolMatches) {
                this._invalidate();
                usm.basicURLParse(protocolMatches[1] + ":", { url: this._parsedUrl, stateOverride: 'scheme start' });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(URL.prototype, "username", {
        get: function () {
            return this._parsedUrl.username;
        },
        set: function (newValue) {
            // Make sure a username and password are allowed
            if (!usm.cannotHaveAUsernamePasswordPort(this._parsedUrl)) {
                this._invalidate();
                // serialize "null" or "undefined" as a weird caveat of the spec
                usm.setTheUsername(this._parsedUrl, "" + newValue);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(URL.prototype, "password", {
        get: function () {
            return this._parsedUrl.password;
        },
        set: function (newValue) {
            // Make sure a username and password are allowed
            if (!usm.cannotHaveAUsernamePasswordPort(this._parsedUrl)) {
                this._invalidate();
                usm.setThePassword(this._parsedUrl, newValue);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(URL.prototype, "host", {
        get: function () {
            if (!this._parsedUrl.host) {
                return '';
            }
            else if (!this._parsedUrl.port) {
                return usm.serializeHost(this._parsedUrl.host);
            }
            else {
                return usm.serializeHost(this._parsedUrl.host) + ":" + usm.serializeInteger(this._parsedUrl.port);
            }
        },
        set: function (newValue) {
            if (!this._parsedUrl.cannotBeABaseURL) {
                this._invalidate();
                usm.basicURLParse(newValue, { url: this._parsedUrl, stateOverride: 'host' });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(URL.prototype, "hostname", {
        get: function () {
            if (!this._parsedUrl.host) {
                return '';
            }
            else {
                return usm.serializeHost(this._parsedUrl.host);
            }
        },
        set: function (newValue) {
            if (!this._parsedUrl.cannotBeABaseURL) {
                this._invalidate();
                usm.basicURLParse(newValue, { url: this._parsedUrl, stateOverride: 'hostname' });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(URL.prototype, "port", {
        get: function () {
            if (!this._parsedUrl.port) {
                return '';
            }
            else {
                return usm.serializeInteger(this._parsedUrl.port);
            }
        },
        set: function (newValue) {
            if (!usm.cannotHaveAUsernamePasswordPort(this._parsedUrl)) {
                this._invalidate();
                if (newValue === '') {
                    this._parsedUrl.port = undefined;
                }
                else {
                    usm.basicURLParse(newValue, { url: this._parsedUrl, stateOverride: 'port' });
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(URL.prototype, "pathname", {
        get: function () {
            if (this._parsedUrl.cannotBeABaseURL) {
                return this._parsedUrl.path[0];
            }
            else if (this._parsedUrl.path.length === 0) {
                return '';
            }
            else {
                return "/" + this._parsedUrl.path.join('/');
            }
        },
        set: function (newValue) {
            if (!this._parsedUrl.cannotBeABaseURL) {
                this._invalidate();
                this._parsedUrl.path = [];
                usm.basicURLParse(newValue, { url: this._parsedUrl, stateOverride: 'path start' });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(URL.prototype, "hash", {
        get: function () {
            if (!this._parsedUrl.fragment) {
                return '';
            }
            else {
                return "#" + this._parsedUrl.fragment;
            }
        },
        set: function (newValue) {
            this._invalidate();
            // Trim the leading "#" and serialize "null" or "undefined" as a weird caveat of the spec
            var fragmentMatches = ("" + newValue).match(/^#?(.*)/);
            if (fragmentMatches && !!fragmentMatches[1]) {
                this._parsedUrl.fragment = '';
                usm.basicURLParse(fragmentMatches[1], { url: this._parsedUrl, stateOverride: 'fragment' });
            }
            else {
                this._parsedUrl.fragment = null; // tslint:disable-line:no-null-keyword
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(URL.prototype, "_query", {
        get: function () {
            if (this._parsedUrl.query) {
                return "?" + this._parsedUrl.query;
            }
            else {
                return this._parsedUrl.query;
            }
        },
        set: function (value) {
            if (value === null) {
                this._parsedUrl.query = null; // tslint:disable-line:no-null-keyword
            }
            else {
                this._parsedUrl.query = '';
                usm.basicURLParse(value, { url: this._parsedUrl, stateOverride: 'query' });
            }
        },
        enumerable: true,
        configurable: true
    });
    URL.prototype._invalidate = function () {
        this._serializedUrl = undefined;
    };
    return URL;
}(BaseURL_1.default));
exports.default = URL;

//# sourceMappingURL=URL-complete.js.map
