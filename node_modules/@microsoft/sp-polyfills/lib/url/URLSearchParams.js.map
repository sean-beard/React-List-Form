{"version":3,"sources":["url/URLSearchParams.ts"],"names":[],"mappings":"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","file":"url/URLSearchParams.js","sourcesContent":["/**\r\n * Polyfill for the URLSearchParams class.\r\n *\r\n * MDN documentation: https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\r\n *\r\n * WhatWG Spec: https://url.spec.whatwg.org/\r\n */\r\n\r\nimport BaseURL from './BaseURL';\r\n\r\ninterface IKeyValuePair {\r\n  key: string;\r\n  value: string;\r\n}\r\n\r\nexport default class URLSearchParams implements URLSearchParams {\r\n  private _url: BaseURL;\r\n  private _queryParameterList: IKeyValuePair[];\r\n\r\n  /**\r\n   * Parser following this spec: https://url.spec.whatwg.org/#concept-urlencoded-parser\r\n   */\r\n  private static _getParamterPairsFromString(str: string): IKeyValuePair[] {\r\n    const strMatches: string[] | null = str.match(/\\??(.*)/);\r\n    if (strMatches) {\r\n      str = strMatches[1];\r\n    } else {\r\n      // Unexpected format. Return nothing\r\n      return [];\r\n    }\r\n\r\n    return (str.split('&') || []).filter((token: string) => token).map((token: string) => {\r\n      const splitIndex: number = token.indexOf('=');\r\n      let key: string = '';\r\n      let value: string = '';\r\n\r\n      if (splitIndex === -1) {\r\n        // No \"=\" -> Empty value\r\n        key = token;\r\n      } else if (splitIndex === 0) {\r\n        // \"=\" is the first character -> empty key\r\n        value = token.substr(1);\r\n      } else {\r\n        key = token.substring(0, splitIndex);\r\n        value = token.substr(splitIndex + 1);\r\n      }\r\n\r\n      // Replace \"+\" with space\r\n      key = key.replace(/\\+/g, ' ');\r\n      value = value.replace(/\\+/g, ' ');\r\n\r\n      // Decode the key and value\r\n      key = decodeURIComponent(key);\r\n      value = decodeURIComponent(value);\r\n\r\n      return { key, value };\r\n    });\r\n  }\r\n\r\n  constructor(init?: string[][] | { [key: string]: string } | string) {\r\n    this._initialize(init);\r\n  }\r\n\r\n  public append(key: string, value: string): void {\r\n    this._queryParameterList.push({ key, value });\r\n    this._update();\r\n  }\r\n\r\n  public delete(key: string): void {\r\n    for (let i: number = 0; i < this._queryParameterList.length; i++) {\r\n      if (this._queryParameterList[i].key === key) {\r\n        this._queryParameterList.splice(i, 1);\r\n        i--;\r\n      }\r\n    }\r\n\r\n    this._update();\r\n  }\r\n\r\n  public get(key: string): string | null {\r\n    for (let i: number = 0; i < this._queryParameterList.length; i++) {\r\n      if (this._queryParameterList[i].key === key) {\r\n        return this._queryParameterList[i].value;\r\n      }\r\n    }\r\n\r\n    return null; // tslint:disable-line:no-null-keyword\r\n  }\r\n\r\n  public getAll(key: string): string[] {\r\n    const result: string[] = [];\r\n    for (let i: number = 0; i < this._queryParameterList.length; i++) {\r\n      if (this._queryParameterList[i].key === key) {\r\n        result.push(this._queryParameterList[i].value);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  public has(key: string): boolean {\r\n    for (let i: number = 0; i < this._queryParameterList.length; i++) {\r\n      if (this._queryParameterList[i].key === key) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false; // tslint:disable-line:no-null-keyword\r\n  }\r\n\r\n  public set(key: string, value: string): void {\r\n    let found: boolean = false;\r\n    for (let i: number = 0; i < this._queryParameterList.length; i++) {\r\n      if (this._queryParameterList[i].key === key) {\r\n        if (found) {\r\n          // Already found a matching key - remove the rest\r\n          this._queryParameterList.splice(i, 1);\r\n          i--;\r\n        } else {\r\n          found = true;\r\n          this._queryParameterList[i].value = value;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!found) {\r\n      this.append(key, value);\r\n      // No need to call _update() here because append() calls it.\r\n    } else {\r\n      this._update();\r\n    }\r\n  }\r\n\r\n  public sort(): void {\r\n    this._queryParameterList.sort((a: IKeyValuePair, b: IKeyValuePair): number => a.key.localeCompare(b.key));\r\n    this._update();\r\n  }\r\n\r\n  public toString(): string {\r\n    return this._queryParameterList.map(({ key, value }) =>\r\n      `${encodeURIComponent(key)}=${encodeURIComponent(value)}`\r\n    ).join('&');\r\n  }\r\n\r\n  private _update(): void {\r\n    if (this._url) {\r\n      this._url.search = this.toString();\r\n    }\r\n  }\r\n\r\n  private _initialize(init?: string[][] | { [key: string]: string } | string): void {\r\n    this._queryParameterList = [];\r\n\r\n    if (Array.isArray(init)) {\r\n      // Array\r\n      for (const element of init) {\r\n        if (!Array.isArray(element) || element.length !== 2) {\r\n          // Must be an array of two-element arrays\r\n          throw new TypeError('All elements in init sequence must have exactly two elements');\r\n        } else {\r\n          this._queryParameterList.push({\r\n            key: element[0],\r\n            value: element[1]\r\n          });\r\n        }\r\n      }\r\n    } else if (typeof init === 'object') {\r\n      // Dictionary\r\n      for (const key in init) {\r\n        if (init.hasOwnProperty(key)) {\r\n          this._queryParameterList.push({\r\n            key,\r\n            value: init[key]\r\n          });\r\n        }\r\n      }\r\n    } else if (typeof init === 'string') {\r\n      // String\r\n      this._queryParameterList = URLSearchParams._getParamterPairsFromString(init);\r\n    } else {\r\n      // do nothing\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}