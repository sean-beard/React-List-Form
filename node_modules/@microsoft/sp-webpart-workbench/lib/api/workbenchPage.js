"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var fsx = require("fs-extra");
var Resolve_1 = require("@microsoft/sp-build-core-tasks/lib/utilities/Resolve");
var projectRootPath = process.cwd();
var workbenchRootPath;
try {
    workbenchRootPath = Resolve_1.resolvePackage('@microsoft/sp-webpart-workbench', projectRootPath);
}
catch (e) {
    workbenchRootPath = path.join(__dirname, '..', '..');
}
var assemblyManifestID = '44bae1a2-d2eb-4e10-8c21-a1dbdce1036f'; 
var serveConfig;
try {
    serveConfig = require(path.join(projectRootPath, 'config', 'serve.json'));
}
catch (e) {
    serveConfig = {
        port: 4321,
        initialPage: ''
    };
}
var faviconUrl = getUrlForPath(path.join(__dirname, 'assets', 'server-icon.png'));
var assemblyUrl;
try {
    var assemblyPath = getAssemblyPath();
    assemblyUrl = getUrlForPath(assemblyPath);
}
catch (e) {
}
var tempDirPath = path.join(projectRootPath, 'temp');
var manifestsJsPath = path.join(tempDirPath, 'manifests.js');
var manifestJsUrl = getUrlForPath(manifestsJsPath);
var workbenchInitUrl = getUrlForPath(path.join(workbenchRootPath, 'lib', 'api', 'workbenchInit.js'));
function getUrlForPath(filePath) {
    var relativePath = path.relative(projectRootPath, filePath);
    return (serveConfig.https ? 'https' : 'http') +
        ("://localhost:" + serveConfig.port + "/" + relativePath.replace(/\\/g, '/'));
}
function generateWorkbenchPageContent() {
    var head;
    var body;
    if (!assemblyUrl) {
        body = getErrorBody('The script containing the initialization code could not be resolved. Unable to load workbench');
    }
    else {
        head = "\n  <script type=\"text/javascript\" src=\"" + manifestJsUrl + "\"></script>\n  <script type=\"text/javascript\" src=\"" + assemblyUrl + "\"></script>\n  <script type=\"text/javascript\">\n    // The workbenchInit.js script is commonJS and expects an \"exports\" object\n    var exports = {};\n  </script>\n  <script type=\"text/javascript\" src=\"" + workbenchInitUrl + "\"></script>\n  <script type=\"text/javascript\">\n    // Clean up the \"exports\" object\n    exports = undefined;\n  </script>";
        body = "\n  <script type=\"text/javascript\">\n    window.spModuleLoader.start(window.preloadedData);\n  </script>";
    }
    return getPageWithBodyAndHead(body, head);
}
exports.generateWorkbenchPageContent = generateWorkbenchPageContent;
function getErrorBody(errorMessage) {
    return "\n  <span style=\"font-weight:bold;color:red;font-size:20px;\">\n    " + errorMessage + "\n  </span>";
}
function getPageWithBodyAndHead(body, head) {
    return "<!doctype html>\n<html dir=\"ltr\">\n<head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\n  <title>SharePoint Web Part Workbench</title>\n\n  <link rel=\"shortcut icon\" href=\"" + faviconUrl + "\" />\n" + (head || '') + "\n</head>\n<body>\n" + body + "\n</body>\n</html>\n";
}
function getAssemblyPath() {
    var projectRoot = Resolve_1.resolvePackage('@microsoft/sp-loader', workbenchRootPath);
    var distFolder = path.join(projectRoot, 'dist');
    var assemblyManifestPath = path.join(distFolder, assemblyManifestID + ".manifest.json");
    var assemblyManifest = require(assemblyManifestPath);
    var assemblyEntryModuleConfig = assemblyManifest.loaderConfig.scriptResources[assemblyManifest.loaderConfig.entryModuleId];
    if (!assemblyEntryModuleConfig) {
        throw 'Unable to find assembly entrypoint';
    }
    var foundPath;
    switch (assemblyEntryModuleConfig.type) {
        case 'path':
            foundPath = disambiguatePath(assemblyEntryModuleConfig.path);
            break;
        case 'localizedPath':
            foundPath = disambiguatePath(assemblyEntryModuleConfig.defaultPath);
            break;
        default:
            throw "Invalid module assembly manifest found at " + assemblyManifestPath;
    }
    if (!foundPath) {
        throw 'Unable to find assembly path';
    }
    return path.join(projectRoot, foundPath);
}
function disambiguatePath(pathToDisambiguate) {
    if (typeof pathToDisambiguate === 'string') {
        return pathToDisambiguate;
    }
    else {
        return pathToDisambiguate.debug || pathToDisambiguate.default;
    }
}
var workbenchFilePath = path.join(tempDirPath, 'workbench.html');
fsx.ensureDirSync(path.dirname(workbenchFilePath));
fsx.writeFileSync(workbenchFilePath, generateWorkbenchPageContent());
var redirectPath = getUrlForPath(workbenchFilePath);
function workbenchPage(request, response) {
    response.redirect(redirectPath);
}
exports.default = workbenchPage;
