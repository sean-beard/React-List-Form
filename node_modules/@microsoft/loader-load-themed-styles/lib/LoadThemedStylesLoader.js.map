{"version":3,"sources":["LoadThemedStylesLoader.ts"],"names":[],"mappings":";AAAA;;;GAGG;;AAQH,0CAA6C;AAG7C,IAAM,sBAAsB,GAAW,OAAO,CAAC,OAAO,CAAC,+BAA+B,CAAC,CAAC;AAqBxF;;;;;GAKG;AACH;IAgDE;QACE,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;IAC7E,CAAC;IA5CD,sBAAkB,gDAAsB;QAIxC;;WAEG;aACH;YACE,MAAM,CAAC,sBAAsB,CAAC,uBAAuB,CAAC;QACxD,CAAC;QAZD;;WAEG;aACH,UAAyC,KAAa;YACpD,sBAAsB,CAAC,uBAAuB,GAAG,KAAK,CAAC;QACzD,CAAC;;;OAAA;IASD;;OAEG;IACW,kDAA2B,GAAzC;QACE,sBAAsB,CAAC,uBAAuB,GAAG,sBAAsB,CAAC;IAC1E,CAAC;IAEa,4BAAK,GAAnB,UAAgD,gBAAwB;QAChE,IAAA,uCAGgE,EAFpE,4BAAW,EACX,aAAa,EAAb,kCAAa,CACwD;QAEvE,IAAI,UAAU,GAAW,gBAAgB,CAAC;QAC1C,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YAChB,UAAU,IAAI,MAAI,WAAa,CAAC;QAClC,CAAC;QAED,MAAM,CAAC;YACL,2BAAyB,WAAW,CAAC,gBAAgB,CAAC,IAAI,EAAE,IAAI,GAAG,gBAAgB,CAAC,OAAI;YACxF,0BAAwB,IAAI,CAAC,SAAS,CAAC,sBAAsB,CAAC,uBAAuB,CAAC,OAAI;YAC1F,EAAE;YACF,mEAAmE;YACnE,EAAE;YACF,8BAA8B;YAC9B,gFAA6E,KAAK,KAAK,IAAI,QAAI;YAC/F,EAAE;YACF,wBAAsB,UAAU,uBAAoB;SACrD,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACf,CAAC;IA7Cc,8CAAuB,GAAW,sBAAsB,CAAC;IAkD1E,6BAAC;CAnDD,AAmDC,IAAA;AAnDY,wDAAsB","file":"LoadThemedStylesLoader.js","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\n\r\n/**\r\n * This simple loader wraps the loading of CSS in script equivalent to\r\n *  require(\"load-themed-styles\").loadStyles('... css text ...').\r\n */\r\ndeclare const packageDescription: void;\r\n\r\nimport loaderUtils = require('loader-utils');\r\nimport { loader } from 'webpack';\r\n\r\nconst loadedThemedStylesPath: string = require.resolve('@microsoft/load-themed-styles');\r\n\r\n/**\r\n * Options for the loader.\r\n *\r\n * @public\r\n */\r\nexport interface ILoadThemedStylesLoaderOptions {\r\n  /**\r\n   * If this parameter is specified, override the name of the value exported from this loader. This is useful in\r\n   *  exporting as the default in es6 module import scenarios. See the README for more information.\r\n   */\r\n  namedExport?: string;\r\n\r\n  /**\r\n   * If this parameter is set to \"true,\" the \"loadAsync\" parameter is set to true in the call to loadStyles.\r\n   * Defaults to false.\r\n   */\r\n  async?: boolean;\r\n}\r\n\r\n/**\r\n * This simple loader wraps the loading of CSS in script equivalent to\r\n *  require(\"load-themed-styles\").loadStyles('... css text ...').\r\n *\r\n * @public\r\n */\r\nexport class LoadThemedStylesLoader {\r\n  private static _loadedThemedStylesPath: string = loadedThemedStylesPath;\r\n\r\n  /**\r\n   * Use this property to override the path to the @microsoft/load-themed-styles package.\r\n   */\r\n  public static set loadedThemedStylesPath(value: string) {\r\n    LoadThemedStylesLoader._loadedThemedStylesPath = value;\r\n  }\r\n\r\n  /**\r\n   * Use this property to override the path to the @microsoft/load-themed-styles package.\r\n   */\r\n  public static get loadedThemedStylesPath(): string {\r\n    return LoadThemedStylesLoader._loadedThemedStylesPath;\r\n  }\r\n\r\n  /**\r\n   * Reset the path to the @microsoft/load-themed-styles package to the default.\r\n   */\r\n  public static resetLoadedThemedStylesPath(): void {\r\n    LoadThemedStylesLoader._loadedThemedStylesPath = loadedThemedStylesPath;\r\n  }\r\n\r\n  public static pitch(this: loader.LoaderContext, remainingRequest: string): string {\r\n    const {\r\n      namedExport,\r\n      async = false\r\n    }: ILoadThemedStylesLoaderOptions = loaderUtils.getOptions(this) || {};\r\n\r\n    let exportName: string = 'module.exports';\r\n    if (namedExport) {\r\n      exportName += `.${namedExport}`;\r\n    }\r\n\r\n    return [\r\n      `var content = require(${loaderUtils.stringifyRequest(this, '!!' + remainingRequest)});`,\r\n      `var loader = require(${JSON.stringify(LoadThemedStylesLoader._loadedThemedStylesPath)});`,\r\n      '',\r\n      'if(typeof content === \"string\") content = [[module.id, content]];',\r\n      '',\r\n      '// add the styles to the DOM',\r\n      `for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1], ${async === true});`,\r\n      '',\r\n      `if(content.locals) ${exportName} = content.locals;`\r\n    ].join('\\n');\r\n  }\r\n\r\n  constructor() {\r\n    throw new Error('Constructing \"LoadThemedStylesLoader\" is not supported.');\r\n  }\r\n}\r\n"],"sourceRoot":"..\\src"}