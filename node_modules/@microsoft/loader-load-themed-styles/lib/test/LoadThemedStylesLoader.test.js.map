{"version":3,"sources":["test/LoadThemedStylesLoader.test.ts"],"names":[],"mappings":"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","file":"test/LoadThemedStylesLoader.test.js","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\n\r\n/// <reference types=\"mocha\" />\r\n\r\nimport { assert } from 'chai';\r\nimport { LoadThemedStylesLoader } from './../LoadThemedStylesLoader';\r\nimport LoadThemedStylesMock = require('./testData/LoadThemedStylesMock');\r\n\r\nfunction wrapResult(loaderResult: string): string {\r\n  return `var module = { id: 'testId', exports: {} };\r\n  ${loaderResult}\r\n  module;`;\r\n}\r\n\r\ndescribe('LoadThemedStylesLoader', () => {\r\n  beforeEach(() => {\r\n    LoadThemedStylesLoader.resetLoadedThemedStylesPath();\r\n    LoadThemedStylesMock.loadedData = [];\r\n    LoadThemedStylesMock.calledWithAsync = [];\r\n  });\r\n\r\n  it('follows the Webpack loader interface', () => {\r\n    assert.isDefined(LoadThemedStylesLoader);\r\n    assert.isDefined(LoadThemedStylesLoader.pitch);\r\n\r\n    assert.throws(() => new LoadThemedStylesLoader());\r\n  });\r\n\r\n  it('it correctly resolves load-themed-styles', () => {\r\n    const expectedPath: string = require.resolve('@microsoft/load-themed-styles');\r\n    assert.equal(LoadThemedStylesLoader.loadedThemedStylesPath, expectedPath);\r\n  });\r\n\r\n  it('it inserts the resolved load-themed-styles path', () => {\r\n    const expectedPath: string = require.resolve('@microsoft/load-themed-styles');\r\n    const loaderResult: string = LoadThemedStylesLoader.pitch.call({}, '');\r\n    assert.isNotNull(loaderResult.indexOf(expectedPath));\r\n  });\r\n\r\n  it('it allows for override of load-themed-styles path', () => {\r\n    let expectedPath: string = './testData/LoadThemedStylesMock';\r\n    LoadThemedStylesLoader.loadedThemedStylesPath = expectedPath;\r\n    assert.equal(LoadThemedStylesLoader.loadedThemedStylesPath, expectedPath);\r\n\r\n    LoadThemedStylesLoader.resetLoadedThemedStylesPath();\r\n    expectedPath = require.resolve('@microsoft/load-themed-styles');\r\n    assert.equal(LoadThemedStylesLoader.loadedThemedStylesPath, expectedPath);\r\n  });\r\n\r\n  it('it inserts the overridden load-themed-styles path', () => {\r\n    const expectedPath: string = './testData/LoadThemedStylesMock';\r\n    const loaderResult: string = LoadThemedStylesLoader.pitch.call({}, '');\r\n    assert.isNotNull(loaderResult.indexOf(expectedPath));\r\n  });\r\n\r\n  it('correctly calls loadStyles in load-themed-styles with a module reference', () => {\r\n    LoadThemedStylesLoader.loadedThemedStylesPath = './testData/LoadThemedStylesMock';\r\n\r\n    let loaderResult: string = LoadThemedStylesLoader.pitch.call({}, './testData/MockStyle1');\r\n    loaderResult = loaderResult.replace(/require\\(\\\"!!/, 'require(\"');\r\n    loaderResult = wrapResult(loaderResult);\r\n\r\n    const returnedModule: { exports: string } = eval(loaderResult); // tslint:disable-line:no-eval\r\n\r\n    assert.isTrue(LoadThemedStylesMock.loadedData.indexOf('STYLE 1') !== -1);\r\n    assert.isTrue(LoadThemedStylesMock.loadedData.indexOf('STYLE 2') !== -1);\r\n    assert.equal(LoadThemedStylesMock.loadedData.length, 2);\r\n    assert.isFalse(LoadThemedStylesMock.calledWithAsync[0]);\r\n    assert.isFalse(LoadThemedStylesMock.calledWithAsync[1]);\r\n    assert.equal(LoadThemedStylesMock.calledWithAsync.length, 2);\r\n    assert.equal(returnedModule.exports, 'locals');\r\n  });\r\n\r\n  it('correctly calls loadStyles in load-themed-styles with a string reference', () => {\r\n    LoadThemedStylesLoader.loadedThemedStylesPath = './testData/LoadThemedStylesMock';\r\n\r\n    let loaderResult: string = LoadThemedStylesLoader.pitch.call({}, './testData/MockStyle2');\r\n    loaderResult = loaderResult.replace(/require\\(\\\"!!/, 'require(\"');\r\n    loaderResult = wrapResult(loaderResult);\r\n\r\n    const returnedModule: { exports: string } = eval(loaderResult); // tslint:disable-line:no-eval\r\n\r\n    assert.isTrue(LoadThemedStylesMock.loadedData.indexOf('styles') !== -1);\r\n    assert.equal(LoadThemedStylesMock.loadedData.length, 1);\r\n    assert.deepEqual(returnedModule.exports, {});\r\n  });\r\n\r\n  it('correctly handles the namedExport option', () => {\r\n    LoadThemedStylesLoader.loadedThemedStylesPath = './testData/LoadThemedStylesMock';\r\n\r\n    const query: {} = { namedExport: 'default' };\r\n    let loaderResult: string = LoadThemedStylesLoader.pitch.call({ query }, './testData/MockStyle1');\r\n    loaderResult = loaderResult.replace(/require\\(\\\"!!/, 'require(\"');\r\n    loaderResult = wrapResult(loaderResult);\r\n\r\n    const returnedModule: { exports: string } = eval(loaderResult); // tslint:disable-line:no-eval\r\n\r\n    assert.isTrue(LoadThemedStylesMock.loadedData.indexOf('STYLE 1') !== -1);\r\n    assert.isTrue(LoadThemedStylesMock.loadedData.indexOf('STYLE 2') !== -1);\r\n    assert.equal(LoadThemedStylesMock.loadedData.length, 2);\r\n    assert.isFalse(LoadThemedStylesMock.calledWithAsync[0]);\r\n    assert.isFalse(LoadThemedStylesMock.calledWithAsync[1]);\r\n    assert.equal(LoadThemedStylesMock.calledWithAsync.length, 2);\r\n    assert.deepEqual(returnedModule.exports, { default: 'locals' });\r\n  });\r\n\r\n  it('correctly handles the async option set to \"true\"', () => {\r\n    LoadThemedStylesLoader.loadedThemedStylesPath = './testData/LoadThemedStylesMock';\r\n\r\n    const query: {} = { async: true };\r\n    let loaderResult: string = LoadThemedStylesLoader.pitch.call({ query }, './testData/MockStyle1');\r\n    loaderResult = loaderResult.replace(/require\\(\\\"!!/, 'require(\"');\r\n    loaderResult = wrapResult(loaderResult);\r\n\r\n    const returnedModule: { exports: string } = eval(loaderResult); // tslint:disable-line:no-eval\r\n\r\n    assert.isTrue(LoadThemedStylesMock.loadedData.indexOf('STYLE 1') !== -1);\r\n    assert.isTrue(LoadThemedStylesMock.loadedData.indexOf('STYLE 2') !== -1);\r\n    assert.equal(LoadThemedStylesMock.loadedData.length, 2);\r\n    assert.isTrue(LoadThemedStylesMock.calledWithAsync[0]);\r\n    assert.isTrue(LoadThemedStylesMock.calledWithAsync[1]);\r\n    assert.equal(LoadThemedStylesMock.calledWithAsync.length, 2);\r\n    assert.equal(returnedModule.exports, 'locals');\r\n  });\r\n\r\n  it('correctly handles the async option set to a non-boolean', () => {\r\n    LoadThemedStylesLoader.loadedThemedStylesPath = './testData/LoadThemedStylesMock';\r\n\r\n    const query: {} = { async: 'asdf' };\r\n    let loaderResult: string = LoadThemedStylesLoader.pitch.call({}, './testData/MockStyle1');\r\n    loaderResult = loaderResult.replace(/require\\(\\\"!!/, 'require(\"');\r\n    loaderResult = wrapResult(loaderResult);\r\n\r\n    const returnedModule: { exports: string } = eval(loaderResult); // tslint:disable-line:no-eval\r\n\r\n    assert.isTrue(LoadThemedStylesMock.loadedData.indexOf('STYLE 1') !== -1);\r\n    assert.isTrue(LoadThemedStylesMock.loadedData.indexOf('STYLE 2') !== -1);\r\n    assert.equal(LoadThemedStylesMock.loadedData.length, 2);\r\n    assert.isFalse(LoadThemedStylesMock.calledWithAsync[0]);\r\n    assert.isFalse(LoadThemedStylesMock.calledWithAsync[1]);\r\n    assert.equal(LoadThemedStylesMock.calledWithAsync.length, 2);\r\n    assert.equal(returnedModule.exports, 'locals');\r\n  });\r\n});"],"sourceRoot":"..\\..\\src"}