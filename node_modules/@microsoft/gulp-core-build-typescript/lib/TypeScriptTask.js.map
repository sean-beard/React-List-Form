{"version":3,"sources":["TypeScriptTask.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;AAG3D,oCAAuC;AAEvC,2BAA6B;AAE7B,8DAAoE;AAEpE,qEAAoE;AA8DpE;;GAEG;AACH;IAAoC,kCAA+B;IAKjE;QAAA,YACE,kBACE,YAAY,EACZ;YACE,iBAAiB,EAAE,IAAI;YACvB,QAAQ,EAAE;gBACR,KAAK,EAAE,UAAC,KAAkC;oBACxC,IAAM,QAAQ,GAAW,KAAK,CAAC,gBAAgB,IAAI,KAAK,CAAC,YAAY,IAAI,kBAAkB,CAAC;oBAC5F,IAAM,IAAI,GAAW,KAAK,CAAC,aAAa,GAAG,KAAK,CAAC,aAAa,CAAC,IAAI,GAAG,CAAC,CAAC;oBACxE,IAAM,SAAS,GAAW,KAAK,CAAC,aAAa,GAAG,KAAK,CAAC,aAAa,CAAC,SAAS,GAAG,CAAC,CAAC;oBAClF,IAAM,IAAI,GAAW,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC;oBAC3C,IAAM,YAAY,GAAW,CAAC,OAAO,KAAK,CAAC,UAAU,CAAC,WAAW,KAAK,QAAQ,CAAC;wBAC5E,KAAK,CAAC,UAAU,CAAC,WAAuC,CAAC,WAAW;wBACrE,KAAK,CAAC,UAAU,CAAC,WAAqB,CAAC;oBAEzC,KAAI,CAAC,SAAS,CACZ,QAAQ,EACR,IAAI,EACJ,SAAS,EACT,IAAI,GAAG,IAAI,EACX,YAAY,CAAC,CAAC;gBAClB,CAAC;aACF;YACD,WAAW,EAAE;gBACX,aAAa;gBACb,cAAc;gBACd,sBAAsB;gBACtB,mBAAmB;gBACnB,kBAAkB;gBAClB,oBAAoB;aACrB;YACD,WAAW,EAAE;gBACX,aAAa;gBACb,eAAe;gBACf,cAAc;aACf;YACD,4BAA4B,EAAE,KAAK;YACnC,cAAc,EAAE,IAAI;YACpB,MAAM,EAAE,SAAS;YACjB,SAAS,EAAE,SAAS;YACpB,SAAS,EAAE,SAAS;SACrB,CACF,SACF;;IAAD,CAAC;IAEM,mCAAU,GAAjB;QACE,MAAM,CAAC,OAAO,CAAC,kCAAkC,CAAC,CAAC;IACrD,CAAC;IAEM,oCAAW,GAAlB,UAAmB,IAAmB,EAAE,gBAA0C;QAAlF,iBA0EC;QAzEC,4BAA4B;QAC5B,IAAM,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;QACxC,IAAM,KAAK,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;QAChC,2BAA2B;QAE3B,IAAM,UAAU,GAA6B,EAAE,CAAC;QAEhD,IAAM,MAAM,GAA2B;YACrC,UAAU,EAAE,CAAC;SACd,CAAC;QAEF,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAExB,gDAAgD;QAChD,IAAM,UAAU,GAAsB,iDAAuB,CAAC,qBAAqB,EAAE,CAAC,CAAC,6BAA6B;QACpH,EAAE,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,GAAG,CAAC,yBAAuB,UAAU,CAAC,OAAS,CAAC,CAAC;QACxD,CAAC;QACD,kCAAkC;QAClC,IAAM,eAAe,GACnB,iDAAuB,CAAC,wBAAwB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,eAAe,CAAC;QAErF,EAAE,CAAC,CAAC,eAAe,CAAC,MAAM,KAAK,UAAU,IAAI,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC;YACpE,IAAI,CAAC,GAAG,CAAC,0EAAwE;mBAC7E,uCAAkC,eAAe,CAAC,MAAM,QAAI,CAAA,CAAC,CAAC;QACpE,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC;YACnC,IAAI,CAAC,GAAG,CAAC,oFAAgF,CAAC,CAAC;YAC3F,eAAe,CAAC,MAAM,GAAG,UAAU,CAAC;QACtC,CAAC;QAED,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,IAAI,EAAE,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;QAEvE,IAAI,CAAC,eAAe,CAAC,IAAI,EACvB,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,UAAU,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,CAAC,SAAS,EACpD,UAAU,EACV,MAAM,CACP,CAAC;QAEF,4BAA4B;QAC5B,IAAM,SAAS,GAA2B,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,IAAI,EAAE,CAAC,CAAC;QAEtF,UAAU,CAAC,IAAI,CACb,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAEnF,gDAAgD;QAChD,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;YAC9B,UAAU,CAAC,IAAI,CACb,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YAExD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,IAAI,EAAE,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,EAAE,eAAe,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;YAC5G,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;QAChG,CAAC;QAED,gDAAgD;QAChD,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;YAC9B,UAAU,CAAC,IAAI,CACb,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YAExD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,IAAI,EAAE,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,EAAE,eAAe,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;YAC5G,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;QAChG,CAAC;QAED,6EAA6E;QAC7E,KAAK,CAAC,UAAU,CAAC;aACd,EAAE,CAAC,YAAY,EAAE;YAChB,EAAE,CAAC,CAAC,KAAI,CAAC,UAAU,CAAC,iBAAiB,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;gBAC3D,gBAAgB,CAAC,+BAA+B,CAAC,CAAC;YACpD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,gBAAgB,EAAE,CAAC;YACrB,CAAC;QACH,CAAC,CAAC;aACD,EAAE,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC;IACnC,CAAC;IAEM,sCAAa,GAApB,UAAqB,WAAyB,EAAE,UAAmD;QAAnD,2BAAA,EAAA,aAAoC,IAAI,CAAC,UAAU;QACjG,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;QACnC,IAAM,UAAU,GAAa,EAAE,CAAC;QAEhC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;YAC3B,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QAC1C,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;YAC9B,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;QAC7C,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;YAC9B,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;QAC7C,CAAC;QAED,MAAM,CAAC,UAAU,CAAC;IACpB,CAAC;IAED,uCAAuC;IAChC,oCAAW,GAAlB,UAAmB,MAA6B;QAC9C,MAAM,wDAAwD,CAAC;IACjE,CAAC;IAEO,yCAAgB,GAAxB,UAAyB,WAA4C;QAA5C,4BAAA,EAAA,cAA4B,IAAI,CAAC,WAAW;QACnE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,WAAW,CAAC,SAAS,CAAC;QACjD,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;YAC/B,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,WAAW,CAAC,YAAY,CAAC;QACvD,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;YAC/B,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,WAAW,CAAC,YAAY,CAAC;QACvD,CAAC;IACH,CAAC;IAEO,wCAAe,GAAvB,UAAwB,IAAmB,EAAE,SAAqB,EAAE,OAAe,EACjF,UAAoC,EAAE,MAA8B;QACpE,4BAA4B;QAC5B,IAAM,OAAO,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;QACxC,IAAM,UAAU,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;QAC9C,2BAA2B;QAE3B,kCAAkC;QAClC,IAAI,QAAQ,GAAQ,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,IAAI,EAAE,CAAC;aAC5D,IAAI,CAAC,OAAO,CAAC;YACZ,YAAY,EAAE;gBACZ,MAAM,CAAC,UAAU,EAAE,CAAC;YACtB,CAAC;SACF,CAAC,CAAC,CAAC;QAEN,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC;YACnC,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;QAC9C,CAAC;QAED,QAAQ,GAAG,QAAQ;aAChB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;QAE7C,mCAAmC;QACnC,IAAI,QAAQ,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,4BAA4B;cACxD,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;gBAC3C,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,sDAAsD;aAC/F,CAAC,CAAC;cACD,QAAQ,CAAC,EAAE,CAAC,CAAC;QAEjB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC;YACnC,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,qBAAqB,EAAE,CAAC,CAAC,CAAC;QAC9F,CAAC;QAED,UAAU,CAAC,IAAI,CAAC,QAAQ;aACrB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAE7B,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACzD,CAAC;IAEO,8CAAqB,GAA7B,UAA8B,IAAuC;QACnE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;IAClE,CAAC;IACH,qBAAC;AAAD,CAlNA,AAkNC,CAlNmC,0BAAQ,GAkN3C;AAlNY,wCAAc","file":"TypeScriptTask.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport gulpType = require('gulp');\r\nimport ts = require('gulp-typescript');\r\nimport * as Typescript from 'typescript';\r\nimport * as path from 'path';\r\n\r\nimport { GulpTask, IBuildConfig } from '@microsoft/gulp-core-build';\r\n\r\nimport { TypeScriptConfiguration } from './TypeScriptConfiguration';\r\n\r\n/**\r\n * Includes the experimental stripInternal feature\r\n * @public\r\n */\r\nexport interface ICompilerOptions extends ts.Settings {\r\n  stripInternal?: boolean;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface ITypeScriptTaskConfig {\r\n  /**\r\n   * Fails the build when errors occur.\r\n   * @default true\r\n   */\r\n  failBuildOnErrors?: boolean;\r\n\r\n  /**\r\n   * Glob matches for files to be included in the build.\r\n   */\r\n  sourceMatch?: string[];\r\n\r\n  /**\r\n   * Glob matches for files to be passed through the build.\r\n   */\r\n  staticMatch?: string[];\r\n\r\n  /**\r\n   * Optional override for a custom reporter object to be passed into the TypeScript compiler.\r\n   */\r\n  reporter?: ts.reporter.Reporter;\r\n\r\n  /**\r\n   * Removes comments from all generated `.js` files. Will **not** remove comments from generated `.d.ts` files.\r\n   * Defaults to false.\r\n   */\r\n  removeCommentsFromJavaScript?: boolean;\r\n\r\n  /**\r\n   * If true, creates sourcemap files which are useful for debugging. Defaults to true.\r\n   */\r\n  emitSourceMaps?: boolean;\r\n\r\n  /**\r\n   * The directory to write the compiled javascript and typings files to. Defaults to buildConfig.libFolder\r\n   */\r\n  libDir?: string;\r\n\r\n  /**\r\n   * If defined, drop typescript files from an AMD build here. Defaults to buildConfig.libAMDFolder\r\n   */\r\n  libAMDDir?: string;\r\n\r\n  /**\r\n   * If defined, drop typescript files build using modules=ES6.\r\n   */\r\n  libES6Dir?: string;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport class TypeScriptTask extends GulpTask<ITypeScriptTaskConfig> {\r\n  private _tsProject: ts.Project;\r\n  private _tsAMDProject: ts.Project;\r\n  private _tsES6Project: ts.Project;\r\n\r\n  constructor() {\r\n    super(\r\n      'typescript',\r\n      {\r\n        failBuildOnErrors: true,\r\n        reporter: {\r\n          error: (error: ts.reporter.TypeScriptError): void => {\r\n            const filename: string = error.relativeFilename || error.fullFilename || 'unknown filename';\r\n            const line: number = error.startPosition ? error.startPosition.line : 0;\r\n            const character: number = error.startPosition ? error.startPosition.character : 0;\r\n            const code: number = error.diagnostic.code;\r\n            const errorMessage: string = (typeof error.diagnostic.messageText === 'object') ?\r\n              (error.diagnostic.messageText as { messageText: string }).messageText :\r\n              error.diagnostic.messageText as string;\r\n\r\n            this.fileError(\r\n              filename,\r\n              line,\r\n              character,\r\n              'TS' + code,\r\n              errorMessage);\r\n          }\r\n        },\r\n        sourceMatch: [\r\n          'src/**/*.ts',\r\n          'src/**/*.tsx',\r\n          'typings/main/**/*.ts',\r\n          'typings/main.d.ts',\r\n          'typings/tsd.d.ts',\r\n          'typings/index.d.ts'\r\n        ],\r\n        staticMatch: [\r\n          'src/**/*.js',\r\n          'src/**/*.json',\r\n          'src/**/*.jsx'\r\n        ],\r\n        removeCommentsFromJavaScript: false,\r\n        emitSourceMaps: true,\r\n        libDir: undefined,\r\n        libAMDDir: undefined,\r\n        libES6Dir: undefined\r\n      }\r\n    );\r\n  }\r\n\r\n  public loadSchema(): Object {\r\n    return require('./schemas/typescript.schema.json');\r\n  }\r\n\r\n  public executeTask(gulp: gulpType.Gulp, completeCallback: (error?: string) => void): void {\r\n    /* tslint:disable:typedef */\r\n    const assign = require('object-assign');\r\n    const merge = require('merge2');\r\n    /* tslint:enable:typedef */\r\n\r\n    const allStreams: NodeJS.ReadWriteStream[] = [];\r\n\r\n    const result: { errorCount: number } = {\r\n      errorCount: 0\r\n    };\r\n\r\n    this._normalizeConfig();\r\n\r\n    // Log the compiler version for custom versions.\r\n    const typescript: typeof Typescript = TypeScriptConfiguration.getTypescriptCompiler(); // tslint:disable-line:no-any\r\n    if (typescript && typescript.version) {\r\n      this.log(`TypeScript version: ${typescript.version}`);\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    const compilerOptions: ICompilerOptions =\r\n      TypeScriptConfiguration.getGulpTypescriptOptions(this.buildConfig).compilerOptions;\r\n\r\n    if (compilerOptions.module !== 'commonjs' && compilerOptions.module) {\r\n      this.log(`Your tsconfig.json file specifies a different \"target\" than expected. `\r\n        + `Expected: \"commonjs\". Actual: \"${compilerOptions.module}\".`);\r\n    } else if (!compilerOptions.module) {\r\n      this.log(`Your tsconfig.json file does not specify a \"target\". Using \"commonjs\" instead.`);\r\n      compilerOptions.module = 'commonjs';\r\n    }\r\n\r\n    this._tsProject = this._tsProject || ts.createProject(compilerOptions);\r\n\r\n    this._compileProject(gulp,\r\n      this._tsProject,\r\n      this.taskConfig.libDir || this.buildConfig.libFolder,\r\n      allStreams,\r\n      result\r\n    );\r\n\r\n    // Static passthrough files.\r\n    const staticSrc: NodeJS.ReadWriteStream = gulp.src(this.taskConfig.staticMatch || []);\r\n\r\n    allStreams.push(\r\n      staticSrc.pipe(gulp.dest(this.taskConfig.libDir || this.buildConfig.libFolder)));\r\n\r\n    // If AMD modules are required, also build that.\r\n    if (this.taskConfig.libAMDDir) {\r\n      allStreams.push(\r\n        staticSrc.pipe(gulp.dest(this.taskConfig.libAMDDir)));\r\n\r\n      this._tsAMDProject = this._tsAMDProject || ts.createProject(assign({}, compilerOptions, { module: 'amd' }));\r\n      this._compileProject(gulp, this._tsAMDProject, this.taskConfig.libAMDDir, allStreams, result);\r\n    }\r\n\r\n    // If es6 modules are required, also build that.\r\n    if (this.taskConfig.libES6Dir) {\r\n      allStreams.push(\r\n        staticSrc.pipe(gulp.dest(this.taskConfig.libES6Dir)));\r\n\r\n      this._tsES6Project = this._tsES6Project || ts.createProject(assign({}, compilerOptions, { module: 'es6' }));\r\n      this._compileProject(gulp, this._tsES6Project, this.taskConfig.libES6Dir, allStreams, result);\r\n    }\r\n\r\n    // Listen for pass/fail, and ensure that the task passes/fails appropriately.\r\n    merge(allStreams)\r\n      .on('queueDrain', () => {\r\n        if (this.taskConfig.failBuildOnErrors && result.errorCount) {\r\n          completeCallback('TypeScript error(s) occurred.');\r\n        } else {\r\n          completeCallback();\r\n        }\r\n      })\r\n      .on('error', completeCallback);\r\n  }\r\n\r\n  public getCleanMatch(buildConfig: IBuildConfig, taskConfig: ITypeScriptTaskConfig = this.taskConfig): string[] {\r\n    this._normalizeConfig(buildConfig);\r\n    const cleanMatch: string[] = [];\r\n\r\n    if (this.taskConfig.libDir) {\r\n      cleanMatch.push(this.taskConfig.libDir);\r\n    }\r\n\r\n    if (this.taskConfig.libAMDDir) {\r\n      cleanMatch.push(this.taskConfig.libAMDDir);\r\n    }\r\n\r\n    if (this.taskConfig.libES6Dir) {\r\n      cleanMatch.push(this.taskConfig.libES6Dir);\r\n    }\r\n\r\n    return cleanMatch;\r\n  }\r\n\r\n  /** Override the new mergeConfig API */\r\n  public mergeConfig(config: ITypeScriptTaskConfig): void {\r\n    throw 'Do not use mergeConfig with gulp-core-build-typescript';\r\n  }\r\n\r\n  private _normalizeConfig(buildConfig: IBuildConfig = this.buildConfig): void {\r\n    if (!this.taskConfig.libDir) {\r\n      this.taskConfig.libDir = buildConfig.libFolder;\r\n    }\r\n\r\n    if (!this.taskConfig.libAMDDir) {\r\n      this.taskConfig.libAMDDir = buildConfig.libAMDFolder;\r\n    }\r\n\r\n    if (!this.taskConfig.libES6Dir) {\r\n      this.taskConfig.libES6Dir = buildConfig.libES6Folder;\r\n    }\r\n  }\r\n\r\n  private _compileProject(gulp: gulpType.Gulp, tsProject: ts.Project, destDir: string,\r\n    allStreams: NodeJS.ReadWriteStream[], result: { errorCount: number }): void {\r\n    /* tslint:disable:typedef */\r\n    const plumber = require('gulp-plumber');\r\n    const sourcemaps = require('gulp-sourcemaps');\r\n    /* tslint:enable:typedef */\r\n\r\n    // tslint:disable-next-line:no-any\r\n    let tsResult: any = gulp.src(this.taskConfig.sourceMatch || [])\r\n      .pipe(plumber({\r\n        errorHandler: (): void => {\r\n          result.errorCount++;\r\n        }\r\n      }));\r\n\r\n    if (this.taskConfig.emitSourceMaps) {\r\n      tsResult = tsResult.pipe(sourcemaps.init());\r\n    }\r\n\r\n    tsResult = tsResult\r\n      .pipe(tsProject(this.taskConfig.reporter));\r\n\r\n    // tslint:disable-next-line:typedef\r\n    let jsResult = (this.taskConfig.removeCommentsFromJavaScript\r\n      ? tsResult.js.pipe(require('gulp-decomment')({\r\n        space: !!this.taskConfig.emitSourceMaps /* turn comments into spaces to preserve sourcemaps */\r\n      }))\r\n      : tsResult.js);\r\n\r\n    if (this.taskConfig.emitSourceMaps) {\r\n      jsResult = jsResult.pipe(sourcemaps.write('.', { sourceRoot: this._resolveSourceMapRoot }));\r\n    }\r\n\r\n    allStreams.push(jsResult\r\n      .pipe(gulp.dest(destDir)));\r\n\r\n    allStreams.push(tsResult.dts.pipe(gulp.dest(destDir)));\r\n  }\r\n\r\n  private _resolveSourceMapRoot(file: { relative: string, cwd: string }): string {\r\n    return path.relative(file.relative, path.join(file.cwd, 'src'));\r\n  }\r\n}\r\n"],"sourceRoot":"..\\src"}