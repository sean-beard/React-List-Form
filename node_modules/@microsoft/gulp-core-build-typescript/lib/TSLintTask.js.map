{"version":3,"sources":["TSLintTask.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;AAE3D,8DAAoE;AAGpE,4BAA4B;AAC5B,IAAM,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;AAC3B,IAAM,KAAK,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC;AACtC,2BAA2B;AAC3B,mCAAsC;AACtC,iCAAoC;AACpC,uBAAyB;AACzB,+BAAiC;AACjC,2BAA6B;AAG7B,qEAGmC;AA+CnC;IAAgC,8BAA2B;IAGzD;QAAA,YACE,kBACE,QAAQ,EACR;YACE,oDAAoD;YACpD,UAAU,EAAE,EAAE;YACd,QAAQ,EAAE,UAAC,MAAyB,EAAE,IAAgB,EAAE,OAA0B;gBAChF,GAAG,CAAC,CAAkB,UAAe,EAAf,KAAA,MAAM,CAAC,QAAQ,EAAf,cAAe,EAAf,IAAe;oBAAhC,IAAM,OAAO,SAAA;oBAChB,IAAM,YAAY,GAAW,IAAI,CAAC,QAAQ,CAAC,KAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;oBAEjF,IAAM,KAAK,GAAwB,OAAO,CAAC,gBAAgB,EAAE,CAAC,mBAAmB,EAAE,CAAC;oBACpF,EAAE,CAAC,CAAC,KAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC,CAAC;wBACrC,KAAI,CAAC,WAAW,CACd,YAAY,EACZ,KAAK,CAAC,IAAI,GAAG,CAAC,EACd,KAAK,CAAC,SAAS,GAAG,CAAC,EACnB,OAAO,CAAC,WAAW,EAAE,EACrB,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC;oBAC1B,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,KAAI,CAAC,SAAS,CACZ,YAAY,EACZ,KAAK,CAAC,IAAI,GAAG,CAAC,EACd,KAAK,CAAC,SAAS,GAAG,CAAC,EACnB,OAAO,CAAC,WAAW,EAAE,EACrB,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC;oBAC1B,CAAC;iBACF;YACH,CAAC;YACD,cAAc,EAAE,CAAC;gBACf,IAAM,iBAAiB,GAAW,OAAO,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;gBAC9E,IAAM,sBAAsB,GAAW,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;gBACvE,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC,sBAAsB,CAAC,EAAE,SAAS,CAAC,CAAC;YACvF,CAAC,CAAC,EAAE;YACJ,WAAW,EAAE;gBACX,aAAa;gBACb,cAAc;aACf;YACD,mBAAmB,EAAE,KAAK;YAC1B,sBAAsB,EAAE,IAAI;SAC7B,CACF,SACF;QA3CO,uBAAiB,GAAQ,SAAS,CAAC,CAAC,6BAA6B;;IA2CzE,CAAC;IAEM,gCAAW,GAAlB,UAAmB,MAAyB;QAC1C,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;QAClC,iBAAM,WAAW,YAAC,MAAM,CAAC,CAAC;IAC5B,CAAC;IAEM,8BAAS,GAAhB,UAAiB,MAAyB;QACxC,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;QAClC,iBAAM,SAAS,YAAC,MAAM,CAAC,CAAC;IAC1B,CAAC;IAEM,+BAAU,GAAjB;QACE,MAAM,CAAC,OAAO,CAAC,8BAA8B,CAAC,CAAC;IACjD,CAAC;IAEM,gCAAW,GAAlB,UAAmB,IAAmB,EAAE,gBAA0C;QAChF,IAAM,IAAI,GAAe,IAAI,CAAC;QAE9B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;YACjC,gBAAgB,CAAC,wCAAwC,CAAC,CAAC;YAC3D,MAAM,CAAC;QACT,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC9B,gBAAgB,CAAC,qCAAqC,CAAC,CAAC;YACxD,MAAM,CAAC;QACT,CAAC;QAED,IAAM,aAAa,GAAqB,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAEtE,uDAAuD;QACvD,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5D,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC;QACxD,CAAC;QAED,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,kBAAkB,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;QAEzF,IAAM,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,sBAAsB;QAE5D,IAAI,OAAO,GAA2B,SAAS,CAAC;QAChD,IAAI,CAAC;YACH,IAAM,gBAAgB,GAA0B,iDAAuB,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC1G,IAAM,gBAAgB,GACpB,IAAI,CAAC,IAAI,CACP,IAAI,CAAC,WAAW,CAAC,QAAQ,EACzB,IAAI,CAAC,WAAW,CAAC,UAAU,EAC3B,sBAAsB,CACvB,CAAC;YACJ,EAAE,CAAC,aAAa,CAAC,gBAAgB,EAAE,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;YAEnF,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,aAAa,CACnC,gBAAgB,EAChB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CACjE,CAAC;QACJ,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACX,IAAI,CAAC,UAAU,CAAC,+FAA6F,CAAG,CAAC,CAAC;QACpH,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC;aACzC,IAAI,CAAC,MAAM,CACV,QAAQ,CAAC,GAAG,CAAC,UACX,IAAgB,EAChB,QAAgB,EAChB,QAAwD;YACxD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAE3B,gBAAgB;YAChB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;gBAClB,MAAM,CAAC,QAAQ,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YACnC,CAAC;YAED,0BAA0B;YAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;gBACpB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,yBAAyB,CAAC,CAAC,CAAC;gBAChF,MAAM,CAAC,QAAQ,EAAE,CAAC;YACpB,CAAC;YAED,IAAM,OAAO,GAA0B;gBACrC,GAAG,EAAE,KAAK;gBACV,SAAS,EAAE,MAAM;gBACjB,mBAAmB,EAAE,SAAS;gBAC9B,cAAc,EAAE,IAAI,CAAC,UAAU,CAAC,cAAc,IAAI,EAAE;aACrD,CAAC;YAEF,IAAM,MAAM,GAAkB,IAAI,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAElE,IAAM,aAAa,GACjB,MAAM,CAAC,aAAa,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;YACtD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,aAAa,CAAC,CAAC;YAEhE,IAAM,MAAM,GAAsB,MAAM,CAAC,SAAS,EAAE,CAAC;YAErD,sCAAsC;YACtC,IAAI,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;YACxB,qCAAqC;YAErC,6CAA6C;YAC7C,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,GAAG,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACtD,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;YAC1D,CAAC;YAED,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAChB,QAAQ,EAAE,CAAC;QACb,CAAC,CAAC,EAAE;YACF,wEAAwE;YACxE,IAAI,EAAE,GAAG,CACP,MAAM,CAAC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC;gBACrD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;YACxC,iDAAiD;YACjD,OAAO,EAAE,UAAC,YAAwB;gBAChC,sCAAsC;gBACtC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,YAAY,KAAK,CAAC,CAAC;gBACjD,qCAAqC;YACvC,CAAC;YACD,iFAAiF;YACjF,uFAAuF;YACvF,KAAK,EAAE,UAAC,IAAgB;gBACtB,MAAM,CAAC;oBACL,IAAI,EAAE,IAAI,CAAC,IAAI;iBAChB,CAAC;YACJ,CAAC;SACF,CACF,CAAC,CAAC;IACP,CAAC;IAEM,kCAAa,GAApB,UAAqB,WAAyB,EAAE,UAA+C;QAA/C,2BAAA,EAAA,aAAgC,IAAI,CAAC,UAAU;QAC7F,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IACnE,CAAC;IAEO,yCAAoB,GAA5B,UAA6B,SAA4B;QACvD,uEAAuE;QACvE,EAAE,CAAC,CAAC,SAAS,CAAC,mBAAmB;YAC7B,IAAI,CAAC,UAAU;YACf,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;YAC/B,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,KAAK,CAAC;YACxC,OAAO,SAAS,CAAC,mBAAmB,CAAC;QACvC,CAAC;IACH,CAAC;IAEO,uCAAkB,GAA1B;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;IAC1F,CAAC;IAEO,2CAAsB,GAA9B;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAC;QAC3D,CAAC;QAED,MAAM,CAAC,KAAK,CACV,CAAC,IAAI,CAAC,UAAU,CAAC,sBAAsB,GAAG,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC,EACtE,IAAI,CAAC,UAAU,CAAC,UAAU,IAAI,EAAE,CAAC,CAAC;IACtC,CAAC;IACH,iBAAC;AAAD,CArMA,AAqMC,CArM+B,0BAAQ,GAqMvC;AArMY,gCAAU","file":"TSLintTask.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { GulpTask, IBuildConfig } from '@microsoft/gulp-core-build';\r\n\r\nimport gulpType = require('gulp');\r\n/* tslint:disable:typedef */\r\nconst md5 = require('md5');\r\nconst merge = require('lodash').merge;\r\n/* tslint:enable:typedef */\r\nimport through2 = require('through2');\r\nimport gutil = require('gulp-util');\r\nimport * as fs from 'fs';\r\nimport * as TSLint from 'tslint';\r\nimport * as path from 'path';\r\nimport * as ts from 'typescript';\r\n\r\nimport {\r\n  ITsConfigFile,\r\n  TypeScriptConfiguration\r\n} from './TypeScriptConfiguration';\r\n\r\nexport interface ITSLintRulesFile {\r\n  rules?: { [name: string]: any }; /* tslint:disable-line:no-any */\r\n}\r\n\r\nexport interface ITSLintTaskConfig {\r\n  /**\r\n   * A TsLint configuration objects\r\n   */\r\n  lintConfig?: ITSLintRulesFile;\r\n\r\n  /**\r\n   * Directories to search for custom linter rules\r\n   */\r\n  rulesDirectory?: string | string[];\r\n\r\n  /**\r\n   * An array of files which the linter should analyze\r\n   */\r\n  sourceMatch?: string[];\r\n\r\n  /**\r\n   * A function which reports errors to the proper location. Defaults to using the base GulpTask's\r\n   * this.fileError() function.\r\n    */\r\n  reporter?: (result: TSLint.LintResult, file: gutil.File, options: ITSLintTaskConfig) => void;\r\n\r\n  /**\r\n   * If true, displays warnings as errors. If the reporter function is overwritten, it should reference\r\n   * this flag. Defaults to `false`.\r\n   */\r\n  displayAsWarning?: boolean;\r\n\r\n  /**\r\n   * If true, the lintConfig rules which were previously set will be removed. This flag is useful\r\n   * for ensuring that there are no rules activated from previous calls to setConfig(). Default is 'false'.\r\n   */\r\n  removeExistingRules?: boolean;\r\n\r\n  /**\r\n   * If false, does not use a default tslint configuration as the basis for creating the list of active rules.\r\n   * Defaults to 'true'\r\n   */\r\n  useDefaultConfigAsBase?: boolean;\r\n}\r\n\r\nexport class TSLintTask extends GulpTask<ITSLintTaskConfig> {\r\n  private _defaultLintRules: any = undefined; // tslint:disable-line:no-any\r\n\r\n  constructor() {\r\n    super(\r\n      'tslint',\r\n      {\r\n        // lintConfig: require('../lib/defaultTslint.json'),\r\n        lintConfig: {},\r\n        reporter: (result: TSLint.LintResult, file: gutil.File, options: ITSLintTaskConfig): void => {\r\n          for (const failure of result.failures) {\r\n            const pathFromRoot: string = path.relative(this.buildConfig.rootPath, file.path);\r\n\r\n            const start: ts.LineAndCharacter = failure.getStartPosition().getLineAndCharacter();\r\n            if (this.taskConfig.displayAsWarning) {\r\n              this.fileWarning(\r\n                pathFromRoot,\r\n                start.line + 1,\r\n                start.character + 1,\r\n                failure.getRuleName(),\r\n                failure.getFailure());\r\n            } else {\r\n              this.fileError(\r\n                pathFromRoot,\r\n                start.line + 1,\r\n                start.character + 1,\r\n                failure.getRuleName(),\r\n                failure.getFailure());\r\n            }\r\n          }\r\n        },\r\n        rulesDirectory: ((): string[] => {\r\n          const msCustomRulesMain: string = require.resolve('tslint-microsoft-contrib');\r\n          const msCustomRulesDirectory: string = path.dirname(msCustomRulesMain);\r\n          return TSLint.Configuration.getRulesDirectories([msCustomRulesDirectory], __dirname);\r\n        })(),\r\n        sourceMatch: [\r\n          'src/**/*.ts',\r\n          'src/**/*.tsx'\r\n        ],\r\n        removeExistingRules: false,\r\n        useDefaultConfigAsBase: true\r\n      }\r\n    );\r\n  }\r\n\r\n  public mergeConfig(config: ITSLintTaskConfig): void {\r\n    this._prepareUpdateConfig(config);\r\n    super.mergeConfig(config);\r\n  }\r\n\r\n  public setConfig(config: ITSLintTaskConfig): void {\r\n    this._prepareUpdateConfig(config);\r\n    super.setConfig(config);\r\n  }\r\n\r\n  public loadSchema(): Object {\r\n    return require('./schemas/tslint.schema.json');\r\n  }\r\n\r\n  public executeTask(gulp: gulpType.Gulp, completeCallback: (error?: string) => void): NodeJS.ReadWriteStream | void {\r\n    const self: TSLintTask = this;\r\n\r\n    if (!this.taskConfig.sourceMatch) {\r\n      completeCallback('taskConfig.sourceMatch must be defined');\r\n      return;\r\n    }\r\n\r\n    if (!this.taskConfig.reporter) {\r\n      completeCallback('taskConfig.reporter must be defined');\r\n      return;\r\n    }\r\n\r\n    const lintRulesFile: ITSLintRulesFile = self._loadLintConfiguration();\r\n\r\n    // Write out the active lint rules for easier debugging\r\n    if (!fs.existsSync(path.dirname(this._getTsLintFilepath()))) {\r\n      fs.mkdirSync(path.dirname(this._getTsLintFilepath()));\r\n    }\r\n\r\n    fs.writeFileSync(this._getTsLintFilepath(), JSON.stringify(lintRulesFile, undefined, 2));\r\n\r\n    const cached = require('gulp-cache'); // tslint:disable-line\r\n\r\n    let program: ts.Program | undefined = undefined;\r\n    try {\r\n      const tsconfigFileData: ITsConfigFile<Object> = TypeScriptConfiguration.getTsConfigFile(this.buildConfig);\r\n      const tsconfigFilePath: string =\r\n        path.join(\r\n          this.buildConfig.rootPath,\r\n          this.buildConfig.tempFolder,\r\n          'tslint-tsconfig.json'\r\n        );\r\n      fs.writeFileSync(tsconfigFilePath, JSON.stringify(tsconfigFileData, undefined, 2));\r\n\r\n      program = TSLint.Linter.createProgram(\r\n        tsconfigFilePath,\r\n        path.join(this.buildConfig.rootPath, this.buildConfig.srcFolder)\r\n      );\r\n    } catch (e) {\r\n      this.logWarning(`Unable to create a TS program for TSLint. Some lint rules might not work correctly. Error ${e}`);\r\n    }\r\n\r\n    return gulp.src(this.taskConfig.sourceMatch)\r\n      .pipe(cached(\r\n        through2.obj(function (\r\n          file: gutil.File,\r\n          encoding: string,\r\n          callback: (encoding?: string, file?: gutil.File) => void): void {\r\n          self.logVerbose(file.path);\r\n\r\n          // Lint the file\r\n          if (file.isNull()) {\r\n            return callback(undefined, file);\r\n          }\r\n\r\n          // Stream is not supported\r\n          if (file.isStream()) {\r\n            this.emit('error', new gutil.PluginError(this.name, 'Streaming not supported'));\r\n            return callback();\r\n          }\r\n\r\n          const options: TSLint.ILinterOptions = {\r\n            fix: false,\r\n            formatter: 'json',\r\n            formattersDirectory: undefined, // not used, use reporters instead\r\n            rulesDirectory: self.taskConfig.rulesDirectory || []\r\n          };\r\n\r\n          const linter: TSLint.Linter = new TSLint.Linter(options, program);\r\n\r\n          const configuration: TSLint.Configuration.IConfigurationFile =\r\n            TSLint.Configuration.parseConfigFile(lintRulesFile);\r\n          linter.lint(file.path, file.contents.toString(), configuration);\r\n\r\n          const result: TSLint.LintResult = linter.getResult();\r\n\r\n          /* tslint:disable:no-string-literal */\r\n          file['tslint'] = result;\r\n          /* tslint:enable:no-string-literal */\r\n\r\n          // We can't get here if reporter is undefined\r\n          if (result.errorCount > 0 && self.taskConfig.reporter) {\r\n            self.taskConfig.reporter(result, file, self.taskConfig);\r\n          }\r\n\r\n          this.push(file);\r\n          callback();\r\n        }), {\r\n          // Scope the cache to a combination of the lint rules and the build path\r\n          name: md5(\r\n            TSLint.Linter.VERSION + JSON.stringify(lintRulesFile) +\r\n            self.name + self.buildConfig.rootPath),\r\n          // What on the result indicates it was successful\r\n          success: (jshintedFile: gutil.File): boolean => {\r\n            /* tslint:disable:no-string-literal */\r\n            return jshintedFile['tslint'].failureCount === 0;\r\n            /* tslint:enable:no-string-literal */\r\n          },\r\n          // By default, the cache attempts to store the value of the objects in the stream\r\n          // For this task, this is over-engineering since we never need to store anything extra.\r\n          value: (file: gutil.File): Object => {\r\n            return {\r\n              path: file.path\r\n            };\r\n          }\r\n        }\r\n      ));\r\n  }\r\n\r\n  public getCleanMatch(buildConfig: IBuildConfig, taskConfig: ITSLintTaskConfig = this.taskConfig): string[] {\r\n    return [path.join(buildConfig.rootPath, buildConfig.tempFolder)];\r\n  }\r\n\r\n  private _prepareUpdateConfig(newConfig: ITSLintTaskConfig): void {\r\n    // If the removeExistingRules flag is set, clear out any existing rules\r\n    if (newConfig.removeExistingRules &&\r\n        this.taskConfig &&\r\n        this.taskConfig.lintConfig) {\r\n      delete this.taskConfig.lintConfig.rules;\r\n      delete newConfig.removeExistingRules;\r\n    }\r\n  }\r\n\r\n  private _getTsLintFilepath(): string {\r\n    return path.join(this.buildConfig.rootPath, this.buildConfig.tempFolder, 'tslint.json');\r\n  }\r\n\r\n  private _loadLintConfiguration(): ITSLintRulesFile { // tslint:disable-line:no-any\r\n    if (!this._defaultLintRules) {\r\n      this._defaultLintRules = require('./defaultTslint.json');\r\n    }\r\n\r\n    return merge(\r\n      (this.taskConfig.useDefaultConfigAsBase ? this._defaultLintRules : {}),\r\n      this.taskConfig.lintConfig || {});\r\n  }\r\n}\r\n"],"sourceRoot":"..\\src"}