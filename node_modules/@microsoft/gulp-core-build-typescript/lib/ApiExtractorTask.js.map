{"version":3,"sources":["ApiExtractorTask.ts"],"names":[],"mappings":"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","file":"ApiExtractorTask.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as fsx from 'fs-extra';\r\nimport * as Gulp from 'gulp';\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport * as through from 'through2';\r\nimport * as gulpUtil from 'gulp-util';\r\nimport { GulpTask } from '@microsoft/gulp-core-build';\r\nimport {\r\n  Extractor,\r\n  IExtractorOptions,\r\n  IExtractorAnalyzeOptions,\r\n  ApiFileGenerator,\r\n  ApiJsonGenerator\r\n} from '@microsoft/api-extractor';\r\nimport { TypeScriptConfiguration } from './TypeScriptConfiguration';\r\nimport ts = require('gulp-typescript');\r\n\r\nfunction writeStringToGulpUtilFile(content: string, filename: string = 'tempfile'): gulpUtil.File {\r\n  return new gulpUtil.File({\r\n    contents: new Buffer(content),\r\n    path: filename\r\n  });\r\n}\r\n\r\n/** @public */\r\nexport interface IApiExtractorTaskConfig {\r\n  /**\r\n   * Indicates whether the task should be run.\r\n   */\r\n  enabled?: boolean;\r\n\r\n  /**\r\n   * The file path of the exported entry point, relative to the project folder.\r\n   *\r\n   * Example \"src/index.ts\"\r\n   */\r\n  entry?: string;\r\n\r\n  /**\r\n   * The file path of the folder containing API files to be reviewed, relative to\r\n   * the project folder.  This is part of an API review workflow:  During a build,\r\n   * the ApiExtractorTask will output an API file, e.g. \"my-project/temp/my-project.api.ts\".\r\n   * It will then compare this file against the last reviewed file,\r\n   * e.g. \"../api-review/my-project.api.ts\" (assuming that apiReviewFolder is \"../api-review\").\r\n   * If the files are different, the build will fail with an error message that instructs\r\n   * the developer to update the approved file, and then commit it to Git.  When they\r\n   * create a Pull Request, a VSO branch policy will look for changes under \"api-review/*\"\r\n   * and require signoff from the appropriate reviewers.\r\n   *\r\n   * Example: \"config\" (for a standalone project)\r\n   * Example: \"../../common/api-review\"  (for a Git repository with Rush)\r\n   */\r\n  apiReviewFolder?: string;\r\n\r\n  /**\r\n   * The file path of the folder containing the *.api.json output file containing\r\n   * the API information. The default location is in the “dist” folder,\r\n   * e.g. my-project/dist/my-project.api.json. This file should be published as part\r\n   * of the NPM package. When building other projects that depend on this package,\r\n   * api-extractor will look for this file in the node_modules folder and use it as an input.\r\n   * The *.api.json file is also consumed by a tool at\r\n   * https://github.com/SharePoint/ts-spec-gen that generates an online API documentation.\r\n   */\r\n  apiJsonFolder?: string;\r\n}\r\n\r\n/**\r\n * The ApiExtractorTask uses the api-extractor tool to analyze a project for public APIs. api-extractor will detect\r\n * common problems and generate a report of the exported public API. The task uses the entry point of a project to\r\n * find the aliased exports of the project. An api-extractor.ts file is generated for the project in the temp folder.\r\n * @public\r\n */\r\nexport class ApiExtractorTask extends GulpTask<IApiExtractorTaskConfig>  {\r\n  constructor() {\r\n    super(\r\n      'api-extractor',\r\n      {\r\n        enabled: false,\r\n        entry: undefined,\r\n        apiReviewFolder: undefined,\r\n        apiJsonFolder: undefined\r\n      }\r\n    );\r\n  }\r\n\r\n  public loadSchema(): Object {\r\n    return require('./schemas/api-extractor.schema.json');\r\n  }\r\n\r\n  public executeTask(gulp: typeof Gulp, completeCallback: (error?: string) => void): NodeJS.ReadWriteStream | void {\r\n    if (!this.taskConfig.enabled || !this._validateConfiguration()) {\r\n      completeCallback();\r\n      return;\r\n    }\r\n\r\n    if (!this.taskConfig.entry) {\r\n      completeCallback('taskConfig.entry must be defined');\r\n      return;\r\n    }\r\n\r\n    if (!this.taskConfig.apiJsonFolder) {\r\n      completeCallback('taskConfig.apiJsonFolder must be defined');\r\n      return;\r\n    }\r\n\r\n    if (!this.taskConfig.apiReviewFolder) {\r\n      completeCallback('taskConfig.apiReviewFolder must be defined');\r\n      return;\r\n    }\r\n\r\n    const entryPointFile: string = path.join(this.buildConfig.rootPath, this.taskConfig.entry);\r\n    const typingsFilePath: string = path.join(this.buildConfig.rootPath, 'typings/tsd.d.ts');\r\n    const otherFiles: string[] = fsx.existsSync(typingsFilePath) ? [typingsFilePath] : [];\r\n\r\n    // tslint:disable-next-line:no-any\r\n    const compilerOptions: ts.Settings =\r\n      TypeScriptConfiguration.getGulpTypescriptOptions(this.buildConfig).compilerOptions;\r\n\r\n    if (compilerOptions.module !== 'commonjs' && compilerOptions.module) {\r\n      this.logWarning(`Your tsconfig.json file specifies a different \"target\" than expected. `\r\n        + `Expected: \"commonjs\". Actual: \"${compilerOptions.module}\". Using \"commonjs\" instead.`);\r\n      compilerOptions.module = 'commonjs';\r\n    }\r\n\r\n    const extractorOptions: IExtractorOptions = {\r\n      compilerOptions: ts.createProject(compilerOptions).options,\r\n      errorHandler: (message: string, fileName: string, lineNumber: number): void => {\r\n        this.logWarning(`${message}` + os.EOL\r\n          + `  ${fileName}#${lineNumber}`);\r\n      }\r\n    };\r\n\r\n    const analyzeOptions: IExtractorAnalyzeOptions = {\r\n      entryPointFile,\r\n      otherFiles\r\n    } as any; /* tslint:disable-line:no-any */\r\n\r\n    const extractor: Extractor = new Extractor(extractorOptions);\r\n    extractor.loadExternalPackages(path.join(__dirname, 'external-api-json'));\r\n    extractor.analyze(analyzeOptions);\r\n\r\n    const jsonGenerator: ApiJsonGenerator = new ApiJsonGenerator();\r\n    // const jsonContent: string = generator.generateJsonFileContent(analyzer);\r\n    const jsonFileName: string = path.basename(this.buildConfig.rootPath) + '.api.json';\r\n\r\n    if (!fsx.existsSync(this.taskConfig.apiJsonFolder)) {\r\n      fsx.mkdirsSync(this.taskConfig.apiJsonFolder, (err) => {\r\n        if (err) {\r\n          this.logError(`Could not create directory ${this.taskConfig.apiJsonFolder}`);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (fsx.existsSync(this.taskConfig.apiJsonFolder)) {\r\n      const jsonFilePath: string = path.join(this.taskConfig.apiJsonFolder, jsonFileName);\r\n      this.logVerbose(`Writing Api JSON file to ${jsonFilePath}`);\r\n      jsonGenerator.writeJsonFile(jsonFilePath, extractor);\r\n    }\r\n\r\n    const generator: ApiFileGenerator = new ApiFileGenerator();\r\n    const actualApiFileContent: string = generator.generateApiFileContent(extractor);\r\n\r\n    // Ex: \"project.api.ts\"\r\n    const apiFileName: string = path.basename(this.buildConfig.rootPath) + '.api.ts';\r\n    this.logVerbose(`Output filename is \"${apiFileName}\"`);\r\n\r\n    const actualApiFilePath: string = path.join(this.buildConfig.tempFolder, apiFileName);\r\n\r\n    let foundSourceFiles: number = 0;\r\n    const self: ApiExtractorTask = this;\r\n    const expectedApiFilePath: string = path.join(this.taskConfig.apiReviewFolder, apiFileName);\r\n    return gulp.src(expectedApiFilePath)\r\n      /* tslint:disable-next-line:no-function-expression */\r\n      .pipe(through.obj(function (file: gulpUtil.File, enc: string, callback: () => void): void {\r\n        const expectedApiFileContent: string = (file.contents as Buffer).toString(enc);\r\n        foundSourceFiles++;\r\n\r\n        if (!ApiFileGenerator.areEquivalentApiFileContents(actualApiFileContent, expectedApiFileContent)) {\r\n          if (self.buildConfig.production) {\r\n            // For production, issue a warning that will break the CI build.\r\n            self.logWarning('You have changed the Public API signature for this project.  Please overwrite '\r\n              // @microsoft/gulp-core-build seems to run JSON.stringify() on the error messages for some reason,\r\n              // so try to avoid escaped characters:\r\n              + `'${expectedApiFilePath.replace(/\\\\/g, '/')}' with a copy of '${actualApiFilePath.replace(/\\\\/g, '/')}'`\r\n              + ' and then request an API review. See the Git repository README.md for more info.');\r\n          } else {\r\n            // For a local build, just copy the file automatically.\r\n            self.log('You have changed the Public API signature for this project.  Updating '\r\n              + `'${expectedApiFilePath}'`);\r\n            fsx.writeFileSync(expectedApiFilePath, actualApiFileContent);\r\n          }\r\n        }\r\n\r\n        callback();\r\n      }, function (callback: () => void): void {\r\n        if (foundSourceFiles === 0) {\r\n          // NOTE: This warning seems like a nuisance, but it has caught genuine mistakes.\r\n          // For example, when projects were moved into category folders, the relative path for\r\n          // the API review files ended up in the wrong place.\r\n          self.logError(`This file is missing from the \"apiReviewFolder\": \"${expectedApiFilePath}\"`\r\n            + ` Please copy it from the project's \"temp\" folder and commit it.`);\r\n        } else if (foundSourceFiles > 1) {\r\n          self.logError(`More than one file matching \"${expectedApiFilePath}\" was found. This is not expected.`);\r\n        }\r\n\r\n        this.push(writeStringToGulpUtilFile(actualApiFileContent, apiFileName));\r\n\r\n        callback();\r\n      }))\r\n      .pipe(gulp.dest(this.buildConfig.tempFolder))\r\n      .on('finish', () => completeCallback());\r\n  }\r\n\r\n  private _validateConfiguration(): boolean {\r\n    if (!this.taskConfig.entry) {\r\n      this.logError('Missing or empty \"entry\" field in api-extractor.json');\r\n      return false;\r\n    }\r\n    if (!this.taskConfig.apiReviewFolder) {\r\n      this.logError('Missing or empty \"apiReviewFolder\" field in api-extractor.json');\r\n      return false;\r\n    }\r\n\r\n    if (!fsx.existsSync(this.taskConfig.entry)) {\r\n      this.logError(`Entry file ${this.taskConfig.entry} does not exist.`);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n"],"sourceRoot":"..\\src"}