"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var assign = require("object-assign");
var gulp_core_build_1 = require("@microsoft/gulp-core-build");
/* tslint:disable:no-any */
/**
 * A helper class which provides access to the TSConfig.json file for a particular project.
 * It also is a central place for managing the version of typescript which this project
 * should be built with.
 * @public
 */
var TypeScriptConfiguration = (function () {
    function TypeScriptConfiguration() {
    }
    /**
     * Gets `gulp-typescript` version of the config (used by TypeScriptTask)
     * Returns a new object each time.
     */
    TypeScriptConfiguration.getGulpTypescriptOptions = function (buildConfig) {
        var file = assign({}, this.getTsConfigFile(buildConfig));
        assign(file.compilerOptions, {
            rootDir: buildConfig.rootPath,
            typescript: this.getTypescriptCompiler()
        });
        return file;
    };
    /**
     * Override the version of the typescript compiler
     */
    TypeScriptConfiguration.setTypescriptCompiler = function (typescriptOverride) {
        if (this._typescript) {
            throw new Error('The version of the typescript compiler should only be set once.');
        }
        if (this._baseTsConfig) {
            throw new Error('Set the version of the typescript compiler before tasks call getConfig()');
        }
        this._typescript = typescriptOverride;
    };
    /**
     * Get the version of the typescript compiler which is to be used
     */
    TypeScriptConfiguration.getTypescriptCompiler = function () {
        if (!this._typescript) {
            this._typescript = require('typescript');
        }
        return this._typescript;
    };
    /**
     * Helper function which reads the tsconfig.json (or provides one), and memoizes it
     */
    TypeScriptConfiguration.getTsConfigFile = function (config) {
        if (!this._baseTsConfig) {
            try {
                this._baseTsConfig = gulp_core_build_1.SchemaValidator.readCommentedJsonFile(this._getConfigPath(config));
            }
            catch (e) {
                /* no-op */
            }
            if (!this._baseTsConfig) {
                this._baseTsConfig = {
                    compilerOptions: {
                        declaration: true,
                        experimentalDecorators: true,
                        jsx: 'react',
                        moduleResolution: 'node',
                        sourceMap: true,
                        target: 'es5',
                        noUnusedLocals: true
                    }
                };
            }
        }
        return this._baseTsConfig;
    };
    /**
     * Extracts the path to the tsconfig.json based on the buildConfiguration
     */
    TypeScriptConfiguration._getConfigPath = function (buildConfig) {
        return path.resolve(path.join(buildConfig.rootPath, 'tsconfig.json'));
    };
    TypeScriptConfiguration._typescript = undefined;
    return TypeScriptConfiguration;
}());
exports.TypeScriptConfiguration = TypeScriptConfiguration;

//# sourceMappingURL=TypeScriptConfiguration.js.map
