"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZSchema = require("z-schema");
// @todo 264263 - utilize the schema validator in sp-build-common
var fs = require("fs");
var os_1 = require("os");
var path = require("path");
// Discover the schema files
var schemasDirectory = path.join(__dirname, 'manifestSchemas', 'jsonSchemas');
var schemaFiles = fs.readdirSync(schemasDirectory);
var schemas = schemaFiles.map(function (schemaFile) { return require(path.join(schemasDirectory, schemaFile)); });
var manifestSchema = require('./manifestSchemas/jsonSchemas/client-side-component-manifest.schema.json');
var applicationSchema = require('./manifestSchemas/jsonSchemas/client-side-application-manifest.schema.json');
var webPartSchema = require('./manifestSchemas/jsonSchemas/client-side-web-part-manifest.schema.json');
var commandSetSchema = require('./manifestSchemas/jsonSchemas/command-set-extension-manifest.schema.json');
var extensionSchema = require('./manifestSchemas/jsonSchemas/client-side-extension-manifest.schema.json');
var librarySchema = require('./manifestSchemas/jsonSchemas/client-side-library-manifest.schema.json');
var assemblySchema = require('./manifestSchemas/jsonSchemas/client-side-assembly-manifest.schema.json');
exports.zSchemaOptions = {
    breakOnFirstError: true,
    forceAdditional: true,
    forceItems: true,
    forceMaxLength: false,
    forceProperties: false,
    noExtraKeywords: true,
    noTypeless: true,
    noEmptyStrings: true
};
var schemaValidator = new exports.ZSchema(exports.zSchemaOptions);
// @todo 272561 - update the z-schema typings
schemaValidator.validateSchema(schemas); // tslint:disable-line:no-any
var ManifestValidator = (function () {
    function ManifestValidator() {
    }
    ManifestValidator.validateApplicationManifest = function (manifest) {
        return ManifestValidator._validateManifest(manifest, applicationSchema);
    };
    ManifestValidator.validateCommandSetManifest = function (manifest) {
        return ManifestValidator._validateManifest(manifest, commandSetSchema);
    };
    ManifestValidator.validateExtensionManifest = function (manifest) {
        return ManifestValidator._validateManifest(manifest, extensionSchema);
    };
    /* tslint:disable:no-any */
    ManifestValidator.validateWebPartManifest = function (manifest) {
        return ManifestValidator._validateManifest(manifest, webPartSchema);
    };
    ManifestValidator.validateLibraryManifest = function (manifest) {
        return ManifestValidator._validateManifest(manifest, librarySchema);
    };
    ManifestValidator.validateAssemblyManifest = function (manifest) {
        return ManifestValidator._validateManifest(manifest, assemblySchema);
    };
    ManifestValidator.validateManifest = function (manifest) {
        return ManifestValidator._validateManifest(manifest, manifestSchema);
    };
    ManifestValidator.extractInnerErrorMessages = function (errors) {
        var printZSchemaError = function (error) {
            /* tslint:disable:no-any */
            var innerErrors = [];
            (error.inner || []).forEach(function (innerErr) {
                innerErrors = innerErrors.concat(printZSchemaError(innerErr));
            });
            /* tslint:enable:no-any */
            return ["(" + error.path + ") " + error.message].concat(innerErrors);
        };
        var errorList = [];
        errors.map(function (error) { errorList = errorList.concat(printZSchemaError(error)); });
        return errorList;
    };
    ManifestValidator.getFormattedErrorMessage = function (errors) {
        return this.extractInnerErrorMessages(errors).join(os_1.EOL);
    };
    ManifestValidator._validateManifest = function (manifest, schema) {
        if (!schema) {
            throw new Error('Unable to find the manifest schema.');
        }
        if (typeof manifest === 'string') {
            manifest = JSON.parse(manifest);
        }
        var result = schemaValidator.validate(manifest, schema);
        return {
            result: result,
            errors: schemaValidator.getLastErrors() || []
        };
    };
    return ManifestValidator;
}());
exports.default = ManifestValidator;

//# sourceMappingURL=manifestSchemaValidator.js.map
