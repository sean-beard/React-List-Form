// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference types='mocha' />
var chai_1 = require("chai");
var path = require("path");
var JsonSchemaValidator_1 = require("../JsonSchemaValidator");
var JsonFile_1 = require("../JsonFile");
function normalize(text) {
    return text.replace(/[\r\n ]+/g, ' ')
        .trim();
}
describe('JsonSchemaValidator', function () {
    var schemaPath = path.resolve(path.join(__dirname, './assets/test-schema.json'));
    var validator = JsonSchemaValidator_1.default.loadFromFile(schemaPath);
    it('successfully parses a JSON file', function (done) {
        var jsonPath = path.resolve(path.join(__dirname, './assets/test.json'));
        var jsonObject = JsonFile_1.default.loadJsonFile(jsonPath);
        validator.validateObject(jsonObject, function (errorDescription) {
            throw new Error('Validation failed: ' + errorDescription);
        });
        done();
    });
    it('successfully reports a compound error', function (done) {
        var jsonPath2 = path.resolve(path.join(__dirname, './assets/test2.json'));
        var jsonObject2 = JsonFile_1.default.loadJsonFile(jsonPath2);
        var expectedError = "\nJSON schema validation failed:\n  Error: #/exampleOneOf (Description for exampleOneOf - this i...)\n         Data does not match any schemas from 'oneOf'\n    Error: #/exampleOneOf (Description for type1)\n           Additional properties not allowed: field2\n    Error: #/exampleOneOf (Description for type2)\n           Missing required property: field3";
        var errorCount = 0;
        validator.validateObject(jsonObject2, function (errorDescription) {
            ++errorCount;
            console.log(errorDescription);
            chai_1.assert.equal(normalize(errorDescription), normalize(expectedError), 'Error #' + errorCount.toString());
        });
        chai_1.assert.equal(errorCount, 1);
        done();
    });
});

//# sourceMappingURL=JsonSchemaValidator.test.js.map
