{"version":3,"sources":["utilities/test/JsonSchemaValidator.test.ts"],"names":[],"mappings":"AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,+BAA+B;AAE/B,6BAA8B;AAC9B,2BAA6B;AAE7B,8DAAyD;AACzD,wCAAmC;AAEnC,mBAAmB,IAAY;IAC7B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC;SAClC,IAAI,EAAE,CAAC;AACZ,CAAC;AAED,QAAQ,CAAC,qBAAqB,EAAE;IAC9B,IAAM,UAAU,GAAW,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,2BAA2B,CAAC,CAAC,CAAC;IAC3F,IAAM,SAAS,GAAwB,6BAAmB,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;IAEpF,EAAE,CAAC,iCAAiC,EAAE,UAAC,IAAe;QACpD,IAAM,QAAQ,GAAW,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,oBAAoB,CAAC,CAAC,CAAC;QAClF,IAAM,UAAU,GAAW,kBAAQ,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAC3D,SAAS,CAAC,cAAc,CAAC,UAAU,EACjC,UAAC,gBAAwB;YACvB,MAAM,IAAI,KAAK,CAAC,qBAAqB,GAAG,gBAAgB,CAAC,CAAC;QAC5D,CAAC,CACF,CAAC;QACF,IAAI,EAAE,CAAC;IACT,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,UAAC,IAAe;QAC1D,IAAM,SAAS,GAAW,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,qBAAqB,CAAC,CAAC,CAAC;QACpF,IAAM,WAAW,GAAW,kBAAQ,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAE7D,IAAM,aAAa,GAAW,uWAOW,CAAC;QAE1C,IAAI,UAAU,GAAW,CAAC,CAAC;QAC3B,SAAS,CAAC,cAAc,CAAC,WAAW,EAClC,UAAC,gBAAwB;YACvB,EAAE,UAAU,CAAC;YACb,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;YAC9B,aAAM,CAAC,KAAK,CAAC,SAAS,CAAC,gBAAgB,CAAC,EAAE,SAAS,CAAC,aAAa,CAAC,EAChE,SAAS,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;QACvC,CAAC,CACF,CAAC;QACF,aAAM,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;QAC5B,IAAI,EAAE,CAAC;IACT,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"utilities/test/JsonSchemaValidator.test.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/// <reference types='mocha' />\r\n\r\nimport { assert } from 'chai';\r\nimport * as path from 'path';\r\n\r\nimport JsonSchemaValidator from '../JsonSchemaValidator';\r\nimport JsonFile from '../JsonFile';\r\n\r\nfunction normalize(text: string): string {\r\n  return text.replace(/[\\r\\n ]+/g, ' ')\r\n    .trim();\r\n}\r\n\r\ndescribe('JsonSchemaValidator', () => {\r\n  const schemaPath: string = path.resolve(path.join(__dirname, './assets/test-schema.json'));\r\n  const validator: JsonSchemaValidator = JsonSchemaValidator.loadFromFile(schemaPath);\r\n\r\n  it('successfully parses a JSON file', (done: MochaDone) => {\r\n    const jsonPath: string = path.resolve(path.join(__dirname, './assets/test.json'));\r\n    const jsonObject: Object = JsonFile.loadJsonFile(jsonPath);\r\n    validator.validateObject(jsonObject,\r\n      (errorDescription: string) => {\r\n        throw new Error('Validation failed: ' + errorDescription);\r\n      }\r\n    );\r\n    done();\r\n  });\r\n\r\n  it('successfully reports a compound error', (done: MochaDone) => {\r\n    const jsonPath2: string = path.resolve(path.join(__dirname, './assets/test2.json'));\r\n    const jsonObject2: Object = JsonFile.loadJsonFile(jsonPath2);\r\n\r\n    const expectedError: string = `\r\nJSON schema validation failed:\r\n  Error: #/exampleOneOf (Description for exampleOneOf - this i...)\r\n         Data does not match any schemas from 'oneOf'\r\n    Error: #/exampleOneOf (Description for type1)\r\n           Additional properties not allowed: field2\r\n    Error: #/exampleOneOf (Description for type2)\r\n           Missing required property: field3`;\r\n\r\n    let errorCount: number = 0;\r\n    validator.validateObject(jsonObject2,\r\n      (errorDescription: string) => {\r\n        ++errorCount;\r\n        console.log(errorDescription);\r\n        assert.equal(normalize(errorDescription), normalize(expectedError),\r\n          'Error #' + errorCount.toString());\r\n      }\r\n    );\r\n    assert.equal(errorCount, 1);\r\n    done();\r\n  });\r\n});\r\n"],"sourceRoot":"..\\..\\..\\src"}