{"version":3,"sources":["utilities/JsonFile.ts"],"names":[],"mappings":"AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,8BAAgC;AAChC,uBAAyB;AACzB,yBAA2B;AAC3B,yCAAoC;AAepC;;;GAGG;AACH;IAAA;IA4DA,CAAC;IA3DC;;OAEG;IACH,kCAAkC;IACpB,qBAAY,GAA1B,UAA2B,YAAoB;QAC7C,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAClC,MAAM,IAAI,KAAK,CAAC,2BAAyB,YAAc,CAAC,CAAC;QAC3D,CAAC;QAED,IAAM,MAAM,GAAW,GAAG,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QACtD,IAAI,CAAC;YACH,IAAM,QAAQ,GAAW,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;YACtD,MAAM,CAAC,QAAQ,CAAC;QAClB,CAAC;QAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,qBAAkB,YAAY,QAAI,GAAG,EAAE,CAAC,GAAG,IAAG,OAAK,KAAK,CAAC,OAAS,CAAA,CAAC,CAAC;QACtF,CAAC;IACH,CAAC;IAED;;OAEG;IACH,kCAAkC;IACpB,qBAAY,GAA1B,UAA2B,QAAa,EAAE,YAAoB,EAAE,OAAkC;QAAlC,wBAAA,EAAA,YAAkC;QAChG,IAAM,WAAW,GAAW,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC;QAC1E,IAAM,UAAU,GAAW,mBAAS,CAAC,cAAc,CAAC,WAAW,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;QAE/E,IAAM,MAAM,GAAW,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,6BAA6B;QAE5E,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;YAC1B,wBAAwB;YACxB,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;gBACjC,IAAI,CAAC;oBACH,IAAM,SAAS,GAAW,GAAG,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;oBACzD,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;wBAC5C,+CAA+C;wBAC/C,MAAM,CAAC,KAAK,CAAC;oBACf,CAAC;gBACH,CAAC;gBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACf,4FAA4F;oBAC5F,iBAAiB;gBACnB,CAAC;YACH,CAAC;QACH,CAAC;QAED,GAAG,CAAC,aAAa,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;QAExC,sGAAsG;QACtG;;;;;;;;UAQE;QAEF,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IACH,eAAC;AAAD,CA5DA,AA4DC,IAAA","file":"utilities/JsonFile.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as fsx from 'fs-extra';\r\nimport * as os from 'os';\r\nimport * as jju from 'jju';\r\nimport Utilities from './Utilities';\r\n\r\n/**\r\n * Options for JsonFile.saveJsonFile()\r\n *\r\n * @public\r\n */\r\nexport interface ISaveJsonFileOptions {\r\n  /**\r\n   * If there is an existing file, and the contents have not changed, then\r\n   * don't write anything; this preserves the old timestamp.\r\n   */\r\n  onlyIfChanged?: boolean;\r\n}\r\n\r\n/**\r\n * Utilities for reading/writing JSON files.\r\n * @public\r\n */\r\nexport default class JsonFile {\r\n  /**\r\n   * Loads a JSON file.\r\n   */\r\n  // tslint:disable-next-line:no-any\r\n  public static loadJsonFile(jsonFilename: string): any {\r\n    if (!fsx.existsSync(jsonFilename)) {\r\n      throw new Error(`Input file not found: ${jsonFilename}`);\r\n    }\r\n\r\n    const buffer: Buffer = fsx.readFileSync(jsonFilename);\r\n    try {\r\n      const jsonData: Object = jju.parse(buffer.toString());\r\n      return jsonData;\r\n    } catch (error) {\r\n      throw new Error(`Error reading \"${jsonFilename}\":` + os.EOL + `  ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Saves the file to disk.  Returns false if nothing was written due to options.onlyIfChanged.\r\n   */\r\n  // tslint:disable-next-line:no-any\r\n  public static saveJsonFile(jsonData: any, jsonFilename: string, options: ISaveJsonFileOptions = {}): boolean {\r\n    const stringified: string = JSON.stringify(jsonData, undefined, 2) + '\\n';\r\n    const normalized: string = Utilities.getAllReplaced(stringified, '\\n', '\\r\\n');\r\n\r\n    const buffer: Buffer = new Buffer(normalized); // utf8 encoding happens here\r\n\r\n    if (options.onlyIfChanged) {\r\n      // Has the file changed?\r\n      if (fsx.existsSync(jsonFilename)) {\r\n        try {\r\n          const oldBuffer: Buffer = fsx.readFileSync(jsonFilename);\r\n          if (Buffer.compare(buffer, oldBuffer) === 0) {\r\n            // Nothing has changed, so don't touch the file\r\n            return false;\r\n          }\r\n        } catch (error) {\r\n          // Ignore this error, and try writing a new file.  If that fails, then we should report that\r\n          // error instead.\r\n        }\r\n      }\r\n    }\r\n\r\n    fsx.writeFileSync(jsonFilename, buffer);\r\n\r\n    // TEST CODE: Used to verify that onlyIfChanged isn't broken by a hidden transformation during saving.\r\n    /*\r\n    const oldBuffer2: Buffer = fsx.readFileSync(jsonFilename);\r\n    if (Buffer.compare(buffer, oldBuffer2) !== 0) {\r\n      console.log('new:' + buffer.toString('hex'));\r\n      console.log('old:' + oldBuffer2.toString('hex'));\r\n\r\n      throw new Error('onlyIfChanged logic is broken');\r\n    }\r\n    */\r\n\r\n    return true;\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}