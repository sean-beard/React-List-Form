{"version":3,"sources":["utilities/JsonSchemaValidator.ts"],"names":[],"mappings":"AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,oCAAuC;AACvC,uBAAyB;AAEzB,uCAAkC;AAIlC;;GAEG;AACH;IAqDE,6BAAoB,YAAoB;QACtC,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,UAAU,GAAG,IAAI,SAAS,CAAC;YAC9B,iBAAiB,EAAE,IAAI;YACvB,UAAU,EAAE,IAAI;SACjB,CAAC,CAAC;IACL,CAAC;IAvDa,gCAAY,GAA1B,UAA2B,cAAsB;QAC/C,IAAM,YAAY,GAAW,kBAAQ,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QACnE,MAAM,CAAC,IAAI,mBAAmB,CAAC,YAAY,CAAC,CAAC;IAC/C,CAAC;IAEc,uCAAmB,GAAlC,UAAmC,YAA2C,EAAE,MAAc,EAC5F,MAAc;QACd,GAAG,CAAC,CAAsB,UAAY,EAAZ,6BAAY,EAAZ,0BAAY,EAAZ,IAAY;YAAjC,IAAM,WAAW,qBAAA;YAEpB,MAAM,IAAI,EAAE,CAAC,GAAG,GAAG,MAAM,IAAG,YAAU,WAAW,CAAC,IAAM,CAAA,CAAC;YAEzD,EAAE,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC;gBAC5B,IAAM,UAAU,GAAW,EAAE,CAAC;gBAC9B,IAAI,oBAAoB,GAAW,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;gBAClE,EAAE,CAAC,CAAC,oBAAoB,CAAC,MAAM,GAAG,UAAU,CAAC,CAAC,CAAC;oBAC7C,oBAAoB,GAAG,oBAAoB,CAAC,MAAM,CAAC,CAAC,EAAE,UAAU,GAAG,CAAC,CAAC;0BACjE,KAAK,CAAC;gBACZ,CAAC;gBAED,MAAM,IAAI,OAAK,oBAAoB,MAAG,CAAC;YACzC,CAAC;YAED,MAAM,IAAI,EAAE,CAAC,GAAG,GAAG,MAAM,IAAG,YAAU,WAAW,CAAC,OAAS,CAAA,CAAC;YAE5D,EAAE,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;gBACtB,MAAM,GAAG,mBAAmB,CAAC,mBAAmB,CAAC,WAAW,CAAC,KAAK,EAAE,MAAM,GAAG,IAAI,EAAE,MAAM,CAAC,CAAC;YAC7F,CAAC;SACF;QACD,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAEM,4CAAc,GAArB,UAAsB,UAAkB,EAAE,aAAoC;QAE5E,iGAAiG;QACjG,8FAA8F;QAC9F,qFAAqF;QACrF,0DAA0D;QAC1D,OAAO,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,wCAAwC;QAEtE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YAC9D,IAAM,YAAY,GAAkC,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,CAAC;YAEpF,IAAI,MAAM,GAAW,gCAAgC,CAAC;YAEtD,MAAM,GAAG,mBAAmB,CAAC,mBAAmB,CAAC,YAAY,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;YAC7E,aAAa,CAAC,MAAM,CAAC,CAAC;QACxB,CAAC;IACH,CAAC;IASH,0BAAC;AAAD,CA5DA,AA4DC,IAAA","file":"utilities/JsonSchemaValidator.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport Validator = require('z-schema');\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport JsonFile from './JsonFile';\r\n\r\nexport type ValidateErrorCallback = (errorDescription: string) => void;\r\n\r\n/**\r\n * @alpha\r\n */\r\nexport default class JsonSchemaValidator {\r\n  private _validator: Validator;\r\n  private _schemaObject: Object;\r\n\r\n  public static loadFromFile(schemaFilename: string): JsonSchemaValidator {\r\n    const schemaObject: Object = JsonFile.loadJsonFile(schemaFilename);\r\n    return new JsonSchemaValidator(schemaObject);\r\n  }\r\n\r\n  private static _formatErrorDetails(errorDetails: Validator.SchemaErrorDetail[], indent: string,\r\n    buffer: string): string {\r\n    for (const errorDetail of errorDetails) {\r\n\r\n      buffer += os.EOL + indent + `Error: ${errorDetail.path}`;\r\n\r\n      if (errorDetail.description) {\r\n        const MAX_LENGTH: number = 40;\r\n        let truncatedDescription: string = errorDetail.description.trim();\r\n        if (truncatedDescription.length > MAX_LENGTH) {\r\n          truncatedDescription = truncatedDescription.substr(0, MAX_LENGTH - 3)\r\n            + '...';\r\n        }\r\n\r\n        buffer += ` (${truncatedDescription})`;\r\n      }\r\n\r\n      buffer += os.EOL + indent + `       ${errorDetail.message}`;\r\n\r\n      if (errorDetail.inner) {\r\n        buffer = JsonSchemaValidator._formatErrorDetails(errorDetail.inner, indent + '  ', buffer);\r\n      }\r\n    }\r\n    return buffer;\r\n  }\r\n\r\n  public validateObject(jsonObject: Object, errorCallback: ValidateErrorCallback): void {\r\n\r\n    // Remove the $schema reference that appears in the configuration object (used for IntelliSense),\r\n    // since we are replacing it with the precompiled version.  The validator.setRemoteReference()\r\n    // API is a better way to handle this, but we'd first need to publish the schema file\r\n    // to a public web server where Visual Studio can find it.\r\n    delete jsonObject['$schema']; // tslint:disable-line:no-string-literal\r\n\r\n    if (!this._validator.validate(jsonObject, this._schemaObject)) {\r\n      const errorDetails: Validator.SchemaErrorDetail[] = this._validator.getLastErrors();\r\n\r\n      let buffer: string = 'JSON schema validation failed:';\r\n\r\n      buffer = JsonSchemaValidator._formatErrorDetails(errorDetails, '  ', buffer);\r\n      errorCallback(buffer);\r\n    }\r\n  }\r\n\r\n  private constructor(schemaObject: Object) {\r\n    this._schemaObject = schemaObject;\r\n    this._validator = new Validator({\r\n      breakOnFirstError: true,\r\n      noTypeless: true\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}