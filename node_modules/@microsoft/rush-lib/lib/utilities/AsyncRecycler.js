// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var child_process = require("child_process");
var os = require("os");
var path = require("path");
var fsx = require("fs-extra");
var Utilities_1 = require("./Utilities");
/**
 * For deleting large folders, AsyncRecycler is significantly faster than Utilities.dangerouslyDeletePath().
 * It works by moving one or more folders into a temporary "recycler" folder, and then launches a separate
 * background process to recursively delete that folder.
 * @public
 */
var AsyncRecycler = (function () {
    function AsyncRecycler(rushConfiguration) {
        this._rushConfiguration = rushConfiguration;
        this._recyclerFolder = path.join(rushConfiguration.commonTempFolder, 'rush-recycler');
        this._movedFolderCount = 0;
        this._deleting = false;
    }
    Object.defineProperty(AsyncRecycler.prototype, "recyclerFolder", {
        /**
         * The full path of the recycler folder.
         * Example: "C:\MyRepo\common\rush-recycler"
         */
        get: function () {
            return this._recyclerFolder;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Synchronously moves the specified folder into the recycler folder.  If the specified folder
     * does not exist, then no operation is performed.  After calling this function one or more times,
     * deleteAll() must be called to actually delete the contents of the recycler folder.
     */
    AsyncRecycler.prototype.moveFolder = function (folderPath) {
        if (this._deleting) {
            throw new Error('AsyncRecycler.moveFolder() must not be called after deleteAll() has started');
        }
        if (!fsx.existsSync(folderPath)) {
            return;
        }
        ++this._movedFolderCount;
        // We need to do a simple "fs.renameSync" here, however if the folder we're trying to rename
        // has a lock, or if its destination container doesn't exist yet,
        // then there seems to be some OS process (virus scanner?) that holds
        // a lock on the folder for a split second, which causes renameSync to
        // fail. To workaround that, retry for up to 7 seconds before giving up.
        var maxWaitTimeMs = 7 * 1000;
        var oldFolderName = path.basename(folderPath);
        var newFolderPath = path.join(this.recyclerFolder, oldFolderName + "_" + new Date().getTime());
        if (!fsx.existsSync(this.recyclerFolder)) {
            Utilities_1.default.createFolderWithRetry(this.recyclerFolder);
        }
        Utilities_1.default.retryUntilTimeout(function () { return fsx.renameSync(folderPath, newFolderPath); }, maxWaitTimeMs, function (e) { return new Error("Error: " + e + os.EOL + "Often this is caused by a file lock " +
            'from a process like the virus scanner.'); }, 'recycleFolder');
    };
    /**
     * Starts an asynchronous process to delete the recycler folder.  Deleting will continue
     * even if the current NodeJS process is killed.
     *
     * NOTE: To avoid spawning multiple instances of the same command, moveFolder()
     * MUST NOT be called again after deleteAll() has started.
     */
    AsyncRecycler.prototype.deleteAll = function () {
        if (this._deleting) {
            throw new Error('AsyncRecycler.deleteAll() must not be called more than once');
        }
        this._deleting = true;
        if (this._movedFolderCount === 0) {
            // Nothing to do
            return;
        }
        // Asynchronously delete the folder contents.
        var recyclerFolderContents = path.join(this.recyclerFolder, '*');
        var windowsTrimmedRecyclerFolder = this.recyclerFolder.match(/\\$/)
            ? this.recyclerFolder.substring(0, this.recyclerFolder.length - 1)
            : this.recyclerFolder;
        var command = os.platform() === 'win32'
            ? 'cmd.exe'
            : 'rm';
        var args = os.platform() === 'win32'
            ? [
                '/c',
                "FOR /F %f IN ('dir /B \\\\?\\" + recyclerFolderContents + "') "
                    + ("DO rd /S /Q \\\\?\\" + windowsTrimmedRecyclerFolder + "\\%f")
            ]
            : ['-rf', "\"" + recyclerFolderContents + "\""];
        var options = {
            detached: true,
            stdio: ['ignore', 'ignore', 'ignore']
        };
        var process = child_process.spawn(command, args, options);
        process.unref();
    };
    return AsyncRecycler;
}());
exports.default = AsyncRecycler;

//# sourceMappingURL=AsyncRecycler.js.map
