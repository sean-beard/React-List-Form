// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fsx = require("fs-extra");
var os = require("os");
var jju = require("jju");
var Utilities_1 = require("./Utilities");
/**
 * Utilities for reading/writing JSON files.
 * @public
 */
var JsonFile = (function () {
    function JsonFile() {
    }
    /**
     * Loads a JSON file.
     */
    // tslint:disable-next-line:no-any
    JsonFile.loadJsonFile = function (jsonFilename) {
        if (!fsx.existsSync(jsonFilename)) {
            throw new Error("Input file not found: " + jsonFilename);
        }
        var buffer = fsx.readFileSync(jsonFilename);
        try {
            var jsonData = jju.parse(buffer.toString());
            return jsonData;
        }
        catch (error) {
            throw new Error("Error reading \"" + jsonFilename + "\":" + os.EOL + ("  " + error.message));
        }
    };
    /**
     * Saves the file to disk.  Returns false if nothing was written due to options.onlyIfChanged.
     */
    // tslint:disable-next-line:no-any
    JsonFile.saveJsonFile = function (jsonData, jsonFilename, options) {
        if (options === void 0) { options = {}; }
        var stringified = JSON.stringify(jsonData, undefined, 2) + '\n';
        var normalized = Utilities_1.default.getAllReplaced(stringified, '\n', '\r\n');
        var buffer = new Buffer(normalized); // utf8 encoding happens here
        if (options.onlyIfChanged) {
            // Has the file changed?
            if (fsx.existsSync(jsonFilename)) {
                try {
                    var oldBuffer = fsx.readFileSync(jsonFilename);
                    if (Buffer.compare(buffer, oldBuffer) === 0) {
                        // Nothing has changed, so don't touch the file
                        return false;
                    }
                }
                catch (error) {
                    // Ignore this error, and try writing a new file.  If that fails, then we should report that
                    // error instead.
                }
            }
        }
        fsx.writeFileSync(jsonFilename, buffer);
        // TEST CODE: Used to verify that onlyIfChanged isn't broken by a hidden transformation during saving.
        /*
        const oldBuffer2: Buffer = fsx.readFileSync(jsonFilename);
        if (Buffer.compare(buffer, oldBuffer2) !== 0) {
          console.log('new:' + buffer.toString('hex'));
          console.log('old:' + oldBuffer2.toString('hex'));
    
          throw new Error('onlyIfChanged logic is broken');
        }
        */
        return true;
    };
    return JsonFile;
}());
exports.default = JsonFile;

//# sourceMappingURL=JsonFile.js.map
