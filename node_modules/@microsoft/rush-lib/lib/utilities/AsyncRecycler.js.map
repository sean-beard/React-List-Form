{"version":3,"sources":["utilities/AsyncRecycler.ts"],"names":[],"mappings":"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","file":"utilities/AsyncRecycler.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as child_process from 'child_process';\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport * as fsx from 'fs-extra';\r\n\r\nimport RushConfiguration from '../data/RushConfiguration';\r\nimport Utilities from './Utilities';\r\n\r\n/**\r\n * For deleting large folders, AsyncRecycler is significantly faster than Utilities.dangerouslyDeletePath().\r\n * It works by moving one or more folders into a temporary \"recycler\" folder, and then launches a separate\r\n * background process to recursively delete that folder.\r\n * @public\r\n */\r\nexport default class AsyncRecycler {\r\n  private _rushConfiguration: RushConfiguration;\r\n  private _recyclerFolder: string;\r\n  private _movedFolderCount: number;\r\n  private _deleting: boolean;\r\n\r\n  constructor(rushConfiguration: RushConfiguration) {\r\n    this._rushConfiguration = rushConfiguration;\r\n    this._recyclerFolder = path.join(rushConfiguration.commonTempFolder, 'rush-recycler');\r\n    this._movedFolderCount = 0;\r\n    this._deleting = false;\r\n  }\r\n\r\n  /**\r\n   * The full path of the recycler folder.\r\n   * Example: \"C:\\MyRepo\\common\\rush-recycler\"\r\n   */\r\n  public get recyclerFolder(): string {\r\n    return this._recyclerFolder;\r\n  }\r\n\r\n  /**\r\n   * Synchronously moves the specified folder into the recycler folder.  If the specified folder\r\n   * does not exist, then no operation is performed.  After calling this function one or more times,\r\n   * deleteAll() must be called to actually delete the contents of the recycler folder.\r\n   */\r\n  public moveFolder(folderPath: string): void {\r\n    if (this._deleting) {\r\n      throw new Error('AsyncRecycler.moveFolder() must not be called after deleteAll() has started');\r\n    }\r\n\r\n    if (!fsx.existsSync(folderPath)) {\r\n      return;\r\n    }\r\n\r\n    ++this._movedFolderCount;\r\n\r\n    // We need to do a simple \"fs.renameSync\" here, however if the folder we're trying to rename\r\n    // has a lock, or if its destination container doesn't exist yet,\r\n    // then there seems to be some OS process (virus scanner?) that holds\r\n    // a lock on the folder for a split second, which causes renameSync to\r\n    // fail. To workaround that, retry for up to 7 seconds before giving up.\r\n    const maxWaitTimeMs: number = 7 * 1000;\r\n\r\n    const oldFolderName: string = path.basename(folderPath);\r\n    const newFolderPath: string = path.join(this.recyclerFolder, `${oldFolderName}_${new Date().getTime()}`);\r\n\r\n    if (!fsx.existsSync(this.recyclerFolder)) {\r\n      Utilities.createFolderWithRetry(this.recyclerFolder);\r\n    }\r\n\r\n    Utilities.retryUntilTimeout(\r\n      () => fsx.renameSync(folderPath, newFolderPath),\r\n      maxWaitTimeMs,\r\n      (e) => new Error(`Error: ${e}${os.EOL}Often this is caused by a file lock ` +\r\n                      'from a process like the virus scanner.'),\r\n      'recycleFolder'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Starts an asynchronous process to delete the recycler folder.  Deleting will continue\r\n   * even if the current NodeJS process is killed.\r\n   *\r\n   * NOTE: To avoid spawning multiple instances of the same command, moveFolder()\r\n   * MUST NOT be called again after deleteAll() has started.\r\n   */\r\n  public deleteAll(): void {\r\n    if (this._deleting) {\r\n      throw new Error('AsyncRecycler.deleteAll() must not be called more than once');\r\n    }\r\n\r\n    this._deleting = true;\r\n\r\n    if (this._movedFolderCount === 0) {\r\n      // Nothing to do\r\n      return;\r\n    }\r\n\r\n    // Asynchronously delete the folder contents.\r\n    const recyclerFolderContents: string = path.join(this.recyclerFolder, '*');\r\n\r\n    const windowsTrimmedRecyclerFolder: string = this.recyclerFolder.match(/\\\\$/)\r\n      ? this.recyclerFolder.substring(0, this.recyclerFolder.length - 1)\r\n      : this.recyclerFolder;\r\n    const command: string = os.platform() === 'win32'\r\n      // Windows\r\n      ? 'cmd.exe'\r\n      // Assume 'NIX or Darwin\r\n      : 'rm';\r\n\r\n    const args: string[] = os.platform() === 'win32'\r\n      // Windows\r\n      ? [\r\n        '/c',\r\n        `FOR /F %f IN ('dir /B \\\\\\\\?\\\\${recyclerFolderContents}') `\r\n          + `DO rd /S /Q \\\\\\\\?\\\\${windowsTrimmedRecyclerFolder}\\\\%f`\r\n      ]\r\n      // Assume 'NIX or Darwin\r\n      : ['-rf', `\"${recyclerFolderContents}\"`];\r\n\r\n    const options: child_process.SpawnOptions = {\r\n      detached: true,\r\n      stdio: [ 'ignore', 'ignore', 'ignore' ]\r\n    };\r\n\r\n    const process: child_process.ChildProcess = child_process.spawn(command, args, options);\r\n    process.unref();\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"..\\..\\src"}