// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Validator = require("z-schema");
var os = require("os");
var JsonFile_1 = require("./JsonFile");
/**
 * @alpha
 */
var JsonSchemaValidator = (function () {
    function JsonSchemaValidator(schemaObject) {
        this._schemaObject = schemaObject;
        this._validator = new Validator({
            breakOnFirstError: true,
            noTypeless: true
        });
    }
    JsonSchemaValidator.loadFromFile = function (schemaFilename) {
        var schemaObject = JsonFile_1.default.loadJsonFile(schemaFilename);
        return new JsonSchemaValidator(schemaObject);
    };
    JsonSchemaValidator._formatErrorDetails = function (errorDetails, indent, buffer) {
        for (var _i = 0, errorDetails_1 = errorDetails; _i < errorDetails_1.length; _i++) {
            var errorDetail = errorDetails_1[_i];
            buffer += os.EOL + indent + ("Error: " + errorDetail.path);
            if (errorDetail.description) {
                var MAX_LENGTH = 40;
                var truncatedDescription = errorDetail.description.trim();
                if (truncatedDescription.length > MAX_LENGTH) {
                    truncatedDescription = truncatedDescription.substr(0, MAX_LENGTH - 3)
                        + '...';
                }
                buffer += " (" + truncatedDescription + ")";
            }
            buffer += os.EOL + indent + ("       " + errorDetail.message);
            if (errorDetail.inner) {
                buffer = JsonSchemaValidator._formatErrorDetails(errorDetail.inner, indent + '  ', buffer);
            }
        }
        return buffer;
    };
    JsonSchemaValidator.prototype.validateObject = function (jsonObject, errorCallback) {
        // Remove the $schema reference that appears in the configuration object (used for IntelliSense),
        // since we are replacing it with the precompiled version.  The validator.setRemoteReference()
        // API is a better way to handle this, but we'd first need to publish the schema file
        // to a public web server where Visual Studio can find it.
        delete jsonObject['$schema']; // tslint:disable-line:no-string-literal
        if (!this._validator.validate(jsonObject, this._schemaObject)) {
            var errorDetails = this._validator.getLastErrors();
            var buffer = 'JSON schema validation failed:';
            buffer = JsonSchemaValidator._formatErrorDetails(errorDetails, '  ', buffer);
            errorCallback(buffer);
        }
    };
    return JsonSchemaValidator;
}());
exports.default = JsonSchemaValidator;

//# sourceMappingURL=JsonSchemaValidator.js.map
