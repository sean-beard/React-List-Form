// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fsx = require("fs-extra");
var path = require("path");
var gitInfo = require("git-repo-info");
var RushConstants_1 = require("../RushConstants");
/**
 * This class represents a single change file.
 * @public
 */
var ChangeFile = (function () {
    function ChangeFile(_changeFileData, _rushConfiguration) {
        this._changeFileData = _changeFileData;
        this._rushConfiguration = _rushConfiguration;
        if (!this._changeFileData) {
            throw new Error("_changeFileData does not have value");
        }
        if (!this._rushConfiguration) {
            throw new Error("_rushConfiguration does not have value");
        }
    }
    /**
     * Write the change file to disk in sync mode
     */
    ChangeFile.prototype.writeSync = function () {
        var filePath = this.generatePath();
        fsx.ensureFileSync(filePath);
        fsx.writeFileSync(filePath, JSON.stringify(this._changeFileData, undefined, 2));
    };
    /**
     * Generate a file path for storing the change file to disk
     */
    ChangeFile.prototype.generatePath = function () {
        var branch = undefined;
        try {
            branch = gitInfo().branch;
        }
        catch (error) {
            console.log('Could not automatically detect git branch name, using timestamp instead.');
        }
        // example filename: yourbranchname_2017-05-01-20-20.json
        var filename = (branch ?
            this._escapeFilename(branch + "_" + this._getTimestamp() + ".json") :
            this._getTimestamp() + ".json");
        var filePath = path.join.apply(path, [this._rushConfiguration.commonFolder,
            RushConstants_1.RushConstants.changeFilesFolderName].concat(this._changeFileData.packageName.split('/'), [filename]));
        return filePath;
    };
    /**
    * Gets the current time, formatted as YYYY-MM-DD-HH-MM
    * Optionally will include seconds
    */
    ChangeFile.prototype._getTimestamp = function (useSeconds) {
        // Create a date string with the current time
        if (useSeconds === void 0) { useSeconds = false; }
        // dateString === "2016-10-19T22:47:49.606Z"
        var dateString = new Date().toJSON();
        // Parse out 2 capture groups, the date and the time
        var dateParseRegex = /([0-9]{4}-[0-9]{2}-[0-9]{2}).*([0-9]{2}:[0-9]{2}:[0-9]{2})/;
        // matches[1] === "2016-10-19"
        // matches[2] === "22:47:49"
        var matches = dateString.match(dateParseRegex);
        // formattedDate === "2016-10-19"
        var formattedDate = matches[1];
        var formattedTime;
        if (useSeconds) {
            // formattedTime === "22-47-49"
            formattedTime = matches[2].replace(':', '-');
        }
        else {
            // formattedTime === "22-47"
            var timeParts = matches[2].split(':');
            formattedTime = timeParts[0] + "-" + timeParts[1];
        }
        return formattedDate + "-" + formattedTime;
    };
    ChangeFile.prototype._escapeFilename = function (filename, replacer) {
        if (replacer === void 0) { replacer = '-'; }
        // Removes / ? < > \ : * | ", really anything that isn't a letter, number, '.' '_' or '-'
        var badCharacters = /[^a-zA-Z0-9._-]/g;
        return filename.replace(badCharacters, replacer);
    };
    return ChangeFile;
}());
exports.ChangeFile = ChangeFile;

//# sourceMappingURL=ChangeFile.js.map
