{"version":3,"sources":["data/VersionPolicy.ts"],"names":[],"mappings":"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","file":"data/VersionPolicy.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { cloneDeep } from 'lodash';\r\nimport * as semver from 'semver';\r\n\r\nimport {\r\n  IVersionPolicyJson,\r\n  ILockStepVersionJson,\r\n  IIndividualVersionJson\r\n} from './VersionPolicyConfiguration';\r\n\r\nimport IPackageJson from '../utilities/IPackageJson';\r\n\r\n/**\r\n * Type of version bumps\r\n * @alpha\r\n */\r\nexport enum BumpType {\r\n  'prerelease',\r\n  'release',\r\n  'patch',\r\n  'minor',\r\n  'major'\r\n}\r\n\r\n/**\r\n * Version policy base type names\r\n * @alpha\r\n */\r\nexport enum VersionPolicyDefinitionName {\r\n  'lockStepVersion',\r\n  'individualVersion'\r\n}\r\n\r\n/**\r\n * This is the base class for version policy which controls how versions get bumped.\r\n * @alpha\r\n */\r\nexport abstract class VersionPolicy {\r\n  private _policyName: string;\r\n  private _definitionName: VersionPolicyDefinitionName;\r\n\r\n  public static load(versionPolicyJson: IVersionPolicyJson): VersionPolicy {\r\n    const definition: VersionPolicyDefinitionName = VersionPolicyDefinitionName[versionPolicyJson.definitionName];\r\n    if (definition === VersionPolicyDefinitionName.lockStepVersion) {\r\n      return new LockStepVersionPolicy(versionPolicyJson as ILockStepVersionJson);\r\n    } else if (definition === VersionPolicyDefinitionName.individualVersion) {\r\n      return new IndividualVersionPolicy(versionPolicyJson as IIndividualVersionJson);\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  constructor(versionPolicyJson: IVersionPolicyJson) {\r\n    this._policyName = versionPolicyJson.policyName;\r\n    this._definitionName = VersionPolicyDefinitionName[versionPolicyJson.definitionName];\r\n  }\r\n\r\n  public get policyName(): string {\r\n    return this._policyName;\r\n  }\r\n\r\n  public get definitionName(): VersionPolicyDefinitionName {\r\n    return this._definitionName;\r\n  }\r\n\r\n  public abstract ensure(project: IPackageJson): IPackageJson | undefined;\r\n}\r\n\r\n/**\r\n * This policy indicates all related projects should use the same version.\r\n * @alpha\r\n */\r\nexport class LockStepVersionPolicy extends VersionPolicy {\r\n  private _version: semver.SemVer;\r\n  private _nextBump: BumpType;\r\n\r\n  constructor(versionPolicyJson: ILockStepVersionJson) {\r\n    super(versionPolicyJson);\r\n    this._version = new semver.SemVer(versionPolicyJson.version);\r\n    this._nextBump = BumpType[versionPolicyJson.nextBump];\r\n  }\r\n\r\n  public get version(): semver.SemVer {\r\n    return this._version;\r\n  }\r\n\r\n  public get nextBump(): BumpType {\r\n    return this._nextBump;\r\n  }\r\n\r\n  public ensure(project: IPackageJson): IPackageJson | undefined {\r\n    const packageVersion: semver.SemVer = new semver.SemVer(project.version);\r\n    const compareResult: number = packageVersion.compare(this._version);\r\n    if (compareResult === 0) {\r\n      return undefined;\r\n    } else if (compareResult > 0) {\r\n      const errorMessage: string = `Version ${project.version} in package ${project.name}`\r\n        + ` is higher than locked version ${this._version.format()}.`;\r\n      throw new Error(errorMessage);\r\n    }\r\n    const updatedProject: IPackageJson = cloneDeep(project);\r\n    updatedProject.version = this._version.format();\r\n    return updatedProject;\r\n  }\r\n}\r\n\r\n/**\r\n * This policy indicates all related projects get version bump driven by their own changes.\r\n * @alpha\r\n */\r\nexport class IndividualVersionPolicy extends VersionPolicy {\r\n  private _lockedMajor: number | undefined;\r\n\r\n  constructor(versionPolicyJson: IIndividualVersionJson) {\r\n    super(versionPolicyJson);\r\n    this._lockedMajor = versionPolicyJson.lockedMajor;\r\n  }\r\n\r\n  public get lockedMajor(): number | undefined {\r\n    return this._lockedMajor;\r\n  }\r\n\r\n  public ensure(project: IPackageJson): IPackageJson | undefined {\r\n    if (this.lockedMajor) {\r\n      const version: semver.SemVer = new semver.SemVer(project.version);\r\n      if (version.major < this._lockedMajor) {\r\n        const updatedProject: IPackageJson = cloneDeep(project);\r\n        updatedProject.version = `${this._lockedMajor}.0.0`;\r\n        return updatedProject;\r\n      } else if (version.major > this._lockedMajor) {\r\n        const errorMessage: string = `Version ${project.version} in package ${project.name}`\r\n          + ` is higher than locked major version ${this._lockedMajor}.`;\r\n        throw new Error(errorMessage);\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}