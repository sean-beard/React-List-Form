import * as semver from 'semver';
import { IVersionPolicyJson, ILockStepVersionJson, IIndividualVersionJson } from './VersionPolicyConfiguration';
import IPackageJson from '../utilities/IPackageJson';
/**
 * Type of version bumps
 * @alpha
 */
export declare enum BumpType {
    'prerelease' = 0,
    'release' = 1,
    'patch' = 2,
    'minor' = 3,
    'major' = 4,
}
/**
 * Version policy base type names
 * @alpha
 */
export declare enum VersionPolicyDefinitionName {
    'lockStepVersion' = 0,
    'individualVersion' = 1,
}
/**
 * This is the base class for version policy which controls how versions get bumped.
 * @alpha
 */
export declare abstract class VersionPolicy {
    private _policyName;
    private _definitionName;
    static load(versionPolicyJson: IVersionPolicyJson): VersionPolicy;
    constructor(versionPolicyJson: IVersionPolicyJson);
    readonly policyName: string;
    readonly definitionName: VersionPolicyDefinitionName;
    abstract ensure(project: IPackageJson): IPackageJson | undefined;
}
/**
 * This policy indicates all related projects should use the same version.
 * @alpha
 */
export declare class LockStepVersionPolicy extends VersionPolicy {
    private _version;
    private _nextBump;
    constructor(versionPolicyJson: ILockStepVersionJson);
    readonly version: semver.SemVer;
    readonly nextBump: BumpType;
    ensure(project: IPackageJson): IPackageJson | undefined;
}
/**
 * This policy indicates all related projects get version bump driven by their own changes.
 * @alpha
 */
export declare class IndividualVersionPolicy extends VersionPolicy {
    private _lockedMajor;
    constructor(versionPolicyJson: IIndividualVersionJson);
    readonly lockedMajor: number | undefined;
    ensure(project: IPackageJson): IPackageJson | undefined;
}
