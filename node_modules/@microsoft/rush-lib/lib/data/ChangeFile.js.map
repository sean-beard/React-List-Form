{"version":3,"sources":["data/ChangeFile.ts"],"names":[],"mappings":"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","file":"data/ChangeFile.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as fsx from 'fs-extra';\r\nimport * as path from 'path';\r\nimport gitInfo = require('git-repo-info');\r\n\r\nimport RushConfiguration from './RushConfiguration';\r\nimport { RushConstants } from '../RushConstants';\r\n\r\nimport { IChangeFile } from './ChangeManagement';\r\n\r\n/**\r\n * This class represents a single change file.\r\n * @public\r\n */\r\nexport class ChangeFile {\r\n  public constructor(private _changeFileData: IChangeFile,\r\n    private _rushConfiguration: RushConfiguration\r\n  ) {\r\n    if (!this._changeFileData) {\r\n      throw new Error(`_changeFileData does not have value`);\r\n    }\r\n    if (!this._rushConfiguration) {\r\n      throw new Error(`_rushConfiguration does not have value`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Write the change file to disk in sync mode\r\n   */\r\n  public writeSync(): void {\r\n    const filePath: string = this.generatePath();\r\n    fsx.ensureFileSync(filePath);\r\n    fsx.writeFileSync(filePath, JSON.stringify(this._changeFileData, undefined, 2));\r\n  }\r\n\r\n  /**\r\n   * Generate a file path for storing the change file to disk\r\n   */\r\n  public generatePath(): string {\r\n    let branch: string = undefined;\r\n    try {\r\n      branch = gitInfo().branch;\r\n    } catch (error) {\r\n      console.log('Could not automatically detect git branch name, using timestamp instead.');\r\n    }\r\n\r\n    // example filename: yourbranchname_2017-05-01-20-20.json\r\n    const filename: string = (branch ?\r\n      this._escapeFilename(`${branch}_${this._getTimestamp()}.json`) :\r\n      `${this._getTimestamp()}.json`);\r\n    const filePath: string = path.join(this._rushConfiguration.commonFolder,\r\n      RushConstants.changeFilesFolderName,\r\n      ...this._changeFileData.packageName.split('/'),\r\n      filename);\r\n    return filePath;\r\n  }\r\n\r\n  /**\r\n  * Gets the current time, formatted as YYYY-MM-DD-HH-MM\r\n  * Optionally will include seconds\r\n  */\r\n  private _getTimestamp(useSeconds: boolean = false): string {\r\n    // Create a date string with the current time\r\n\r\n    // dateString === \"2016-10-19T22:47:49.606Z\"\r\n    const dateString: string = new Date().toJSON();\r\n\r\n    // Parse out 2 capture groups, the date and the time\r\n    const dateParseRegex: RegExp = /([0-9]{4}-[0-9]{2}-[0-9]{2}).*([0-9]{2}:[0-9]{2}:[0-9]{2})/;\r\n\r\n    // matches[1] === \"2016-10-19\"\r\n    // matches[2] === \"22:47:49\"\r\n    const matches: RegExpMatchArray = dateString.match(dateParseRegex);\r\n\r\n    // formattedDate === \"2016-10-19\"\r\n    const formattedDate: string = matches[1];\r\n\r\n    let formattedTime: string;\r\n    if (useSeconds) {\r\n      // formattedTime === \"22-47-49\"\r\n      formattedTime = matches[2].replace(':', '-');\r\n    } else {\r\n      // formattedTime === \"22-47\"\r\n      const timeParts: string[] = matches[2].split(':');\r\n      formattedTime = `${timeParts[0]}-${timeParts[1]}`;\r\n    }\r\n\r\n    return `${formattedDate}-${formattedTime}`;\r\n  }\r\n\r\n  private _escapeFilename(filename: string, replacer: string = '-'): string {\r\n    // Removes / ? < > \\ : * | \", really anything that isn't a letter, number, '.' '_' or '-'\r\n    const badCharacters: RegExp = /[^a-zA-Z0-9._-]/g;\r\n    return filename.replace(badCharacters, replacer);\r\n  }\r\n}"],"sourceRoot":"..\\..\\src"}