/**
 * Pinned Versions is a Rush feature designed to mimic the behavior of NPM
 * when performing an install. Essentially, for a project, NPM installs all of
 * the first level dependencies before starting any second-level dependencies.
 * This means that you can control the specific version of a second-level dependency
 * by promoting it to a 1st level dependency and using a version number that would satisfy.
 * However, since rush uses the /common/package.json file, NPM treats each rush project
 * as a top-level dependency, and treats the actual 1st level dependencies as second order.
 * This means you could have cases where there is unnecessary inversion and side-by-side versioning
 * in your shrinkwrap file. To mitigate this issue, we promote some dependencies and list them
 * directly in the /common/package.json, ensuring that the selected version will be installed first
 * and at the root.
 * @public
 */
export declare class PinnedVersionsConfiguration {
    private _filename;
    private _data;
    /** Attempts to load pinned versions configuration from a given file */
    static tryLoadFromFile(jsonFilename: string): PinnedVersionsConfiguration;
    /** Set a pinned version. Checks that the version is a valid semver. */
    set(dependency: string, version: string): this;
    get(dependency: string): string;
    has(dependency: string): boolean;
    forEach(cb: (version: string, dependency: string) => void): this;
    save(): this;
    delete(dependency: string): boolean;
    clear(): this;
    readonly size: number;
    private _serialize();
    /**
     * Preferred to use PinnedVersionsConfiguration.loadFromFile()
     */
    private constructor(pinnedVersionJson, _filename);
}
