// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
var semver = require("semver");
/**
 * Type of version bumps
 * @alpha
 */
var BumpType;
(function (BumpType) {
    BumpType[BumpType["prerelease"] = 0] = "prerelease";
    BumpType[BumpType["release"] = 1] = "release";
    BumpType[BumpType["patch"] = 2] = "patch";
    BumpType[BumpType["minor"] = 3] = "minor";
    BumpType[BumpType["major"] = 4] = "major";
})(BumpType = exports.BumpType || (exports.BumpType = {}));
/**
 * Version policy base type names
 * @alpha
 */
var VersionPolicyDefinitionName;
(function (VersionPolicyDefinitionName) {
    VersionPolicyDefinitionName[VersionPolicyDefinitionName["lockStepVersion"] = 0] = "lockStepVersion";
    VersionPolicyDefinitionName[VersionPolicyDefinitionName["individualVersion"] = 1] = "individualVersion";
})(VersionPolicyDefinitionName = exports.VersionPolicyDefinitionName || (exports.VersionPolicyDefinitionName = {}));
/**
 * This is the base class for version policy which controls how versions get bumped.
 * @alpha
 */
var VersionPolicy = (function () {
    function VersionPolicy(versionPolicyJson) {
        this._policyName = versionPolicyJson.policyName;
        this._definitionName = VersionPolicyDefinitionName[versionPolicyJson.definitionName];
    }
    VersionPolicy.load = function (versionPolicyJson) {
        var definition = VersionPolicyDefinitionName[versionPolicyJson.definitionName];
        if (definition === VersionPolicyDefinitionName.lockStepVersion) {
            return new LockStepVersionPolicy(versionPolicyJson);
        }
        else if (definition === VersionPolicyDefinitionName.individualVersion) {
            return new IndividualVersionPolicy(versionPolicyJson);
        }
        return undefined;
    };
    Object.defineProperty(VersionPolicy.prototype, "policyName", {
        get: function () {
            return this._policyName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VersionPolicy.prototype, "definitionName", {
        get: function () {
            return this._definitionName;
        },
        enumerable: true,
        configurable: true
    });
    return VersionPolicy;
}());
exports.VersionPolicy = VersionPolicy;
/**
 * This policy indicates all related projects should use the same version.
 * @alpha
 */
var LockStepVersionPolicy = (function (_super) {
    __extends(LockStepVersionPolicy, _super);
    function LockStepVersionPolicy(versionPolicyJson) {
        var _this = _super.call(this, versionPolicyJson) || this;
        _this._version = new semver.SemVer(versionPolicyJson.version);
        _this._nextBump = BumpType[versionPolicyJson.nextBump];
        return _this;
    }
    Object.defineProperty(LockStepVersionPolicy.prototype, "version", {
        get: function () {
            return this._version;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LockStepVersionPolicy.prototype, "nextBump", {
        get: function () {
            return this._nextBump;
        },
        enumerable: true,
        configurable: true
    });
    LockStepVersionPolicy.prototype.ensure = function (project) {
        var packageVersion = new semver.SemVer(project.version);
        var compareResult = packageVersion.compare(this._version);
        if (compareResult === 0) {
            return undefined;
        }
        else if (compareResult > 0) {
            var errorMessage = "Version " + project.version + " in package " + project.name
                + (" is higher than locked version " + this._version.format() + ".");
            throw new Error(errorMessage);
        }
        var updatedProject = lodash_1.cloneDeep(project);
        updatedProject.version = this._version.format();
        return updatedProject;
    };
    return LockStepVersionPolicy;
}(VersionPolicy));
exports.LockStepVersionPolicy = LockStepVersionPolicy;
/**
 * This policy indicates all related projects get version bump driven by their own changes.
 * @alpha
 */
var IndividualVersionPolicy = (function (_super) {
    __extends(IndividualVersionPolicy, _super);
    function IndividualVersionPolicy(versionPolicyJson) {
        var _this = _super.call(this, versionPolicyJson) || this;
        _this._lockedMajor = versionPolicyJson.lockedMajor;
        return _this;
    }
    Object.defineProperty(IndividualVersionPolicy.prototype, "lockedMajor", {
        get: function () {
            return this._lockedMajor;
        },
        enumerable: true,
        configurable: true
    });
    IndividualVersionPolicy.prototype.ensure = function (project) {
        if (this.lockedMajor) {
            var version = new semver.SemVer(project.version);
            if (version.major < this._lockedMajor) {
                var updatedProject = lodash_1.cloneDeep(project);
                updatedProject.version = this._lockedMajor + ".0.0";
                return updatedProject;
            }
            else if (version.major > this._lockedMajor) {
                var errorMessage = "Version " + project.version + " in package " + project.name
                    + (" is higher than locked major version " + this._lockedMajor + ".");
                throw new Error(errorMessage);
            }
        }
        return undefined;
    };
    return IndividualVersionPolicy;
}(VersionPolicy));
exports.IndividualVersionPolicy = IndividualVersionPolicy;

//# sourceMappingURL=VersionPolicy.js.map
