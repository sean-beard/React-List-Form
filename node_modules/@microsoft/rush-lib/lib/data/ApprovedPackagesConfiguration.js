// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fsx = require("fs-extra");
var path = require("path");
var os = require("os");
var JsonSchemaValidator_1 = require("../utilities/JsonSchemaValidator");
var JsonFile_1 = require("../utilities/JsonFile");
var Utilities_1 = require("../utilities/Utilities");
/**
 * An item returned by ApprovedPackagesConfiguration
 * @public
 */
var ApprovedPackagesItem = (function () {
    function ApprovedPackagesItem() {
        /**
         * The project categories that are allowed to use this package.
         */
        this.allowedCategories = new Set();
    }
    return ApprovedPackagesItem;
}());
exports.ApprovedPackagesItem = ApprovedPackagesItem;
/**
 * This represents the JSON file specified via the "approvedPackagesFile" option in rush.json.
 * @public
 */
var ApprovedPackagesConfiguration = (function () {
    function ApprovedPackagesConfiguration(jsonFilename) {
        this.items = [];
        this._itemsByName = new Map();
        this._jsonFilename = jsonFilename;
        this.clear();
    }
    /**
     * Clears all the settings, returning to an empty state.
     */
    ApprovedPackagesConfiguration.prototype.clear = function () {
        this._itemsByName.clear();
        this._loadedJson = {
            packages: []
        };
    };
    ApprovedPackagesConfiguration.prototype.getItemByName = function (packageName) {
        return this._itemsByName.get(packageName);
    };
    ApprovedPackagesConfiguration.prototype.addOrUpdatePackage = function (packageName, reviewCategory) {
        var item = this._itemsByName.get(packageName);
        if (!item) {
            item = new ApprovedPackagesItem();
            item.packageName = packageName;
            this._addItem(item);
        }
        if (reviewCategory) {
            item.allowedCategories.add(reviewCategory);
        }
    };
    /**
     * If the file exists, calls loadFromFile().
     */
    ApprovedPackagesConfiguration.prototype.tryLoadFromFile = function (approvedPackagesPolicyEnabled) {
        if (!fsx.existsSync(this._jsonFilename)) {
            return false;
        }
        this.loadFromFile();
        if (!approvedPackagesPolicyEnabled) {
            console.log("Warning: Ignoring \"" + path.basename(this._jsonFilename) + "\" because the"
                + " \"approvedPackagesPolicy\" setting was not specified in rush.json");
        }
        return false;
    };
    /**
     * Loads the configuration data from the filename that was passed to the constructor.
     */
    ApprovedPackagesConfiguration.prototype.loadFromFile = function () {
        var _this = this;
        if (!ApprovedPackagesConfiguration._validator) {
            var schemaFilename = path.join(__dirname, '../approved-packages.schema.json');
            ApprovedPackagesConfiguration._validator = JsonSchemaValidator_1.default.loadFromFile(schemaFilename);
        }
        var approvedPackagesJson = JsonFile_1.default.loadJsonFile(this._jsonFilename);
        ApprovedPackagesConfiguration._validator.validateObject(approvedPackagesJson, function (errorDescription) {
            throw new Error("Error parsing file '" + path.basename(_this._jsonFilename) + "':\n"
                + errorDescription);
        });
        this.clear();
        for (var _i = 0, _a = approvedPackagesJson.packages; _i < _a.length; _i++) {
            var browserPackage = _a[_i];
            this._addItemJson(browserPackage, this._jsonFilename);
        }
    };
    /**
     * Loads the configuration data to the filename that was passed to the constructor.
     */
    ApprovedPackagesConfiguration.prototype.saveToFile = function () {
        // Update the JSON structure that we already loaded, preserving any existing state
        // (which passed schema validation).
        this._loadedJson.packages = [];
        this.items.sort(function (a, b) {
            return a.packageName.localeCompare(b.packageName);
        });
        for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
            var item = _a[_i];
            // Sort the items from the set.  Too bad we can't use the new Array.from().
            var allowedCategories = Utilities_1.default.getSetAsArray(item.allowedCategories);
            allowedCategories.sort();
            var itemJson = {
                name: item.packageName,
                allowedCategories: allowedCategories
            };
            this._loadedJson.packages.push(itemJson);
        }
        // Save the file
        var body = JSON.stringify(this._loadedJson, undefined, 2) + '\n';
        // Unindent the allowedCategories array to improve readability
        body = body.replace(/("allowedCategories": +\[)([^\]]+)/g, function (substring) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            return args[0] + args[1].replace(/\s+/g, ' ');
        });
        // Add a header
        body = '// DO NOT ADD COMMENTS IN THIS FILE.'
            + '  They will be lost when the Rush tool resaves it.\n' + body;
        body = Utilities_1.default.getAllReplaced(body, '\n', '\r\n');
        fsx.writeFileSync(this._jsonFilename, body);
    };
    /**
     * Helper function only used by the constructor when loading the file.
     */
    ApprovedPackagesConfiguration.prototype._addItemJson = function (itemJson, jsonFilename) {
        if (this._itemsByName.has(itemJson.name)) {
            throw new Error("Error loading package review file " + jsonFilename + ":" + os.EOL
                + (" the name \"" + itemJson.name + "\" appears more than once"));
        }
        var item = new ApprovedPackagesItem();
        item.packageName = itemJson.name;
        if (itemJson.allowedCategories) {
            for (var _i = 0, _a = itemJson.allowedCategories; _i < _a.length; _i++) {
                var allowedCategory = _a[_i];
                item.allowedCategories.add(allowedCategory);
            }
        }
        this._addItem(item);
    };
    /**
     * Helper function that adds an already created ApprovedPackagesItem to the
     * list and set.
     */
    ApprovedPackagesConfiguration.prototype._addItem = function (item) {
        if (this._itemsByName.has(item.packageName)) {
            throw new Error('Duplicate key'); // this is a program bug
        }
        this.items.push(item);
        this._itemsByName.set(item.packageName, item);
    };
    return ApprovedPackagesConfiguration;
}());
ApprovedPackagesConfiguration._validator = undefined;
exports.ApprovedPackagesConfiguration = ApprovedPackagesConfiguration;

//# sourceMappingURL=ApprovedPackagesConfiguration.js.map
