import RushConfigurationProject, { IRushConfigurationProjectJson } from './RushConfigurationProject';
import { PinnedVersionsConfiguration } from './PinnedVersionsConfiguration';
import { ApprovedPackagesPolicy } from './ApprovedPackagesPolicy';
import EventHooks from './EventHooks';
import { VersionPolicyConfiguration } from './VersionPolicyConfiguration';
/**
 * Part of IRushConfigurationJson.
 */
export interface IApprovedPackagesPolicyJson {
    reviewCategories?: string[];
    ignoredNpmScopes?: string[];
}
/**
 * Part of IRushConfigurationJson.
 */
export interface IRushGitPolicyJson {
    allowedEmailRegExps?: string[];
    sampleEmail?: string;
}
/**
 * Part of IRushConfigurationJson.
 * @alpha
 */
export interface IEventHooksJson {
    /**
     * The list of scripts to run after every Rush build command finishes
     */
    postRushBuild?: string[];
}
/**
 * This represents the JSON data structure for the "rush.json" configuration file.
 * See rush.schema.json for documentation.
 */
export interface IRushConfigurationJson {
    $schema: string;
    npmVersion: string;
    rushMinimumVersion: string;
    nodeSupportedVersionRange?: string;
    projectFolderMinDepth?: number;
    projectFolderMaxDepth?: number;
    approvedPackagesPolicy?: IApprovedPackagesPolicyJson;
    gitPolicy?: IRushGitPolicyJson;
    telemetryEnabled?: boolean;
    projects: IRushConfigurationProjectJson[];
    eventHooks?: IEventHooksJson;
}
/**
 * This represents the JSON data structure for the "rush-link.json" data file.
 * @public
 */
export interface IRushLinkJson {
    localLinks: {
        [name: string]: string[];
    };
}
/**
 * This represents the Rush configuration for a repository, based on the Rush.json
 * configuration file.
 * @public
 */
export default class RushConfiguration {
    private _rushJsonFolder;
    private _commonFolder;
    private _commonTempFolder;
    private _commonRushConfigFolder;
    private _npmCacheFolder;
    private _npmTmpFolder;
    private _committedShrinkwrapFilename;
    private _tempShrinkwrapFilename;
    private _homeFolder;
    private _rushLinkJsonFilename;
    private _npmToolVersion;
    private _npmToolFilename;
    private _projectFolderMinDepth;
    private _projectFolderMaxDepth;
    private _approvedPackagesPolicy;
    private _gitAllowedEmailRegExps;
    private _gitSampleEmail;
    private _eventHooks;
    private _pinnedVersions;
    private _telemetryEnabled;
    private _projects;
    private _projectsByName;
    private _versionPolicyConfiguration;
    /**
     * Loads the configuration data from an Rush.json configuration file and returns
     * an RushConfiguration object.
     */
    static loadFromConfigurationFile(rushJsonFilename: string): RushConfiguration;
    static loadFromDefaultLocation(): RushConfiguration;
    /**
     * This generates the unique names that are used to create temporary projects
     * in the Rush common folder.
     * NOTE: sortedProjectJsons is sorted by the caller.
     */
    private static _generateTempNamesForProjects(sortedProjectJsons);
    /**
     * If someone adds a config file in the "common/rush/config" folder, it would be a bad
     * experience for Rush to silently ignore their file simply because they misspelled the
     * filename, or maybe it's an old format that's no longer supported.  The
     * _validateCommonRushConfigFolder() function makes sure that this folder only contains
     * recognized config files.
     */
    private static _validateCommonRushConfigFolder(commonRushConfigFolder);
    /**
     * The folder that contains rush.json for this project.
     */
    readonly rushJsonFolder: string;
    /**
     * The fully resolved path for the "common" folder where Rush will store settings that
     * affect all Rush projects.  This is always a subfolder of the folder containing "rush.json".
     * Example: "C:\MyRepo\common"
     */
    readonly commonFolder: string;
    /**
     * The folder where Rush's additional config files are stored.  This folder is always a
     * subfolder called "config\rush" inside the common folder.  (The "common\config" folder
     * is reserved for configuration files used by other tools.)  To avoid confusion or mistakes,
     * Rush will report an error if this this folder contains any unrecognized files.
     *
     * Example: "C:\MyRepo\common\config\rush"
     */
    readonly commonRushConfigFolder: string;
    /**
     * The folder where temporary files will be stored.  This is always a subfolder called "temp"
     * inside the common folder.
     * Example: "C:\MyRepo\common\temp"
     */
    readonly commonTempFolder: string;
    /**
     * The local folder that will store the NPM package cache.  Rush does not rely on the
     * NPM's default global cache folder, because NPM's caching implementation does not
     * reliably handle multiple processes.  (For example, if a build box is running
     * "rush install" simultaneously for two different working folders, it may fail randomly.)
     *
     * Example: "C:\MyRepo\common\temp\npm-cache"
     */
    readonly npmCacheFolder: string;
    /**
     * The local folder where NPM's temporary files will be written during installation.
     * Rush does not rely on the global default folder, because it may be on a different
     * hard disk.
     *
     * Example: "C:\MyRepo\common\temp\npm-tmp"
     */
    readonly npmTmpFolder: string;
    /**
     * The filename of the NPM shrinkwrap file that is tracked e.g. by Git.  (The "rush install"
     * command uses a temporary copy, whose path is tempShrinkwrapFilename.)
     * This property merely reports the filename; the file itself may not actually exist.
     * Example: "C:\MyRepo\common\npm-shrinkwrap.json"
     */
    readonly committedShrinkwrapFilename: string;
    /**
     * The filename of the temporary NPM shrinkwrap file that is used by "rush install".
     * (The master copy is tempShrinkwrapFilename.)
     * This property merely reports the filename; the file itself may not actually exist.
     * Example: "C:\MyRepo\common\temp\npm-shrinkwrap.json"
     */
    readonly tempShrinkwrapFilename: string;
    /**
     * The absolute path to the home directory for the current user.  On Windows,
     * it would be something like "C:\Users\YourName".
     */
    readonly homeFolder: string;
    /**
     * The filename of the build dependency data file.  By default this is
     * called 'rush-link.json' resides in the Rush common folder.
     * Its data structure is defined by IRushLinkJson.
     *
     * Example: "C:\MyRepo\common\temp\rush-link.json"
     */
    readonly rushLinkJsonFilename: string;
    /**
     * The version of the locally installed NPM tool.  (Example: "1.2.3")
     */
    readonly npmToolVersion: string;
    /**
     * The absolute path to the locally installed NPM tool.  If "rush install" has not
     * been run, then this file may not exist yet.
     * Example: "C:\MyRepo\common\temp\npm-local\node_modules\.bin\npm"
     */
    readonly npmToolFilename: string;
    /**
     * The minimum allowable folder depth for the projectFolder field in the rush.json file.
     * This setting provides a way for repository maintainers to discourage nesting of project folders
     * that makes the directory tree more difficult to navigate.  The default value is 2,
     * which implements a standard 2-level hierarchy of <categoryFolder>/<projectFolder>/package.json.
     */
    readonly projectFolderMinDepth: number;
    /**
     * The maximum allowable folder depth for the projectFolder field in the rush.json file.
     * This setting provides a way for repository maintainers to discourage nesting of project folders
     * that makes the directory tree more difficult to navigate.  The default value is 2,
     * which implements on a standard convention of <categoryFolder>/<projectFolder>/package.json.
     */
    readonly projectFolderMaxDepth: number;
    /**
     * The "approvedPackagesPolicy" settings.
     */
    readonly approvedPackagesPolicy: ApprovedPackagesPolicy;
    /**
     * [Part of the "gitPolicy" feature.]
     * A list of regular expressions describing allowable e-mail patterns for Git commits.
     * They are case-insensitive anchored JavaScript RegExps.
     * Example: ".*@example\.com"
     * This array will never be undefined.
     */
    readonly gitAllowedEmailRegExps: string[];
    /**
     * [Part of the "gitPolicy" feature.]
     * An example valid e-mail address that conforms to one of the allowedEmailRegExps.
     * Example: "foxtrot@example\.com"
     * This will never be undefined, and will always be nonempty if gitAllowedEmailRegExps is used.
     */
    readonly gitSampleEmail: string;
    /**
     * Indicates whether telemetry collection is enabled for Rush runs.
     * @alpha
     */
    readonly telemetryEnabled: boolean;
    readonly projects: RushConfigurationProject[];
    readonly projectsByName: Map<string, RushConfigurationProject>;
    /**
     * The PinnedVersionsConfiguration object.  If the pinnedVersions.json file is missing,
     * this property will NOT be undefined.  Instead it will be initialized in an empty state,
     * and calling PinnedVersionsConfiguration.save() will create the file.
     */
    readonly pinnedVersions: PinnedVersionsConfiguration;
    /**
     * The rush hooks. It allows cusomized scripts to run at the specified point.
     * @alpha
     */
    readonly eventHooks: EventHooks;
    /**
     * Looks up a project in the projectsByName map.  If the project is not found,
     * then undefined is returned.
     */
    getProjectByName(projectName: string): RushConfigurationProject;
    /**
     * This is used e.g. by command-line interfaces such as "rush build --to example".
     * If "example" is not a project name, then it also looks for a scoped name
     * like "@something/example".  If exactly one project matches this heuristic, it
     * is returned.  Otherwise, undefined is returned.
     */
    findProjectByShorthandName(shorthandProjectName: string): RushConfigurationProject;
    /**
     * Looks up a project by its RushConfigurationProject.tempProjectName field.
     * @returns The found project, or undefined if no match was found.
     */
    findProjectByTempName(tempProjectName: string): RushConfigurationProject | undefined;
    /**
     * @alpha
     */
    readonly versionPolicyConfiguration: VersionPolicyConfiguration;
    private _populateDownstreamDependencies(dependencies, packageName);
    /**
     * Use RushConfiguration.loadFromConfigurationFile() or Use RushConfiguration.loadFromDefaultLocation()
     * instead.
     */
    private constructor(rushConfigurationJson, rushJsonFilename);
}
