// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var fsx = require("fs-extra");
var JsonFile_1 = require("../utilities/JsonFile");
var Utilities_1 = require("../utilities/Utilities");
var RushConstants_1 = require("../RushConstants");
/**
 * This represents the configuration of a project that is built by Rush, based on
 * the Rush.json configuration file.
 * @public
 */
var RushConfigurationProject = (function () {
    /** @internal */
    function RushConfigurationProject(projectJson, rushConfiguration, tempProjectName) {
        this._packageName = projectJson.packageName;
        this._projectRelativeFolder = projectJson.projectFolder;
        // For example, the depth of "a/b/c" would be 3.  The depth of "a" is 1.
        var projectFolderDepth = projectJson.projectFolder.split('/').length;
        if (projectFolderDepth < rushConfiguration.projectFolderMinDepth) {
            throw new Error("To keep things organized, this repository has a projectFolderMinDepth policy"
                + (" requiring project folders to be at least " + rushConfiguration.projectFolderMinDepth + " levels deep.")
                + ("  Problem folder: \"" + projectJson.projectFolder + "\""));
        }
        if (projectFolderDepth > rushConfiguration.projectFolderMaxDepth) {
            throw new Error("To keep things organized, this repository has a projectFolderMaxDepth policy"
                + (" preventing project folders from being deeper than " + rushConfiguration.projectFolderMaxDepth + " levels.")
                + ("  Problem folder:  \"" + projectJson.projectFolder + "\""));
        }
        this._projectFolder = path.join(rushConfiguration.rushJsonFolder, projectJson.projectFolder);
        if (!fsx.existsSync(this._projectFolder)) {
            throw new Error("Project folder not found: " + projectJson.projectFolder);
        }
        // Are we using a package review file?
        if (rushConfiguration.approvedPackagesPolicy.enabled) {
            // If so, then every project needs to have a reviewCategory that was defined
            // by the reviewCategories array.
            if (!projectJson.reviewCategory) {
                throw new Error("The \"approvedPackagesPolicy\" feature is enabled rush.json, but a reviewCategory" +
                    (" was not specified for the project \"" + projectJson.packageName + "\"."));
            }
            if (!rushConfiguration.approvedPackagesPolicy.reviewCategories.has(projectJson.reviewCategory)) {
                throw new Error("The project \"" + projectJson.packageName + "\" specifies its reviewCategory as"
                    + ("\"" + projectJson.reviewCategory + "\" which is not one of the defined reviewCategories."));
            }
            this._reviewCategory = projectJson.reviewCategory;
        }
        var packageJsonFilename = path.join(this._projectFolder, 'package.json');
        this._packageJson = JsonFile_1.default.loadJsonFile(packageJsonFilename);
        if (this._packageJson.name !== this._packageName) {
            throw new Error("The package name \"" + this._packageName + "\" specified in rush.json does not"
                + (" match the name \"" + this._packageJson.name + "\" from package.json"));
        }
        this._tempProjectName = tempProjectName;
        // The "rushProject.tempProjectName" is guaranteed to be unique name (e.g. by adding the "-2"
        // suffix).  Even after we strip the NPM scope, it will still be unique.
        // Example: "my-project-2"
        var unscopedTempProjectName = Utilities_1.default.parseScopedPackageName(tempProjectName).name;
        // Example: "C:\MyRepo\common\temp\projects\my-project-2\package.json"
        this._tempPackageJsonFilename = path.join(rushConfiguration.commonTempFolder, RushConstants_1.RushConstants.rushTempProjectsFolderName, unscopedTempProjectName, RushConstants_1.RushConstants.packageJsonFilename);
        this._cyclicDependencyProjects = new Set();
        if (projectJson.cyclicDependencyProjects) {
            for (var _i = 0, _a = projectJson.cyclicDependencyProjects; _i < _a.length; _i++) {
                var cyclicDependencyProject = _a[_i];
                this._cyclicDependencyProjects.add(cyclicDependencyProject);
            }
        }
        this._downstreamDependencyProjects = [];
        this._shouldPublish = !!projectJson.shouldPublish;
        this._versionPolicyName = projectJson.versionPolicyName;
    }
    Object.defineProperty(RushConfigurationProject.prototype, "packageName", {
        /**
         * The name of the NPM package.  An error is reported if this name is not
         * identical to packageJson.name.
         *
         * Example: "@scope/MyProject"
         */
        get: function () {
            return this._packageName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RushConfigurationProject.prototype, "projectFolder", {
        /**
         * The full path of the folder that contains the project to be built by Rush.
         *
         * Example: "C:\MyRepo\libraries\my-project"
         */
        get: function () {
            return this._projectFolder;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RushConfigurationProject.prototype, "projectRelativeFolder", {
        /**
         * The relative path of the folder that contains the project to be built by Rush.
         *
         * Example: "libraries\my-project"
         */
        get: function () {
            return this._projectRelativeFolder;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RushConfigurationProject.prototype, "reviewCategory", {
        /**
         * The review category name, or undefined if no category was assigned.
         * This name must be one of the valid choices listed in RushConfiguration.reviewCategories.
         */
        get: function () {
            return this._reviewCategory;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RushConfigurationProject.prototype, "cyclicDependencyProjects", {
        /**
         * A list of local projects that appear as devDependencies for this project, but cannot be
         * locally linked because it would create a cyclic dependency; instead, the last published
         * version will be installed in the Common folder.
         *
         * These are package names that would be found by RushConfiguration.getProjectByName().
         */
        get: function () {
            return this._cyclicDependencyProjects;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RushConfigurationProject.prototype, "downstreamDependencyProjects", {
        /**
         * A list of projects within the Rush configuration which directly depend on this package.
         */
        get: function () {
            return this._downstreamDependencyProjects;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RushConfigurationProject.prototype, "packageJson", {
        /**
         * The parsed NPM "package.json" file from projectFolder.
         */
        get: function () {
            return this._packageJson;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RushConfigurationProject.prototype, "tempProjectName", {
        /**
         * The unique name for the temporary project that will be generated in the Common folder.
         * For example, if the project name is "@scope/MyProject", the temporary project name
         * might be "@rush-temp/MyProject-2".
         *
         * Example: "@rush-temp/MyProject-2"
         */
        get: function () {
            return this._tempProjectName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RushConfigurationProject.prototype, "tempPackageJsonFilename", {
        /**
         * The absolute path of the package.json file for the temp project.
         *
         * Example: "C:\MyRepo\common\temp\projects\my-project-2\package.json"
         */
        get: function () {
            return this._tempPackageJsonFilename;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RushConfigurationProject.prototype, "shouldPublish", {
        /**
         * A flag which indicates whether changes to this project should be published. This controls
         * whether or not the project would show up when running `rush change`, and whether or not it
         * should be published during `rush publish`.
         */
        get: function () {
            return this._shouldPublish || !!this._versionPolicyName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RushConfigurationProject.prototype, "versionPolicyName", {
        /**
         * The version policy used by this project.
         * @alpha
         */
        get: function () {
            return this._versionPolicyName;
        },
        enumerable: true,
        configurable: true
    });
    return RushConfigurationProject;
}());
exports.default = RushConfigurationProject;

//# sourceMappingURL=RushConfigurationProject.js.map
