// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var fsx = require("fs-extra");
var JsonSchemaValidator_1 = require("../utilities/JsonSchemaValidator");
var JsonFile_1 = require("../utilities/JsonFile");
var VersionPolicy_1 = require("./VersionPolicy");
/**
 * @alpha
 */
var VersionPolicyConfiguration = (function () {
    function VersionPolicyConfiguration(_jsonFileName) {
        this._jsonFileName = _jsonFileName;
        this._versionPolicies = new Map();
        this._loadFile();
    }
    /**
     * Gets the version policy by its name.
     * Throws error if the version policy is not found.
     * @param policyName - Name of the version policy
     * @alpha
     */
    VersionPolicyConfiguration.prototype.getVersionPolicy = function (policyName) {
        var policy = this._versionPolicies.get(policyName);
        if (!policy) {
            throw new Error("Failed to find version policy by name '" + policyName + "'");
        }
        return policy;
    };
    Object.defineProperty(VersionPolicyConfiguration.prototype, "versionPolicies", {
        /**
         * Gets all the version policies
         * @alpha
         */
        get: function () {
            return this._versionPolicies;
        },
        enumerable: true,
        configurable: true
    });
    VersionPolicyConfiguration.prototype._loadFile = function () {
        var _this = this;
        if (!fsx.existsSync(this._jsonFileName)) {
            return;
        }
        var versionPolicyJson = JsonFile_1.default.loadJsonFile(this._jsonFileName);
        var schemaPath = path.join(__dirname, '../version-policies.schema.json');
        var validator = JsonSchemaValidator_1.default.loadFromFile(schemaPath);
        validator.validateObject(versionPolicyJson, function (errorDescription) {
            throw new Error("Error parsing file '" + path.basename(_this._jsonFileName) + "':\n"
                + errorDescription);
        });
        versionPolicyJson.forEach(function (policyJson) {
            var policy = VersionPolicy_1.VersionPolicy.load(policyJson);
            if (policy) {
                _this._versionPolicies.set(policy.policyName, policy);
            }
        });
    };
    return VersionPolicyConfiguration;
}());
exports.VersionPolicyConfiguration = VersionPolicyConfiguration;

//# sourceMappingURL=VersionPolicyConfiguration.js.map
