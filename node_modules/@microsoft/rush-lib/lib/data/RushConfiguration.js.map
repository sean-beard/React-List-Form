{"version":3,"sources":["data/RushConfiguration.ts"],"names":[],"mappings":"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","file":"data/RushConfiguration.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport * as fsx from 'fs-extra';\r\nimport * as os from 'os';\r\nimport * as semver from 'semver';\r\n\r\nimport rushVersion from '../rushVersion';\r\nimport JsonFile from '../utilities/JsonFile';\r\nimport RushConfigurationProject, { IRushConfigurationProjectJson } from './RushConfigurationProject';\r\nimport { PinnedVersionsConfiguration } from './PinnedVersionsConfiguration';\r\nimport Utilities from '../utilities/Utilities';\r\nimport { RushConstants } from '../RushConstants';\r\nimport { ApprovedPackagesPolicy } from './ApprovedPackagesPolicy';\r\nimport JsonSchemaValidator from '../utilities/JsonSchemaValidator';\r\nimport EventHooks from './EventHooks';\r\nimport { VersionPolicyConfiguration } from './VersionPolicyConfiguration';\r\n\r\n/**\r\n * A list of known config filenames that are expected to appear in the \"./common/config/rush\" folder.\r\n * To avoid confusion/mistakes, any extra files will be reported as an error.\r\n */\r\nconst knownRushConfigFilenames: string[] = [\r\n  '.npmrc',\r\n  RushConstants.npmShrinkwrapFilename,\r\n  RushConstants.pinnedVersionsFilename,\r\n  RushConstants.browserApprovedPackagesFilename,\r\n  RushConstants.nonbrowserApprovedPackagesFilename,\r\n  RushConstants.versionPoliciesFileName\r\n];\r\n\r\n/**\r\n * Part of IRushConfigurationJson.\r\n */\r\nexport interface IApprovedPackagesPolicyJson {\r\n  reviewCategories?: string[];\r\n  ignoredNpmScopes?: string[];\r\n}\r\n\r\n/**\r\n * Part of IRushConfigurationJson.\r\n */\r\nexport interface IRushGitPolicyJson {\r\n  allowedEmailRegExps?: string[];\r\n  sampleEmail?: string;\r\n}\r\n\r\n/**\r\n * Part of IRushConfigurationJson.\r\n * @alpha\r\n */\r\nexport interface IEventHooksJson {\r\n  /**\r\n   * The list of scripts to run after every Rush build command finishes\r\n   */\r\n  postRushBuild?: string[];\r\n}\r\n\r\n/**\r\n * This represents the JSON data structure for the \"rush.json\" configuration file.\r\n * See rush.schema.json for documentation.\r\n */\r\nexport interface IRushConfigurationJson {\r\n  $schema: string;\r\n  npmVersion: string;\r\n  rushMinimumVersion: string;\r\n  nodeSupportedVersionRange?: string;\r\n  projectFolderMinDepth?: number;\r\n  projectFolderMaxDepth?: number;\r\n  approvedPackagesPolicy?: IApprovedPackagesPolicyJson;\r\n  gitPolicy?: IRushGitPolicyJson;\r\n  telemetryEnabled?: boolean;\r\n  projects: IRushConfigurationProjectJson[];\r\n  eventHooks?: IEventHooksJson;\r\n}\r\n\r\n/**\r\n * This represents the JSON data structure for the \"rush-link.json\" data file.\r\n * @public\r\n */\r\nexport interface IRushLinkJson {\r\n  localLinks: {\r\n    [name: string]: string[]\r\n  };\r\n}\r\n\r\n/**\r\n * This represents the Rush configuration for a repository, based on the Rush.json\r\n * configuration file.\r\n * @public\r\n */\r\nexport default class RushConfiguration {\r\n  private _rushJsonFolder: string;\r\n  private _commonFolder: string;\r\n  private _commonTempFolder: string;\r\n  private _commonRushConfigFolder: string;\r\n  private _npmCacheFolder: string;\r\n  private _npmTmpFolder: string;\r\n  private _committedShrinkwrapFilename: string;\r\n  private _tempShrinkwrapFilename: string;\r\n  private _homeFolder: string;\r\n  private _rushLinkJsonFilename: string;\r\n  private _npmToolVersion: string;\r\n  private _npmToolFilename: string;\r\n  private _projectFolderMinDepth: number;\r\n  private _projectFolderMaxDepth: number;\r\n\r\n  // \"approvedPackagesPolicy\" feature\r\n  private _approvedPackagesPolicy: ApprovedPackagesPolicy;\r\n\r\n  // \"gitPolicy\" feature\r\n  private _gitAllowedEmailRegExps: string[];\r\n  private _gitSampleEmail: string;\r\n\r\n  // Rush hooks\r\n  private _eventHooks: EventHooks;\r\n\r\n  private _pinnedVersions: PinnedVersionsConfiguration;\r\n\r\n  private _telemetryEnabled: boolean;\r\n\r\n  private _projects: RushConfigurationProject[];\r\n  private _projectsByName: Map<string, RushConfigurationProject>;\r\n\r\n  private _versionPolicyConfiguration: VersionPolicyConfiguration;\r\n\r\n  /**\r\n   * Loads the configuration data from an Rush.json configuration file and returns\r\n   * an RushConfiguration object.\r\n   */\r\n  public static loadFromConfigurationFile(rushJsonFilename: string): RushConfiguration {\r\n    const rushConfigurationJson: IRushConfigurationJson = JsonFile.loadJsonFile(rushJsonFilename);\r\n\r\n    // Check the Rush version *before* we validate the schema, since if the version is outdated\r\n    // then the schema may have changed.\r\n    const rushMinimumVersion: string = rushConfigurationJson.rushMinimumVersion;\r\n    // If the version is missing or malformed, fall through and let the schema handle it.\r\n    if (rushMinimumVersion && semver.valid(rushMinimumVersion)) {\r\n      if (semver.lt(rushVersion, rushMinimumVersion)) {\r\n        throw new Error(`Your rush tool is version ${rushVersion}, but rush.json`\r\n          + ` requires version ${rushConfigurationJson.rushMinimumVersion} or newer.  To upgrade,`\r\n          + ` run \"npm install @microsoft/rush -g\".`);\r\n      }\r\n    }\r\n\r\n    const rushSchemaFilename: string = path.join(__dirname, '../rush.schema.json');\r\n    const validator: JsonSchemaValidator = JsonSchemaValidator.loadFromFile(rushSchemaFilename);\r\n\r\n    validator.validateObject(rushConfigurationJson, (errorDescription: string) => {\r\n      const errorMessage: string = `Error parsing file '${rushJsonFilename}':`\r\n        + os.EOL + errorDescription;\r\n\r\n      throw new Error(errorMessage);\r\n    });\r\n\r\n    return new RushConfiguration(rushConfigurationJson, rushJsonFilename);\r\n  }\r\n\r\n  public static loadFromDefaultLocation(): RushConfiguration {\r\n    let currentFolder: string = process.cwd();\r\n\r\n    // Look upwards at parent folders until we find a folder containing rush.json\r\n    for (let i: number = 0; i < 10; ++i) {\r\n      const rushJsonFilename: string = path.join(currentFolder, 'rush.json');\r\n\r\n      if (fsx.existsSync(rushJsonFilename)) {\r\n        if (i > 0) {\r\n          console.log('Found configuration in ' + rushJsonFilename);\r\n        }\r\n        console.log('');\r\n        return RushConfiguration.loadFromConfigurationFile(rushJsonFilename);\r\n      }\r\n\r\n      const parentFolder: string = path.dirname(currentFolder);\r\n      if (parentFolder === currentFolder) {\r\n        break;\r\n      }\r\n      currentFolder = parentFolder;\r\n    }\r\n    throw new Error('Unable to find rush.json configuration file');\r\n  }\r\n\r\n  /**\r\n   * This generates the unique names that are used to create temporary projects\r\n   * in the Rush common folder.\r\n   * NOTE: sortedProjectJsons is sorted by the caller.\r\n   */\r\n  private static _generateTempNamesForProjects(sortedProjectJsons: IRushConfigurationProjectJson[]):\r\n    Map<IRushConfigurationProjectJson, string> {\r\n\r\n    const tempNamesByProject: Map<IRushConfigurationProjectJson, string> =\r\n      new Map<IRushConfigurationProjectJson, string>();\r\n    const usedTempNames: Set<string> = new Set<string>();\r\n\r\n    // NOTE: projectJsons was already sorted in alphabetical order by the caller.\r\n    for (const projectJson of sortedProjectJsons) {\r\n      // If the name is \"@ms/MyProject\", extract the \"MyProject\" part\r\n      const unscopedName: string = Utilities.parseScopedPackageName(projectJson.packageName).name;\r\n\r\n      // Generate a unique like name \"@rush-temp/MyProject\", or \"@rush-temp/MyProject-2\" if\r\n      // there is a naming conflict\r\n      let counter: number = 0;\r\n      let tempProjectName: string = `${RushConstants.rushTempNpmScope}/${unscopedName}`;\r\n      while (usedTempNames.has(tempProjectName)) {\r\n        ++counter;\r\n        tempProjectName = `${RushConstants.rushTempNpmScope}/${unscopedName}-${counter}`;\r\n      }\r\n      usedTempNames.add(tempProjectName);\r\n      tempNamesByProject.set(projectJson, tempProjectName);\r\n    }\r\n\r\n    return tempNamesByProject;\r\n  }\r\n\r\n  /**\r\n   * If someone adds a config file in the \"common/rush/config\" folder, it would be a bad\r\n   * experience for Rush to silently ignore their file simply because they misspelled the\r\n   * filename, or maybe it's an old format that's no longer supported.  The\r\n   * _validateCommonRushConfigFolder() function makes sure that this folder only contains\r\n   * recognized config files.\r\n   */\r\n  private static _validateCommonRushConfigFolder(commonRushConfigFolder: string): void {\r\n    if (!fsx.existsSync(commonRushConfigFolder)) {\r\n      console.log(`Creating folder: ${commonRushConfigFolder}`);\r\n      fsx.mkdirsSync(commonRushConfigFolder);\r\n      return;\r\n    }\r\n\r\n    const filenames: string[] = fsx.readdirSync(commonRushConfigFolder);\r\n    for (const filename of filenames) {\r\n      const resolvedFilename: string = path.resolve(commonRushConfigFolder, filename);\r\n\r\n      // Ignore things that aren't actual files\r\n      const stat: fsx.Stats = fsx.lstatSync(resolvedFilename);\r\n      if (!stat.isFile() && !stat.isSymbolicLink()) {\r\n        continue;\r\n      }\r\n\r\n      // Ignore harmless file extensions\r\n      const fileExtension: string = path.extname(filename);\r\n      if (['.bak', '.disabled', '.md', '.old', '.orig'].indexOf(fileExtension) >= 0) {\r\n        continue;\r\n      }\r\n\r\n      const knownSet: Set<string> = new Set<string>(knownRushConfigFilenames.map(x => x.toUpperCase()));\r\n\r\n      // Is the filename something we know?  If not, report an error.\r\n      if (!knownSet.has(filename.toUpperCase())) {\r\n        throw new Error(`An unrecognized file \"${filename}\" was found in the Rush config folder:`\r\n          + ` ${commonRushConfigFolder}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The folder that contains rush.json for this project.\r\n   */\r\n  public get rushJsonFolder(): string {\r\n    return this._rushJsonFolder;\r\n  }\r\n\r\n  /**\r\n   * The fully resolved path for the \"common\" folder where Rush will store settings that\r\n   * affect all Rush projects.  This is always a subfolder of the folder containing \"rush.json\".\r\n   * Example: \"C:\\MyRepo\\common\"\r\n   */\r\n  public get commonFolder(): string {\r\n    return this._commonFolder;\r\n  }\r\n\r\n  /**\r\n   * The folder where Rush's additional config files are stored.  This folder is always a\r\n   * subfolder called \"config\\rush\" inside the common folder.  (The \"common\\config\" folder\r\n   * is reserved for configuration files used by other tools.)  To avoid confusion or mistakes,\r\n   * Rush will report an error if this this folder contains any unrecognized files.\r\n   *\r\n   * Example: \"C:\\MyRepo\\common\\config\\rush\"\r\n   */\r\n  public get commonRushConfigFolder(): string {\r\n    return this._commonRushConfigFolder;\r\n  }\r\n\r\n  /**\r\n   * The folder where temporary files will be stored.  This is always a subfolder called \"temp\"\r\n   * inside the common folder.\r\n   * Example: \"C:\\MyRepo\\common\\temp\"\r\n   */\r\n  public get commonTempFolder(): string {\r\n    return this._commonTempFolder;\r\n  }\r\n\r\n  /**\r\n   * The local folder that will store the NPM package cache.  Rush does not rely on the\r\n   * NPM's default global cache folder, because NPM's caching implementation does not\r\n   * reliably handle multiple processes.  (For example, if a build box is running\r\n   * \"rush install\" simultaneously for two different working folders, it may fail randomly.)\r\n   *\r\n   * Example: \"C:\\MyRepo\\common\\temp\\npm-cache\"\r\n   */\r\n  public get npmCacheFolder(): string {\r\n    return this._npmCacheFolder;\r\n  }\r\n\r\n  /**\r\n   * The local folder where NPM's temporary files will be written during installation.\r\n   * Rush does not rely on the global default folder, because it may be on a different\r\n   * hard disk.\r\n   *\r\n   * Example: \"C:\\MyRepo\\common\\temp\\npm-tmp\"\r\n   */\r\n  public get npmTmpFolder(): string {\r\n    return this._npmTmpFolder;\r\n  }\r\n\r\n  /**\r\n   * The filename of the NPM shrinkwrap file that is tracked e.g. by Git.  (The \"rush install\"\r\n   * command uses a temporary copy, whose path is tempShrinkwrapFilename.)\r\n   * This property merely reports the filename; the file itself may not actually exist.\r\n   * Example: \"C:\\MyRepo\\common\\npm-shrinkwrap.json\"\r\n   */\r\n  public get committedShrinkwrapFilename(): string {\r\n    return this._committedShrinkwrapFilename;\r\n  }\r\n\r\n  /**\r\n   * The filename of the temporary NPM shrinkwrap file that is used by \"rush install\".\r\n   * (The master copy is tempShrinkwrapFilename.)\r\n   * This property merely reports the filename; the file itself may not actually exist.\r\n   * Example: \"C:\\MyRepo\\common\\temp\\npm-shrinkwrap.json\"\r\n   */\r\n  public get tempShrinkwrapFilename(): string {\r\n    return this._tempShrinkwrapFilename;\r\n  }\r\n\r\n  /**\r\n   * The absolute path to the home directory for the current user.  On Windows,\r\n   * it would be something like \"C:\\Users\\YourName\".\r\n   */\r\n  public get homeFolder(): string {\r\n    return this._homeFolder;\r\n  }\r\n\r\n  /**\r\n   * The filename of the build dependency data file.  By default this is\r\n   * called 'rush-link.json' resides in the Rush common folder.\r\n   * Its data structure is defined by IRushLinkJson.\r\n   *\r\n   * Example: \"C:\\MyRepo\\common\\temp\\rush-link.json\"\r\n   */\r\n  public get rushLinkJsonFilename(): string {\r\n    return this._rushLinkJsonFilename;\r\n  }\r\n\r\n  /**\r\n   * The version of the locally installed NPM tool.  (Example: \"1.2.3\")\r\n   */\r\n  public get npmToolVersion(): string {\r\n    return this._npmToolVersion;\r\n  }\r\n\r\n  /**\r\n   * The absolute path to the locally installed NPM tool.  If \"rush install\" has not\r\n   * been run, then this file may not exist yet.\r\n   * Example: \"C:\\MyRepo\\common\\temp\\npm-local\\node_modules\\.bin\\npm\"\r\n   */\r\n  public get npmToolFilename(): string {\r\n    return this._npmToolFilename;\r\n  }\r\n\r\n  /**\r\n   * The minimum allowable folder depth for the projectFolder field in the rush.json file.\r\n   * This setting provides a way for repository maintainers to discourage nesting of project folders\r\n   * that makes the directory tree more difficult to navigate.  The default value is 2,\r\n   * which implements a standard 2-level hierarchy of <categoryFolder>/<projectFolder>/package.json.\r\n   */\r\n  public get projectFolderMinDepth(): number {\r\n    return this._projectFolderMinDepth;\r\n  }\r\n\r\n  /**\r\n   * The maximum allowable folder depth for the projectFolder field in the rush.json file.\r\n   * This setting provides a way for repository maintainers to discourage nesting of project folders\r\n   * that makes the directory tree more difficult to navigate.  The default value is 2,\r\n   * which implements on a standard convention of <categoryFolder>/<projectFolder>/package.json.\r\n   */\r\n  public get projectFolderMaxDepth(): number {\r\n    return this._projectFolderMaxDepth;\r\n  }\r\n\r\n  /**\r\n   * The \"approvedPackagesPolicy\" settings.\r\n   */\r\n  public get approvedPackagesPolicy(): ApprovedPackagesPolicy {\r\n    return this._approvedPackagesPolicy;\r\n  }\r\n\r\n  /**\r\n   * [Part of the \"gitPolicy\" feature.]\r\n   * A list of regular expressions describing allowable e-mail patterns for Git commits.\r\n   * They are case-insensitive anchored JavaScript RegExps.\r\n   * Example: \".*@example\\.com\"\r\n   * This array will never be undefined.\r\n   */\r\n  public get gitAllowedEmailRegExps(): string[] {\r\n    return this._gitAllowedEmailRegExps;\r\n  }\r\n\r\n  /**\r\n   * [Part of the \"gitPolicy\" feature.]\r\n   * An example valid e-mail address that conforms to one of the allowedEmailRegExps.\r\n   * Example: \"foxtrot@example\\.com\"\r\n   * This will never be undefined, and will always be nonempty if gitAllowedEmailRegExps is used.\r\n   */\r\n  public get gitSampleEmail(): string {\r\n    return this._gitSampleEmail;\r\n  }\r\n\r\n  /**\r\n   * Indicates whether telemetry collection is enabled for Rush runs.\r\n   * @alpha\r\n   */\r\n  public get telemetryEnabled(): boolean {\r\n    return this._telemetryEnabled;\r\n  }\r\n\r\n  public get projects(): RushConfigurationProject[] {\r\n    return this._projects;\r\n  }\r\n\r\n  public get projectsByName(): Map<string, RushConfigurationProject> {\r\n    return this._projectsByName;\r\n  }\r\n\r\n  /**\r\n   * The PinnedVersionsConfiguration object.  If the pinnedVersions.json file is missing,\r\n   * this property will NOT be undefined.  Instead it will be initialized in an empty state,\r\n   * and calling PinnedVersionsConfiguration.save() will create the file.\r\n   */\r\n  public get pinnedVersions(): PinnedVersionsConfiguration {\r\n    return this._pinnedVersions;\r\n  }\r\n\r\n  /**\r\n   * The rush hooks. It allows cusomized scripts to run at the specified point.\r\n   * @alpha\r\n   */\r\n  public get eventHooks(): EventHooks {\r\n    return this._eventHooks;\r\n  }\r\n\r\n  /**\r\n   * Looks up a project in the projectsByName map.  If the project is not found,\r\n   * then undefined is returned.\r\n   */\r\n  public getProjectByName(projectName: string): RushConfigurationProject {\r\n    return this._projectsByName.get(projectName);\r\n  }\r\n\r\n  /**\r\n   * This is used e.g. by command-line interfaces such as \"rush build --to example\".\r\n   * If \"example\" is not a project name, then it also looks for a scoped name\r\n   * like \"@something/example\".  If exactly one project matches this heuristic, it\r\n   * is returned.  Otherwise, undefined is returned.\r\n   */\r\n  public findProjectByShorthandName(shorthandProjectName: string): RushConfigurationProject {\r\n    // Is there an exact match?\r\n    let result: RushConfigurationProject = this._projectsByName.get(shorthandProjectName);\r\n    if (result) {\r\n      return result;\r\n    }\r\n\r\n    // Is there an approximate match?\r\n    for (const project of this._projects) {\r\n      if (Utilities.parseScopedPackageName(project.packageName).name === shorthandProjectName) {\r\n        if (result) {\r\n          // Ambiguous -- there is more than one match\r\n          return undefined;\r\n        } else {\r\n          result = project;\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Looks up a project by its RushConfigurationProject.tempProjectName field.\r\n   * @returns The found project, or undefined if no match was found.\r\n   */\r\n  public findProjectByTempName(tempProjectName: string): RushConfigurationProject | undefined {\r\n    // Is there an approximate match?\r\n    for (const project of this._projects) {\r\n      if (project.tempProjectName === tempProjectName) {\r\n        return project;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @alpha\r\n   */\r\n  public get versionPolicyConfiguration(): VersionPolicyConfiguration {\r\n    return this._versionPolicyConfiguration;\r\n  }\r\n\r\n  private _populateDownstreamDependencies(dependencies: { [key: string]: string }, packageName: string): void {\r\n    if (!dependencies) {\r\n      return;\r\n    }\r\n    Object.keys(dependencies).forEach(dependencyName => {\r\n      const depProject: RushConfigurationProject = this._projectsByName.get(dependencyName);\r\n\r\n      if (depProject) {\r\n        depProject.downstreamDependencyProjects.push(packageName);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Use RushConfiguration.loadFromConfigurationFile() or Use RushConfiguration.loadFromDefaultLocation()\r\n   * instead.\r\n   */\r\n  private constructor(rushConfigurationJson: IRushConfigurationJson, rushJsonFilename: string) {\r\n    if (rushConfigurationJson.nodeSupportedVersionRange) {\r\n      if (!semver.validRange(rushConfigurationJson.nodeSupportedVersionRange)) {\r\n        throw new Error('Error parsing the node-semver expression in the \"nodeSupportedVersionRange\"'\r\n          + ` field from rush.json: \"${rushConfigurationJson.nodeSupportedVersionRange}\"`);\r\n      }\r\n      if (!semver.satisfies(process.version, rushConfigurationJson.nodeSupportedVersionRange)) {\r\n        throw new Error(`Your dev environment is running Node.js version ${process.version} which does`\r\n          + ` not meet the requirements for building this repository.  (The rush.json configuration`\r\n          + ` requires nodeSupportedVersionRange=\"${rushConfigurationJson.nodeSupportedVersionRange}\")`);\r\n      }\r\n    }\r\n\r\n    this._rushJsonFolder = path.dirname(rushJsonFilename);\r\n\r\n    this._commonFolder = path.resolve(path.join(this._rushJsonFolder, RushConstants.commonFolderName));\r\n\r\n    this._commonRushConfigFolder = path.join(this._commonFolder, 'config', 'rush');\r\n    RushConfiguration._validateCommonRushConfigFolder(this._commonRushConfigFolder);\r\n\r\n    this._commonTempFolder = path.join(this._commonFolder, RushConstants.rushTempFolderName);\r\n    this._npmCacheFolder = path.resolve(path.join(this._commonTempFolder, 'npm-cache'));\r\n    this._npmTmpFolder = path.resolve(path.join(this._commonTempFolder, 'npm-tmp'));\r\n\r\n    this._committedShrinkwrapFilename = path.join(this._commonRushConfigFolder, RushConstants.npmShrinkwrapFilename);\r\n    this._tempShrinkwrapFilename = path.join(this._commonTempFolder, RushConstants.npmShrinkwrapFilename);\r\n\r\n    const unresolvedUserFolder: string = process.env[(process.platform === 'win32') ? 'USERPROFILE' : 'HOME'];\r\n    this._homeFolder = path.resolve(unresolvedUserFolder);\r\n    if (!fsx.existsSync(this._homeFolder)) {\r\n      throw new Error('Unable to determine the current user\\'s home directory');\r\n    }\r\n\r\n    this._rushLinkJsonFilename = path.join(this._commonTempFolder, 'rush-link.json');\r\n\r\n    this._npmToolVersion = rushConfigurationJson.npmVersion;\r\n    this._npmToolFilename = path.resolve(path.join(this._commonTempFolder,\r\n      'npm-local', 'node_modules', '.bin', 'npm'));\r\n\r\n    this._projectFolderMinDepth = rushConfigurationJson.projectFolderMinDepth !== undefined\r\n      ? rushConfigurationJson.projectFolderMinDepth : 1;\r\n    if (this._projectFolderMinDepth < 1) {\r\n      throw new Error('Invalid projectFolderMinDepth; the minimum possible value is 1');\r\n    }\r\n\r\n    this._projectFolderMaxDepth = rushConfigurationJson.projectFolderMaxDepth !== undefined\r\n      ? rushConfigurationJson.projectFolderMaxDepth : 2;\r\n    if (this._projectFolderMaxDepth < this._projectFolderMinDepth) {\r\n      throw new Error('The projectFolderMaxDepth cannot be smaller than the projectFolderMinDepth');\r\n    }\r\n\r\n    this._approvedPackagesPolicy = new ApprovedPackagesPolicy(this, rushConfigurationJson);\r\n\r\n    this._gitAllowedEmailRegExps = [];\r\n    this._gitSampleEmail = '';\r\n    if (rushConfigurationJson.gitPolicy) {\r\n      if (rushConfigurationJson.gitPolicy.sampleEmail) {\r\n        this._gitSampleEmail = rushConfigurationJson.gitPolicy.sampleEmail;\r\n      }\r\n\r\n      if (rushConfigurationJson.gitPolicy.allowedEmailRegExps) {\r\n        this._gitAllowedEmailRegExps = rushConfigurationJson.gitPolicy.allowedEmailRegExps;\r\n\r\n        if (this._gitSampleEmail.trim().length < 1) {\r\n          throw new Error('The rush.json file is missing the \"sampleEmail\" option, ' +\r\n            'which is required when using \"allowedEmailRegExps\"');\r\n        }\r\n      }\r\n    }\r\n\r\n    this._telemetryEnabled = !!rushConfigurationJson.telemetryEnabled;\r\n    if (rushConfigurationJson.eventHooks) {\r\n      this._eventHooks = new EventHooks(rushConfigurationJson.eventHooks);\r\n    }\r\n\r\n    const versionPolicyConfigFile: string = path.join(this._commonRushConfigFolder,\r\n      RushConstants.versionPoliciesFileName);\r\n    this._versionPolicyConfiguration = new VersionPolicyConfiguration(versionPolicyConfigFile);\r\n\r\n    this._projects = [];\r\n    this._projectsByName = new Map<string, RushConfigurationProject>();\r\n\r\n    // We sort the projects array in alphabetical order.  This ensures that the packages\r\n    // are processed in a deterministic order by the various Rush algorithms.\r\n    const sortedProjectJsons: IRushConfigurationProjectJson[] = rushConfigurationJson.projects.slice(0);\r\n    sortedProjectJsons.sort(\r\n      (a: IRushConfigurationProjectJson, b: IRushConfigurationProjectJson) => a.packageName.localeCompare(b.packageName)\r\n    );\r\n\r\n    const tempNamesByProject: Map<IRushConfigurationProjectJson, string>\r\n      = RushConfiguration._generateTempNamesForProjects(sortedProjectJsons);\r\n\r\n    for (const projectJson of sortedProjectJsons) {\r\n      const tempProjectName: string = tempNamesByProject.get(projectJson);\r\n      const project: RushConfigurationProject = new RushConfigurationProject(projectJson, this, tempProjectName);\r\n      this._projects.push(project);\r\n      if (this._projectsByName.get(project.packageName)) {\r\n        throw new Error(`The project name \"${project.packageName}\" was specified more than once`\r\n          + ` in the rush.json configuration file.`);\r\n      }\r\n      this._projectsByName.set(project.packageName, project);\r\n    }\r\n\r\n    for (const project of this._projects) {\r\n      project.cyclicDependencyProjects.forEach((cyclicDependencyProject: string) => {\r\n        if (!this.getProjectByName(cyclicDependencyProject)) {\r\n          throw new Error(`In rush.json, the \"${cyclicDependencyProject}\" project does not exist,`\r\n            + ` but was referenced by the cyclicDependencyProjects for ${project.packageName}`);\r\n        }\r\n      });\r\n\r\n      // Compute the downstream dependencies within the list of Rush projects.\r\n      this._populateDownstreamDependencies(project.packageJson.dependencies, project.packageName);\r\n      this._populateDownstreamDependencies(project.packageJson.devDependencies, project.packageName);\r\n    }\r\n\r\n    // Example: \"./common/config/rush/pinnedVersions.json\"\r\n    const pinnedVersionsFile: string = path.join(this.commonRushConfigFolder, RushConstants.pinnedVersionsFilename);\r\n    this._pinnedVersions = PinnedVersionsConfiguration.tryLoadFromFile(pinnedVersionsFile);\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}