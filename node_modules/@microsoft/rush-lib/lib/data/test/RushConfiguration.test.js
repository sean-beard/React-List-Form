// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference types='mocha' />
var chai_1 = require("chai");
var RushConfiguration_1 = require("../RushConfiguration");
var path = require("path");
var Utilities_1 = require("../../utilities/Utilities");
function normalizePathForComparison(path) {
    return Utilities_1.default.getAllReplaced(path, '\\', '/').toUpperCase();
}
function assertPathProperty(validatedPropertyName, absolutePath, relativePath) {
    var resolvedRelativePath = path.resolve(__dirname, relativePath);
    chai_1.assert.equal(normalizePathForComparison(absolutePath), normalizePathForComparison(resolvedRelativePath), "Failed to validate " + validatedPropertyName);
}
describe('RushConfiguration', function () {
    it('can load repo/rush.json', function (done) {
        var rushFilename = path.resolve(__dirname, 'repo', 'rush.json');
        var rushConfiguration = RushConfiguration_1.default.loadFromConfigurationFile(rushFilename);
        assertPathProperty('committedShrinkwrapFilename', rushConfiguration.committedShrinkwrapFilename, './repo/common/config/rush/npm-shrinkwrap.json');
        assertPathProperty('commonFolder', rushConfiguration.commonFolder, './repo/common');
        assertPathProperty('commonRushConfigFolder', rushConfiguration.commonRushConfigFolder, './repo/common/config/rush');
        assertPathProperty('commonTempFolder', rushConfiguration.commonTempFolder, './repo/common/temp');
        assertPathProperty('npmCacheFolder', rushConfiguration.npmCacheFolder, './repo/common/temp/npm-cache');
        assertPathProperty('npmTmpFolder', rushConfiguration.npmTmpFolder, './repo/common/temp/npm-tmp');
        assertPathProperty('npmToolFilename', rushConfiguration.npmToolFilename, './repo/common/temp/npm-local/node_modules/.bin/npm');
        assertPathProperty('rushJsonFolder', rushConfiguration.rushJsonFolder, './repo');
        assertPathProperty('rushLinkJsonFilename', rushConfiguration.rushLinkJsonFilename, './repo/common/temp/rush-link.json');
        chai_1.assert.equal(rushConfiguration.npmToolVersion, '4.5.0', 'Failed to validate npmToolVersion');
        chai_1.assert.equal(rushConfiguration.projectFolderMaxDepth, 99, 'Failed to validate projectFolderMaxDepth');
        chai_1.assert.equal(rushConfiguration.projectFolderMinDepth, 1, 'Failed to validate projectFolderMinDepth');
        chai_1.assert.equal(rushConfiguration.projects.length, 3);
        // "approvedPackagesPolicy" feature
        var approvedPackagesPolicy = rushConfiguration.approvedPackagesPolicy;
        chai_1.assert.isTrue(approvedPackagesPolicy.enabled, 'Failed to validate approvedPackagesPolicy.enabled');
        chai_1.assert.deepEqual(Utilities_1.default.getSetAsArray(approvedPackagesPolicy.reviewCategories), ['first-party', 'third-party', 'prototype'], 'Failed to validate approvedPackagesPolicy.reviewCategories');
        chai_1.assert.deepEqual(Utilities_1.default.getSetAsArray(approvedPackagesPolicy.ignoredNpmScopes), ['@types', '@internal'], 'Failed to validate approvedPackagesPolicy.ignoredNpmScopes');
        chai_1.assert.equal(approvedPackagesPolicy.browserApprovedPackages.items[0].packageName, 'example', 'Failed to validate browserApprovedPackages.items[0]');
        chai_1.assert.equal(approvedPackagesPolicy.browserApprovedPackages.items[0].allowedCategories.size, 3, 'Failed to validate browserApprovedPackages.items[0]');
        chai_1.assert.isNotTrue(rushConfiguration.telemetryEnabled);
        // Validate project1 settings
        var project1 = rushConfiguration.getProjectByName('project1');
        chai_1.assert.ok(project1, 'Failed to find project1');
        chai_1.assert.equal(project1.packageName, 'project1', 'Failed to validate project1.packageName');
        assertPathProperty('project1.projectFolder', project1.projectFolder, './repo/project1');
        chai_1.assert.equal(project1.tempProjectName, '@rush-temp/project1', 'Failed to validate project1.tempProjectName');
        assertPathProperty('project1.tempPackageJsonFilename', project1.tempPackageJsonFilename, './repo/common/temp/projects/project1/package.json');
        done();
    });
});

//# sourceMappingURL=RushConfiguration.test.js.map
