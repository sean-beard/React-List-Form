{"version":3,"sources":["data/test/VersionPolicy.test.ts"],"names":[],"mappings":"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","file":"data/test/VersionPolicy.test.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/// <reference types='mocha' />\r\n\r\nimport * as path from 'path';\r\nimport { assert } from 'chai';\r\nimport { VersionPolicyConfiguration } from '../VersionPolicyConfiguration';\r\nimport IPackageJson from '../../utilities/IPackageJson';\r\n\r\nimport {\r\n  VersionPolicy,\r\n  LockStepVersionPolicy,\r\n  IndividualVersionPolicy,\r\n  BumpType\r\n} from '../VersionPolicy';\r\n\r\ndescribe('VersionPolicy', () => {\r\n  describe('LockStepVersion', () => {\r\n    const filename: string = path.resolve(__dirname, 'jsonFiles', 'rushWithLockVersion.json');\r\n    const versionPolicyConfig: VersionPolicyConfiguration = new VersionPolicyConfiguration(filename);\r\n    const versionPolicy: VersionPolicy = versionPolicyConfig.getVersionPolicy('testPolicy1');\r\n\r\n    it('loads configuration.', () => {\r\n      assert.isTrue(versionPolicy instanceof LockStepVersionPolicy, 'versionPolicy is a LockStepVersionPolicy');\r\n      const lockStepVersionPolicy: LockStepVersionPolicy = versionPolicy as LockStepVersionPolicy;\r\n      assert.equal(lockStepVersionPolicy.version, '1.1.0');\r\n      assert.equal(lockStepVersionPolicy.nextBump, BumpType.patch);\r\n    });\r\n\r\n    it('skips packageJson if version is already the locked step version', () => {\r\n      const lockStepVersionPolicy: LockStepVersionPolicy = versionPolicy as LockStepVersionPolicy;\r\n      assert.isUndefined(lockStepVersionPolicy.ensure({\r\n        name: 'a',\r\n        version: '1.1.0'\r\n      }), 'PackageJson does not get changed and is not returned.');\r\n    });\r\n\r\n    it('updates packageJson if version is lower than the locked step version', () => {\r\n      const lockStepVersionPolicy: LockStepVersionPolicy = versionPolicy as LockStepVersionPolicy;\r\n      const expectedPackageJson: IPackageJson = {\r\n        name: 'a',\r\n        version: '1.1.0'\r\n      };\r\n      const originalPackageJson: IPackageJson = {\r\n        name: 'a',\r\n        version: '1.0.1'\r\n      };\r\n      assert.deepEqual(lockStepVersionPolicy.ensure(originalPackageJson), expectedPackageJson);\r\n    });\r\n\r\n    it('throws exception if version is higher than the locked step version', () => {\r\n      const lockStepVersionPolicy: LockStepVersionPolicy = versionPolicy as LockStepVersionPolicy;\r\n      const originalPackageJson: IPackageJson = {\r\n        name: 'a',\r\n        version: '2.1.0'\r\n      };\r\n      assert.throw(() => {\r\n        lockStepVersionPolicy.ensure(originalPackageJson);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('IndividualVersionPolicy', () => {\r\n    const fileName: string = path.resolve(__dirname, 'jsonFiles', 'rushWithIndividualVersion.json');\r\n    const versionPolicyConfig: VersionPolicyConfiguration = new VersionPolicyConfiguration(fileName);\r\n    const versionPolicy: VersionPolicy = versionPolicyConfig.getVersionPolicy('testPolicy2');\r\n\r\n    it('loads configuration', () => {\r\n      assert.isTrue(versionPolicy instanceof IndividualVersionPolicy, 'versionPolicy is a IndividualVersionPolicy');\r\n      const individualVersionPolicy: IndividualVersionPolicy = versionPolicy as IndividualVersionPolicy;\r\n      assert.equal(individualVersionPolicy.lockedMajor, 2);\r\n    });\r\n\r\n    it('skips packageJson if no need to change', () => {\r\n      const individualVersionPolicy: IndividualVersionPolicy = versionPolicy as IndividualVersionPolicy;\r\n      assert.isUndefined(individualVersionPolicy.ensure({\r\n        name: 'a',\r\n        version: '2.1.0'\r\n      }), 'PackageJson does not get changed and is not returned.');\r\n    });\r\n\r\n    it('updates packageJson if version is lower than the locked major', () => {\r\n      const individualVersionPolicy: IndividualVersionPolicy = versionPolicy as IndividualVersionPolicy;\r\n      const expectedPackageJson: IPackageJson = {\r\n        name: 'a',\r\n        version: '2.0.0'\r\n      };\r\n      const originalPackageJson: IPackageJson = {\r\n        name: 'a',\r\n        version: '1.0.1'\r\n      };\r\n      assert.deepEqual(individualVersionPolicy.ensure(originalPackageJson), expectedPackageJson);\r\n    });\r\n\r\n    it('throws exception if version is higher than the locked step version', () => {\r\n      const individualVersionPolicy: IndividualVersionPolicy = versionPolicy as IndividualVersionPolicy;\r\n      const originalPackageJson: IPackageJson = {\r\n        name: 'a',\r\n        version: '3.1.0'\r\n      };\r\n      assert.throw(() => {\r\n        individualVersionPolicy.ensure(originalPackageJson);\r\n      });\r\n    });\r\n  });\r\n});"],"sourceRoot":"..\\..\\..\\src"}