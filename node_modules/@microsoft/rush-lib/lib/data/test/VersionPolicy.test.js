// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference types='mocha' />
var path = require("path");
var chai_1 = require("chai");
var VersionPolicyConfiguration_1 = require("../VersionPolicyConfiguration");
var VersionPolicy_1 = require("../VersionPolicy");
describe('VersionPolicy', function () {
    describe('LockStepVersion', function () {
        var filename = path.resolve(__dirname, 'jsonFiles', 'rushWithLockVersion.json');
        var versionPolicyConfig = new VersionPolicyConfiguration_1.VersionPolicyConfiguration(filename);
        var versionPolicy = versionPolicyConfig.getVersionPolicy('testPolicy1');
        it('loads configuration.', function () {
            chai_1.assert.isTrue(versionPolicy instanceof VersionPolicy_1.LockStepVersionPolicy, 'versionPolicy is a LockStepVersionPolicy');
            var lockStepVersionPolicy = versionPolicy;
            chai_1.assert.equal(lockStepVersionPolicy.version, '1.1.0');
            chai_1.assert.equal(lockStepVersionPolicy.nextBump, VersionPolicy_1.BumpType.patch);
        });
        it('skips packageJson if version is already the locked step version', function () {
            var lockStepVersionPolicy = versionPolicy;
            chai_1.assert.isUndefined(lockStepVersionPolicy.ensure({
                name: 'a',
                version: '1.1.0'
            }), 'PackageJson does not get changed and is not returned.');
        });
        it('updates packageJson if version is lower than the locked step version', function () {
            var lockStepVersionPolicy = versionPolicy;
            var expectedPackageJson = {
                name: 'a',
                version: '1.1.0'
            };
            var originalPackageJson = {
                name: 'a',
                version: '1.0.1'
            };
            chai_1.assert.deepEqual(lockStepVersionPolicy.ensure(originalPackageJson), expectedPackageJson);
        });
        it('throws exception if version is higher than the locked step version', function () {
            var lockStepVersionPolicy = versionPolicy;
            var originalPackageJson = {
                name: 'a',
                version: '2.1.0'
            };
            chai_1.assert.throw(function () {
                lockStepVersionPolicy.ensure(originalPackageJson);
            });
        });
    });
    describe('IndividualVersionPolicy', function () {
        var fileName = path.resolve(__dirname, 'jsonFiles', 'rushWithIndividualVersion.json');
        var versionPolicyConfig = new VersionPolicyConfiguration_1.VersionPolicyConfiguration(fileName);
        var versionPolicy = versionPolicyConfig.getVersionPolicy('testPolicy2');
        it('loads configuration', function () {
            chai_1.assert.isTrue(versionPolicy instanceof VersionPolicy_1.IndividualVersionPolicy, 'versionPolicy is a IndividualVersionPolicy');
            var individualVersionPolicy = versionPolicy;
            chai_1.assert.equal(individualVersionPolicy.lockedMajor, 2);
        });
        it('skips packageJson if no need to change', function () {
            var individualVersionPolicy = versionPolicy;
            chai_1.assert.isUndefined(individualVersionPolicy.ensure({
                name: 'a',
                version: '2.1.0'
            }), 'PackageJson does not get changed and is not returned.');
        });
        it('updates packageJson if version is lower than the locked major', function () {
            var individualVersionPolicy = versionPolicy;
            var expectedPackageJson = {
                name: 'a',
                version: '2.0.0'
            };
            var originalPackageJson = {
                name: 'a',
                version: '1.0.1'
            };
            chai_1.assert.deepEqual(individualVersionPolicy.ensure(originalPackageJson), expectedPackageJson);
        });
        it('throws exception if version is higher than the locked step version', function () {
            var individualVersionPolicy = versionPolicy;
            var originalPackageJson = {
                name: 'a',
                version: '3.1.0'
            };
            chai_1.assert.throw(function () {
                individualVersionPolicy.ensure(originalPackageJson);
            });
        });
    });
});

//# sourceMappingURL=VersionPolicy.test.js.map
