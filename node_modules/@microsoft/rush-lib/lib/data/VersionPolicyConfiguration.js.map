{"version":3,"sources":["data/VersionPolicyConfiguration.ts"],"names":[],"mappings":"AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,2BAA6B;AAC7B,8BAAgC;AAChC,wEAAmE;AACnE,kDAA6C;AAE7C,iDAAgD;AAyBhD;;GAEG;AACH;IAGE,oCAA2B,aAAqB;QAArB,kBAAa,GAAb,aAAa,CAAQ;QAC9C,IAAI,CAAC,gBAAgB,GAAG,IAAI,GAAG,EAAyB,CAAC;QACzD,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IAED;;;;;OAKG;IACI,qDAAgB,GAAvB,UAAwB,UAAkB;QACxC,IAAM,MAAM,GAAkB,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACpE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACZ,MAAM,IAAI,KAAK,CAAC,4CAA2C,UAAU,MAAI,CAAC,CAAC;QAC7E,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAMD,sBAAW,uDAAe;QAJ1B;;;WAGG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;QAC/B,CAAC;;;OAAA;IAEO,8CAAS,GAAjB;QAAA,iBAmBC;QAlBC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YACxC,MAAM,CAAC;QACT,CAAC;QACD,IAAM,iBAAiB,GAAyB,kBAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAE1F,IAAM,UAAU,GAAW,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,iCAAiC,CAAC,CAAC;QACnF,IAAM,SAAS,GAAwB,6BAAmB,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;QACpF,SAAS,CAAC,cAAc,CAAC,iBAAiB,EAAE,UAAC,gBAAwB;YACnE,MAAM,IAAI,KAAK,CAAC,yBAAuB,IAAI,CAAC,QAAQ,CAAC,KAAI,CAAC,aAAa,CAAC,SAAM;kBAC1E,gBAAgB,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;QAEH,iBAAiB,CAAC,OAAO,CAAC,UAAA,UAAU;YAClC,IAAM,MAAM,GAAkB,6BAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC7D,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACX,KAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;YACvD,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACH,iCAAC;AAAD,CAlDA,AAkDC,IAAA;AAlDY,gEAA0B","file":"data/VersionPolicyConfiguration.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport * as fsx from 'fs-extra';\r\nimport JsonSchemaValidator from '../utilities/JsonSchemaValidator';\r\nimport JsonFile from '../utilities/JsonFile';\r\n\r\nimport { VersionPolicy } from './VersionPolicy';\r\n\r\n/**\r\n * @alpha\r\n */\r\nexport interface IVersionPolicyJson {\r\n  policyName: string;\r\n  definitionName: string;\r\n}\r\n\r\n/**\r\n * @alpha\r\n */\r\nexport interface ILockStepVersionJson extends IVersionPolicyJson {\r\n  version: string;\r\n  nextBump: string;\r\n}\r\n\r\n/**\r\n * @alpha\r\n */\r\nexport interface IIndividualVersionJson extends IVersionPolicyJson {\r\n  lockedMajor?: number;\r\n}\r\n\r\n/**\r\n * @alpha\r\n */\r\nexport class VersionPolicyConfiguration {\r\n  private _versionPolicies: Map<string, VersionPolicy>;\r\n\r\n  public constructor(private _jsonFileName: string) {\r\n    this._versionPolicies = new Map<string, VersionPolicy>();\r\n    this._loadFile();\r\n  }\r\n\r\n  /**\r\n   * Gets the version policy by its name.\r\n   * Throws error if the version policy is not found.\r\n   * @param policyName - Name of the version policy\r\n   * @alpha\r\n   */\r\n  public getVersionPolicy(policyName: string): VersionPolicy {\r\n    const policy: VersionPolicy = this._versionPolicies.get(policyName);\r\n    if (!policy) {\r\n      throw new Error(`Failed to find version policy by name \\'${policyName}\\'`);\r\n    }\r\n    return policy;\r\n  }\r\n\r\n  /**\r\n   * Gets all the version policies\r\n   * @alpha\r\n   */\r\n  public get versionPolicies(): Map<string, VersionPolicy> {\r\n    return this._versionPolicies;\r\n  }\r\n\r\n  private _loadFile(): void {\r\n    if (!fsx.existsSync(this._jsonFileName)) {\r\n      return;\r\n    }\r\n    const versionPolicyJson: IVersionPolicyJson[] = JsonFile.loadJsonFile(this._jsonFileName);\r\n\r\n    const schemaPath: string = path.join(__dirname, '../version-policies.schema.json');\r\n    const validator: JsonSchemaValidator = JsonSchemaValidator.loadFromFile(schemaPath);\r\n    validator.validateObject(versionPolicyJson, (errorDescription: string) => {\r\n      throw new Error(`Error parsing file '${path.basename(this._jsonFileName)}':\\n`\r\n        + errorDescription);\r\n    });\r\n\r\n    versionPolicyJson.forEach(policyJson => {\r\n      const policy: VersionPolicy = VersionPolicy.load(policyJson);\r\n      if (policy) {\r\n        this._versionPolicies.set(policy.policyName, policy);\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}