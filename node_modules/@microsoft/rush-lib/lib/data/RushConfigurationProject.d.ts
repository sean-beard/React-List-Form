import IPackageJson from '../utilities/IPackageJson';
import RushConfiguration from '../data/RushConfiguration';
/**
 * This represents the JSON data object for a project entry in the rush.json configuration file.
 */
export interface IRushConfigurationProjectJson {
    packageName: string;
    projectFolder: string;
    reviewCategory?: string;
    cyclicDependencyProjects: string[];
    versionPolicyName?: string;
    shouldPublish?: boolean;
}
/**
 * This represents the configuration of a project that is built by Rush, based on
 * the Rush.json configuration file.
 * @public
 */
export default class RushConfigurationProject {
    private _packageName;
    private _projectFolder;
    private _projectRelativeFolder;
    private _reviewCategory;
    private _packageJson;
    private _tempProjectName;
    private _tempPackageJsonFilename;
    private _cyclicDependencyProjects;
    private _versionPolicyName;
    private _shouldPublish;
    private _downstreamDependencyProjects;
    /** @internal */
    constructor(projectJson: IRushConfigurationProjectJson, rushConfiguration: RushConfiguration, tempProjectName: string);
    /**
     * The name of the NPM package.  An error is reported if this name is not
     * identical to packageJson.name.
     *
     * Example: "@scope/MyProject"
     */
    readonly packageName: string;
    /**
     * The full path of the folder that contains the project to be built by Rush.
     *
     * Example: "C:\MyRepo\libraries\my-project"
     */
    readonly projectFolder: string;
    /**
     * The relative path of the folder that contains the project to be built by Rush.
     *
     * Example: "libraries\my-project"
     */
    readonly projectRelativeFolder: string;
    /**
     * The review category name, or undefined if no category was assigned.
     * This name must be one of the valid choices listed in RushConfiguration.reviewCategories.
     */
    readonly reviewCategory: string;
    /**
     * A list of local projects that appear as devDependencies for this project, but cannot be
     * locally linked because it would create a cyclic dependency; instead, the last published
     * version will be installed in the Common folder.
     *
     * These are package names that would be found by RushConfiguration.getProjectByName().
     */
    readonly cyclicDependencyProjects: Set<string>;
    /**
     * A list of projects within the Rush configuration which directly depend on this package.
     */
    readonly downstreamDependencyProjects: string[];
    /**
     * The parsed NPM "package.json" file from projectFolder.
     */
    readonly packageJson: IPackageJson;
    /**
     * The unique name for the temporary project that will be generated in the Common folder.
     * For example, if the project name is "@scope/MyProject", the temporary project name
     * might be "@rush-temp/MyProject-2".
     *
     * Example: "@rush-temp/MyProject-2"
     */
    readonly tempProjectName: string;
    /**
     * The absolute path of the package.json file for the temp project.
     *
     * Example: "C:\MyRepo\common\temp\projects\my-project-2\package.json"
     */
    readonly tempPackageJsonFilename: string;
    /**
     * A flag which indicates whether changes to this project should be published. This controls
     * whether or not the project would show up when running `rush change`, and whether or not it
     * should be published during `rush publish`.
     */
    readonly shouldPublish: boolean;
    /**
     * The version policy used by this project.
     * @alpha
     */
    readonly versionPolicyName: string;
}
