// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var ApprovedPackagesConfiguration_1 = require("./ApprovedPackagesConfiguration");
var RushConstants_1 = require("../RushConstants");
/**
 * This is a helper object for RushConfiguration.
 * It exposes the "approvedPackagesPolicy" feature from rush.json.
 * @public
 */
var ApprovedPackagesPolicy = (function () {
    /** @internal */
    function ApprovedPackagesPolicy(rushConfiguration, rushConfigurationJson) {
        var approvedPackagesPolicy = rushConfigurationJson.approvedPackagesPolicy || {};
        this._enabled = !!rushConfigurationJson.approvedPackagesPolicy;
        this._ignoredNpmScopes = new Set(approvedPackagesPolicy.ignoredNpmScopes);
        this._reviewCategories = new Set(approvedPackagesPolicy.reviewCategories);
        if (this._enabled) {
            if (!this.reviewCategories.size) {
                throw new Error("The \"approvedPackagesPolicy\" feature is enabled rush.json, but the reviewCategories"
                    + " list is not configured.");
            }
        }
        // Load browser-approved-packages.json
        var browserApprovedPackagesPath = path.join(rushConfiguration.commonRushConfigFolder, RushConstants_1.RushConstants.browserApprovedPackagesFilename);
        this._browserApprovedPackages = new ApprovedPackagesConfiguration_1.ApprovedPackagesConfiguration(browserApprovedPackagesPath);
        this._browserApprovedPackages.tryLoadFromFile(this._enabled);
        // Load nonbrowser-approved-packages.json
        var nonbrowserApprovedPackagesPath = path.join(rushConfiguration.commonRushConfigFolder, RushConstants_1.RushConstants.nonbrowserApprovedPackagesFilename);
        this._nonbrowserApprovedPackages = new ApprovedPackagesConfiguration_1.ApprovedPackagesConfiguration(nonbrowserApprovedPackagesPath);
        this._nonbrowserApprovedPackages.tryLoadFromFile(this._enabled);
    }
    Object.defineProperty(ApprovedPackagesPolicy.prototype, "enabled", {
        /**
         * Whether the feature is enabled.  The feature is enabled if the "approvedPackagesPolicy"
         * field is assigned in rush.json.
         */
        get: function () {
            return this._enabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApprovedPackagesPolicy.prototype, "ignoredNpmScopes", {
        /**
         * A list of NPM package scopes that will be excluded from review (e.g. \"@types\")
         */
        get: function () {
            return this._ignoredNpmScopes;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApprovedPackagesPolicy.prototype, "reviewCategories", {
        /**
         * A list of category names that are valid for usage as the RushConfigurationProject.reviewCategory field.
         * This array will never be undefined.
         */
        get: function () {
            return this._reviewCategories;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApprovedPackagesPolicy.prototype, "browserApprovedPackages", {
        /**
         * Packages approved for usage in a web browser.  This is the stricter of the two types, so by default
         * all new packages are added to this file.
         *
         * @remarks
         *
         * This is part of an optional approval workflow, whose purpose is to review any new dependencies
         * that are introduced (e.g. maybe a legal review is required, or maybe we are trying to minimize bloat).
         * When Rush discovers a new dependency has been added to package.json, it will update the file.
         * The intent is that the file will be stored in Git and tracked by a branch policy that notifies
         * reviewers when a PR attempts to modify the file.
         *
         * Example filename: "C:\MyRepo\common\config\rush\browser-approved-packages.json"
         */
        get: function () {
            return this._browserApprovedPackages;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApprovedPackagesPolicy.prototype, "nonbrowserApprovedPackages", {
        /**
         * Packages approved for usage everywhere *except* in a web browser.
         *
         * @remarks
         *
         * This is part of an optional approval workflow, whose purpose is to review any new dependencies
         * that are introduced (e.g. maybe a legal review is required, or maybe we are trying to minimize bloat).
         * The intent is that the file will be stored in Git and tracked by a branch policy that notifies
         * reviewers when a PR attempts to modify the file.
         *
         * Example filename: "C:\MyRepo\common\config\rush\browser-approved-packages.json"
         */
        get: function () {
            return this._nonbrowserApprovedPackages;
        },
        enumerable: true,
        configurable: true
    });
    return ApprovedPackagesPolicy;
}());
exports.ApprovedPackagesPolicy = ApprovedPackagesPolicy;

//# sourceMappingURL=ApprovedPackagesPolicy.js.map
