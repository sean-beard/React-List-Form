import { IEventObserver } from './IEventObserver';
/**
 * Manager for the eventing system.
 *
 * Allows to register/unregister event handlers to events, and raises those events.
 * The events are identified by its name as a string, and it doesn't provide type safety for the event arguments.
 *
 * This is an internal architecture underlying the Event class, which provides a handy way to register and unregister
 * events, and provides the type safety. This class should not be exposed to third-parties directly.
 *
 * @internal
 */
export default class EventManager {
    private static _logSource;
    private static _instance;
    private _listeners;
    /**
     * Instance of the EventManager.
     */
    static readonly instance: EventManager;
    constructor();
    /**
     * Raises an event.
     * After this is called, all components registered under the event will execute their callback.
     * @param eventName - Name of the event
     * @internal
     */
    _raiseEvent<TEventArgs>(eventName: string, eventArgs: TEventArgs): void;
    /**
     * Registers an event handler for an event.
     * @param eventName - Name of the event to register to.
     * @param observer - Component that is registering the event.
     * @param eventHandler - Function to handle the event.
     */
    registerEvent<TEventArgs>(eventName: string, observer: IEventObserver, eventHandler: (eventArgs: TEventArgs) => void): void;
    /**
     * Removes an event handler from the event listeners list.
     * The event handler passed as input must be the first one that was used to register to the event.
     *
     * @remarks
     * If this is requested without adding an event handler first, it logs an error.
     *
     * @param eventName - Name of the event to remove the event handler from.
     * @param observer - Component that is deregistering from the event.
     * @param eventHandler - Function to handle the event. Used to remove it from the list of listeners.
     */
    unregisterEvent<TEventArgs>(eventName: string, observer: IEventObserver, eventHandler: (eventArgs: TEventArgs) => void): void;
}
