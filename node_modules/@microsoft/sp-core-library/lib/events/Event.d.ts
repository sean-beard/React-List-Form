import { IEventObserver } from './IEventObserver';
import EventArgs from './EventArgs';
/**
 * Representation of an event.
 * It exposes an event that third parties can attach handlers to.
 *
 * @remarks
 * When an event is raised, its handlers are executed synchronously.
 * An event handler should not throw errors, although the system can recover from an error in a handler.
 * Event handlers should be fast. If they need to do expensive operations, they should use Promises for that.
 *
 * @beta
 */
export default class Event<TEventArgs extends EventArgs> {
    private _name;
    /**
     * @internal
     */
    constructor(name: string);
    /**
     * Registers an event handler callback that will be invoked whenever the event occurs.
     * The same object can add multiple event handlers to the same event.
     *
     * @remarks
     * Since BaseComponent implements the IEventObserver interface, a web part or extension can pass itself as
     * the observer. This will cause the event handler to be automatically unsubscribed when the web part
     * or extension is disposed.
     *
     * @param observer - Indicates the object that is subscribing to the event: When the object is disposed,
     * the event handler will be automatically removed.
     * This object is also used for diagnostic purposes, e.g. if its event handler fails to trap an exception
     * @param eventHandler - A callback function that will be invoked whenever the event occurs.
     */
    add(observer: IEventObserver, eventHandler: (eventArgs: TEventArgs) => void): void;
    /**
     * Removes an event handler to the event.
     * Only removes the event handler passed as input.
     *
     * If the event handler has already been removed, or it was never added, this operation does nothing.
     *
     * @param observer - Object that it's removing the event handler from the event
     * @param eventHandler - Event handler to remove. It must be the same object instance that was used in add.
     */
    remove(observer: IEventObserver, eventHandler: (eventArgs: TEventArgs) => void): void;
}
