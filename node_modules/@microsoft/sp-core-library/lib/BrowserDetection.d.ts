import Version from './Version';
/**
 * Enum to identify browser.
 * @internal
 */
export declare enum Browser {
    Other = 0,
    Chrome = 1,
    Edge = 2,
    Firefox = 3,
    IE = 4,
    Safari = 5,
}
/**
 * Enum to identify OS.
 * @internal
 */
export declare enum OS {
    Other = 0,
    Android = 1,
    IOS = 2,
    Linux = 3,
    Mac = 4,
    Windows = 5,
    WindowsPhone = 6,
}
/**
 * Information from the browser.
 * Includes browser name and version, and OS name and version.
 *
 * If the browser or the OS are not recognized, uses value "Other"
 * If the version is not recognized, the value will be undefined.
 *
 * @internal
 */
export interface IBrowserInformation {
    /**
     * Browser name, as an enum. Other if it's not recognized.
     */
    browser: Browser;
    /**
     * Browser version. undefined if it's not recognized.
     */
    browserVersion?: Version;
    /**
     * OS name, as an enum. Other if it's not recognized.
     */
    os: OS;
    /**
     * OS version. undefined if it's not recognized.
     */
    osVersion?: string;
    /**
     * Original User Agent that was used to recognize all data.
     */
    userAgent?: string;
}
/**
 * Provides with information from the browser.
 * @internal
 */
export default class BrowserDetection {
    /**
     * Returns information from the browser, calculated from the user agent.
     *
     * @param userAgent - Optional. If provided, it will calculate the data from the input parameter,
     *                      instead of the user agent from the browser.
     * @returns Browser information, with browser and OS data.
     */
    static getBrowserInformation(userAgent?: string): IBrowserInformation;
    private static getUserAgent();
    private static buildBrowserInformation(userAgent);
    private static fillBrowser(browserInfo, userAgent);
    private static fillOS(browserInfo, userAgent);
}
