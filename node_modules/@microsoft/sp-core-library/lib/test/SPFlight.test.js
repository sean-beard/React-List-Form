"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var test_api_1 = require("./../test-api");
var SPFlight_1 = require("../SPFlight");
describe('SPFlight tests', function () {
    var emptyFlights = []; 
    var flightsWithNull = [
        2424,
        null,
        6
    ];
    var flightsWithUndefined = [
        2424,
        undefined,
        6
    ];
    var validFlights = [
        -593526783, -267125943, 1292980296, 33620892, 322111290, -1127458944, 29360135,
        57158685, 273220644, -2079981563, 1508248, -536676072, -133987776, 1102250371,
        69269380, -267501568, -1776228366, -251717882, 28539647, 0, 0, -1879048192,
        -772538364, -1207991321, 1622016, 24248636, 0, 0, 0, 0, 0, 4096, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32768
    ];
    it('Can parse an undefined flights array', function () {
        SPFlight_1.default.initialize(test_api_1.TEST_UNDEFINED);
        chai_1.assert.isTrue(true);
    });
    it('Can parse a null flights array', function () {
        SPFlight_1.default.initialize(test_api_1.TEST_NULL);
        chai_1.assert.isTrue(true);
    });
    it('Can parse an empty flights array', function () {
        SPFlight_1.default.initialize(emptyFlights);
        chai_1.assert.isTrue(true);
    });
    it('Can parse a flights array with an undefined entry', function () {
        SPFlight_1.default.initialize(flightsWithUndefined);
        chai_1.assert.isTrue(true);
    });
    it('Can parse a flights array with an null entry', function () {
        SPFlight_1.default.initialize(flightsWithNull);
        chai_1.assert.isTrue(true);
    });
    it('Can parse a valid flights array', function () {
        SPFlight_1.default.initialize(validFlights);
        describe('Valid SPFlight Array tests', function () {
            it('Can find flights contained in SPFlight object', function () {
                chai_1.assert.isTrue(SPFlight_1.default.isEnabled(764));
                chai_1.assert.isTrue(SPFlight_1.default.isEnabled(18));
                chai_1.assert.isTrue(SPFlight_1.default.isEnabled(573));
            });
            it('Cannot find flights not contained in a valid flights array', function () {
                chai_1.assert.isTrue(!SPFlight_1.default.isEnabled(134));
                chai_1.assert.isTrue(!SPFlight_1.default.isEnabled(55));
            });
            it('Cannot find a null flight in a valid flights array', function () {
                chai_1.assert.isTrue(!SPFlight_1.default.isEnabled(test_api_1.TEST_NULL));
            });
            it('Cannot find an undefined flight in a valid flights array', function () {
                chai_1.assert.isTrue(!SPFlight_1.default.isEnabled(test_api_1.TEST_UNDEFINED));
            });
        });
        chai_1.assert.isTrue(true);
    });
    describe('Debug flights', function () {
        it('Can add an non-existing enabled flight', function () {
            SPFlight_1.default.initialize(validFlights, '123');
            chai_1.assert.isTrue(SPFlight_1.default.isEnabled(123));
        });
        it('Can add a non-existing disabled flight', function () {
            SPFlight_1.default.initialize(validFlights, '!123');
            chai_1.assert.isFalse(SPFlight_1.default.isEnabled(123));
        });
        it('Can add an existing enabled flight', function () {
            SPFlight_1.default.initialize(validFlights, '573');
            chai_1.assert.isTrue(SPFlight_1.default.isEnabled(573));
        });
        it('Can add an existing disabled flight', function () {
            SPFlight_1.default.initialize(validFlights, '!573');
            chai_1.assert.isFalse(SPFlight_1.default.isEnabled(573));
        });
        it('empty string initializes properly', function () {
            SPFlight_1.default.initialize(validFlights, '');
            chai_1.assert.isTrue(SPFlight_1.default.isEnabled(573));
        });
        it('flight number followed by comma initializes properly', function () {
            SPFlight_1.default.initialize(validFlights, '123,');
            chai_1.assert.isTrue(SPFlight_1.default.isEnabled(573));
            chai_1.assert.isTrue(SPFlight_1.default.isEnabled(123));
        });
        it('flight number preceded by comma initializes properly', function () {
            SPFlight_1.default.initialize(validFlights, ',123');
            chai_1.assert.isTrue(SPFlight_1.default.isEnabled(573));
            chai_1.assert.isTrue(SPFlight_1.default.isEnabled(123));
        });
        it('exclamation sign initializes properly', function () {
            SPFlight_1.default.initialize(validFlights, '!');
            chai_1.assert.isTrue(SPFlight_1.default.isEnabled(573));
        });
        it('A flight both enabled and disabled causes an error', function () {
            chai_1.assert.throws(function () { return SPFlight_1.default.initialize(validFlights, '5,!5'); });
        });
    });
});
