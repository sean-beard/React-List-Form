/**
 * Used to report the level of support for the web browser, along with a warning message.
 *
 * @alpha
 */
export interface IBrowserCompatibility {
    /** Support level: Enum defining the level of support. */
    supportLevel: BrowserSupportLevel;
    /**
     * Warning: Optional. Localized message to show explaining the cause of the support level.
     *
     * Examples:
     * (Support level: Blocked) "Component blocked because the browser does not support feature X"
     * (Support level: Readable) "Limited functionality: Feature X is disabled"
     *
     * @remarks
     * Warning is unused when support level is "None".
     */
    warning: string | undefined;
}
/**
 * Browser support level for a component.
 *
 * @remarks
 * Allow to establish different levels, including blocked, where the component won't load, to
 * full functionality, where it should work and a failure is considered a high severity problem.
 *
 * @alpha
 */
export declare enum BrowserSupportLevel {
    /**
     * None: Support level is not available. No assumptions can be made.
     *
     * @remarks
     * This value is meant to be used when there is no code to check the browser support.
     * If any check is performed, this value should not be returned.
     */
    None = 0,
    /**
     * Full functionality: Known browser, component should work properly in all scenarios.
     *
     * @internalremarks
     * A failure with this support level on a Microsoft-provided component should trigger a high-severity ticket.
     */
    FullFunctionality = 1,
    /**
     * Readable: Component should be usable, potentially with limited functionality.
     */
    Readable = 2,
    /**
     * Blocked: The component does not work with this browser.
     * The SharePoint Framework will prevent the page from rendering, instead displaying the supplied warning message.
     * This a very poor experience for the end user. Only use this level for situations where it is absolutely certain
     * that the page will fail to render, and it is not feasible to implement a workaround.
     */
    Blocked = 3,
}
