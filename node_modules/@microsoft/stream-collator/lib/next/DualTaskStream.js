"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/* istanbul ignore next */
var colors = require("colors");
var stream = require("stream");
var PersistentStream_1 = require("./PersistentStream");
/**
 * This is a special type of stream class which has two substreams (stderr and stdout), which you can write to.
 * The DualTaskStream will merge these two streams into a single readable stream.
 * Everything written to stderr is written in red, unless it is a Warning, in which case it appears in yellow.
 */
var DualTaskStream = (function (_super) {
    __extends(DualTaskStream, _super);
    /**
     * @param {boolean} quietMode is true if things written to stdout (and warnings) should be ignored
     */
    function DualTaskStream(quietMode) {
        if (quietMode === void 0) { quietMode = false; }
        var _this = _super.call(this) || this;
        _this._quietMode = quietMode;
        _this.stdout = new PersistentStream_1.default();
        _this.stderr = new PersistentStream_1.default();
        _this.stdout.on('finish', function () {
            _this._stdoutClosed = true;
        });
        _this.stderr.on('finish', function () {
            _this._stderrClosed = true;
        });
        _this.stdout.on('data', function (data, encoding) {
            if (!_this._quietMode) {
                _this.push(data);
            }
        });
        _this.stderr.on('data', function (data, encoding) {
            var text = data.toString();
            if (text.indexOf('Warning - ') === 0) {
                _this.stdout.write(colors.yellow(text));
            }
            else {
                _this.push(colors.red(text));
            }
        });
        return _this;
    }
    DualTaskStream.prototype._read = function () {
        // No-op
    };
    /**
     * Closes both substreams and closes the readable stream
     */
    DualTaskStream.prototype.end = function () {
        if (!this._stdoutClosed) {
            this.stdout.end();
        }
        if (!this._stderrClosed) {
            this.stderr.end();
        }
        // End the stream
        if (!this._closed) {
            this._closed = true;
            this.push(null); // tslint:disable-line:no-null-keyword
        }
    };
    return DualTaskStream;
}(stream.Readable));
exports.default = DualTaskStream;

//# sourceMappingURL=DualTaskStream.js.map
