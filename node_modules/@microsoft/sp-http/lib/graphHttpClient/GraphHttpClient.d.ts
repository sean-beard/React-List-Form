import { ServiceKey, ServiceScope } from '@microsoft/sp-core-library';
import { IHttpClientOptions } from '../httpClient/HttpClient';
import GraphHttpClientResponse from './GraphHttpClientResponse';
import GraphHttpClientConfiguration, { IGraphHttpClientConfigurations } from './GraphHttpClientConfiguration';
/**
 * GraphHttpClient is used to perform REST calls against Microsoft Graph. It adds default
 * headers and collects telemetry that helps the service to monitor the performance of an application.
 * https://developer.microsoft.com/en-us/graph/
 *
 * For communicating with non-Graph services, use the HttpClient or SPHttpClient
 * class instead.
 *
 * @beta
 */
export default class GraphHttpClient {
    /**
     * The standard predefined GraphHttpClientConfiguration objects for use with
     * the GraphHttpClient class.
     */
    static readonly configurations: IGraphHttpClientConfigurations;
    /**
     * The service key for GraphHttpClient.
     */
    static readonly serviceKey: ServiceKey<GraphHttpClient>;
    private static _logSource;
    private _graphContext;
    private _httpClientHelper;
    private _parentSource;
    private _randomNumberGenerator;
    private _serviceScope;
    private _token;
    private _tokenProvider;
    constructor(serviceScope: ServiceScope);
    /**
     * Generally, the parameters and semantics for HttpClient.fetch() are essentially
     * the same as the WHATWG API standard that is documented here:
     * https://fetch.spec.whatwg.org/
     *
     * The GraphHttpClient subclass adds some additional behaviors that are convenient when
     * working with SharePoint ODATA API's (which can be avoided by using
     * HttpClient instead):
     * - Default "Accept" and "Content-Type" headers are added if not explicitly specified.
     *
     * @param url - The url string should be relative to the graph server.
     *  Good: 'v1.0/me/events'
     *  Bad: '/v1.0/me/events', 'https://graph.microsoft.com/v1.0/me/events'
     * @param configuration - determines the default behavior of GraphHttpClient; normally this should
     *   be the latest version number from GraphHttpClientConfigurations
     * @param options - additional options that affect the request
     * @returns a promise that will return the result
     */
    fetch(url: string, configuration: GraphHttpClientConfiguration, options: IGraphHttpClientOptions): Promise<GraphHttpClientResponse>;
    /**
     * Calls fetch(), but sets the method to 'GET'.
     * @param url - the URL to fetch
     * @param configuration - determines the default behavior of GraphHttpClient; normally this should
     *   be the latest version number from GraphHttpClientConfigurations
     * @param options - additional options that affect the request
     * @returns a promise that will return the result
     */
    get(url: string, configuration: GraphHttpClientConfiguration, options?: IGraphHttpClientOptions): Promise<GraphHttpClientResponse>;
    /**
     * Calls fetch(), but sets the method to 'POST'.
     * @param url - the URL to fetch
     * @param configuration - determines the default behavior of GraphHttpClient; normally this should
     *   be the latest version number from GraphHttpClientConfigurations
     * @param options - additional options that affect the request
     * @returns a promise that will return the result
     */
    post(url: string, configuration: GraphHttpClientConfiguration, options: IGraphHttpClientOptions): Promise<GraphHttpClientResponse>;
    private _fetchWithInstrumentation(configuration, request);
    private _getOAuthToken();
    private readonly _logSourceId;
    private _mergeUserHeaders(defaultHeaders, userHeaders);
    private readonly _performanceTag;
    private _writeQosMonitorUpdate(response, qosMonitor, operation);
    /**
     * This function verifies that
     */
    private _validateGraphRelativeUrl(url);
}
/**
 * This interface defines the options for the GraphHttpClient operations such as
 * get(), post(), fetch(), etc.  It is based on the WHATWG API standard
 * parameters that are documented here:
 * https://fetch.spec.whatwg.org/
 *
 * @beta
 */
export interface IGraphHttpClientOptions extends IHttpClientOptions {
}
