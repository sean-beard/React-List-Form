"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var decorators_1 = require("@microsoft/decorators");
var lodash = require("@microsoft/sp-lodash-subset");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var OAuthTokenProvider_1 = require("../oauthTokenProvider/OAuthTokenProvider");
var GraphHttpClientResponse_1 = require("./GraphHttpClientResponse");
var HttpClientHelper_1 = require("../httpClient/HttpClientHelper");
var SPHttpClientHelper_1 = require("../spHttpClient/SPHttpClientHelper");
var GraphHttpClientConfiguration_1 = require("./GraphHttpClientConfiguration");
var GraphConstants_1 = require("./GraphConstants");
var GraphHttpClientContext_1 = require("./GraphHttpClientContext");
var GraphHttpClient = (function () {
    function GraphHttpClient(serviceScope) {
        var _this = this;
        this._httpClientHelper = new HttpClientHelper_1.default(serviceScope, 'GraphHttpClient');
        this._serviceScope = serviceScope;
        this._serviceScope.whenFinished(function () {
            _this._tokenProvider = serviceScope.consume(OAuthTokenProvider_1.default.serviceKey);
            _this._randomNumberGenerator = serviceScope.consume(sp_core_library_1.RandomNumberGenerator.serviceKey);
            _this._parentSource = serviceScope.consume(sp_telemetry_1._logSourceServiceKey);
            _this._graphContext = serviceScope.consume(GraphHttpClientContext_1.default.serviceKey);
        });
    }
    GraphHttpClient_1 = GraphHttpClient;
    GraphHttpClient.prototype.fetch = function (url, configuration, options) {
        var _this = this;
        this._validateGraphRelativeUrl(url);
        return this._getOAuthToken().then(function () {
            if (!options) {
                options = {};
            }
            var modifiedOptions = lodash.clone(options);
            var defaultHeaders = {
                'Accept': 'application/json',
                'Authorization': 'Bearer ' + _this._token,
                'Content-Type': 'application/json; charset=utf-8'
            };
            var userHeaders = SPHttpClientHelper_1.default.cloneHeaders(options);
            modifiedOptions.headers = _this._mergeUserHeaders(defaultHeaders, userHeaders);
            return _this._fetchWithInstrumentation(configuration, new Request(GraphConstants_1.default.OAUTH_TOKEN_URL + '/' + url, modifiedOptions)).then(function (response) {
                return new GraphHttpClientResponse_1.default(response);
            });
        });
    };
    GraphHttpClient.prototype.get = function (url, configuration, options) {
        return this.fetch(url, configuration, this._httpClientHelper.overrideHttpMethod(options, 'GET'));
    };
    GraphHttpClient.prototype.post = function (url, configuration, options) {
        return this.fetch(url, configuration, this._httpClientHelper.overrideHttpMethod(options, 'POST'));
    };
    GraphHttpClient.prototype._fetchWithInstrumentation = function (configuration, request) {
        var _this = this;
        var tag = this._performanceTag;
        sp_telemetry_1._PerformanceLogger.startMarkForApi(tag);
        var qosMonitor = new sp_telemetry_1._QosMonitor('GraphHttpClient.Fetch');
        return this._httpClientHelper.fetchCore(configuration, request).then(function (response) {
            sp_telemetry_1._PerformanceLogger.endMarkForApi(tag, _this._logSourceId, request.url, response);
            _this._writeQosMonitorUpdate(response, qosMonitor, 'Fetch');
            return response;
        }).catch(function (error) {
            qosMonitor.writeUnexpectedFailure('Fetch', error, { source: _this._logSourceId });
            return Promise.reject(error);
        });
    };
    GraphHttpClient.prototype._getOAuthToken = function () {
        var _this = this;
        if (!!this._token) {
            return Promise.resolve(undefined);
        }
        var qosMonitor = new sp_telemetry_1._QosMonitor('GraphHttpClient.FetchGraphToken');
        return this._tokenProvider.getOAuthToken(GraphConstants_1.default.OAUTH_TOKEN_URL, this._graphContext.getWebServerRelativeUrl()).then(function (response) {
            _this._writeQosMonitorUpdate(response, qosMonitor, 'FetchGraphToken');
            _this._token = response.token;
        })
            .catch(function (error) {
            qosMonitor.writeUnexpectedFailure('FetchGraphToken', error, { source: _this._logSourceId });
            return Promise.reject(error);
        });
    };
    Object.defineProperty(GraphHttpClient.prototype, "_logSourceId", {
        get: function () {
            if (this._parentSource.isEmpty()) {
                return GraphHttpClient_1._logSource.id;
            }
            return this._parentSource.id;
        },
        enumerable: true,
        configurable: true
    });
    GraphHttpClient.prototype._mergeUserHeaders = function (defaultHeaders, userHeaders) {
        userHeaders.forEach(function (value, name) {
            defaultHeaders.set(name, value); 
        });
        return defaultHeaders;
    };
    Object.defineProperty(GraphHttpClient.prototype, "_performanceTag", {
        get: function () {
            var randomSuffix = Math.floor(this._randomNumberGenerator.generate() * 100000).toString();
            return this._logSourceId + "." + randomSuffix;
        },
        enumerable: true,
        configurable: true
    });
    GraphHttpClient.prototype._writeQosMonitorUpdate = function (response, qosMonitor, operation) {
        if (response.status >= 200 && response.status <= 299) {
            qosMonitor.writeSuccess({ source: this._logSourceId });
        }
        else if (response.status >= 300 && response.status <= 499) {
            qosMonitor.writeExpectedFailure(operation, undefined, { source: this._logSourceId, responseStatus: response.status });
        }
        else {
            qosMonitor.writeUnexpectedFailure(operation, undefined, { source: this._logSourceId, responseStatus: response.status });
        }
    };
    GraphHttpClient.prototype._validateGraphRelativeUrl = function (url) {
        sp_core_library_1.Validate.isNotNullOrUndefined(url, 'url');
        if (url.charAt(0) === '/') {
            throw new Error('GraphHttpClient requests cannot begin with a / character');
        }
        if (url.indexOf('http://', 0) === 0) {
            throw new Error('GraphHttpClient requests cannot specify a different graph server with the url.');
        }
        if (url.indexOf('https://', 0) === 0) {
            throw new Error('GraphHttpClient requests cannot specify a different graph server with the url.');
        }
    };
    GraphHttpClient.configurations = GraphHttpClientConfiguration_1.predefinedConfigurations;
    GraphHttpClient.serviceKey = sp_core_library_1.ServiceKey.create('sp-http:GraphHttpClient', GraphHttpClient_1);
    GraphHttpClient._logSource = sp_telemetry_1._LogSource.create('graphHttpClient');
    GraphHttpClient = GraphHttpClient_1 = __decorate([
        decorators_1.sealed
    ], GraphHttpClient);
    return GraphHttpClient;
    var GraphHttpClient_1;
}());
exports.default = GraphHttpClient;
