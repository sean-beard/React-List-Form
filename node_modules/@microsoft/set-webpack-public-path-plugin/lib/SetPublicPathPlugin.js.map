{"version":3,"sources":["SetPublicPathPlugin.ts"],"names":[],"mappings":";AAAA;;;GAGG;;AAEH,yBAAyB;AACzB,iCAGgB;AAyEhB,iDAGyB;AAwBzB;;;;;GAKG;AACH;IAGE,6BAAY,OAA2C;QACrD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAED,gGAAgG;IAChG,iCAAiC;IAC1B,mCAAK,GAAZ,UAAa,QAA4B;QAAzC,iBA0CC;QAzCC,IAAM,IAAI,GAAwB,IAAI,CAAC;QACvC,QAAQ,CAAC,MAAM,CAAC,aAAa,EAAE,UAAC,WAAyB,EAAE,MAAc;YACvE,WAAW,CAAC,YAAY,CAAC,MAAM,CAAC,SAAS,EAAE,UAAC,MAAc,EAAE,KAAa,EAAE,IAAY;gBACrF,IAAI,iBAAiB,GAAY,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;gBACzD,EAAE,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;oBACvB,GAAG,CAAC,CAAsB,UAAa,EAAb,KAAA,KAAK,CAAC,OAAO,EAAb,cAAa,EAAb,IAAa;wBAAlC,IAAM,WAAW,SAAA;wBACpB,EAAE,CAAC,CAAC,WAAW,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BACrE,iBAAiB,GAAG,IAAI,CAAC;4BACzB,KAAK,CAAC;wBACR,CAAC;qBACF;gBACH,CAAC;gBAED,EAAE,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;oBACtB,IAAM,aAAa,GAAqB,kBAAS,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC;oBAEhE,sFAAsF;oBACtF,aAAa,CAAC,yBAAyB,GAAM,WAAW,CAAC,YAAY,CAAC,SAAS,OAAI,CAAC;oBACpF,aAAa,CAAC,UAAU,GAAG,IAAI,CAAC;oBAEhC,EAAE,CAAC,CAAC,KAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;wBAC5B,aAAa,CAAC,SAAS,GAAG,KAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC;wBACvD,EAAE,CAAC,CAAC,KAAI,CAAC,OAAO,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;4BACxC,aAAa,CAAC,SAAS,GAAG,aAAa,CAAC,SAAS,CAAC,OAAO,CAAC,WAAW,EAAE,qBAAY,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;iCAC9C,OAAO,CAAC,WAAW,EAAE,KAAK,CAAC,YAAY,CAAC,CAAC;wBAC7F,CAAC;oBACH,CAAC;oBAED,MAAM,CAAC;wBACL,gCAAgC;wBAChC,gBAAgB;wBACd,oCAAoB,CAAC,aAAa,EAAE,OAAO,CAAC,KAAK,CAAC;wBACpD,OAAO;wBACP,EAAE;wBACF,MAAM;qBACP,CAAC,IAAI,CAAC,QAAG,CAAC,CAAC;gBACd,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,MAAM,CAAC,MAAM,CAAC;gBAChB,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IACH,0BAAC;AAAD,CApDA,AAoDC,IAAA;AApDY,kDAAmB","file":"SetPublicPathPlugin.js","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\n\r\nimport { EOL } from 'os';\r\nimport {\r\n  cloneDeep,\r\n  escapeRegExp\r\n} from 'lodash';\r\nimport {\r\n  Plugin,\r\n  Webpack\r\n} from 'webpack';\r\nimport * as ITapable from 'tapable';\r\n\r\n/**\r\n * The base options for setting the webpack public path at runtime.\r\n *\r\n * @public\r\n */\r\nexport interface ISetWebpackPublicPathOptions {\r\n  /**\r\n   * Use the System.baseURL property if it is defined.\r\n   */\r\n  systemJs?: boolean;\r\n\r\n  /**\r\n   * Use the specified string as a URL prefix after the SystemJS path or the publicPath option.\r\n   * If neither systemJs nor publicPath is defined, this option will not apply and an exception will be thrown.\r\n   */\r\n  urlPrefix?: string;\r\n\r\n  /**\r\n   * Use the specified path as the base public path.\r\n   */\r\n  publicPath?: string;\r\n\r\n  /**\r\n   * Check for a variable with this name on the page and use its value as a regular expression against script paths to\r\n   *  the bundle's script. If a value foo is passed into regexVariable, the produced bundle will look for a variable\r\n   *  called foo during initialization, and if a foo variable is found, use its value as a regular expression to detect\r\n   *  the bundle's script.\r\n   *\r\n   * See the README for more information.\r\n   */\r\n  regexVariable?: string;\r\n\r\n  /**\r\n   * A function that returns a snippet of code that manipulates the variable with the name that's specified in the\r\n   *  parameter. If this parameter isn't provided, no post-processing code is included. The variable must be modified\r\n   *  in-place - the processed value should not be returned.\r\n   *\r\n   * See the README for more information.\r\n   */\r\n  getPostProcessScript?: (varName: string) => string;\r\n}\r\n\r\n/**\r\n * Options for the set-webpack-public-path plugin.\r\n *\r\n * @public\r\n */\r\nexport interface ISetWebpackPublicPathPluginOptions extends ISetWebpackPublicPathOptions {\r\n  /**\r\n   * An object that describes how the public path should be discovered.\r\n   */\r\n  scriptName?: {\r\n    /**\r\n     * A regular expression expressed as a string to be applied to all script paths on the page.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * If true, the name property is tokenized.\r\n     *\r\n     * See the README for more information.\r\n     */\r\n    isTokenized: boolean;\r\n  };\r\n}\r\n\r\nimport {\r\n  IInternalOptions,\r\n  getSetPublicPathCode\r\n} from './codeGenerator';\r\n\r\ninterface IAsset {\r\n}\r\n\r\ninterface IChunk {\r\n  modules: IModule[];\r\n  chunks: IChunk[];\r\n  name: string;\r\n  renderedHash: string;\r\n}\r\n\r\ninterface IModule {\r\n  assets: IAsset[];\r\n}\r\n\r\ninterface IMainTemplate extends ITapable {\r\n  requireFn: string;\r\n}\r\n\r\ninterface ICompilation {\r\n  mainTemplate: IMainTemplate;\r\n}\r\n\r\n/**\r\n * This simple plugin sets the __webpack_public_path__ variable to a value specified in the arguments,\r\n *  optionally appended to the SystemJs baseURL property.\r\n *\r\n * @public\r\n */\r\nexport class SetPublicPathPlugin implements Plugin {\r\n  public options: ISetWebpackPublicPathPluginOptions;\r\n\r\n  constructor(options: ISetWebpackPublicPathPluginOptions) {\r\n    this.options = options;\r\n  }\r\n\r\n  // This type should be \"compiler,\" but there's another type mismatch issue so we have to stay on\r\n  //  @types/webpack@2.2.4 for now.\r\n  public apply(compiler: Webpack & ITapable): void {\r\n    const self: SetPublicPathPlugin = this;\r\n    compiler.plugin('compilation', (compilation: ICompilation, params: Object): void => {\r\n      compilation.mainTemplate.plugin('startup', (source: string, chunk: IChunk, hash: string) => {\r\n        let assetOrChunkFound: boolean = chunk.chunks.length > 0;\r\n        if (!assetOrChunkFound) {\r\n          for (const innerModule of chunk.modules) {\r\n            if (innerModule.assets && Object.keys(innerModule.assets).length > 0) {\r\n              assetOrChunkFound = true;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (assetOrChunkFound) {\r\n          const moduleOptions: IInternalOptions = cloneDeep(this.options);\r\n\r\n          // If this module has ownership over any chunks or assets, inject the public path code\r\n          moduleOptions.webpackPublicPathVariable = `${compilation.mainTemplate.requireFn}.p`;\r\n          moduleOptions.linePrefix = '  ';\r\n\r\n          if (this.options.scriptName) {\r\n            moduleOptions.regexName = this.options.scriptName.name;\r\n            if (this.options.scriptName.isTokenized) {\r\n              moduleOptions.regexName = moduleOptions.regexName.replace(/\\[name\\]/g, escapeRegExp(chunk.name))\r\n                                                               .replace(/\\[hash\\]/g, chunk.renderedHash);\r\n            }\r\n          }\r\n\r\n          return [\r\n            '// Set the webpack public path',\r\n            '(function () {',\r\n              getSetPublicPathCode(moduleOptions, console.error),\r\n            '})();',\r\n            '',\r\n            source\r\n          ].join(EOL);\r\n        } else {\r\n          return source;\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"..\\src"}