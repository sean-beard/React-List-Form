"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
 * See LICENSE in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var os_1 = require("os");
var lodash_1 = require("lodash");
var codeGenerator_1 = require("./codeGenerator");
/**
 * This simple plugin sets the __webpack_public_path__ variable to a value specified in the arguments,
 *  optionally appended to the SystemJs baseURL property.
 *
 * @public
 */
var SetPublicPathPlugin = (function () {
    function SetPublicPathPlugin(options) {
        this.options = options;
    }
    // This type should be "compiler," but there's another type mismatch issue so we have to stay on
    //  @types/webpack@2.2.4 for now.
    SetPublicPathPlugin.prototype.apply = function (compiler) {
        var _this = this;
        var self = this;
        compiler.plugin('compilation', function (compilation, params) {
            compilation.mainTemplate.plugin('startup', function (source, chunk, hash) {
                var assetOrChunkFound = chunk.chunks.length > 0;
                if (!assetOrChunkFound) {
                    for (var _i = 0, _a = chunk.modules; _i < _a.length; _i++) {
                        var innerModule = _a[_i];
                        if (innerModule.assets && Object.keys(innerModule.assets).length > 0) {
                            assetOrChunkFound = true;
                            break;
                        }
                    }
                }
                if (assetOrChunkFound) {
                    var moduleOptions = lodash_1.cloneDeep(_this.options);
                    // If this module has ownership over any chunks or assets, inject the public path code
                    moduleOptions.webpackPublicPathVariable = compilation.mainTemplate.requireFn + ".p";
                    moduleOptions.linePrefix = '  ';
                    if (_this.options.scriptName) {
                        moduleOptions.regexName = _this.options.scriptName.name;
                        if (_this.options.scriptName.isTokenized) {
                            moduleOptions.regexName = moduleOptions.regexName.replace(/\[name\]/g, lodash_1.escapeRegExp(chunk.name))
                                .replace(/\[hash\]/g, chunk.renderedHash);
                        }
                    }
                    return [
                        '// Set the webpack public path',
                        '(function () {',
                        codeGenerator_1.getSetPublicPathCode(moduleOptions, console.error),
                        '})();',
                        '',
                        source
                    ].join(os_1.EOL);
                }
                else {
                    return source;
                }
            });
        });
    };
    return SetPublicPathPlugin;
}());
exports.SetPublicPathPlugin = SetPublicPathPlugin;

//# sourceMappingURL=SetPublicPathPlugin.js.map
