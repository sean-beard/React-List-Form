"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
 * See LICENSE in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var os_1 = require("os");
var uglify = require("uglify-js");
exports.registryVariableName = 'window.__setWebpackPublicPathLoaderSrcRegistry__';
var varName = 'publicPath';
function getSetPublicPathCode(options, emitWarning) {
    if (!options.webpackPublicPathVariable) {
        throw '"webpackPublicPathVariable" option must be defined.';
    }
    var lines = [];
    if (options.regexName) {
        // Double-escape backslashes to make them show up as single backslashes in regexps.
        var escapedRegex = options.regexName.replace(/\\/, '\\\\');
        lines = [
            "var scripts = document.getElementsByTagName('script');"
        ];
        var regexInitializationSnippet = "new RegExp('" + escapeSingleQuotes(escapedRegex) + "', 'i')";
        var regexVarName = options.regexVariable;
        if (options.regexVariable) {
            lines.push.apply(lines, [
                "var regex = (typeof " + regexVarName + " !== 'undefined') ? " + regexVarName + " : " + regexInitializationSnippet + ";"
            ]);
        }
        else {
            lines.push.apply(lines, [
                "var regex = " + regexInitializationSnippet + ";"
            ]);
        }
        lines.push.apply(lines, [
            "var " + varName + ";",
            '',
            'if (scripts && scripts.length) {',
            '  for (var i = 0; i < scripts.length; i++) {',
            '    if (!scripts[i]) continue;',
            "    var path = scripts[i].getAttribute('src');",
            '    if (path && path.match(regex)) {',
            "      " + varName + " = path.substring(0, path.lastIndexOf('/') + 1);",
            '      break;',
            '    }',
            '  }',
            '}',
            '',
            "if (!" + varName + ") {",
            "  for (var global in " + exports.registryVariableName + ") {",
            '    if (global && global.match(regex)) {',
            "      " + varName + " = global.substring(0, global.lastIndexOf('/') + 1);",
            '      break;',
            '    }',
            '  }',
            '}'
        ]);
        if (options.getPostProcessScript) {
            lines.push.apply(lines, [
                '',
                "if (" + varName + ") {",
                "  " + options.getPostProcessScript(varName) + ";",
                '}',
                ''
            ]);
        }
    }
    else {
        if (options.publicPath) {
            lines.push.apply(lines, [
                "var " + varName + " = '" + appendSlashAndEscapeSingleQuotes(options.publicPath) + "';",
                ''
            ]);
        }
        else if (options.systemJs) {
            lines.push.apply(lines, [
                "var " + varName + " = window.System ? window.System.baseURL || '' : '';",
                "if (" + varName + " !== '' && " + varName + ".substr(-1) !== '/') " + varName + " += '/';",
                ''
            ]);
        }
        else {
            emitWarning("Neither 'publicPath' nor 'systemJs' is defined, so the public path will not be modified");
            return '';
        }
        if (options.urlPrefix && options.urlPrefix !== '') {
            lines.push.apply(lines, [
                varName + " += '" + appendSlashAndEscapeSingleQuotes(options.urlPrefix) + "';",
                ''
            ]);
        }
        if (options.getPostProcessScript) {
            lines.push.apply(lines, [
                "if (" + varName + ") {",
                "  " + options.getPostProcessScript(varName) + ";",
                '}',
                ''
            ]);
        }
    }
    lines.push(options.webpackPublicPathVariable + " = " + varName + ";");
    return joinLines(lines, options.linePrefix);
}
exports.getSetPublicPathCode = getSetPublicPathCode;
/**
 * /**
 * This function returns a block of JavaScript that maintains a global register of script tags.
 *
 * @param debug - If true, the code returned code is not minified. Defaults to false.
 *
 * @public
 */
function getGlobalRegisterCode(debug) {
    if (debug === void 0) { debug = false; }
    var lines = [
        '(function(){',
        "if (!" + exports.registryVariableName + ") " + exports.registryVariableName + "={};",
        "var scripts = document.getElementsByTagName('script');",
        'if (scripts && scripts.length) {',
        '  for (var i = 0; i < scripts.length; i++) {',
        '    if (!scripts[i]) continue;',
        "    var path = scripts[i].getAttribute('src');",
        "    if (path) " + exports.registryVariableName + "[path]=true;",
        '  }',
        '}',
        '})();'
    ];
    var joinedScript = joinLines(lines);
    if (debug) {
        return "" + os_1.EOL + joinedScript;
    }
    else {
        var uglified = uglify.parse(joinedScript);
        uglified.figure_out_scope();
        var compressor = uglify.Compressor({
            dead_code: true
        });
        var compressed = uglified.transform(compressor);
        compressed.figure_out_scope();
        compressed.compute_char_frequency();
        compressed.mangle_names();
        return "" + os_1.EOL + compressed.print_to_string();
    }
}
exports.getGlobalRegisterCode = getGlobalRegisterCode;
function joinLines(lines, linePrefix) {
    return lines.map(function (line) {
        if (!!line) {
            return "" + (linePrefix || '') + line;
        }
        else {
            return line;
        }
    }).join(os_1.EOL).replace(new RegExp("" + os_1.EOL + os_1.EOL + "+", 'g'), "" + os_1.EOL + os_1.EOL);
}
function escapeSingleQuotes(str) {
    if (str) {
        return str.replace('\'', '\\\'');
    }
    else {
        return undefined;
    }
}
function appendSlashAndEscapeSingleQuotes(str) {
    if (str && str.substr(-1) !== '/') {
        str = str + '/';
    }
    return escapeSingleQuotes(str);
}

//# sourceMappingURL=codeGenerator.js.map
