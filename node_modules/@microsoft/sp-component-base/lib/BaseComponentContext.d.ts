import { ServiceScope } from '@microsoft/sp-core-library';
import { IClientSideComponentManifest } from '@microsoft/sp-module-interfaces';
import { PageContext } from '@microsoft/sp-page-context';
/**
 * Constructor parameters for a BaseComponentContext.
 *
 * @internal
 */
export interface IComponentContextParameters {
    /**
     * The manager's ServiceScope, which will be used to create the child
     * ServiceScope for the associated context.
     */
    readonly parentServiceScope: ServiceScope;
    /**
     * The client-side component manifest.
     */
    readonly manifest: IClientSideComponentManifest;
    /**
     * Logging service tag
     */
    readonly loggingTag: string;
    /**
     * Instance id for the client-side component.
     */
    readonly instanceId: string;
}
/**
 * The base class for context objects for client-side components.
 *
 * @remarks
 * A "context" object is a collection of well-known services and other
 * objects that are likely to be needed by any business logic working with
 * the associated component.  Each component type has its own specialized subclass
 * ofClientSideComponentContext, e.g. WebPartContext for web parts,
 * ExtensionContext for client-side extensions, etc.
 *
 * The constructor for this class is marked as internal; third party code should not inherit
 * directly from this base class.
 *
 * @internalremarks
 *
 * NOTE: The context object is a convenience that avoids the overhead of
 * properly factoring the dependencies for each class in your project,
 * in a situation where many classes have essentially the same dependencies.
 * If lots of members are added to the context without displine, it can
 * easily devolve into a poor engineering practice (where "everything depends
 * on everything else").  Think carefully before adding more objects to this
 * interface.
 *
 * Only add data properties or well-defined classes with ubiquitous applicability.
 * Do not add loose functions, callbacks, or settable properties to this class.
 *
 * @beta
 */
declare abstract class BaseComponentContext {
    /**
     * Manifest for the client side component.
     */
    readonly manifest: IClientSideComponentManifest;
    private _serviceScope;
    private _instanceId;
    private _pageContext;
    /**
     * The constructor for this class is marked as internal; third party code should not inherit
     * directly from this base class.
     *
     * @internal
     */
    constructor(parameters: IComponentContextParameters);
    /**
     * Service scope instance that is scoped to this particular web part.
     */
    readonly serviceScope: ServiceScope;
    /**
     * Instance id for the client side component.
     */
    readonly instanceId: string;
    /**
     * The page context provides standard definitions for common SharePoint objects
     * that need to be shared between the client-side application, web parts, and other
     * components.
     */
    readonly pageContext: PageContext;
}
export default BaseComponentContext;
