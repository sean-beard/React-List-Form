import { ServiceScope, IEventObserver } from '@microsoft/sp-core-library';
import { IClientSideComponentManifest } from '@microsoft/sp-module-interfaces';
import BaseComponentContext from './BaseComponentContext';
/**
 * Base class for client-side components such as BaseClientSideWebPart, BaseExtension, etc.
 *
 * @remarks
 * The constructor for this class is marked as internal; third party code should not inherit
 * directly from this base class.
 *
 * @beta
 */
declare abstract class BaseComponent implements IEventObserver {
    /**
     * Use the context object to access common services and state associated with the component.
     *
     * @remarks
     *
     * Child classes are expected to override this field by redeclaring it with a specialized type.
     * It is meant to be a read-only property; the type cannot be declared as read-only in the base class
     * (because it is initialized outside the constructor), but child classes should redeclare
     * it as readonly.
     *
     * @internalremarks
     *
     * This is a workaround for a missing compiler feature.  If the compiler issue is resolved,
     * then we can convert "context" to an ordinary property getter.
     * https://github.com/Microsoft/TypeScript/issues/338
     */
    protected context: BaseComponentContext;
    private _disposed;
    /**
     * The constructor for this class is marked as internal; third party code should not inherit
     * directly from this base class.
     *
     * @internal
     */
    constructor();
    /**
     * Disposes the component.
     * In order to write component-specific dispose mechanism, use onDispose instead.
     *
     * The onDispose event should only be raised once - if
     * this._disposed was false when the function was called.
     * (Put another way, dispose() should be a no-op if this._disposed is true.)
     */
    dispose(): void;
    /**
     * Returns true if the component has been already disposed.
     */
    readonly isDisposed: boolean;
    /**
     * Returns the manifest for the component.
     */
    readonly manifest: IClientSideComponentManifest;
    /**
     * This event hook is called immediately before the component stops being used.
     * It provides an opportunity to release any associated resources, cancel any
     * outstanding requests, etc.
     */
    protected onDispose(): void;
    /**
     * Unique identifier for the instance of the component.
     * The same component can be instantiated several times, and each instance will have a different id.
     */
    readonly instanceId: string;
    /**
     * Returns the component identifier as defined in the componentâ€™s associated manifest.
     * @remarks
     * Each client-side component has an associated manifest that is used by the sp-loader to load its scripts,
     * and which may include additional metadata about the component.
     * Manifests are tracked using a unique identifier, which is a text string containing a lower case GUID value
     */
    readonly componentId: string;
    /**
     * @internal
     */
    protected _initializeContext(context: BaseComponentContext): void;
    /**
     * Constructs the object that will be returned by the "services" property.
     *
     * @remarks
     * Child classes can expose additional services by extending the
     * IExtensionServiceCollection interface, and then overriding consumeServices()
     * function and the "services" property.
     *
     * @alpha
     */
    protected onProvideServices(serviceScope: ServiceScope): void;
}
export default BaseComponent;
