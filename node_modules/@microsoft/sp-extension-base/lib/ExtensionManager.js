"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_loader_1 = require("@microsoft/sp-loader");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var BaseExtension_1 = require("./BaseExtension");
var ExtensionStrings_resx_1 = require("./ExtensionStrings.resx");
var ExtensionManager = (function () {
    function ExtensionManager(serviceScope, expectedType) {
        this._serviceScope = serviceScope;
        this._extensionPromises = [];
        this._expectedType = expectedType;
    }
    ExtensionManager.prototype.createExtension = function (componentId, propertiesJson, contextCreator) {
        var _this = this;
        var qosMonitor = new sp_telemetry_1._QosMonitor('Extension.Create');
        if (DATACENTER) {
            var manifest_1 = sp_loader_1.SPComponentLoader
                .tryGetManifestById(componentId);
            if (!manifest_1) {
                var manifestError = new Error(sp_core_library_1.Text.format(ExtensionStrings_resx_1.default.manifestNotFound, componentId));
                qosMonitor.writeUnexpectedFailure('ManifestNotFound', manifestError, { componentId: componentId });
                return Promise.reject(manifestError);
            }
            var instanceId = sp_core_library_1.Guid.newGuid().toString();
            var loggingTag = "Extension." + manifest_1.id + "." + instanceId;
            var context_1 = contextCreator({
                manifest: manifest_1,
                parentServiceScope: this._serviceScope,
                instanceId: instanceId,
                loggingTag: loggingTag
            });
            var perfLogKeyCreate_1 = loggingTag + '.Extension.Create';
            var perfLogKeyScriptLoad_1 = loggingTag + '.Extension.ScriptLoad';
            sp_telemetry_1._PerformanceLogger.startMarkForComponent(perfLogKeyCreate_1);
            var error_1 = undefined;
            var extraData_1 = this._createQosExtraData(manifest_1.alias, manifest_1.isInternal, manifest_1.id);
            try {
                sp_telemetry_1._PerformanceLogger.startMarkForComponent(perfLogKeyScriptLoad_1);
                var modulePromise = sp_loader_1.SPComponentLoader.loadComponent(manifest_1);
                modulePromise.then(function () {
                    sp_telemetry_1._PerformanceLogger.endMarkForComponent(perfLogKeyScriptLoad_1);
                    sp_telemetry_1._PerformanceLogger.logPerformanceMetricToConsole(perfLogKeyScriptLoad_1, 'Extension.ScriptLoad', manifest_1.id, manifest_1.alias);
                });
                var createPromise = modulePromise.then(function (component) {
                    var extensionClass = component.default;
                    var extension = new extensionClass();
                    if (!(extension instanceof BaseExtension_1.default)) {
                        error_1 = new Error(ExtensionStrings_resx_1.default.expectingBaseExtension);
                        qosMonitor.writeExpectedFailure('DoesNotExtendBaseExtension', error_1, extraData_1);
                        throw error_1;
                    }
                    if (!(extension instanceof _this._expectedType)) {
                        error_1 = Error(sp_core_library_1.Text.format(ExtensionStrings_resx_1.default.wrongExtensionType, _this._expectedType));
                        qosMonitor.writeExpectedFailure('WrongExtensionType', error_1, extraData_1);
                        throw error_1;
                    }
                    return extension._init(context_1, propertiesJson).then(function () {
                        return extension;
                    }).catch(function (e) {
                        error_1 = new Error(sp_core_library_1.Text.format(ExtensionStrings_resx_1.default.extensionNotFound, componentId));
                        qosMonitor.writeExpectedFailure('ExtensionNotFound', error_1, extraData_1);
                        throw error_1;
                    });
                }, function (e) {
                    if (!error_1) {
                        error_1 = new Error(sp_core_library_1.Text.format(ExtensionStrings_resx_1.default.extensionNotFound, componentId));
                        qosMonitor.writeExpectedFailure('ExtensionNotFound', error_1, extraData_1);
                    }
                    throw error_1;
                }).then(function (extension) {
                    qosMonitor.writeSuccess(extraData_1);
                    return extension;
                });
                createPromise.then(function (moduleLibrary) {
                    sp_telemetry_1._PerformanceLogger.endMarkForComponent(perfLogKeyCreate_1);
                    sp_telemetry_1._PerformanceLogger.logPerformanceMetricToConsole(perfLogKeyScriptLoad_1, 'Extension.Create', manifest_1.id, manifest_1.alias);
                });
                this._extensionPromises.push(createPromise);
                return createPromise;
            }
            catch (e) {
                qosMonitor.writeUnexpectedFailure('UnhandledCreateError', e, extraData_1);
                return Promise.reject(e);
            }
        }
        else {
            var unsupportedOperationError = new Error(ExtensionStrings_resx_1.default.notSupportedOnPrem);
            sp_telemetry_1._TraceLogger.logError(ExtensionManager._logSource, unsupportedOperationError);
            qosMonitor.writeExpectedFailure('NotSupportedOnPrem', unsupportedOperationError);
            return Promise.reject(unsupportedOperationError);
        }
    };
    ExtensionManager.prototype.waitForInitialization = function () {
        return Promise.all(this._extensionPromises);
    };
    ExtensionManager.prototype.dispose = function () {
        var promisesToDispose = this._extensionPromises;
        this._extensionPromises = [];
        for (var _i = 0, promisesToDispose_1 = promisesToDispose; _i < promisesToDispose_1.length; _i++) {
            var promise = promisesToDispose_1[_i];
            promise.then(function (extension) {
                try {
                    extension.dispose();
                }
                catch (e) {
                    var manifest = extension.manifest;
                    sp_telemetry_1._TraceLogger.logError(ExtensionManager._logSource, new Error("Failed to dispose extension \"" + manifest.alias + "\"\n              + \" with id=" + manifest.id + ": " + e.message));
                }
            });
        }
    };
    ExtensionManager.prototype._createQosExtraData = function (alias, isInternal, manifestId) {
        var unexpectedFailureExtraData = {
            alias: alias,
            isInternal: isInternal,
            manifestId: manifestId
        };
        return unexpectedFailureExtraData;
    };
    ExtensionManager._logSource = sp_telemetry_1._LogSource.create('ExtensionManager');
    return ExtensionManager;
}());
exports.default = ExtensionManager;
