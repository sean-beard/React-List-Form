"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var GulpTask_1 = require("./GulpTask");
var FileDeletionUtility_1 = require("../utilities/FileDeletionUtility");
/**
 * The clean task is a special task which iterates through all registered
 * tasks and subtasks, collecting a list of patterns which should be deleted.
 * An instance of this task is automatically registered to the 'clean' command.
 * @public
 */
var CleanTask = (function (_super) {
    __extends(CleanTask, _super);
    /**
     * Instantiates a new CleanTask with the name 'clean'
     */
    function CleanTask() {
        return _super.call(this, 'clean') || this;
    }
    /**
     * The main function, which iterates through all uniqueTasks registered
     * to the build, and by calling the getCleanMatch() function, collects a list of
     * glob patterns which are then passed to the `del` plugin to delete them from disk.
     */
    CleanTask.prototype.executeTask = function (gulp, completeCallback) {
        var _a = this.buildConfig, distFolder = _a.distFolder, libFolder = _a.libFolder, libAMDFolder = _a.libAMDFolder, tempFolder = _a.tempFolder;
        var cleanPaths = [
            distFolder,
            libFolder,
            tempFolder
        ];
        if (libAMDFolder) {
            cleanPaths.push(libAMDFolder);
        }
        // Give each registered task an opportunity to add their own clean paths.
        for (var _i = 0, _b = this.buildConfig.uniqueTasks || []; _i < _b.length; _i++) {
            var executable = _b[_i];
            if (executable.getCleanMatch) {
                // Set the build config, as tasks need this to build up paths
                cleanPaths = cleanPaths.concat(executable.getCleanMatch(this.buildConfig));
            }
        }
        var uniquePaths = {};
        // Create dictionary of unique paths. (Could be replaced with ES6 set.)
        cleanPaths.forEach(function (cleanPath) {
            if (!!cleanPath) {
                uniquePaths[cleanPath] = cleanPath;
            }
        });
        // Reset cleanPaths to only unique non-empty paths.
        cleanPaths = [];
        for (var uniquePath in uniquePaths) {
            if (uniquePaths.hasOwnProperty(uniquePath)) {
                cleanPaths.push(uniquePath);
            }
        }
        try {
            FileDeletionUtility_1.FileDeletionUtility.deletePatterns(cleanPaths);
            completeCallback();
        }
        catch (e) {
            completeCallback(e);
        }
    };
    return CleanTask;
}(GulpTask_1.GulpTask));
exports.CleanTask = CleanTask;

//# sourceMappingURL=CleanTask.js.map
