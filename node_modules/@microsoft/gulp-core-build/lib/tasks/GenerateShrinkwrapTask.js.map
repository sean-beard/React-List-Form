{"version":3,"sources":["tasks/GenerateShrinkwrapTask.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;AAE3D,uCAAsC;AAEtC,6CAA+C;AAC/C,+BAAiC;AACjC,uBAAyB;AACzB,2BAA6B;AAE7B;;;;;GAKG;AACH;IAA4C,0CAAc;IACxD;;OAEG;IACH;eACE,kBAAM,qBAAqB,CAAC;IAC9B,CAAC;IAED;;OAEG;IACI,4CAAW,GAAlB,UACE,IAAmB,EACnB,gBAAkD;QAElD,IAAM,gBAAgB,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,qBAAqB,CAAC,CAAC;QAE7F,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;YACtC,IAAI,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;YAC7C,IAAI,CAAC,sBAAsB,CAAC,gBAAgB,CAAC,CAAC;QAChD,CAAC;QAED,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;QAC9B,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QAEpC,IAAI,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;QAC/B,aAAa,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QAErC,IAAI,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;QACzC,aAAa,CAAC,QAAQ,CAAC,sBAAsB,CAAC,CAAC;QAE/C,gBAAgB,EAAE,CAAC;QACnB,MAAM,CAAC;IACT,CAAC;IAEO,uDAAsB,GAA9B,UAA+B,UAAkB;QAC/C,IAAI,CAAC;YACH,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC1B,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACX,MAAM,IAAI,KAAK,CAAC,KAAG,CAAC,CAAC,OAAO,GAAG,EAAE,CAAC,GAAG,2HACsB,CAAC,CAAC;QAC/D,CAAC;IACH,CAAC;IACH,6BAAC;AAAD,CA3CA,AA2CC,CA3C2C,mBAAQ,GA2CnD;AA3CY,wDAAsB","file":"tasks/GenerateShrinkwrapTask.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { GulpTask } from './GulpTask';\r\nimport gulpType = require('gulp');\r\nimport * as child_process from 'child_process';\r\nimport * as rimraf from 'rimraf';\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\n\r\n/**\r\n * This provides a convenient way to more consistently generate a shrinkwrap file in\r\n * a desired manner as a gulp task, as there are many consistency issues with just\r\n * running npm-shrinkwrap directly.\r\n * @public\r\n */\r\nexport class GenerateShrinkwrapTask extends GulpTask<void> {\r\n  /**\r\n   * Instantiates a GenerateShrinkwrap task which will regenerate the shrinkwrap for a particular project\r\n   */\r\n  constructor() {\r\n    super('generate-shrinkwrap');\r\n  }\r\n\r\n  /**\r\n   * Runs npm `prune` and `update` on a package before running `shrinkwrap --dev`\r\n   */\r\n  public executeTask(\r\n    gulp: gulpType.Gulp,\r\n    completeCallback: (error?: string | Error) => void\r\n  ): NodeJS.ReadWriteStream | void {\r\n    const pathToShrinkwrap: string = path.join(this.buildConfig.rootPath, 'npm-shrinkwrap.json');\r\n\r\n    if (this.fileExists(pathToShrinkwrap)) {\r\n      this.log(`Remove existing shrinkwrap file.`);\r\n      this._dangerouslyDeletePath(pathToShrinkwrap);\r\n    }\r\n\r\n    this.log(`Running npm prune`);\r\n    child_process.execSync('npm prune');\r\n\r\n    this.log(`Running npm update`);\r\n    child_process.execSync('npm update');\r\n\r\n    this.log(`Running npm shrinkwrap --dev`);\r\n    child_process.execSync('npm shrinkwrap --dev');\r\n\r\n    completeCallback();\r\n    return;\r\n  }\r\n\r\n  private _dangerouslyDeletePath(folderPath: string): void {\r\n    try {\r\n      rimraf.sync(folderPath);\r\n    } catch (e) {\r\n      throw new Error(`${e.message}${os.EOL}Often this is caused by a file lock from a process\r\n       such as your text editor, command prompt, or \"gulp serve\"`);\r\n    }\r\n  }\r\n}"],"sourceRoot":"..\\..\\src"}