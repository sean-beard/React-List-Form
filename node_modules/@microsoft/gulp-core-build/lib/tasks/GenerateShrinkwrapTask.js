"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var GulpTask_1 = require("./GulpTask");
var child_process = require("child_process");
var rimraf = require("rimraf");
var os = require("os");
var path = require("path");
/**
 * This provides a convenient way to more consistently generate a shrinkwrap file in
 * a desired manner as a gulp task, as there are many consistency issues with just
 * running npm-shrinkwrap directly.
 * @public
 */
var GenerateShrinkwrapTask = (function (_super) {
    __extends(GenerateShrinkwrapTask, _super);
    /**
     * Instantiates a GenerateShrinkwrap task which will regenerate the shrinkwrap for a particular project
     */
    function GenerateShrinkwrapTask() {
        return _super.call(this, 'generate-shrinkwrap') || this;
    }
    /**
     * Runs npm `prune` and `update` on a package before running `shrinkwrap --dev`
     */
    GenerateShrinkwrapTask.prototype.executeTask = function (gulp, completeCallback) {
        var pathToShrinkwrap = path.join(this.buildConfig.rootPath, 'npm-shrinkwrap.json');
        if (this.fileExists(pathToShrinkwrap)) {
            this.log("Remove existing shrinkwrap file.");
            this._dangerouslyDeletePath(pathToShrinkwrap);
        }
        this.log("Running npm prune");
        child_process.execSync('npm prune');
        this.log("Running npm update");
        child_process.execSync('npm update');
        this.log("Running npm shrinkwrap --dev");
        child_process.execSync('npm shrinkwrap --dev');
        completeCallback();
        return;
    };
    GenerateShrinkwrapTask.prototype._dangerouslyDeletePath = function (folderPath) {
        try {
            rimraf.sync(folderPath);
        }
        catch (e) {
            throw new Error("" + e.message + os.EOL + "Often this is caused by a file lock from a process\n       such as your text editor, command prompt, or \"gulp serve\"");
        }
    };
    return GenerateShrinkwrapTask;
}(GulpTask_1.GulpTask));
exports.GenerateShrinkwrapTask = GenerateShrinkwrapTask;

//# sourceMappingURL=GenerateShrinkwrapTask.js.map
