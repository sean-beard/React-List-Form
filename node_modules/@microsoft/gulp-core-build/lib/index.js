"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:max-line-length */
var path = require("path");
var GulpTask_1 = require("./tasks/GulpTask");
var GulpProxy_1 = require("./GulpProxy");
var CleanTask_1 = require("./tasks/CleanTask");
var CleanFlagTask_1 = require("./tasks/CleanFlagTask");
var State_1 = require("./State");
var logging_1 = require("./logging");
var logging_2 = require("./logging");
var config_1 = require("./config");
var notifier = require("node-notifier");
var logging_3 = require("./logging");
exports.addSuppression = logging_3.addSuppression;
exports.coverageData = logging_3.coverageData;
exports.functionalTestRun = logging_3.functionalTestRun;
exports.getErrors = logging_3.getErrors;
exports.getWarnings = logging_3.getWarnings;
exports.TestResultState = logging_3.TestResultState;
exports.warn = logging_3.warn;
exports.verbose = logging_3.verbose;
exports.error = logging_3.error;
exports.fileError = logging_3.fileError;
exports.fileLog = logging_3.fileLog;
exports.fileWarning = logging_3.fileWarning;
exports.reset = logging_3.reset;
exports.log = logging_3.log;
exports.logSummary = logging_3.logSummary;
__export(require("./tasks/CopyTask"));
__export(require("./tasks/GenerateShrinkwrapTask"));
__export(require("./tasks/GulpTask"));
__export(require("./tasks/CleanTask"));
__export(require("./tasks/CleanFlagTask"));
__export(require("./tasks/ValidateShrinkwrapTask"));
__export(require("./jsonUtilities/SchemaValidator"));
var _taskMap = {};
var _uniqueTasks = [];
var packageFolder = (State_1.builtPackage.directories && State_1.builtPackage.directories.packagePath)
    ? State_1.builtPackage.directories.packagePath
    : '';
var _buildConfig = {
    // gulp and rootPath are set to undefined here because they'll be defined in the initialize function below,
    //  but we don't want their types to be nullable because a task that uses StrictNullChecks should expect them
    //  to be defined without checking their values.
    gulp: undefined,
    rootPath: undefined,
    packageFolder: packageFolder,
    srcFolder: 'src',
    distFolder: path.join(packageFolder, 'dist'),
    libAMDFolder: undefined,
    libFolder: path.join(packageFolder, 'lib'),
    tempFolder: 'temp',
    properties: {},
    relogIssues: config_1.getFlagValue('relogIssues', true),
    showToast: config_1.getFlagValue('showToast', true),
    buildSuccessIconPath: path.resolve(__dirname, 'pass.png'),
    buildErrorIconPath: path.resolve(__dirname, 'fail.png'),
    verbose: config_1.getFlagValue('verbose', false),
    production: config_1.getFlagValue('production', false),
    args: State_1.args,
    shouldWarningsFailBuild: false
};
/**
 * Merges the given build config settings into existing settings.
 *
 * @param config - The build config settings.
 * @public
 */
function setConfig(config) {
    /* tslint:disable:typedef */
    var objectAssign = require('object-assign');
    /* tslint:enable:typedef */
    _buildConfig = objectAssign({}, _buildConfig, config);
}
exports.setConfig = setConfig;
/**
 * Merges the given build config settings into existing settings.
 *
 * @param  config - The build config settings.
 * @public
 */
function mergeConfig(config) {
    /* tslint:disable:typedef */
    var merge = require('lodash.merge');
    /* tslint:enable:typedef */
    _buildConfig = merge({}, _buildConfig, config);
}
exports.mergeConfig = mergeConfig;
/**
 * Replaces the build config.
 *
 * @param  config - The build config settings.
 * @public
 */
function replaceConfig(config) {
    _buildConfig = config;
}
exports.replaceConfig = replaceConfig;
/**
 * Gets the current config.
 * @returns the current build configuration
 * @public
 */
function getConfig() {
    return _buildConfig;
}
exports.getConfig = getConfig;
/** @public */
exports.cleanFlag = new CleanFlagTask_1.CleanFlagTask();
/**
 * Registers an IExecutable to gulp so that it can be called from the command line
 * @param taskName - the name of the task, can be called from the command line (e.g. "gulp <taskName>")
 * @param taskExecutable - the executable to execute when the task is invoked
 * @returns the task parameter
 * @public
 */
function task(taskName, taskExecutable) {
    taskExecutable = serial(exports.cleanFlag, taskExecutable);
    _taskMap[taskName] = taskExecutable;
    _trackTask(taskExecutable);
    return taskExecutable;
}
exports.task = task;
/** @public */
var CustomTask = (function (_super) {
    __extends(CustomTask, _super);
    function CustomTask(name, fn) {
        var _this = _super.call(this, name) || this;
        _this._fn = fn.bind(_this);
        return _this;
    }
    CustomTask.prototype.executeTask = function (gulp, completeCallback) {
        return this._fn(gulp, getConfig(), completeCallback);
    };
    return CustomTask;
}(GulpTask_1.GulpTask));
/**
 * Creates a new subtask from a function callback. Useful as a shorthand way
 * of defining tasks directly in a gulpfile.
 *
 * @param taskName - the name of the task, appearing in build logs
 * @param fn - the callback function to execute when this task runs
 * @returns an IExecutable which can be registered to the command line with task()
 * @public
 */
function subTask(taskName, fn) {
    var customTask = new CustomTask(taskName, fn);
    return customTask;
}
exports.subTask = subTask;
/**
 * Defines a gulp watch and maps it to a given IExecutable.
 *
 * @param watchMatch - the list of files patterns to watch
 * @param taskExecutable - the task to execute when a file changes
 * @returns IExecutable
 * @public
 */
function watch(watchMatch, taskExecutable) {
    _trackTask(taskExecutable);
    var isWatchRunning = false;
    var shouldRerunWatch = false;
    var lastError = undefined;
    var successMessage = 'Build succeeded';
    var failureMessage = 'Build failed';
    return {
        execute: function (buildConfig) {
            return new Promise(function () {
                function _runWatch() {
                    if (isWatchRunning) {
                        shouldRerunWatch = true;
                        return Promise.resolve();
                    }
                    else {
                        isWatchRunning = true;
                        return _executeTask(taskExecutable, buildConfig)
                            .then(function () {
                            if (lastError) {
                                lastError = undefined;
                                if (buildConfig.showToast) {
                                    notifier.notify({
                                        title: successMessage,
                                        message: (State_1.builtPackage ? State_1.builtPackage.name : ''),
                                        icon: buildConfig.buildSuccessIconPath
                                    });
                                }
                                else {
                                    logging_1.log(successMessage);
                                }
                            }
                            return _finalizeWatch();
                        })
                            .catch(function (error) {
                            if (!lastError || lastError !== error) {
                                lastError = error;
                                if (buildConfig.showToast) {
                                    notifier.notify({
                                        title: failureMessage,
                                        message: error,
                                        icon: buildConfig.buildErrorIconPath
                                    });
                                }
                                else {
                                    logging_1.log(failureMessage);
                                }
                            }
                            return _finalizeWatch();
                        });
                    }
                }
                function _finalizeWatch() {
                    isWatchRunning = false;
                    if (shouldRerunWatch) {
                        shouldRerunWatch = false;
                        return _runWatch();
                    }
                    return Promise.resolve();
                }
                logging_2.setWatchMode();
                buildConfig.gulp.watch(watchMatch, _runWatch);
                _runWatch();
            });
        }
    };
}
exports.watch = watch;
/**
 * Takes in IExecutables as arguments and returns an IExecutable that will execute them in serial.
 * @public
 */
function serial() {
    var tasks = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        tasks[_i] = arguments[_i];
    }
    var flatTasks = _flatten(tasks).filter(function (taskExecutable) {
        // tslint:disable-next-line:no-null-keyword
        return taskExecutable !== null && taskExecutable !== undefined;
    });
    for (var _a = 0, flatTasks_1 = flatTasks; _a < flatTasks_1.length; _a++) {
        var flatTask = flatTasks_1[_a];
        _trackTask(flatTask);
    }
    return {
        execute: function (buildConfig) {
            var output = Promise.resolve();
            var _loop_1 = function (taskExecutable) {
                output = output.then(function () { return _executeTask(taskExecutable, buildConfig); });
            };
            for (var _i = 0, flatTasks_2 = flatTasks; _i < flatTasks_2.length; _i++) {
                var taskExecutable = flatTasks_2[_i];
                _loop_1(taskExecutable);
            }
            return output;
        }
    };
}
exports.serial = serial;
/**
 * Takes in IExecutables as arguments and returns an IExecutable that will execute them in parallel.
 * @public
 */
function parallel() {
    var tasks = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        tasks[_i] = arguments[_i];
    }
    var flatTasks = _flatten(tasks).filter(function (taskExecutable) {
        // tslint:disable-next-line:no-null-keyword
        return taskExecutable !== null && taskExecutable !== undefined;
    });
    for (var _a = 0, flatTasks_3 = flatTasks; _a < flatTasks_3.length; _a++) {
        var flatTask = flatTasks_3[_a];
        _trackTask(flatTask);
    }
    return {
        // tslint:disable-next-line:no-any
        execute: function (buildConfig) {
            return new Promise(function (resolve, reject) {
                var promises = [];
                for (var _i = 0, flatTasks_4 = flatTasks; _i < flatTasks_4.length; _i++) {
                    var taskExecutable = flatTasks_4[_i];
                    promises.push(_executeTask(taskExecutable, buildConfig));
                }
                // Use promise all to make sure errors are propagated correctly
                Promise.all(promises).then(resolve, reject);
            });
        }
    };
}
exports.parallel = parallel;
/**
 * Initializes the gulp tasks.
 * @public
 */
function initialize(gulp) {
    _buildConfig.rootPath = process.cwd();
    _buildConfig.gulp = new GulpProxy_1.GulpProxy(gulp);
    _buildConfig.uniqueTasks = _uniqueTasks;
    _handleCommandLineArguments();
    config_1.setConfigDefaults(_buildConfig);
    for (var _i = 0, _a = _buildConfig.uniqueTasks; _i < _a.length; _i++) {
        var uniqueTask = _a[_i];
        if (uniqueTask.onRegister) {
            uniqueTask.onRegister();
        }
    }
    logging_2.initialize(gulp, undefined, undefined);
    Object.keys(_taskMap).forEach(function (taskName) { return _registerTask(gulp, taskName, _taskMap[taskName]); });
    logging_2.markTaskCreationTime();
}
exports.initialize = initialize;
/**
 * Registers a given gulp task given a name and an IExecutable.
 */
function _registerTask(gulp, taskName, taskExecutable) {
    gulp.task(taskName, function (cb) {
        _executeTask(taskExecutable, _buildConfig)
            .then(function () {
            cb();
        }, function (error) {
            cb(logging_2.generateGulpError(error));
        });
    });
}
/**
 * Executes a given IExecutable.
 */
function _executeTask(taskExecutable, buildConfig) {
    // Try to fallback to the default task if provided.
    if (taskExecutable && !taskExecutable.execute) {
        /* tslint:disable:no-any */
        if (taskExecutable.default) {
            taskExecutable = taskExecutable.default;
        }
        /* tslint:enable:no-any */
    }
    // If the task is missing, throw a meaningful error.
    if (!taskExecutable || !taskExecutable.execute) {
        return Promise.reject(new Error("A task was scheduled, but the task was null. This probably means the task wasn't imported correctly."));
    }
    if (taskExecutable.isEnabled === undefined || taskExecutable.isEnabled(buildConfig)) {
        var startTime_1 = process.hrtime();
        if (buildConfig.onTaskStart && taskExecutable.name) {
            buildConfig.onTaskStart(taskExecutable.name);
        }
        var taskPromise = taskExecutable.execute(buildConfig)
            .then(function () {
            if (buildConfig.onTaskEnd && taskExecutable.name) {
                buildConfig.onTaskEnd(taskExecutable.name, process.hrtime(startTime_1));
            }
        }, 
        // tslint:disable-next-line:no-any
        function (error) {
            if (buildConfig.onTaskEnd && taskExecutable.name) {
                buildConfig.onTaskEnd(taskExecutable.name, process.hrtime(startTime_1), error);
            }
            return Promise.reject(error);
        });
        return taskPromise;
    }
    // No-op otherwise.
    return Promise.resolve();
}
function _trackTask(taskExecutable) {
    if (_uniqueTasks.indexOf(taskExecutable) < 0) {
        _uniqueTasks.push(taskExecutable);
    }
}
/**
 * Flattens a set of arrays into a single array.
 */
function _flatten(oArr) {
    var output = [];
    function traverse(arr) {
        for (var i = 0; i < arr.length; ++i) {
            if (Array.isArray(arr[i])) {
                traverse(arr[i]);
            }
            else {
                output.push(arr[i]);
            }
        }
    }
    traverse(oArr);
    return output;
}
function _handleCommandLineArguments() {
    _handleTasksListArguments();
}
function _handleTasksListArguments() {
    /* tslint:disable:no-string-literal */
    if (State_1.args['tasks'] || State_1.args['tasks-simple'] || State_1.args['T']) {
        global['dontWatchExit'] = true;
    }
    if (State_1.args['h']) {
        // we are showing a help command prompt via yargs or ts-command-line
        global['dontWatchExit'] = true;
    }
    /* tslint:enable:no-string-literal */
}
/** @public */
exports.clean = new CleanTask_1.CleanTask();
// Register default clean task.
task('clean', exports.clean);

//# sourceMappingURL=index.js.map
