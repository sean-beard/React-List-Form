{"version":3,"sources":["IBuildConfig.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D","file":"IBuildConfig.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as gulp from 'gulp';\r\nimport { GulpProxy } from './GulpProxy';\r\nimport { IExecutable } from './IExecutable';\r\n\r\n/* tslint:disable:no-any */\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IBuildConfig {\r\n  /**\r\n   * Proxy gulp instance.\r\n   */\r\n  gulp: GulpProxy | gulp.Gulp;\r\n\r\n  /**\r\n   * Array of all unique tasks.\r\n   */\r\n  uniqueTasks?: IExecutable[];\r\n\r\n  /**\r\n   * Full physical path to the root path directory.\r\n   */\r\n  rootPath: string;\r\n\r\n  /**\r\n   * Package output folder in which publishable output should be dropped.\r\n   * Defaults to package.json directories/packagePath value.\r\n   */\r\n  packageFolder: string;\r\n\r\n  /**\r\n   * Source folder name where source is included.\r\n   */\r\n  srcFolder: string;\r\n\r\n  /**\r\n   * Unbundled commonjs modules folder, which will be referenced by other node projects.\r\n   */\r\n  libFolder: string;\r\n\r\n  /**\r\n   * Unbundled amd modules folder, which can be optionally set to cause build tasks to\r\n   * output AMD modules if required for legacy reasons.\r\n   */\r\n  libAMDFolder?: string;\r\n\r\n  /**\r\n   * Unbundled es6 modules folder, which can be optionally set to cause build tasks to output es6 modules.\r\n   */\r\n  libES6Folder?: string;\r\n\r\n  /**\r\n   * Dist folder, which includes all bundled resources which would be copied to a CDN for the project.\r\n   */\r\n  distFolder: string;\r\n\r\n  /**\r\n   * Temp folder for storing temporary files.\r\n   */\r\n  tempFolder: string;\r\n\r\n  /**\r\n   * Re-log known issues after the build is complete.\r\n   */\r\n  relogIssues?: boolean;\r\n\r\n  /**\r\n   * Show toast on build failures and recoveries.\r\n   */\r\n  showToast?: boolean;\r\n\r\n  /**\r\n   * Path to icon shown in toast on a successful build recovery.\r\n   */\r\n  buildSuccessIconPath?: string;\r\n\r\n  /**\r\n   * Path to icon shown in toast on a build error.\r\n   */\r\n  buildErrorIconPath?: string;\r\n\r\n  /**\r\n   * Use verbose logging.\r\n   */\r\n  verbose: boolean;\r\n\r\n  /**\r\n   * Build a full production build.\r\n   */\r\n  production: boolean;\r\n\r\n  /**\r\n   * Should warnings be written to STDERR and cause build to return non-zero exit code\r\n   */\r\n  shouldWarningsFailBuild?: boolean;\r\n\r\n  /**\r\n   * Arguments passed in.\r\n   */\r\n  args: { [name: string]: string | boolean };\r\n\r\n  /**\r\n   * Arbitrary property bag for a task to store environment values in.\r\n   */\r\n  properties?: { [key: string]: any };\r\n\r\n  /**\r\n   * Optional callback to be executed when a task starts.\r\n   */\r\n  onTaskStart?: (taskName: string) => void;\r\n\r\n  /**\r\n   * Optional callback to be executed when a task ends.\r\n   */\r\n  onTaskEnd?: (taskName: string, duration: number[], error?: any) => void;\r\n\r\n  /**\r\n   * Flag used to indicate if the build is redundant and should be exited prematurely.\r\n   */\r\n  isRedundantBuild?: boolean;\r\n}\r\n"],"sourceRoot":"..\\src"}