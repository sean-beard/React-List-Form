{"version":3,"sources":["IExecutable.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D","file":"IExecutable.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { IBuildConfig } from './IBuildConfig';\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IExecutable {\r\n  /**\r\n   * Helper function which is called one time when the task is registered\r\n   */\r\n  onRegister?: () => void;\r\n\r\n  /**\r\n   * Execution method.\r\n   */\r\n  execute: (config: IBuildConfig) => Promise<void>;\r\n\r\n  /**\r\n   * Optional name to give the task. If no name is provided, the \"Running subtask\" logging will be silent.\r\n   */\r\n  name?: string;\r\n\r\n  /**\r\n   * Optional callback to indicate if the task is enabled or not.\r\n   */\r\n  isEnabled?: (buildConfig: IBuildConfig) => boolean;\r\n\r\n  /**\r\n   * Optional method to indicate directory matches to clean up when the clean task is run.\r\n   */\r\n  getCleanMatch?: (config: IBuildConfig, taskConfig?: any) => string[]; /* tslint:disable-line:no-any */\r\n}\r\n"],"sourceRoot":"..\\src"}