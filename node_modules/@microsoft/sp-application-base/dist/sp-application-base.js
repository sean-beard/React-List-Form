define("4df9bb86-ab0a-4aab-ab5f-48bf167048fb_1.2.0", ["@microsoft/sp-core-library","@ms/sp-telemetry","@microsoft/sp-http","@microsoft/sp-extension-base","@microsoft/sp-page-context","@microsoft/decorators","@microsoft/sp-loader","@microsoft/sp-lodash-subset"], function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_17__, __WEBPACK_EXTERNAL_MODULE_37__, __WEBPACK_EXTERNAL_MODULE_38__, __WEBPACK_EXTERNAL_MODULE_86__, __WEBPACK_EXTERNAL_MODULE_188__, __WEBPACK_EXTERNAL_MODULE_189__) { return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 190);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_0__;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:CoverageThreshold(72)

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var EventBase_1 = __webpack_require__(8);
function logData(data, parent) {
    return new this(data, EventBase_1.ClonedEventType.Single, parent);
}
function logEmptyData(parent) {
    return new this(null, EventBase_1.ClonedEventType.Single, parent);
}
function createSingleEvent(props, metadata, baseClass) {
    var SingleEvent = (function (_super) {
        __extends(SingleEvent, _super);
        function SingleEvent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return SingleEvent;
    }(EventBase_1.EventBase));
    SingleEvent.logData = metadata ? logData : logEmptyData;
    EventBase_1.addEventProps(SingleEvent.prototype, props, metadata || {}, baseClass);
    return SingleEvent;
}
exports.createSingleEvent = createSingleEvent;


/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var CaughtError_event_1 = __webpack_require__(32);
var QosError_event_1 = __webpack_require__(56);
var Verbose_event_1 = __webpack_require__(60);
var CircularBuffer_1 = __webpack_require__(126);
var ObjectUtil_1 = __webpack_require__(6);
var MAX_VERBOSE_LOGS = 50;
var ErrorHelper = (function () {
    function ErrorHelper() {
    }
    ErrorHelper.verbose = function (message, eventName) {
        ErrorHelper._verboseLogs.push({
            name: eventName,
            message: message
        });
    };
    ErrorHelper.logError = function (error, extraData, qosData) {
        if (!error || error._handled) {
            return;
        }
        var message = this.getErrorMessage(error);
        var stack = error && error.stack ? error.stack : "";
        var schema;
        while (Boolean(schema = ErrorHelper._verboseLogs.popOldest())) {
            Verbose_event_1.Verbose.logData(schema);
        }
        if (qosData && qosData.eventName) {
            QosError_event_1.QosError.logData({
                name: qosData.eventName,
                resultCode: qosData.resultCode,
                resultType: qosData.resultType,
                extraData: extraData || undefined,
                message: message,
                stack: stack
            });
        }
        else {
            CaughtError_event_1.CaughtError.logData({
                extraData: extraData || undefined,
                message: message,
                stack: stack
            });
        }
    };
    ErrorHelper.log = function (error, eventName, resultCode, resultType) {
        this.logError(error, null, { eventName: eventName, resultCode: resultCode, resultType: resultType });
    };
    /**
     * Extract the error message from the error
     */
    ErrorHelper.getErrorMessage = function (error) {
        var message = '';
        if (error) {
            if (error.message) {
                message = error.message;
            }
            else if (error.description) {
                message = error.description;
            }
            else if (typeof (error) === 'object') {
                message = ObjectUtil_1.safeSerialize(error);
            }
            else if (error.toString) {
                message = error.toString();
            }
        }
        return message;
    };
    return ErrorHelper;
}());
ErrorHelper._verboseLogs = new CircularBuffer_1.default(MAX_VERBOSE_LOGS);
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ErrorHelper;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Bugs often appear in async code when stuff gets disposed, but async operations don't get canceled.
 * This Async helper class solves these issues by tying async code to the lifetime of a disposable object.
 *
 * Usage: Anything class extending from BaseModel can access this helper via this.async. Otherwise create a
 * new instance of the class and remember to call dispose() during your code's dispose handler.
 */

function noop() {
    // Do nothing.
}
var Async = (function () {
    function Async(parent, onError) {
        this._isDisposed = false;
        this._parent = parent || null;
        this._onErrorHandler = onError;
        this._timeoutIds = null;
        this._immediateIds = null;
        this._animationFrameIds = null;
        this._intervalIds = null;
    }
    /**
     * Dispose function, clears all async operations.
     */
    Async.prototype.dispose = function () {
        if (this._isDisposed) {
            return;
        }
        this._isDisposed = true;
        this._parent = null;
        // Clear timeouts.
        if (this._timeoutIds) {
            for (var _i = 0, _a = Object.keys(this._timeoutIds); _i < _a.length; _i++) {
                var id = _a[_i];
                this.clearTimeout(Number(id));
            }
            this._timeoutIds = null;
        }
        // Clear immediates.
        if (this._immediateIds) {
            for (var _b = 0, _c = Object.keys(this._immediateIds); _b < _c.length; _b++) {
                var id = _c[_b];
                this.clearImmediate(Number(id));
            }
            this._immediateIds = null;
        }
        // Clear intervals.
        if (this._intervalIds) {
            for (var _d = 0, _e = Object.keys(this._intervalIds); _d < _e.length; _d++) {
                var id = _e[_d];
                this.clearInterval(Number(id));
            }
            this._intervalIds = null;
        }
        // Clear animation frames.
        if (this._animationFrameIds) {
            for (var _f = 0, _g = Object.keys(this._animationFrameIds); _f < _g.length; _f++) {
                var id = _g[_f];
                this.cancelAnimationFrame(Number(id));
            }
            this._animationFrameIds = null;
        }
    };
    /**
     * SetTimeout override, which will auto cancel the timeout during dispose.
     * @param callback Callback to execute.
     * @param duration Duration in milliseconds.
     * @return The setTimeout id.
     */
    Async.prototype.setTimeout = function (callback, duration) {
        var _this = this;
        var timeoutId = 0;
        if (!this._isDisposed) {
            var timeoutIds_1 = this._timeoutIds || (this._timeoutIds = {});
            /* tslint:disable:ban-native-functions */
            timeoutId = setTimeout(function () {
                // Time to execute the timeout, enqueue it as a foreground task to be executed.
                try {
                    // Now delete the record and call the callback.
                    delete timeoutIds_1[timeoutId];
                    callback.apply(_this._parent);
                }
                catch (e) {
                    _this._logError(e);
                }
            }, duration);
            /* tslint:enable:ban-native-functions */
            timeoutIds_1[timeoutId] = true;
        }
        return timeoutId;
    };
    /**
     * Clears the timeout.
     * @param id Id to cancel.
     */
    Async.prototype.clearTimeout = function (id) {
        var timeoutIds = this._timeoutIds;
        if (timeoutIds && timeoutIds[id]) {
            /* tslint:disable:ban-native-functions */
            clearTimeout(id);
            /* tslint:enable:ban-native-functions */
            delete timeoutIds[id];
        }
    };
    /**
     * SetImmediate override, which will auto cancel the immediate during dispose.
     * @param callback Callback to execute.
     * @return The setTimeout id.
     */
    Async.prototype.setImmediate = function (callback) {
        var _this = this;
        var immediateId = 0;
        if (!this._isDisposed) {
            var immediateIds_1 = this._immediateIds || (this._immediateIds = {});
            var setImmediateCallback = function () {
                // Time to execute the timeout, enqueue it as a foreground task to be executed.
                try {
                    // Now delete the record and call the callback.
                    delete immediateIds_1[immediateId];
                    callback.apply(_this._parent);
                }
                catch (e) {
                    _this._logError(e);
                }
            };
            /* tslint:disable:ban-native-functions */
            immediateId = window.setImmediate ? window.setImmediate(setImmediateCallback) : window.setTimeout(setImmediateCallback, 0);
            /* tslint:enable:ban-native-functions */
            immediateIds_1[immediateId] = true;
        }
        return immediateId;
    };
    /**
     * Clears the immediate.
     * @param id Id to cancel.
     */
    Async.prototype.clearImmediate = function (id) {
        var immediateIds = this._immediateIds;
        if (immediateIds && immediateIds[id]) {
            /* tslint:disable:ban-native-functions */
            window.clearImmediate ? window.clearImmediate(id) : window.clearTimeout(id);
            delete immediateIds[id];
        }
    };
    /**
     * SetInterval override, which will auto cancel the timeout during dispose.
     * @param callback Callback to execute.
     * @param duration Duration in milliseconds.
     * @return The setTimeout id.
     */
    Async.prototype.setInterval = function (callback, duration) {
        var _this = this;
        var intervalId = 0;
        if (!this._isDisposed) {
            if (!this._intervalIds) {
                this._intervalIds = {};
            }
            /* tslint:disable:ban-native-functions */
            intervalId = setInterval(function () {
                // Time to execute the interval callback, enqueue it as a foreground task to be executed.
                try {
                    callback.apply(_this._parent);
                }
                catch (e) {
                    _this._logError(e);
                }
            }, duration);
            /* tslint:enable:ban-native-functions */
            this._intervalIds[intervalId] = true;
        }
        return intervalId;
    };
    /**
     * Clears the interval.
     * @param id Id to cancel.
     */
    Async.prototype.clearInterval = function (id) {
        if (this._intervalIds && this._intervalIds[id]) {
            /* tslint:disable:ban-native-functions */
            clearInterval(id);
            delete this._intervalIds[id];
        }
    };
    /**
     * Creates a function that, when executed, will only call the func function at most once per
     * every wait milliseconds. Provide an options object to indicate that func should be invoked
     * on the leading and/or trailing edge of the wait timeout. Subsequent calls to the throttled
     * function will return the result of the last func call.
     *
     * Note: If leading and trailing options are true func will be called on the trailing edge of
     * the timeout only if the the throttled function is invoked more than once during the wait timeout.
     *
     * @param func The function to throttle.
     * @param wait The number of milliseconds to throttle executions to. Defaults to 0.
     * @param options The options object.
     * @param options.leading Specify execution on the leading edge of the timeout.
     * @param options.trailing Specify execution on the trailing edge of the timeout.
     * @return The new throttled function.
     */
    Async.prototype.throttle = function (func, wait, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        if (this._isDisposed) {
            return noop;
        }
        var waitMS = wait || 0;
        var _a = options.leading, leading = _a === void 0 ? true : _a, _b = options.trailing, trailing = _b === void 0 ? true : _b;
        var lastExecuteTime = 0;
        var lastResult;
        var lastArgs;
        var timeoutId = null;
        var callback = function (userCall) {
            var now = (new Date()).getTime();
            var delta = now - lastExecuteTime;
            var waitLength = leading ? waitMS - delta : waitMS;
            if (delta >= waitMS && (!userCall || leading)) {
                lastExecuteTime = now;
                if (timeoutId) {
                    _this.clearTimeout(timeoutId);
                    timeoutId = null;
                }
                lastResult = func.apply(_this._parent, lastArgs);
            }
            else if (timeoutId === null && trailing) {
                timeoutId = _this.setTimeout(callback, waitLength);
            }
            return lastResult;
        };
        var resultFunction = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            lastArgs = args;
            return callback(true);
        };
        return resultFunction;
    };
    /**
     * Creates a function that will delay the execution of func until after wait milliseconds have
     * elapsed since the last time it was invoked. Provide an options object to indicate that func
     * should be invoked on the leading and/or trailing edge of the wait timeout. Subsequent calls
     * to the debounced function will return the result of the last func call.
     *
     * Note: If leading and trailing options are true func will be called on the trailing edge of
     * the timeout only if the the debounced function is invoked more than once during the wait
     * timeout.
     *
     * @param func The function to debounce.
     * @param wait The number of milliseconds to delay.
     * @param options The options object.
     * @param options.leading Specify execution on the leading edge of the timeout.
     * @param options.maxWait The maximum time func is allowed to be delayed before it's called.
     * @param options.trailing Specify execution on the trailing edge of the timeout.
     * @return The new debounced function.
     */
    Async.prototype.debounce = function (func, wait, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        if (this._isDisposed) {
            return noop;
        }
        var waitMS = wait || 0;
        var _a = options.leading, leading = _a === void 0 ? false : _a, _b = options.trailing, trailing = _b === void 0 ? true : _b, _c = options.maxWait, maxWait = _c === void 0 ? NaN : _c;
        var lastCallTime = 0;
        var lastExecuteTime = (new Date()).getTime();
        var lastResult;
        var lastArgs;
        var timeoutId = null;
        var callback = function (userCall) {
            var now = (new Date()).getTime();
            var executeImmediately = false;
            if (userCall) {
                if (leading && now - lastCallTime >= waitMS) {
                    executeImmediately = true;
                }
                lastCallTime = now;
            }
            var delta = now - lastCallTime;
            var waitLength = waitMS - delta;
            var maxWaitDelta = now - lastExecuteTime;
            var maxWaitExpired = false;
            if (!isNaN(maxWait)) {
                // maxWait only matters when there is a pending callback
                if (maxWaitDelta >= maxWait && timeoutId) {
                    maxWaitExpired = true;
                }
                else {
                    waitLength = Math.min(waitLength, maxWait - maxWaitDelta);
                }
            }
            if (delta >= waitMS || maxWaitExpired || executeImmediately) {
                if (timeoutId) {
                    _this.clearTimeout(timeoutId);
                    timeoutId = null;
                }
                lastExecuteTime = now;
                lastResult = func.apply(_this._parent, lastArgs);
            }
            else if ((timeoutId === null || !userCall) && trailing) {
                timeoutId = _this.setTimeout(callback, waitLength);
            }
            return lastResult;
        };
        var resultFunction = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            lastArgs = args;
            return callback(true);
        };
        return resultFunction;
    };
    Async.prototype.requestAnimationFrame = function (callback) {
        var _this = this;
        var animationFrameId = 0;
        if (!this._isDisposed) {
            var animationFrameIds_1 = this._animationFrameIds || (this._animationFrameIds = {});
            var animationFrameCallback = function () {
                try {
                    // Now delete the record and call the callback.
                    delete animationFrameIds_1[animationFrameId];
                    callback.apply(_this._parent);
                }
                catch (e) {
                    _this._logError(e);
                }
            };
            /* tslint:disable:ban-native-functions */
            animationFrameId = window.requestAnimationFrame ? window.requestAnimationFrame(animationFrameCallback) : window.setTimeout(animationFrameCallback, 0);
            /* tslint:enable:ban-native-functions */
            animationFrameIds_1[animationFrameId] = true;
        }
        return animationFrameId;
    };
    Async.prototype.cancelAnimationFrame = function (id) {
        var animationFrameIds = this._animationFrameIds;
        if (animationFrameIds && animationFrameIds[id]) {
            /* tslint:disable:ban-native-functions */
            window.cancelAnimationFrame ? window.cancelAnimationFrame(id) : window.clearTimeout(id);
            /* tslint:enable:ban-native-functions */
            delete animationFrameIds[id];
        }
    };
    Async.prototype._logError = function (e) {
        if (this._onErrorHandler) {
            this._onErrorHandler(e);
        }
    };
    return Async;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Async;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:CoverageThreshold(75)

var ObjectUtil_1 = __webpack_require__(6);
var handlers = [];
var buffer = [];
var maxBufferSize = 100;
function getStartDate() {
    'use strict';
    if (window.performance && window.performance.timing && window.performance.timing.navigationStart) {
        return new Date(window.performance.timing.navigationStart);
    }
    else {
        return new Date();
    }
}
var startDate = getStartDate();
var Manager = (function () {
    function Manager() {
    }
    Manager.getTime = function () {
        return (new Date()).getTime();
    };
    /** This is the overrideable clean string function */
    Manager.cleanString = function (str) {
        return str;
    };
    Manager.addLogHandler = function (handler) {
        handlers.push(handler);
        // Return the buffer so the handler can get missed events
        return buffer;
    };
    Manager.removeLogHandler = function (handler) {
        for (var x = 0; x < handlers.length; x++) {
            if (handlers[x] === handler) {
                // Remove the handler
                handlers.splice(x, 1);
                break;
            }
        }
    };
    Manager.logEvent = function (event, eventType) {
        // Clone the object (do it natively because the browser can mark it as a type)
        var clonedEvent = Object.freeze({
            data: ObjectUtil_1.deepCopy(event.data),
            id: event.id,
            enabled: event.enabled,
            critical: event.critical,
            endTime: event.endTime,
            eventName: event.eventName,
            shortEventName: event.shortEventName,
            parentId: event.parentId,
            startTime: event.startTime,
            eventType: eventType,
            metadata: event.metadata,
            vector: event.vector,
            validationErrors: event.validationErrors
        });
        // Add to the buffer
        buffer.push(clonedEvent);
        if (buffer.length > maxBufferSize) {
            buffer = buffer.slice(1);
            // Make sure we have a handler before the buffer is overrun
            if (handlers.length === 0) {
                this.handleBaseLoggingError(new Error("Logging buffer overflow hit before any logging handler was registered"));
            }
        }
        // Let handlers know the log event has completed
        for (var x = 0; x < handlers.length; x++) {
            try {
                handlers[x](clonedEvent);
            }
            catch (e) {
                this.handleBaseLoggingError(e);
            }
        }
    };
    Manager.logValidationError = function (event, type) {
        // Do nothing so that we can intialize around circular reference issue
    };
    Manager.getStack = function () {
        var error;
        try {
            var w = window;
            w["______ExpectedError______"]();
        }
        catch (e) {
            error = e;
        }
        return error.stack;
    };
    Manager.handleBaseLoggingError = function (error) {
        // TODO: Log somewhere
    };
    return Manager;
}());
Manager.startDate = startDate;
Manager.startTime = startDate.getTime();
exports.Manager = Manager;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Manager;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var UriEncoding_1 = __webpack_require__(26);
exports.DEFAULT_DELIMITER = '&';
exports.KEYVALUE_DELIMITER = '=';
// Returns a copy of the specified object by deeply cloning all of its properties.
function deepCopy(object) {
    var refsCopied = [];
    var copyRecurse = function (obj) {
        var result = null;
        if (obj) {
            if (Array.isArray(obj)) {
                result = [];
            }
            else {
                // create clone of the object with same prototype chain
                result = Object.create(Object.getPrototypeOf(obj));
            }
            // iterate over all the properties in the object
            Object.keys(obj).forEach(function (key) {
                // recursively copy the object's properties if the property is an object
                var value = obj[key];
                if (typeof value === "object") {
                    if (refsCopied.indexOf(value) !== -1) {
                        throw new Error("Cannot perform DeepCopy() because a circular reference was encountered, object: " + String(obj) + ", property: " + String(key));
                    }
                    refsCopied.push(value);
                    result[key] = copyRecurse(value);
                    refsCopied.pop();
                }
                else {
                    result[key] = value;
                }
            });
        }
        return result;
    };
    return copyRecurse(object);
}
exports.deepCopy = deepCopy;
// Deeply compares the objects by recursively comparing all their properties, objects with circular references are not supported, prototype members and functions are ignored
function deepCompare(objA, objB, equivalent) {
    // keep track of references that have been compared to find circular references while walking down either object
    var refsComparedA = [];
    var refsComparedB = [];
    var compare = Boolean(equivalent) ? equivalent : function (a, b) { return (a === b); };
    var equals = function (a, b) {
        // try a simple equality test first
        if (a === b) {
            return true;
        }
        if ((a === null) || (b === null)) {
            return false;
        }
        // if both are objects, then further comparison is required
        if ((typeof (a) === "object") && (typeof (b) === "object")) {
            // perform deep comparison over object's properties
            var aKeys = Object.keys(a).sort();
            var bKeys_1 = Object.keys(b).sort();
            // does one object have a different number of properties?
            if (aKeys.length !== bKeys_1.length) {
                return false;
            }
            var keysMatch = aKeys.every(function (key, index) {
                // key names should match
                if (key !== bKeys_1[index]) {
                    return false;
                }
                else if (typeof (a[key]) === 'function' || typeof (b[key]) === 'function') {
                    //skip comparison of function properties
                    return true;
                }
                else if (!compare(a[key], b[key])) {
                    // if this is an Object then recursive testing is needed on its properties
                    if (typeof a[key] === "object") {
                        // if this property was encountered before then we're going in circles, give up
                        if (refsComparedA.indexOf(a[key]) !== -1) {
                            throw new Error("Cannot perform DeepCompare() because a circular reference was encountered, object: " + String(a) + ", property: " + key);
                        }
                        refsComparedA.push(a[key]);
                        if (refsComparedB.indexOf(b[key]) !== -1) {
                            throw new Error("Cannot perform DeepCompare() because a circular reference was encountered, object: " + String(b) + ", property: " + key);
                        }
                        refsComparedB.push(b[key]);
                        // recursive compare object's properties
                        if (!equals(a[key], b[key])) {
                            return false;
                        }
                        refsComparedA.pop();
                        refsComparedB.pop();
                        return true;
                    }
                    else {
                        // properties don't match
                        return false;
                    }
                }
                else {
                    return true;
                }
            });
            if (!keysMatch) {
                return false;
            }
        }
        else {
            // parameters aren't equal, and at least one is not an Object
            return false;
        }
        // everything is equal
        return true;
    };
    return equals(objA, objB);
}
exports.deepCompare = deepCompare;
/**
 * This is a function you can call to safely serialize anything to JSON.
 * The built-in JSON.stringify() throws an exception for circular references and can't handle
 * many built-ins such as HTMLElements and the global window object.
 */
function safeSerialize(obj) {
    var str;
    try {
        var seenObjects_1 = [];
        str = JSON.stringify(obj, function (key, value) {
            if (value === window) {
                return "[window]";
            }
            else if (value instanceof HTMLElement) {
                return "[HTMLElement]";
            }
            else if (typeof value === "function") {
                return "[function]";
            }
            else if (typeof value === "object") {
                if (value === null) {
                    return value;
                }
                else if (seenObjects_1.indexOf(value) === -1) {
                    seenObjects_1.push(value);
                    return value;
                }
                else {
                    return "[circular]";
                }
            }
            else {
                return value;
            }
        });
    }
    catch (err) {
        // Note: we make this be a JSON string, so that consumers
        // can always call JSON.parse.
        str = JSON.stringify("[object]");
    }
    return str;
}
exports.safeSerialize = safeSerialize;
/**
 * Serializes the object Name Values Pairs (Depth of 1).
 * Used for Query Strings and Cookie Values
 * @param {any} obj Object with name value pairs
 * @param {string} delimeter  Delimiter seperates the pairs
 * @param {boolean} skipEncoding True to skip encoding
 */
function serialize(obj, delimiter, skipEncoding) {
    delimiter = delimiter || exports.DEFAULT_DELIMITER;
    var values = Object.keys(obj).map(function (name) {
        // Get the value and convert it to a string
        var value = obj[name];
        value = value ? value.toString() : "";
        if (!skipEncoding) {
            value = UriEncoding_1.default.encodeURIComponent(value);
        }
        // Add the encoded value to the array
        return name + exports.KEYVALUE_DELIMITER + value;
    });
    return values.join(delimiter);
}
exports.serialize = serialize;
/**
 * Copy the values of all enumerable own properties from one or more source objects to a target object.
 */
function extend(target, source) {
    if (source) {
        for (var _i = 0, _a = Object.keys(source); _i < _a.length; _i++) {
            var prop = _a[_i];
            target[prop] = source[prop];
        }
    }
    return target;
}
exports.extend = extend;


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * This file was originally ported from WinJS.
 */

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Async_1 = __webpack_require__(4);
var EventGroup_1 = __webpack_require__(27);
var async = new Async_1.default();
function doneHandler(value) {
    async.setImmediate(function () {
        throw value;
    });
}
var errorET = "error";
var canceledName = "Canceled";
var events;
//
// Global error counter, for each error which enters the system we increment this once and then
// the error number travels with the error as it traverses the tree of potential handlers.
//
// When someone has registered to be told about error [using EventGroup.on(Promise, 'error')] promises
// which are in error will get tagged with a ._errorId field. This tagged field is the
// contract by which nested promises with errors will be identified as chaining for the
// purposes of the callonerror semantics. If a nested promise in error is encountered without
// a ._errorId it will be assumed to be foreign and treated as an interop boundary and
// a new error id will be minted.
//
var error_number = 1;
;
var state_created; // -> working
var state_working; // -> error | error_notify | success | success_notify | canceled | waiting
var state_waiting; // -> error | error_notify | success | success_notify | waiting_canceled
var state_waiting_canceled; // -> error | error_notify | success | success_notify | canceling
var state_canceled; // -> error | error_notify | success | success_notify | canceling
var state_canceling; // -> error_notify
var state_success_notify; // -> success
var state_success; // -> .
var state_error_notify; // -> error
var state_error; // -> .
// Noop function, used in the various states to indicate that they don't support a given
// message. Named with the somewhat cute name '_' because it reads really well in the states.
function _() {
    "use strict";
}
// Initial state
//
state_created = {
    name: "created",
    enter: function (promise) {
        promise._setState(state_working);
    },
    cancel: _,
    done: _,
    then: _,
    _completed: _,
    _error: _,
    _notify: _,
    _setCompleteValue: _,
    _setErrorValue: _
};
// Ready state, waiting for a message (completed/error), able to be canceled
//
state_working = {
    name: "working",
    enter: _,
    cancel: function (promise) {
        promise._setState(state_canceled);
    },
    done: done,
    then: then,
    _completed: completed,
    _error: error,
    _notify: _,
    _setCompleteValue: setCompleteValue,
    _setErrorValue: setErrorValue
};
// Waiting state, if a promise is completed with a value which is itself a promise
// (has a then() method) it signs up to be informed when that child promise is
// fulfilled at which point it will be fulfilled with that value.
//
state_waiting = {
    name: "waiting",
    enter: function (promise) {
        var waitedUpon = promise._value;
        // We can special case our own intermediate promises which are not in a
        //  terminal state by just pushing this promise as a listener without
        //  having to create new indirection functions
        if (waitedUpon instanceof ThenPromise &&
            waitedUpon._state !== state_error &&
            waitedUpon._state !== state_success) {
            pushListener(waitedUpon, { promise: promise });
        }
        else {
            var error_1 = function (value) {
                if (waitedUpon._errorId) {
                    promise._chainedError(value, waitedUpon);
                }
                else {
                    // Because this is an interop boundary we want to indicate that this
                    //  error has been handled by the promise infrastructure before we
                    //  begin a new handling chain.
                    //
                    callonerror(promise, value, detailsForHandledError, waitedUpon, error_1);
                    promise._error(value);
                }
            };
            error_1.handlesOnError = true;
            waitedUpon.then(promise._completed.bind(promise), error_1);
        }
    },
    cancel: function (promise) {
        promise._setState(state_waiting_canceled);
    },
    done: done,
    then: then,
    _completed: completed,
    _error: error,
    _notify: _,
    _setCompleteValue: setCompleteValue,
    _setErrorValue: setErrorValue
};
// Waiting canceled state, when a promise has been in a waiting state and receives a
// request to cancel its pending work it will forward that request to the child promise
// and then waits to be informed of the result. This promise moves itself into the
// canceling state but understands that the child promise may instead push it to a
// different state.
//
state_waiting_canceled = {
    name: "waiting_canceled",
    enter: function (promise) {
        // Initiate a transition to canceling. Triggering a cancel on the promise
        // that we are waiting upon may result in a different state transition
        // before the state machine pump runs again.
        promise._setState(state_canceling);
        var waitedUpon = promise._value;
        if (waitedUpon.cancel) {
            waitedUpon.cancel();
        }
    },
    cancel: _,
    done: done,
    then: then,
    _completed: completed,
    _error: error,
    _notify: _,
    _setCompleteValue: setCompleteValue,
    _setErrorValue: setErrorValue
};
// Canceled state, moves to the canceling state and then tells the promise to do
// whatever it might need to do on cancelation.
//
state_canceled = {
    name: "canceled",
    enter: function (promise) {
        // Initiate a transition to canceling. The _cancelAction may change the state
        // before the state machine pump runs again.
        promise._setState(state_canceling);
        promise._cancelAction();
    },
    cancel: _,
    done: done,
    then: then,
    _completed: completed,
    _error: error,
    _notify: _,
    _setCompleteValue: setCompleteValue,
    _setErrorValue: setErrorValue
};
// Canceling state, commits to the promise moving to an error state with an error
// object whose 'name' and 'message' properties contain the string "Canceled"
//
state_canceling = {
    name: "canceling",
    enter: function (promise) {
        var error = new Error(canceledName);
        error.name = error.message;
        error["_handled"] = true;
        promise._value = error;
        promise._setState(state_error_notify);
    },
    cancel: _,
    done: _,
    then: _,
    _completed: _,
    _error: _,
    _notify: _,
    _setCompleteValue: _,
    _setErrorValue: _
};
// Success notify state, moves a promise to the success state and notifies all children
//
state_success_notify = {
    name: "complete_notify",
    enter: function (promise) {
        promise.done = CompletePromise.prototype.done;
        promise.then = CompletePromise.prototype.then;
        if (promise._listeners) {
            var queue = [promise];
            var p = void 0;
            while (queue.length) {
                p = queue.shift();
                p._state._notify(p, queue);
            }
        }
        promise._setState(state_success);
    },
    cancel: _,
    done: null,
    then: null,
    _completed: _,
    _error: _,
    _notify: notifySuccess,
    _setCompleteValue: _,
    _setErrorValue: _
};
// Success state, moves a promise to the success state and does NOT notify any children.
// Some upstream promise is owning the notification pass.
//
state_success = {
    name: "success",
    enter: function (promise) {
        promise.done = CompletePromise.prototype.done;
        promise.then = CompletePromise.prototype.then;
        promise._cleanupAction();
    },
    cancel: _,
    done: null,
    then: null,
    _completed: _,
    _error: _,
    _notify: notifySuccess,
    _setCompleteValue: _,
    _setErrorValue: _
};
// Error notify state, moves a promise to the error state and notifies all children
//
state_error_notify = {
    name: "error_notify",
    enter: function (promise) {
        promise.done = ErrorPromise.prototype.done;
        promise.then = ErrorPromise.prototype.then;
        if (promise._listeners) {
            var queue = [promise];
            var p = void 0;
            while (queue.length) {
                p = queue.shift();
                p._state._notify(p, queue);
            }
        }
        promise._setState(state_error);
    },
    cancel: _,
    done: null,
    then: null,
    _completed: _,
    _error: _,
    _notify: notifyError,
    _setCompleteValue: _,
    _setErrorValue: _
};
// Error state, moves a promise to the error state and does NOT notify any children.
// Some upstream promise is owning the notification pass.
//
state_error = {
    name: "error",
    enter: function (promise) {
        promise.done = ErrorPromise.prototype.done;
        promise.then = ErrorPromise.prototype.then;
        promise._cleanupAction();
    },
    cancel: _,
    done: null,
    then: null,
    _completed: _,
    _error: _,
    _notify: notifyError,
    _setCompleteValue: _,
    _setErrorValue: _
};
//
// The statemachine implementation follows a very particular pattern, the states are specified
// as static stateless bags of functions which are then indirected through the state machine
// instance (a Promise). As such all of the functions on each state have the promise instance
// passed to them explicitly as a parameter and the Promise instance members do a little
// dance where they indirect through the state and insert themselves in the argument list.
//
// We could instead call directly through the promise states however then every caller
// would have to remember to do things like pumping the state machine to catch state transitions.
//
//
// Implementations of shared state machine code.
//
function completed(promise, value) {
    promise._value = value;
    promise._setState(Promise.is(value) ? state_waiting : state_success_notify);
}
function createErrorDetails(exception, error, promise, id, parent, handler) {
    return {
        exception: exception,
        error: error,
        promise: promise,
        handler: handler,
        id: id,
        parent: parent
    };
}
function detailsForHandledError(promise, errorValue, context, handler) {
    var exception = context._isException;
    var errorId = context._errorId;
    return createErrorDetails(exception ? errorValue : null, exception ? null : errorValue, promise, errorId, context, handler);
}
function detailsForChainedError(promise, errorValue, context) {
    var exception = context._isException;
    var errorId = context._errorId;
    setErrorInfo(promise, errorId, exception);
    return createErrorDetails(exception ? errorValue : null, exception ? null : errorValue, promise, errorId, context);
}
function detailsForError(promise, errorValue) {
    var errorId = ++error_number;
    setErrorInfo(promise, errorId);
    return createErrorDetails(null, errorValue, promise, errorId);
}
function detailsForException(promise, exceptionValue) {
    var errorId = ++error_number;
    setErrorInfo(promise, errorId, true);
    return createErrorDetails(exceptionValue, null, promise, errorId);
}
function done(promise, onComplete, onError) {
    pushListener(promise, { c: onComplete, e: onError });
}
function error(promise, value, onerrorDetails, context) {
    promise._value = value;
    callonerror(promise, value, onerrorDetails, context);
    promise._setState(state_error_notify);
}
function notifySuccess(promise, queue) {
    var value = promise._value;
    var listeners = promise._listeners;
    if (!listeners) {
        return;
    }
    promise._listeners = null;
    var i;
    var len;
    for (i = 0, len = Array.isArray(listeners) ? listeners.length : 1; i < len; i++) {
        var listener = len === 1 ? listeners : listeners[i];
        var onComplete = listener.c;
        var target = listener.promise;
        if (target) {
            try {
                target._setCompleteValue(onComplete ? onComplete(value) : value);
            }
            catch (ex) {
                target._setExceptionValue(ex);
            }
            if (target._state !== state_waiting && target._listeners) {
                queue.push(target);
            }
        }
        else {
            CompletePromise.prototype.done.call(promise, onComplete);
        }
    }
}
function notifyError(promise, queue) {
    var value = promise._value;
    var listeners = promise._listeners;
    if (!listeners) {
        return;
    }
    promise._listeners = null;
    var i;
    var len;
    for (i = 0, len = Array.isArray(listeners) ? listeners.length : 1; i < len; i++) {
        var listener = len === 1 ? listeners : listeners[i];
        var onError = listener.e;
        var target = listener.promise;
        if (target) {
            var asyncCallbackStarted = false;
            try {
                if (onError) {
                    asyncCallbackStarted = true;
                    if (!onError.handlesOnError) {
                        callonerror(target, value, detailsForHandledError, promise, onError);
                    }
                    target._setCompleteValue(onError(value));
                }
                else {
                    target._setChainedErrorValue(value, promise);
                }
            }
            catch (ex) {
                target._setExceptionValue(ex);
            }
            if (target._state !== state_waiting && target._listeners) {
                queue.push(target);
            }
        }
        else {
            ErrorPromise.prototype.done.call(promise, null, onError);
        }
    }
}
function callonerror(promise, value, onerrorDetailsGenerator, context, handler) {
    if (value instanceof Error && value.message === canceledName) {
        return;
    }
    events.raise(errorET, onerrorDetailsGenerator(promise, value, context, handler));
}
function pushListener(promise, listener) {
    var listeners = promise._listeners;
    if (listeners) {
        // We may have either a single listener (which will never be wrapped in an array)
        // or 2+ listeners (which will be wrapped). Since we are now adding one more listener
        // we may have to wrap the single listener before adding the second.
        listeners = Array.isArray(listeners) ? listeners : [listeners];
        listeners.push(listener);
    }
    else {
        listeners = listener;
    }
    promise._listeners = listeners;
}
// The difference beween setCompleteValue()/setErrorValue() and complete()/error() is that setXXXValue() moves
// a promise directly to the success/error state without starting another notification pass (because one
// is already ongoing).
function setErrorInfo(promise, errorId, isException) {
    promise._isException = isException || false;
    promise._errorId = errorId;
}
function setErrorValue(promise, value, onerrorDetails, context) {
    promise._value = value;
    callonerror(promise, value, onerrorDetails, context);
    promise._setState(state_error);
}
function setCompleteValue(promise, value) {
    var targetState;
    if (Promise.is(value)) {
        targetState = state_waiting;
    }
    else {
        targetState = state_success;
    }
    promise._value = value;
    promise._setState(targetState);
}
function then(promise, onComplete, onError) {
    var result = new ThenPromise(promise);
    pushListener(promise, { promise: result, c: onComplete, e: onError });
    return result;
}
//
// Slim promise implementations for already completed promises, these are created
// under the hood on synchronous completion paths as well as by Promise.wrap
// and Promise.wrapError.
//
var ErrorPromise = (function () {
    function ErrorPromise(value, errorFunc) {
        if (errorFunc === void 0) { errorFunc = detailsForError; }
        this._value = value;
        callonerror(this, value, errorFunc);
    }
    ErrorPromise.prototype.cancel = function () {
        /* No-op */
    };
    ErrorPromise.prototype.done = function (unused, onError) {
        var value = this._value;
        if (onError) {
            try {
                if (!onError.handlesOnError) {
                    callonerror(null, value, detailsForHandledError, this, onError);
                }
                var result = onError(value);
                if (Promise.is(result)) {
                    // If a promise is returned we need to wait on it.
                    result.done();
                }
                return;
            }
            catch (ex) {
                value = ex;
            }
        }
        if (value instanceof Error && value.message === canceledName) {
            // suppress cancel
            return;
        }
        // force the exception to be thrown asyncronously to avoid any try/catch blocks
        //
        doneHandler(value);
    };
    ErrorPromise.prototype.then = function (unused, onError) {
        // If the promise is already in a error state and no error handler is provided
        // we optimize by simply returning the promise instead of creating a new one.
        //
        if (!onError) {
            return this;
        }
        var result;
        var value = this._value;
        try {
            if (!onError.handlesOnError) {
                callonerror(null, value, detailsForHandledError, this, onError);
            }
            result = new CompletePromise(onError(value));
        }
        catch (ex) {
            // If the value throw from the error handler is the same as the value
            // provided to the error handler then there is no need for a new promise.
            //
            if (ex === value) {
                result = this;
            }
            else {
                result = new ExceptionPromise(ex);
            }
        }
        return result;
    };
    return ErrorPromise;
}());
var ExceptionPromise = (function (_super) {
    __extends(ExceptionPromise, _super);
    function ExceptionPromise(value) {
        return _super.call(this, value, detailsForException) || this;
    }
    return ExceptionPromise;
}(ErrorPromise));
var CompletePromise = (function () {
    function CompletePromise(value) {
        if (Promise.is(value)) {
            var result = new ThenPromise(undefined);
            result._setCompleteValue(value);
            return result;
        }
        this._value = value;
    }
    CompletePromise.prototype.cancel = function () {
        /* No-op */
    };
    CompletePromise.prototype.done = function (onComplete) {
        if (!onComplete) {
            return;
        }
        try {
            var result = onComplete(this._value);
            if (Promise.is(result)) {
                result.done();
            }
        }
        catch (ex) {
            // force the exception to be thrown asynchronously to avoid any try/catch blocks
            doneHandler(ex);
        }
    };
    CompletePromise.prototype.then = function (onComplete) {
        var resultPromise;
        try {
            // If the value returned from the completion handler is the same as the value
            // provided to the completion handler then there is no need for a new promise.
            //
            var newValue = onComplete ? onComplete(this._value) : this._value;
            resultPromise = newValue === this._value ? this : new CompletePromise(newValue);
        }
        catch (ex) {
            resultPromise = new ExceptionPromise(ex);
        }
        return resultPromise;
    };
    return CompletePromise;
}());
function timeout(timeoutMS) {
    var id;
    return new Promise(function (c) {
        if (timeoutMS) {
            id = async.setTimeout(c, timeoutMS);
        }
        else {
            async.setImmediate(c);
        }
    }, function () {
        if (id) {
            async.clearTimeout(id);
        }
    });
}
function timeoutWithPromise(timeout, promise) {
    var cancelPromise = function () { promise.cancel(); };
    var cancelTimeout = function () { timeout.cancel(); };
    timeout.then(cancelPromise);
    promise.then(cancelTimeout, cancelTimeout);
    return promise;
}
function getCancelAll(values) {
    return function () {
        for (var _i = 0, _a = Object.keys(values); _i < _a.length; _i++) {
            var key = _a[_i];
            var promise = Promise.as(values[key]);
            if (typeof promise.cancel === "function") {
                promise.cancel();
            }
        }
    };
}
var staticCanceledPromise;
var Promise = (function () {
    function Promise(init, oncancel) {
        this._init(init, oncancel);
    }
    Object.defineProperty(Promise, "cancel", {
        get: function () {
            return staticCanceledPromise || (staticCanceledPromise = new ErrorPromise(canceledName));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns a promise that is fulfilled when one of the input promises
     * has been fulfilled.
     */
    Promise.any = function (values) {
        return new Promise(function (complete, error) {
            var keys = Object.keys(values);
            var pending = keys.length;
            if (pending === 0) {
                complete();
            }
            var _loop_1 = function (key) {
                Promise.as(values[key]).then(function () { complete({ key: key, value: values[key] }); }, function (e) {
                    if (e instanceof Error && e.name === canceledName) {
                        if (--pending === 0) {
                            complete(Promise.cancel);
                        }
                        return;
                    }
                    error({ key: key, value: values[key] });
                });
            };
            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                var key = keys_1[_i];
                _loop_1(key);
            }
        }, getCancelAll(values));
    };
    /**
     * Returns a promise. If the object is already a promise it is returned;
     * otherwise the object is wrapped in a promise.
     */
    Promise.as = function (value) {
        return Promise.is(value) ? value : new CompletePromise(value);
    };
    /**
     * Determines whether a value fulfills the promise contract.
     */
    Promise.is = function (value) {
        return value && typeof value === "object" && typeof value.then === "function";
    };
    /**
     * Determines whether an error value represents a promise cancellation.
     */
    Promise.isCanceled = function (e) {
        return (e instanceof Error && e.name === canceledName);
    };
    Promise.all = function (values) {
        return new Promise(function (complete, error) {
            var keys = Object.keys(values);
            var errors = Array.isArray(values) ? [] : {};
            var results = Array.isArray(values) ? [] : {};
            var pending = keys.length;
            var argDone = function () {
                if ((--pending) === 0) {
                    var errorKeys = Object.keys(errors);
                    var errorCount = errorKeys.length;
                    if (errorCount === 0) {
                        complete(results);
                    }
                    else {
                        if (errorKeys.every(function (key) { return Promise.isCanceled(errors[key]); })) {
                            complete(Promise.cancel);
                        }
                        else {
                            error(errors);
                        }
                    }
                }
            };
            var _loop_2 = function (key) {
                var value = values[key];
                if (value === undefined) {
                    pending--;
                }
                else {
                    Promise.then(value, function (result) { results[key] = result; argDone(); }, function (error) { errors[key] = error; argDone(); });
                }
            };
            for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
                var key = keys_2[_i];
                _loop_2(key);
            }
            if (pending === 0) {
                complete(results);
            }
        }, getCancelAll(values));
    };
    Promise.then = function (value, onComplete, onError) {
        return Promise.as(value).then(onComplete, onError);
    };
    Promise.thenEach = function (values, onComplete, onError) {
        var result = Array.isArray(values) ? [] : {};
        for (var _i = 0, _a = Object.keys(values); _i < _a.length; _i++) {
            var key = _a[_i];
            result[key] = Promise.then(values[key], onComplete, onError);
        }
        return Promise.all(result);
    };
    Promise.serial = function (tasks) {
        return tasks.reduce(function (previous, task) {
            return previous.then(task);
        }, Promise.wrap());
    };
    /**
     * Creates a promise that is fulfilled after a timeout.
     */
    Promise.timeout = function (time, promise) {
        var to = timeout(time);
        return promise ? timeoutWithPromise(to, promise) : to;
    };
    /**
     * Wraps a non-promise value in a promise. You can use this function if you need
     * to pass a value to a function that requires a promise.
     */
    Promise.wrap = function (value) {
        return new CompletePromise(value);
    };
    /**
     * Wraps a non-promise error value in a promise. You can use this function if you need
     * to pass an error to a function that requires a promise.
     */
    Promise.wrapError = function (error) {
        return new ErrorPromise(error);
    };
    /**
     * Attempts to cancel the fulfillment of a promised value. If the promise hasn't
     * already been fulfilled and cancellation is supported, the promise enters
     * the error state with a value of Error("Canceled").
     */
    Promise.prototype.cancel = function () {
        this._state.cancel(this);
        this._run();
    };
    /**
     * Allows you to specify the work to be done on the fulfillment of the promised value,
     * the error handling to be performed if the promise fails to fulfill
     * a value.
     *
     * After the handlers have finished executing, this function throws any error that would have been returned
     * from then() as a promise in the error state.
     *
     * @param onComplete The function to be called if the promise is fulfilled successfully with a value. The fulfilled value is passed as the single argument. If the value is null, the fulfilled value is returned. The value returned from the function becomes the fulfilled value of the promise returned by then. If an exception is thrown while executing the function, the promise returned by then moves into the error state.
     * @param onError The function to be called if the promise is fulfilled with an error. The error is passed as the single argument. If it is null, the error is forwarded. The value returned from the function is the fulfilled value of the promise returned by then.
     */
    Promise.prototype.done = function (onComplete, onError) {
        this._state.done(this, onComplete, onError);
    };
    /**
     * Allows you to specify the work to be done on the fulfillment of the promised value,
     * the error handling to be performed if the promise fails to fulfill
     * a value.
     *
     * @param onComplete The function to be called if the promise is fulfilled successfully with a value. The value is passed as the single argument. If the value is null, the value is returned. The value returned from the function becomes the fulfilled value of the promise returned by then. If an exception is thrown while this function is being executed, the promise returned by then moves into the error state.
     * @param onError The function to be called if the promise is fulfilled with an error. The error is passed as the single argument. In different cases this object may be of different types, so it is necessary to test the object for the properties you expect. If the error is null, it is forwarded. The value returned from the function becomes the value of the promise returned by the then function.
     * @returns The promise whose value is the result of executing the complete or error function.
     */
    Promise.prototype.then = function (onComplete, onError) {
        return this._state.then(this, onComplete, onError);
    };
    Promise.prototype._init = function (init, oncancel) {
        this._oncancel = oncancel;
        this._setState(state_created);
        this._run();
        try {
            init(this._completed.bind(this), this._error.bind(this));
        }
        catch (ex) {
            this._setExceptionValue(ex);
        }
    };
    Promise.prototype._cancelAction = function () {
        if (this._oncancel) {
            try {
                this._oncancel();
            }
            catch (ex) { }
        }
    };
    Promise.prototype._cleanupAction = function () {
        this._oncancel = null;
    };
    Promise.prototype._chainedError = function (value, context) {
        var result = this._state._error(this, value, detailsForChainedError, context);
        this._run();
        return result;
    };
    Promise.prototype._completed = function (value) {
        var result = this._state._completed(this, value);
        this._run();
        return result;
    };
    Promise.prototype._error = function (value) {
        var result = this._state._error(this, value, detailsForError);
        this._run();
        return result;
    };
    Promise.prototype._setState = function (state) {
        this._nextState = state;
    };
    Promise.prototype._setCompleteValue = function (value) {
        this._state._setCompleteValue(this, value);
        this._run();
    };
    Promise.prototype._setChainedErrorValue = function (value, context) {
        var result = this._state._setErrorValue(this, value, detailsForChainedError, context);
        this._run();
        return result;
    };
    Promise.prototype._setExceptionValue = function (value) {
        var result = this._state._setErrorValue(this, value, detailsForException);
        this._run();
        return result;
    };
    Promise.prototype._run = function () {
        while (this._nextState) {
            this._state = this._nextState;
            this._nextState = null;
            this._state.enter(this);
        }
    };
    return Promise;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Promise;
events = new EventGroup_1.default(Promise);
events.declare(errorET);
//
// Internal implementation detail promise, ThenPromise is created when a promise needs
// to be returned from a then() method.
//
var ThenPromise = (function (_super) {
    __extends(ThenPromise, _super);
    function ThenPromise(creator) {
        var _this = _super.call(this) || this;
        _this._creator = creator;
        _this._initThen();
        return _this;
    }
    ThenPromise.prototype._init = function () {
        // Override to do nothing.
    };
    ThenPromise.prototype._cancelAction = function () {
        if (this._creator) {
            this._creator.cancel();
        }
    };
    ThenPromise.prototype._cleanupAction = function () {
        this._creator = null;
    };
    ThenPromise.prototype._initThen = function () {
        this._setState(state_created);
        this._run();
    };
    return ThenPromise;
}(Promise));
var SignalPromise = (function (_super) {
    __extends(SignalPromise, _super);
    function SignalPromise(cancel) {
        var _this = _super.call(this) || this;
        _this._oncancel = cancel;
        _this._initSignal();
        return _this;
    }
    SignalPromise.prototype._init = function () {
        // Override to do nothing.
    };
    SignalPromise.prototype._cancelAction = function () {
        if (this._oncancel) {
            this._oncancel();
        }
    };
    SignalPromise.prototype._cleanupAction = function () {
        this._oncancel = null;
    };
    SignalPromise.prototype._initSignal = function () {
        this._setState(state_created);
        this._run();
    };
    return SignalPromise;
}(Promise));
exports.SignalPromise = SignalPromise;


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:CoverageThreshold(96)

var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var Manager_1 = __webpack_require__(5);
var CorrelationVector_1 = __webpack_require__(53);
var ObjectUtil_1 = __webpack_require__(6);
var Features_1 = __webpack_require__(28);
var _id = 0;
var ClonedEventType;
(function (ClonedEventType) {
    ClonedEventType[ClonedEventType["Single"] = 0] = "Single";
    ClonedEventType[ClonedEventType["Start"] = 1] = "Start";
    ClonedEventType[ClonedEventType["End"] = 2] = "End";
})(ClonedEventType = exports.ClonedEventType || (exports.ClonedEventType = {}));
var ValidationErrorType;
(function (ValidationErrorType) {
    ValidationErrorType[ValidationErrorType["NoParent"] = 1] = "NoParent";
})(ValidationErrorType = exports.ValidationErrorType || (exports.ValidationErrorType = {}));
var AccountType;
(function (AccountType) {
    AccountType[AccountType["Consumer"] = 0] = "Consumer";
    AccountType[AccountType["ConsumerAnonymous"] = 1] = "ConsumerAnonymous";
    AccountType[AccountType["Business"] = 2] = "Business";
    AccountType[AccountType["BusinessAnonymous"] = 3] = "BusinessAnonymous";
    AccountType[AccountType["Unknown"] = 4] = "Unknown";
})(AccountType = exports.AccountType || (exports.AccountType = {}));
function addEventProps(eventPrototype, props, metadata, baseClass) {
    ObjectUtil_1.extend(eventPrototype, props);
    var resultMetadata = {};
    for (var key in metadata) {
        var item = metadata[key];
        var result = resultMetadata[key] = (typeof item === 'number' ? { type: item } : item);
        result.definedInName = props.shortEventName;
        if (result.type === 2 /* Number */) {
            result.isMetric = true;
        }
    }
    eventPrototype.metadata = baseClass ? __assign({}, baseClass.prototype.metadata, resultMetadata) : resultMetadata;
}
exports.addEventProps = addEventProps;
var EventBase = (function () {
    function EventBase(data, startType, parent) {
        this.validationErrors = 0;
        this.data = {};
        this.id = _id++;
        this.enabled = this._isEnabled();
        // Set the parent id if needed
        if (parent) {
            this.parentId = parent.id;
        }
        else if (this.requiresParent) {
            this.addValidationError(ValidationErrorType.NoParent);
        }
        // Set the start time
        this.startTime = Manager_1.Manager.getTime();
        this.vector = new CorrelationVector_1.default(parent ? parent.vector : CorrelationVector_1.default.RootVector);
        // Set the data if we have it
        if (data) {
            this._setData(data);
        }
        // Send the start event
        this._logEvent(startType);
    }
    /**
     * This will return true if the event is enabled
     */
    EventBase.enabled = function () {
        return this.prototype._isEnabled();
    };
    /**
     * This will return true if the event is of this type
     * @param event {IEvent} The event to compare
     */
    EventBase.isTypeOf = function (event) {
        return event.eventName.indexOf(this.prototype.shortEventName + ',') >= 0;
    };
    EventBase.prototype._isEnabled = function () {
        // All events are enabled by default
        return !this.samplingFeature || Features_1.default.isFeatureEnabled(this.samplingFeature);
    };
    EventBase.prototype._setData = function (data) {
        var stored = this.data;
        for (var _i = 0, _a = Object.keys(data); _i < _a.length; _i++) {
            var key = _a[_i];
            if (key in this.metadata) {
                var value = data[key];
                switch (typeof value) {
                    case 'string':
                        stored[key] = Manager_1.Manager.cleanString(value);
                        break;
                    case 'undefined':
                        break;
                    default:
                        stored[key] = value;
                        break;
                }
            }
        }
    };
    EventBase.prototype._logEvent = function (eventType) {
        Manager_1.Manager.logEvent(this, eventType);
    };
    EventBase.prototype.addValidationError = function (type) {
        this.validationErrors = this.validationErrors | type;
        Manager_1.Manager.logValidationError(this, type);
    };
    return EventBase;
}());
exports.EventBase = EventBase;
var proto = EventBase.prototype;
proto.eventName = 'EventBase,';
proto.shortEventName = 'EventBase';
// All events are not critical by default
proto.critical = false;
// All events require parents by default
proto.requiresParent = true;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

// Regex that finds {#} so it can be replaced by the arguments in string format
var FORMAT_REGEX = /\{(\d+)\}/g;
/**
 * String Format is like C# string format. Use template strings instead unless the string is dynamic.
 * Usage Example: "hello {0}!".format("mike") will return "hello mike!"
 * Calling format on a string with less arguments than specified in the format will substitute "undefined"
 */
function format(template) {
    var values = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        values[_i - 1] = arguments[_i];
    }
    return template.replace(FORMAT_REGEX, function (match, valueIndex) {
        var value = values[valueIndex];
        // Checking null for consistency with old behavior, all other values pass through.
        return value === null ? '' : value;
    });
}
exports.format = format;
/**
 * Returns an array made of replacemant values and string literal values, in order.
 * @param template Base string with replacement tokens.
 * @param values Array of values to insert into corresponding replacement token.
 */
function formatToArray(template) {
    var values = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        values[_i - 1] = arguments[_i];
    }
    var parts = [];
    var regexResult;
    var lastIndex = 0;
    while ((regexResult = FORMAT_REGEX.exec(template))) {
        // The full string of characters matched.
        var match = regexResult[0];
        // Get replacement value.
        var valueIndex = parseInt(match.replace(/\{|\}+/g, ''), 10);
        var replacementValue = values[valueIndex];
        // Get text between tokens and add to our array.
        if (regexResult.index > lastIndex) {
            parts.push(template.substring(lastIndex, regexResult.index));
        }
        // Save last index.
        lastIndex = FORMAT_REGEX.lastIndex;
        // Add replacement value to our array.
        parts.push(replacementValue);
    }
    // Grab any remaining text after the last match.
    if (lastIndex !== template.length) {
        parts.push(template.substring(lastIndex, template.length));
    }
    return parts;
}
exports.formatToArray = formatToArray;
/**
 * Returns true if s ends with suffix.
 */
function doesStringEndWith(s, suffix) {
    return s.substr(s.length - suffix.length) === suffix;
}
exports.doesStringEndWith = doesStringEndWith;
/**
 * Returns true if s starts with prefix.
 */
function doesStringStartWith(s, prefix) {
    return s.substr(0, prefix.length) === prefix;
}
exports.doesStringStartWith = doesStringStartWith;
/**
 * Return a string of the given length, using 0s to pad in from the right.
 */
function rightPad(data, length) {
    var result = data.toString();
    while (result.length < length) {
        result = result + "0";
    }
    return result;
}
exports.rightPad = rightPad;
/**
 * Look for any of the chars in searchValues in str.
 * Returns the index of the char found or -1 if nothing is found.
 */
function findOneOf(str, searchValues) {
    for (var idx = 0; idx < str.length; idx++) {
        if (searchValues.indexOf(str[idx]) >= 0) {
            return idx;
        }
    }
    return -1; //none of the searchValues exist in string
}
exports.findOneOf = findOneOf;
/**
 * Determines if two strings are equal when both converted to uppercase.
 */
function equalsCaseInsensitive(a, b) {
    if (a && b) {
        return a.toUpperCase() === b.toUpperCase();
    }
    return a === b;
}
exports.equalsCaseInsensitive = equalsCaseInsensitive;
/**
 * Capitalizes the first letter of str.
 */
function capitalize(str) {
    if (str) {
        return str[0].toUpperCase() + str.substr(1);
    }
    return str;
}
exports.capitalize = capitalize;
/**
 * De-capitalizes the first letter of str.
 */
function decapitalize(str) {
    if (str) {
        return str[0].toLowerCase() + str.substr(1);
    }
    return str;
}
exports.decapitalize = decapitalize;
/**
 * Selects a string based on plurality.
 *
 * @param count - The value to base selection on
 * @param single - The string to select when it's a singular value
 * @param multiple - The string to select when it's a plural value
 *
 * @deprecated This method does NOT give accurate results for many languages!!
 *             Use getLocalizedCountValue instead.
 */
function pluralSelect(count, single, plural) {
    return count === 1 ? single : plural;
}
exports.pluralSelect = pluralSelect;
/**
 * Given a specially formatted localized text, a set of intervals, and a count,
 * return the localized text which corresponds to the first interval the
 * count falls into.
 *
 * Please see https://microsoft.sharepoint.com/teams/OISGPortal/LocKits/_layouts/15/start.aspx#/Lockit%20Instructions/SharePoint%20Core%20Localization.aspx
 * for more details.
 *
 * @param {string} locText - || deliminated blocks of localized texts, representing
 *  the various singular and plural forms of the string  being localized
 * @param {string} intervals - || deliminated blocks of numeric intervals, defining the ranges
 *  of that interval. Has special support for , * and -.
 * @param {number} count - The count used to determine which interval to return.
 *
 * @return
 * The localized block which corresponds to the first interval the count falls into.
 *
 * @example
 * StringHelper.getLocalizedCountValue('items||item||items', '0||1||2-', 0)
 *   returns items
 * StringHelper.getLocalizedCountValue('items||item||items', '0||1||2-', 1)
 *   returns item
 * StringHelper.getLocalizedCountValue('items||item||items', '0||1||2-', 2)
 *   returns items
 */
function getLocalizedCountValue(locText, intervals, count) {
    'use strict';
    count = Number(count); // defensively make sure count is a number
    // !!!IMPORTANT!!! changes in this function need to be in sync with
    // the methods with the same name located at:
    // otools/inc/sts/stsom/utilities/SPLocUtility.cs
    // sts/Client/Script/Init/LocUtility.cs
    if (locText === undefined || intervals === undefined || count === undefined) {
        return null;
    }
    var ret = '';
    var locIndex = -1;
    var intervalsArray = intervals.split('||');
    for (var i = 0, length_1 = intervalsArray.length; i < length_1; i++) {
        var interval = intervalsArray[i];
        if (!interval) {
            continue;
        }
        var subIntervalsArray = interval.split(',');
        for (var _i = 0, subIntervalsArray_1 = subIntervalsArray; _i < subIntervalsArray_1.length; _i++) {
            var subInterval = subIntervalsArray_1[_i];
            if (!subInterval) {
                continue;
            }
            // there are three possiblities, wildcard, interval, or number
            if (isNaN(Number(subInterval))) {
                if (subInterval.indexOf('-') !== -1) {
                    // if it's an interval the format is Number-Number
                    var range = subInterval.split('-');
                    if (range.length !== 2) {
                        continue;
                    }
                    var min = void 0;
                    var max = void 0;
                    if (range[0] === '') {
                        min = 0;
                    }
                    else {
                        if (isNaN(Number(range[0]))) {
                            continue;
                        }
                        else {
                            min = parseInt(range[0], 10);
                        }
                    }
                    if (count >= min) {
                        if (range[1] === '') {
                            locIndex = i;
                            break;
                        }
                        else {
                            if (isNaN(Number(range[1]))) {
                                continue;
                            }
                            else {
                                max = parseInt(range[1], 10);
                            }
                        }
                        if (count <= max) {
                            locIndex = i;
                            break;
                        }
                    }
                }
                else if (subInterval.indexOf('*') !== -1) {
                    // Wildcard
                    var regexExpr = subInterval.trim().replace(/\*/g, '[0-9]*');
                    var regex = new RegExp("^" + regexExpr + "$");
                    if (regex.test(count.toString())) {
                        locIndex = i;
                        break;
                    }
                }
            }
            else {
                var exactNumber = parseInt(subInterval, 10);
                if (count === exactNumber) {
                    locIndex = i;
                    break;
                }
            }
        }
        if (locIndex !== -1) {
            break;
        }
    }
    if (locIndex !== -1) {
        var locValues = locText.split('||');
        if (locValues[locIndex]) {
            ret = locValues[locIndex];
        }
    }
    return ret;
}
exports.getLocalizedCountValue = getLocalizedCountValue;
/**
 * Format the locText with the localized count value.
 */
function formatWithLocalizedCountValue(locText, intervals, count) {
    'use strict';
    var template = getLocalizedCountValue(locText, intervals, count);
    var result = format(template, count.toString());
    return result;
}
exports.formatWithLocalizedCountValue = formatWithLocalizedCountValue;


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * A color represented by red, green, blue, and alpha (opacity) components.
 */
var RgbaColor = (function () {
    /** Constructs a default RgbaColor. Use RgbaColor.fromRgba to specify components. */
    function RgbaColor() {
        this.R = 0;
        this.G = 0;
        this.B = 0;
        this.A = RgbaColor.maxComponent; // Default to fully opaque.
    }
    /**
     * Creates a copy of the given color.
     * @param {RgbaColor} c The color to clone.
     */
    RgbaColor.clone = function (c) {
        return RgbaColor.fromRgba(c.R, c.G, c.B, c.A);
    };
    /**
     * Returns true if the colors have identical component values of R, G, B, and A.
     * @param {RgbaColor} c1 The first color to compare.
     * @param {RgbaColor} c2 The second color to compare.
     */
    RgbaColor.equals = function (c1, c2) {
        var c1IsNull = !c1;
        var c2IsNull = !c2;
        if (c1IsNull || c2IsNull) {
            return c1IsNull && c2IsNull;
        }
        else {
            return c1.R === c2.R && c1.G === c2.G && c1.B === c2.B && c1.A === c2.A;
        }
    };
    /**
     * Creates an RgbaColor from red, green, blue, and alpha component values.
     * @param {number} r The red component value (between 0 and 255).
     * @param {number} g The green component value (between 0 and 255).
     * @param {number} b The blue component value (between 0 and 255).
     * @param {number} a The alpha component value (between 0 and 255).
     */
    RgbaColor.fromRgba = function (r, g, b, a) {
        var colorObj = new RgbaColor;
        colorObj.R = Math.round(r);
        colorObj.G = Math.round(g);
        colorObj.B = Math.round(b);
        colorObj.A = a != null ? Math.round(a) : RgbaColor.maxComponent;
        return colorObj;
    };
    /**
     * Parses an HTML color string in the formats #AARRGGBB, #RRGGBB, or #RGB.
     * @param {string} htmlColor The HTML color string to parse.
     */
    RgbaColor.fromHtmlColor = function (htmlColor) {
        function TwoHexCharsToNumber(str, index1, index2) {
            return parseInt(str.charAt(index1) + str.charAt(index2), 16);
        }
        var resultColor = new RgbaColor;
        if (typeof htmlColor === "string" && htmlColor.charAt(0) === "#") {
            switch (htmlColor.length) {
                case 9:
                    resultColor.A = TwoHexCharsToNumber(htmlColor, 1, 2);
                    resultColor.R = TwoHexCharsToNumber(htmlColor, 3, 4);
                    resultColor.G = TwoHexCharsToNumber(htmlColor, 5, 6);
                    resultColor.B = TwoHexCharsToNumber(htmlColor, 7, 8);
                    break;
                case 7:
                    resultColor.R = TwoHexCharsToNumber(htmlColor, 1, 2);
                    resultColor.G = TwoHexCharsToNumber(htmlColor, 3, 4);
                    resultColor.B = TwoHexCharsToNumber(htmlColor, 5, 6);
                    break;
                case 4:
                    resultColor.R = TwoHexCharsToNumber(htmlColor, 1, 1);
                    resultColor.G = TwoHexCharsToNumber(htmlColor, 2, 2);
                    resultColor.B = TwoHexCharsToNumber(htmlColor, 3, 3);
                    break;
            }
        }
        return resultColor;
    };
    /**
     * Converts an RgbaColor into an HTML string suitable for use as a CSS color value.
     * @param {RgbaColor} c The color to convert.
     * @param {boolean} bFilterValue If true, this produces a string to in the #AARRGGBB format.
     */
    RgbaColor.toHtmlString = function (c, bFilterValue) {
        function ByteToHexString(b) {
            var byte = Number(b);
            if (!(byte >= 0 && byte <= RgbaColor.maxComponent)) {
                throw new Error("Argument must be a Number in [0, 255]");
            }
            var hex = byte.toString(16);
            if (byte < 16) {
                hex = "0" + hex;
            }
            return hex;
        }
        if (c.A < RgbaColor.maxComponent && !bFilterValue) {
            return "rgba(" +
                c.R.toString(10) + ", " +
                c.G.toString(10) + ", " +
                c.B.toString(10) + ", " +
                (c.A / RgbaColor.maxComponent).toFixed(2) + ")";
        }
        else {
            return "#" +
                (bFilterValue ? ByteToHexString(c.A) : "") +
                ByteToHexString(c.R) +
                ByteToHexString(c.G) +
                ByteToHexString(c.B);
        }
    };
    return RgbaColor;
}());
/**
 * The maximum value of an R, G, B, or A component in an RgbaColor.
 */
RgbaColor.maxComponent = 255;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = RgbaColor;


/***/ }),
/* 11 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// OneDrive:IgnoreCodeCoverage
var Promise_1 = __webpack_require__(7);
/**
 * Signal is used to manage a promise without having to pass a function to the Promise constructor.
 * Example:
 * var s = new Signal<boolean>();
 * setTimeout(() => {
 *    s.complete(true);
 * }, 1000);
 * return s.promise;
 */
var Signal = (function () {
    /**
     * Create a new Signal (also known as a Deferred in some circles.)
     * @param: oncancel A function to be called when the promise is cancelled.
     */
    function Signal(oncancel) {
        this._promise = new Promise_1.SignalPromise(oncancel);
    }
    /**
     * The underlying promise that the Signal manages.
     */
    Signal.prototype.getPromise = function () {
        return this._promise;
    };
    /**
     * Cancel the underlying promise.
     */
    Signal.prototype.cancel = function () {
        this._promise.cancel();
    };
    /**
     * Complete the underlying promise with the given value.
     */
    Signal.prototype.complete = function (value) {
        this._promise._completed(value);
    };
    /**
     * Put the underlying promise into the error state with the given value.
     */
    Signal.prototype.error = function (value) {
        this._promise._error(value);
    };
    return Signal;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Signal;


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var PairedEventBase_1 = __webpack_require__(31);
var ResultTypeEnum_1 = __webpack_require__(14);
exports.ResultTypeEnum = ResultTypeEnum_1.ResultTypeEnum;
exports.Qos = PairedEventBase_1.createPairedEvent({
    eventName: 'Qos,',
    shortEventName: 'Qos'
}, {
    name: {
        isKey: true,
        isPrefixingDisabled: true,
        type: 1 /* String */
    },
    resultCode: {
        isPrefixingDisabled: true,
        type: 1 /* String */
    },
    resultType: {
        typeRef: ResultTypeEnum_1.ResultTypeEnum,
        isPrefixingDisabled: true,
        type: 6 /* Enum */
    },
    error: {
        isPrefixingDisabled: true,
        type: 1 /* String */
    },
    extraData: 4 /* Object */,
    extraMetrics: {
        isPrefixingDisabled: true,
        type: 4 /* Object */
    }
});
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.Qos;


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ResultTypeEnum;
(function (ResultTypeEnum) {
    ResultTypeEnum[ResultTypeEnum["Success"] = 0] = "Success";
    ResultTypeEnum[ResultTypeEnum["Failure"] = 1] = "Failure";
    ResultTypeEnum[ResultTypeEnum["ExpectedFailure"] = 2] = "ExpectedFailure";
})(ResultTypeEnum = exports.ResultTypeEnum || (exports.ResultTypeEnum = {}));


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var DataStoreCachingType;
(function (DataStoreCachingType) {
    DataStoreCachingType[DataStoreCachingType["none"] = 0] = "none";
    DataStoreCachingType[DataStoreCachingType["session"] = 1] = "session";
    DataStoreCachingType[DataStoreCachingType["local"] = 2] = "local";
    DataStoreCachingType[DataStoreCachingType["sharedMemory"] = 3] = "sharedMemory";
})(DataStoreCachingType || (DataStoreCachingType = {}));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = DataStoreCachingType;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isPrefixedValue;

var regex = /-webkit-|-moz-|-ms-/;

function isPrefixedValue(value) {
  return typeof value === 'string' && regex.test(value);
}
module.exports = exports['default'];

/***/ }),
/* 17 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_17__;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

/**
 * Use PlatformDetection to evaluate which user experience makes sense for the user's
 * platform. NOTE: This class is NOT COMPLETE! Meaning not all values are parsed out of
 * the user agent. If something is missing that you need, add it and add unit tests.
 * WARNING: Avoid using browser checks when you can use detection techniques for caps checking.
 */
var PlatformDetection = (function () {
    function PlatformDetection(agent) {
        if (!agent) {
            agent = (window && window.navigator && navigator.userAgent) || '';
        }
        var userAgent = agent;
        agent = agent.toLowerCase();
        // We want to figure out which ONE browser the user is most likely on.
        // The order of the checks is important so we're not deceived by (for example)
        // Chrome saying that it's Safari.
        // (Each regular expression captures the version number so we can parse it later.)
        var match;
        var isIE;
        var isIE9;
        var isEdge;
        var isFirefox;
        var isChrome;
        var isSafari;
        function testBrowserVersion(pattern) {
            return match = RegExp(pattern + "(\\d+)([\\d.]*)").exec(agent);
        }
        if (testBrowserVersion('msie ')) {
            // IE <= 10 has something like "MSIE 9" in the user agent.
            // This is also what newer versions do in compatibility mode.
            isIE = true;
            isIE9 = match[1] === '9';
        }
        else if (testBrowserVersion('trident.*rv:')) {
            // This is IE 11. Sample user agent contains:
            // Trident/7.0; other stuff... rv:11.0
            isIE = true;
        }
        else if (testBrowserVersion('edge/')) {
            // This is Edge (it pretends to be Chrome and Safari).
            isEdge = true;
        }
        else if (testBrowserVersion('fxios|firefox/')) {
            isFirefox = true;
        }
        else if (testBrowserVersion('(?:chrome|crios)/')) {
            // Note: lots of random browsers say they're Chrome and will end up in this bucket
            isChrome = true;
        }
        else if (/safari\/(\d+)/.test(agent)) {
            isSafari = true;
            testBrowserVersion('version/');
        }
        // Some other browser categories:
        //   IE Mobile: /iemobile\/(\d+)/
        //   IE Mobile in desktop mode: contains WPDesktop; get version from Trident version
        //   Opera (currently goes into Chrome bucket): /opr\/(\d+)/
        // Parse the captured version number for user's browser.
        var browserMajor = match && parseInt(match[1], 10) || 0;
        var browserMinor = match && match[2] && match[2].substr(1) || '0';
        // Parse device which gives hints about os / mobile state.
        // Windows Phone IE sometimes pretends to be Android, so explicitly check for Windows Phone first.
        // (wpdesktop is used by Windows Phone in desktop mode.)
        var isWinPhone = /windows phone|wpdesktop/.test(agent);
        var deviceMatch = isWinPhone || /ipad|iphone|ipod|android/.exec(agent);
        var device = deviceMatch && deviceMatch[0];
        var isAndroid = device === 'android';
        var isIPad = device === 'ipad';
        var isIOS = !!device && !isAndroid;
        var isMac = !deviceMatch && agent.indexOf('macintosh') > -1;
        var isWindows = !deviceMatch && agent.indexOf('windows nt') > -1;
        // Other operating systems:
        //   Chrome OS: /cros/
        //   Linux: /linux/ (Android can also say it's Linux, so check for Android first)
        // WARNING: Avoid using browser checks when you can use detection techniques for caps checking.
        var input = document.createElement("input");
        input.type = "file";
        var file = window['File'];
        var fileProto = file && file.prototype;
        /**
         * Checks to see if styleSheet exists as a property off of a style element.
         * This will determine if style registration should be done via cssText (<= IE9) or not
         */
        var emptyStyle = document.createElement("style");
        emptyStyle.type = "text/css";
        var osVersionMatch = /[\s\(](os|os x|windows (?:phone|nt)|android) ([\d._]+)/.exec(agent);
        return {
            // Browser identification
            isChrome: !!isChrome,
            isEdge: !!isEdge,
            isFirefox: !!isFirefox,
            isIE: !!isIE,
            isIE9: !!isIE9,
            isSafari: !!isSafari,
            browserName: isIE ? 'IE' : isEdge ? 'Edge' : isChrome ? 'Chrome' : isFirefox ? 'Firefox' : isSafari ? 'Safari' : 'NA',
            browserMajor: browserMajor,
            browserMinor: browserMinor,
            // OS Identification
            isAndroid: isAndroid,
            isIOS: isIOS,
            isMac: isMac,
            isWindows: isWindows,
            isWinPhone: isWinPhone,
            osVersion: osVersionMatch ? osVersionMatch[2] : "NA",
            osName: isWindows ? 'Windows' : isWinPhone ? 'Windows Phone' : isMac ? 'OSX' : isIOS ? 'IOS' : isAndroid ? 'Android' : 'NA',
            isWindows81: !deviceMatch && /windows (?:8\.1|nt 6\.3)/.test(agent),
            isWindows10: !deviceMatch && agent.indexOf('windows nt 10') > -1,
            isWindows7: !deviceMatch && agent.indexOf('windows nt 6.1') > -1,
            // Device identification
            isMobile: !!deviceMatch,
            isIPad: isIPad,
            // Capabilities
            areCSS3TransitionsSupported: !isIE || browserMajor > 9,
            areTouchEventsSupported: 'ontouchstart' in window,
            isFolderUploadSupported: "webkitdirectory" in input,
            isHtml5FileUploadSupported: !!(fileProto && (fileProto.slice || fileProto.mozSlice || fileProto.webkitSlice)),
            isRetinaSupported: window.devicePixelRatio > 1,
            isUnlimitedStyleSheetsSupported: !emptyStyle["styleSheet"],
            isWebDavSupported: 'addBehavior' in document.createElement('div'),
            // Raw user agent
            userAgent: userAgent
        };
    }
    return PlatformDetection;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = PlatformDetection;


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var PairedEventBase_1 = __webpack_require__(31);
exports.Beacon = PairedEventBase_1.createPairedEvent({
    eventName: 'Beacon,',
    shortEventName: 'Beacon',
    requiresParent: false
}, {
    name: 1 /* String */,
    status: 1 /* String */,
    success: 3 /* Boolean */,
    retryCount: 2 /* Number */,
    totalRetries: 2 /* Number */,
    eventCount: 2 /* Number */
});
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.Beacon;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var SingleEventBase_1 = __webpack_require__(1);
exports.Engagement = SingleEventBase_1.createSingleEvent({
    eventName: 'Engagement,',
    shortEventName: 'Engagement'
}, {
    name: {
        isKey: true,
        isPrefixingDisabled: true,
        type: 1 /* String */
    },
    isIntentional: {
        isPrefixingDisabled: true,
        type: 3 /* Boolean */
    },
    scenario: {
        isPrefixingDisabled: true,
        type: 1 /* String */
    },
    location: {
        isPrefixingDisabled: true,
        type: 1 /* String */
    },
    usageType: {
        isPrefixingDisabled: true,
        type: 1 /* String */
    },
    currentPage: {
        isPrefixingDisabled: true,
        type: 1 /* String */
    },
    previousPage: {
        isPrefixingDisabled: true,
        type: 1 /* String */
    },
    experiment: {
        isPrefixingDisabled: true,
        type: 4 /* Object */
    },
    siteId: {
        isPrefixingDisabled: true,
        type: 1 /* String */
    },
    webId: {
        isPrefixingDisabled: true,
        type: 1 /* String */
    },
    listId: {
        isPrefixingDisabled: true,
        type: 1 /* String */
    },
    groupId: {
        isPrefixingDisabled: true,
        type: 1 /* String */
    },
    docId: {
        isPrefixingDisabled: true,
        type: 1 /* String */
    },
    webTemplateId: {
        isPrefixingDisabled: true,
        type: 1 /* String */
    },
    listTemplateId: {
        isPrefixingDisabled: true,
        type: 1 /* String */
    },
    extraData: 4 /* Object */
});
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.Engagement;


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var DataStoreCachingType_1 = __webpack_require__(15);
// DataStore class is used for transparent caching of data in memory and/or browser storage
// - Parameter defaultCachingType defines whether you want to use browser storage for all operations
// and which type of storage - session or local
// - Parameter dataStoreKey is used to prefix every key in browser storage. Actual key for browser storage
// will be dataStoreKey + key used in setValue method.
// - If DataStore is instantiated with some type of browser caching enabled - it will test if browser storage
// is available and use it. If it's not it will fall back to in-memory cache.
// - If DataStore is instantiated from two different places with same dataStoreKey and some type of
// browser storage caching, the memory storage will be shared as well as browser storage.
var DataStore = (function () {
    function DataStore(dataStoreKey, defaultCachingType) {
        if (defaultCachingType === void 0) { defaultCachingType = DataStoreCachingType_1.default.none; }
        DataStore.init();
        this.dataStoreKey = dataStoreKey;
        this.defaultCachingType = defaultCachingType;
        if (defaultCachingType === DataStoreCachingType_1.default.none) {
            this.dataStore = {};
        }
        else {
            var store = DataStore._dataStore[this.dataStoreKey];
            if (store === undefined) {
                DataStore._dataStore[this.dataStoreKey] = {};
            }
            this.dataStore = DataStore._dataStore[this.dataStoreKey];
        }
    }
    DataStore.hasStorageType = function (storageType) {
        DataStore.init();
        switch (storageType) {
            case DataStoreCachingType_1.default.none: return true;
            case DataStoreCachingType_1.default.sharedMemory: return true;
            case DataStoreCachingType_1.default.session: return !!DataStore._sessionStorage;
            case DataStoreCachingType_1.default.local: return !!DataStore._localStorage;
        }
        return false;
    };
    DataStore.init = function () {
        if (DataStore._initialized) {
            return;
        }
        // Need a try/catch since window.localStorage can throw.
        try {
            if ('localStorage' in window && window.localStorage && DataStore.testStorage(window.localStorage)) {
                DataStore._localStorage = window.localStorage;
            }
        }
        catch (exUsingLocalStorage) {
        }
        try {
            if ('sessionStorage' in window && window.sessionStorage && DataStore.testStorage(window.sessionStorage)) {
                DataStore._sessionStorage = window.sessionStorage;
            }
        }
        catch (exUsingSessionStorage) {
        }
        // Fallback logic
        if (DataStore._localStorage == null) {
            DataStore._localStorage = DataStore._sessionStorage;
        }
        DataStore._initialized = true;
    };
    /** Need to check whether the value in localStorage is of the correct type.
     * In Private Browsing in Safari, for example, localStorage is accessible,
     * but all of the non-built-in properties return undefined, and setting
     * such a property causes an exception.
     */
    DataStore.testStorage = function (storage) {
        var _testKey = "BrowserStorageTest";
        var _testValue = "1";
        var result = false;
        try {
            storage.setItem(_testKey, _testValue);
            if (storage.getItem(_testKey) === _testValue) {
                result = true;
            }
            storage.removeItem(_testKey);
        }
        catch (e) { }
        return result;
    };
    DataStore.prototype.setValue = function (key, value, cachingTypeOverride, normalizeKey) {
        if (normalizeKey === void 0) { normalizeKey = true; }
        key = normalizeKey ? this.normalizeKey(key) : key;
        this.dataStore[key] = value;
        var storage = this.getStorage(cachingTypeOverride);
        if (storage) {
            try {
                var objectsFound = [];
                var s = JSON.stringify(value, function (key, value) {
                    if (typeof value === 'object' && value !== null) {
                        if (objectsFound.indexOf(value) !== -1) {
                            // discard the key if circular dependency was found
                            return;
                        }
                        // Otherwise store value in the cache
                        objectsFound.push(value);
                    }
                    return value;
                });
                // empty cache
                objectsFound = null;
                storage.setItem(this.dataStoreKey + key, s);
            }
            catch (e) {
            }
        }
    };
    DataStore.prototype.getValue = function (key, cachingTypeOverride, normalizeKey) {
        if (normalizeKey === void 0) { normalizeKey = true; }
        key = normalizeKey ? this.normalizeKey(key) : key;
        var value = this.dataStore[key];
        var storage = this.getStorage(cachingTypeOverride);
        if (value === undefined && storage) {
            var s = storage.getItem(this.dataStoreKey + key);
            if (s) {
                try {
                    value = JSON.parse(s);
                    this.dataStore[key] = value;
                }
                catch (e) {
                    value = undefined;
                }
            }
        }
        return value;
    };
    DataStore.prototype.remove = function (key, cachingTypeOverride, normalizeKey) {
        if (normalizeKey === void 0) { normalizeKey = true; }
        key = normalizeKey ? this.normalizeKey(key) : key;
        var storage = this.getStorage(cachingTypeOverride);
        if (storage) {
            storage.removeItem(this.dataStoreKey + key);
        }
        delete this.dataStore[key];
    };
    DataStore.prototype.getStorage = function (cachingTypeOverride) {
        var cachingType = cachingTypeOverride ? cachingTypeOverride : this.defaultCachingType;
        switch (cachingType) {
            case DataStoreCachingType_1.default.none:
                return null;
            case DataStoreCachingType_1.default.sharedMemory:
                return null;
            case DataStoreCachingType_1.default.session:
                return DataStore._sessionStorage;
            case DataStoreCachingType_1.default.local:
                return DataStore._localStorage;
        }
        return null;
    };
    DataStore.prototype.normalizeKey = function (key) {
        return key && key.toLowerCase() || '';
    };
    return DataStore;
}());
DataStore._sessionStorage = null;
DataStore._localStorage = null;
DataStore._dataStore = {};
DataStore._initialized = false;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = DataStore;


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(174));
__export(__webpack_require__(173));


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var sp_core_library_1 = __webpack_require__(0);
var sp_core_library_2 = __webpack_require__(0);
var Placeholder_1 = __webpack_require__(44);
var PlaceholderName_1 = __webpack_require__(46);
var PlaceholderManager = (function () {
    function PlaceholderManager(serviceScope) {
        this._placeholders = undefined;
        this._changedEvent = new sp_core_library_2.Event(PlaceholderManager.placeholdersChangedEventName);
    }
    Object.defineProperty(PlaceholderManager.prototype, "changedEvent", {
        get: function () {
            return this._changedEvent;
        },
        enumerable: true,
        configurable: true
    });
    PlaceholderManager.prototype.registerPlaceholders = function () {
        var placeholderDivs = document.querySelectorAll("[" + PlaceholderManager.placeholderAttributeName + "]");
        var regionDef = [];
        for (var i = 0; i < placeholderDivs.length; i++) {
            var div = placeholderDivs[i];
            var name_1 = div.getAttribute(PlaceholderManager.placeholderAttributeName);
            if (div && name_1) {
                var placeholderName = PlaceholderName_1.default[name_1];
                if (typeof placeholderName !== 'number') {
                    throw new Error('Invalid placeholder definition: ' + name_1);
                }
                regionDef.push({
                    name: placeholderName,
                    domElement: div
                });
            }
        }
        this.initializePlaceholders(regionDef);
    };
    PlaceholderManager.prototype.initializePlaceholders = function (definitions) {
        var _this = this;
        sp_core_library_1.Validate.isNotNullOrUndefined(definitions, 'definitions');
        this._placeholders = [];
        this._placeholders = definitions.map(function (def) { return new Placeholder_1.default(def, _this); });
        sp_core_library_2._EventManager.instance._raiseEvent(PlaceholderManager.placeholdersChangedEventName, new sp_core_library_2.EventArgs());
    };
    Object.defineProperty(PlaceholderManager.prototype, "placeholders", {
        get: function () {
            return this._placeholders;
        },
        enumerable: true,
        configurable: true
    });
    PlaceholderManager.serviceKey = sp_core_library_1.ServiceKey.create('sp-application-base:PlaceholderManager', PlaceholderManager);
    PlaceholderManager.placeholdersChangedEventName = 'placeholders.changedEvent';
    PlaceholderManager.placeholderAttributeName = 'data-sp-placeholder';
    return PlaceholderManager;
}());
exports.default = PlaceholderManager;


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {
/**
 * An IThemingInstruction can specify a rawString to be preserved or a theme slot and a default value
 * to use if that slot is not specified by the theme.
 */
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
// IE needs to inject styles using cssText. However, we need to evaluate this lazily, so this
// value will initialize as undefined, and later will be set once on first loadStyles injection.
var _injectStylesWithCssText;
// Store the theming state in __themeState__ global scope for reuse in the case of duplicate
// load-themed-styles hosted on the page.
var _root = (typeof window === 'undefined') ? global : window; // tslint:disable-line:no-any
var _themeState = initializeThemeState();
/**
 * Matches theming tokens. For example, "[theme: themeSlotName, default: #FFF]" (including the quotes).
 */
// tslint:disable-next-line:max-line-length
var _themeTokenRegex = /[\'\"]\[theme:\s*(\w+)\s*(?:\,\s*default:\s*([\\"\']?[\.\,\(\)\#\-\s\w]*[\.\,\(\)\#\-\w][\"\']?))?\s*\][\'\"]/g;
/** Maximum style text length, for supporting IE style restrictions. */
var MAX_STYLE_CONTENT_SIZE = 10000;
var now = function () { return (typeof performance !== 'undefined' && !!performance.now) ? performance.now() : Date.now(); };
function measure(func) {
    var start = now();
    func();
    var end = now();
    _themeState.perf.duration += end - start;
}
/**
 * initialize global state object
 */
function initializeThemeState() {
    var state = _root.__themeState__ || {
        theme: undefined,
        lastStyleElement: undefined,
        registeredStyles: []
    };
    if (!state.runState) {
        state = __assign({}, (state), { perf: {
                count: 0,
                duration: 0
            }, runState: {
                flushTimer: 0,
                mode: 0 /* sync */,
                buffer: []
            } });
    }
    if (!state.registeredThemableStyles) {
        state = __assign({}, (state), { registeredThemableStyles: [] });
    }
    _root.__themeState__ = state;
    return state;
}
/**
 * Loads a set of style text. If it is registered too early, we will register it when the window.load
 * event is fired.
 * @param {string | ThemableArray} styles Themable style text to register.
 * @param {boolean} loadAsync When true, always load styles in async mode, irrespective of current sync mode.
 */
function loadStyles(styles, loadAsync) {
    if (loadAsync === void 0) { loadAsync = false; }
    measure(function () {
        var styleParts = Array.isArray(styles) ? styles : splitStyles(styles);
        if (_injectStylesWithCssText === undefined) {
            _injectStylesWithCssText = shouldUseCssText();
        }
        var _a = _themeState.runState, mode = _a.mode, buffer = _a.buffer, flushTimer = _a.flushTimer;
        if (loadAsync || mode === 1 /* async */) {
            buffer.push(styleParts);
            if (!flushTimer) {
                _themeState.runState.flushTimer = asyncLoadStyles();
            }
        }
        else {
            applyThemableStyles(styleParts);
        }
    });
}
exports.loadStyles = loadStyles;
/**
 * Allows for customizable loadStyles logic. e.g. for server side rendering application
 * @param {(processedStyles: string, rawStyles?: string | ThemableArray) => void}
 * a loadStyles callback that gets called when styles are loaded or reloaded
 */
function configureLoadStyles(loadStylesFn) {
    _themeState.loadStyles = loadStylesFn;
}
exports.configureLoadStyles = configureLoadStyles;
/**
 * Configure run mode of load-themable-styles
 * @param mode load-themable-styles run mode, async or sync
 */
function configureRunMode(mode) {
    _themeState.runState.mode = mode;
}
exports.configureRunMode = configureRunMode;
/**
 * external code can call flush to synchronously force processing of currently buffered styles
 */
function flush() {
    measure(function () {
        var styleArrays = _themeState.runState.buffer.slice();
        _themeState.runState.buffer = [];
        var mergedStyleArray = [].concat.apply([], styleArrays);
        if (mergedStyleArray.length > 0) {
            applyThemableStyles(mergedStyleArray);
        }
    });
}
exports.flush = flush;
/**
 * register async loadStyles
 */
function asyncLoadStyles() {
    return setTimeout(function () {
        _themeState.runState.flushTimer = 0;
        flush();
    }, 0);
}
/**
 * Loads a set of style text. If it is registered too early, we will register it when the window.load event
 * is fired.
 * @param {string} styleText Style to register.
 * @param {IStyleRecord} styleRecord Existing style record to re-apply.
 */
function applyThemableStyles(stylesArray, styleRecord) {
    if (_themeState.loadStyles) {
        _themeState.loadStyles(resolveThemableArray(stylesArray).styleString, stylesArray);
    }
    else {
        _injectStylesWithCssText ?
            registerStylesIE(stylesArray, styleRecord) :
            registerStyles(stylesArray);
    }
}
/**
 * Registers a set theme tokens to find and replace. If styles were already registered, they will be
 * replaced.
 * @param {theme} theme JSON object of theme tokens to values.
 */
function loadTheme(theme) {
    _themeState.theme = theme;
    // reload styles.
    reloadStyles();
}
exports.loadTheme = loadTheme;
/**
 * Clear already registered style elements and style records in theme_State object
 * @option: specify which group of registered styles should be cleared.
 * Default to be both themable and non-themable styles will be cleared
 */
function clearStyles(option) {
    if (option === void 0) { option = 3 /* all */; }
    if (option === 3 /* all */ || option === 2 /* onlyNonThemable */) {
        clearStylesInternal(_themeState.registeredStyles);
        _themeState.registeredStyles = [];
    }
    if (option === 3 /* all */ || option === 1 /* onlyThemable */) {
        clearStylesInternal(_themeState.registeredThemableStyles);
        _themeState.registeredThemableStyles = [];
    }
}
exports.clearStyles = clearStyles;
function clearStylesInternal(records) {
    records.forEach(function (styleRecord) {
        var styleElement = styleRecord && styleRecord.styleElement;
        if (styleElement && styleElement.parentElement) {
            styleElement.parentElement.removeChild(styleElement);
        }
    });
}
/**
 * Reloads styles.
 */
function reloadStyles() {
    if (_themeState.theme) {
        var themableStyles = [];
        for (var _i = 0, _a = _themeState.registeredThemableStyles; _i < _a.length; _i++) {
            var styleRecord = _a[_i];
            themableStyles.push(styleRecord.themableStyle);
        }
        if (themableStyles.length > 0) {
            clearStyles(1 /* onlyThemable */);
            applyThemableStyles([].concat.apply([], themableStyles));
        }
    }
}
/**
 * Find theme tokens and replaces them with provided theme values.
 * @param {string} styles Tokenized styles to fix.
 */
function detokenize(styles) {
    if (styles) {
        styles = resolveThemableArray(splitStyles(styles)).styleString;
    }
    return styles;
}
exports.detokenize = detokenize;
/**
 * Resolves ThemingInstruction objects in an array and joins the result into a string.
 * @param {ThemableArray} splitStyleArray ThemableArray to resolve and join.
 */
function resolveThemableArray(splitStyleArray) {
    var theme = _themeState.theme;
    var themable = false;
    // Resolve the array of theming instructions to an array of strings.
    // Then join the array to produce the final CSS string.
    var resolvedArray = (splitStyleArray || []).map(function (currentValue) {
        var themeSlot = currentValue.theme;
        if (themeSlot) {
            themable = true;
            // A theming annotation. Resolve it.
            var themedValue = theme ? theme[themeSlot] : undefined;
            var defaultValue = currentValue.defaultValue || 'inherit';
            // Warn to console if we hit an unthemed value even when themes are provided, but only if "DEBUG" is true.
            // Allow the themedValue to be undefined to explicitly request the default value.
            if (theme && !themedValue && console && !(themeSlot in theme) && "boolean" !== 'undefined' && true) {
                console.warn("Theming value not provided for \"" + themeSlot + "\". Falling back to \"" + defaultValue + "\".");
            }
            return themedValue || defaultValue;
        }
        else {
            // A non-themable string. Preserve it.
            return currentValue.rawString;
        }
    });
    return {
        styleString: resolvedArray.join(''),
        themable: themable
    };
}
/**
 * Split tokenized CSS into an array of strings and theme specification objects
 * @param {string} styles Tokenized styles to split.
 */
function splitStyles(styles) {
    var result = [];
    if (styles) {
        var pos = 0; // Current position in styles.
        var tokenMatch = void 0; // tslint:disable-line:no-null-keyword
        while (tokenMatch = _themeTokenRegex.exec(styles)) {
            var matchIndex = tokenMatch.index;
            if (matchIndex > pos) {
                result.push({
                    rawString: styles.substring(pos, matchIndex)
                });
            }
            result.push({
                theme: tokenMatch[1],
                defaultValue: tokenMatch[2] // May be undefined
            });
            // index of the first character after the current match
            pos = _themeTokenRegex.lastIndex;
        }
        // Push the rest of the string after the last match.
        result.push({
            rawString: styles.substring(pos)
        });
    }
    return result;
}
exports.splitStyles = splitStyles;
/**
 * Registers a set of style text. If it is registered too early, we will register it when the
 * window.load event is fired.
 * @param {ThemableArray} styleArray Array of IThemingInstruction objects to register.
 * @param {IStyleRecord} styleRecord May specify a style Element to update.
 */
function registerStyles(styleArray) {
    var head = document.getElementsByTagName('head')[0];
    var styleElement = document.createElement('style');
    var _a = resolveThemableArray(styleArray), styleString = _a.styleString, themable = _a.themable;
    styleElement.type = 'text/css';
    styleElement.appendChild(document.createTextNode(styleString));
    _themeState.perf.count++;
    head.appendChild(styleElement);
    var record = {
        styleElement: styleElement,
        themableStyle: styleArray
    };
    if (themable) {
        _themeState.registeredThemableStyles.push(record);
    }
    else {
        _themeState.registeredStyles.push(record);
    }
}
/**
 * Registers a set of style text, for IE 9 and below, which has a ~30 style element limit so we need
 * to register slightly differently.
 * @param {ThemableArray} styleArray Array of IThemingInstruction objects to register.
 * @param {IStyleRecord} styleRecord May specify a style Element to update.
 */
function registerStylesIE(styleArray, styleRecord) {
    var head = document.getElementsByTagName('head')[0];
    var registeredStyles = _themeState.registeredStyles;
    var lastStyleElement = _themeState.lastStyleElement;
    var stylesheet = lastStyleElement ? lastStyleElement.styleSheet : undefined;
    var lastStyleContent = stylesheet ? stylesheet.cssText : '';
    var lastRegisteredStyle = registeredStyles[registeredStyles.length - 1];
    var resolvedStyleText = resolveThemableArray(styleArray).styleString;
    if (!lastStyleElement || (lastStyleContent.length + resolvedStyleText.length) > MAX_STYLE_CONTENT_SIZE) {
        lastStyleElement = document.createElement('style');
        lastStyleElement.type = 'text/css';
        if (styleRecord) {
            head.replaceChild(lastStyleElement, styleRecord.styleElement);
            styleRecord.styleElement = lastStyleElement;
        }
        else {
            head.appendChild(lastStyleElement);
        }
        if (!styleRecord) {
            lastRegisteredStyle = {
                styleElement: lastStyleElement,
                themableStyle: styleArray
            };
            registeredStyles.push(lastRegisteredStyle);
        }
    }
    lastStyleElement.styleSheet.cssText += detokenize(resolvedStyleText);
    Array.prototype.push.apply(lastRegisteredStyle.themableStyle, styleArray); // concat in-place
    // Preserve the theme state.
    _themeState.lastStyleElement = lastStyleElement;
}
/**
 * Checks to see if styleSheet exists as a property off of a style element.
 * This will determine if style registration should be done via cssText (<= IE9) or not
 */
function shouldUseCssText() {
    var useCSSText = false;
    if (typeof document !== 'undefined') {
        var emptyStyle = document.createElement('style');
        emptyStyle.type = 'text/css';
        useCSSText = !!emptyStyle.styleSheet;
    }
    return useCSSText;
}


/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(172)))

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var DisposalChain = (function () {
    function DisposalChain(owner) {
        this._callbacks = [];
        this._owner = owner;
    }
    DisposalChain.prototype.addCallback = function (callback) {
        this._callbacks.push(callback);
    };
    DisposalChain.prototype.dispose = function () {
        // Handle dispose callbacks is the reverse order from when they were attached.
        while (this._callbacks.length) {
            var callback = this._callbacks.pop();
            callback.call(this._owner);
        }
    };
    return DisposalChain;
}());
/**
 * Determines whether not an object requires is disposable.
 *
 * @export
 * @template T
 * @param {(T | IDisposable)} object
 * @returns {object is IDisposable}
 */
function isDisposable(object) {
    return typeof object.dispose === 'function';
}
exports.isDisposable = isDisposable;
function hook(instance, onDispose) {
    var disposable = instance;
    var dispose = disposable.dispose;
    var disposalChain = typeof dispose === 'function' && dispose.disposalChain;
    if (!disposalChain) {
        disposalChain = new DisposalChain(disposable);
        var disposeHook = (function () {
            disposalChain.dispose();
            if (dispose) {
                // Restore the old dispose method and clean up modifications.
                disposable.dispose = dispose;
                disposable.dispose();
            }
        });
        disposable.dispose = disposeHook;
        disposeHook.disposalChain = disposalChain;
    }
    disposalChain.addCallback(onDispose);
    return disposable;
}
exports.hook = hook;


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var UriEncoding = (function () {
    function UriEncoding() {
    }
    /////////////////////////////
    // This file is more clean of all unneeded pollutants. It only contains the minimum amount of code required for someone to use the URI class.
    // You should think twice before adding anything else into this file because you will be causing unneeded bloat from someone else.
    /////////////////////////////
    /**
     * This function performs an aggressive unicode URL-encoding.
     * Convert non alphanum character into UTF-8 code string in format %XX%XX%XX.
     *
     * Escape unsafe characters
     *   CTL | SP | <"> | "#" | "%" | "<" | ">" | "'" | "&"
     * in the URL path (before "?", "#")
     * No encoding on query string.
     *
     * @param {string} str - String to encode
     * @param {boolean} bAsUrl - Encode in the same way as the code in unmanaged (Url::UrlEncode) code and
     *                           SP OM (SPHttpUtility.UrlKeyValueEncode and SPHttpUtility.UrlPathEncode).
     * @param {boolean} bForFilterQuery
     * @param {boolean} bForCallback - Only escape the characters after 0x7F to workaround bug O12: 452191
     */
    UriEncoding.encodeURIComponent = function (str, bAsUrl, bForFilterQuery, bForCallback) {
        var strOut = "";
        var strByte;
        var ix = 0;
        var strEscaped = " \"%<>\'&";
        if (!str) {
            return "";
        }
        var len = str.length;
        for (ix = 0; ix < len; ix++) {
            var charCode = str.charCodeAt(ix);
            var curChar = str.charAt(ix);
            if (bAsUrl && (curChar === '#' || curChar === '?')) {
                strOut += str.substr(ix);
                break;
            }
            if (bForFilterQuery && curChar === '&') {
                strOut += curChar;
                continue;
            }
            if (charCode <= 0x7f) {
                if (bForCallback) {
                    strOut += curChar;
                }
                else {
                    if ((charCode >= 97 && charCode <= 122) ||
                        (charCode >= 65 && charCode <= 90) ||
                        (charCode >= 48 && charCode <= 57) ||
                        (bAsUrl && (charCode >= 32 && charCode <= 95) && strEscaped.indexOf(curChar) < 0)) {
                        strOut += curChar;
                    }
                    else if (charCode <= 0x0f) {
                        strOut += "%0" + charCode.toString(16).toUpperCase();
                    }
                    else if (charCode <= 0x7f) {
                        strOut += "%" + charCode.toString(16).toUpperCase();
                    }
                }
            }
            else if (charCode <= 0x07ff) {
                strByte = 0xc0 | (charCode >> 6);
                strOut += "%" + strByte.toString(16).toUpperCase();
                strByte = 0x80 | (charCode & 0x003f);
                strOut += "%" + strByte.toString(16).toUpperCase();
            }
            else if ((charCode & 0xFC00) !== 0xD800) {
                strByte = 0xe0 | (charCode >> 12);
                strOut += "%" + strByte.toString(16).toUpperCase();
                strByte = 0x80 | ((charCode & 0x0fc0) >> 6); // middle 6 bits
                strOut += "%" + strByte.toString(16).toUpperCase();
                strByte = 0x80 | (charCode & 0x003f); // lower 6 bits
                strOut += "%" + strByte.toString(16).toUpperCase();
            }
            else if (ix < str.length - 1) {
                charCode = (charCode & 0x03FF) << 10; // lower 10 bits of first char
                ix++;
                var nextCharCode = str.charCodeAt(ix);
                charCode |= nextCharCode & 0x03FF; // lower 10 bits of second char
                charCode += 0x10000;
                strByte = 0xf0 | (charCode >> 18);
                strOut += "%" + strByte.toString(16).toUpperCase();
                strByte = 0x80 | ((charCode & 0x3f000) >> 12); // upper 6 bits
                strOut += "%" + strByte.toString(16).toUpperCase();
                strByte = 0x80 | ((charCode & 0x0fc0) >> 6); // middle 6 bits
                strOut += "%" + strByte.toString(16).toUpperCase();
                strByte = 0x80 | (charCode & 0x003f); // lower 6 bits
                strOut += "%" + strByte.toString(16).toUpperCase();
            }
        }
        return strOut;
    };
    /**
     * Callbacks do not work if a #bookmark is in the URL. If there is a bookmark then we need to remove it. We also need to
     * deal with the scenario where there is not a bookmark but there is an unencoded # as a part of a name/value after the '?'.
     * This is how things should work here:
     * .../foo.aspx -> .../foo.aspx (unchanged)
     * .../foo.aspx#bookmark -> .../foo.aspx (bookmark is removed)
     * .../foo.aspx#bookmark?name=value -> .../foo.aspx?name=value (bookmark is removed)
     * .../foo.aspx#bookmark?name1=value#extra1&name2=value2 -> .../foo.aspx?name1=value#extra1&name2=value2 (only the bookmark # is removed)
     * .../foo.aspx?name1=value#extra1&name2=value2 -> .../foo.aspx?name1=value#extra1&name2=value2 (unchanged)
     */
    UriEncoding.escapeUrlForCallback = function (str) {
        var iPound = str.indexOf("#");
        var iQues = str.indexOf("?");
        if ((iPound > 0) && ((iQues === -1) || (iPound < iQues))) {
            var strNew = str.substr(0, iPound);
            if (iQues > 0) {
                strNew += str.substr(iQues); // Need to include the '?' along with the "name=value" pairs.
            }
            str = strNew;
        }
        return UriEncoding.encodeURIComponent(str, true, false, true);
    };
    /**
     * SharePoint REST processor expect single quote ' to be escaped to '' in tokens (this applies to %27 too).
     * See example for usage.
     * @example
     * "getFolderByServerRelativeUrl('"+encodeRestUriStringToken("don't know.txt")+"')" should became "getFolderByServerRelativeUrl('don''t know.txt')""
     */
    UriEncoding.encodeRestUriStringToken = function (stringToken) {
        if (stringToken) {
            stringToken = stringToken.replace(/'/g, "''");
            stringToken = stringToken.replace(/%27/g, "%27%27");
            stringToken = UriEncoding.encodeURIComponent(stringToken);
        }
        return stringToken;
    };
    return UriEncoding;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = UriEncoding;


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ErrorHelper_1 = __webpack_require__(3);
/** An instance of EventGroup allows anything with a handle to it to trigger events on it.
 *  If the target is an HTMLElement, the event will be attached to the element and can be
 *  triggered as usual (like clicking for onclick).
 *  The event can be triggered by calling EventGroup.raise() here. If the target is an
 *  HTMLElement, the event gets raised and is handled by the browser. Otherwise, it gets
 *  handled here in EventGroup, and the handler is called in the context of the parent
 *  (which is passed in in the constructor).
 */
var EventGroup = (function () {
    /** parent: the context in which events attached to non-HTMLElements are called */
    function EventGroup(parent) {
        this._id = EventGroup._uniqueId++;
        this._parent = parent;
        this._eventRecords = [];
    }
    /**
     *  Events raised here by default have bubbling set to false and cancelable set to true.
     *  This applies also to built-in events being raised manually here on HTMLElements,
     *  which may lead to unexpected behavior if it differs from the defaults.
     */
    EventGroup.raise = function (target, eventName, eventArgs, bubbleEvent) {
        var retVal;
        if (EventGroup._isElement(target)) {
            if (document.createEvent) {
                var ev = document.createEvent('HTMLEvents');
                ev.initEvent(eventName, bubbleEvent, true);
                ev['args'] = eventArgs;
                retVal = target.dispatchEvent(ev);
            }
        }
        else {
            while (target && retVal !== false) {
                var events = target.__events__;
                var eventRecords = events ? events[eventName] : null;
                for (var id in eventRecords) {
                    var eventRecordList = eventRecords[id];
                    for (var listIndex = 0; retVal !== false && listIndex < eventRecordList.length; listIndex++) {
                        var record = eventRecordList[listIndex];
                        if (record.objectCallback) {
                            retVal = record.objectCallback.call(record.parent, eventArgs);
                        }
                    }
                }
                // If the target has a parent, bubble the event up.
                target = bubbleEvent ? target.parent : null;
            }
        }
        return retVal;
    };
    EventGroup.isObserved = function (target, eventName) {
        var events = target && target.__events__;
        return !!events && !!events[eventName];
    };
    /** Check to see if the target has declared support of the given event. */
    EventGroup.isDeclared = function (target, eventName) {
        var declaredEvents = target && target.__declaredEvents;
        return !!declaredEvents && !!declaredEvents[eventName];
    };
    EventGroup.stopPropagation = function (event) {
        if (event.stopPropagation) {
            event.stopPropagation();
        }
    };
    EventGroup._isElement = function (target) {
        return !!target && (target instanceof HTMLElement || target.addEventListener);
    };
    EventGroup.prototype.dispose = function () {
        if (!this._isDisposed) {
            this._isDisposed = true;
            this.off();
            this._parent = null;
        }
    };
    /** On the target, attach a set of events, where the events object is a name to function mapping. */
    EventGroup.prototype.onAll = function (target, events, useCapture) {
        for (var eventName in events) {
            this.on(target, eventName, events[eventName], useCapture);
        }
    };
    /** On the target, attach an event whose handler will be called in the context of the parent
     * of this instance of EventGroup.
     */
    EventGroup.prototype.on = function (target, eventName, callback, useCapture) {
        var _this = this;
        if (eventName.indexOf(',') > -1) {
            var events = eventName.split(/[ ,]+/);
            for (var i = 0; i < events.length; i++) {
                this.on(target, events[i], callback, useCapture);
            }
        }
        else {
            var parent = this._parent;
            var eventRecord = {
                target: target,
                eventName: eventName,
                parent: parent,
                callback: callback,
                objectCallback: null,
                elementCallback: null,
                useCapture: useCapture
            };
            // Initialize and wire up the record on the target, so that it can call the callback if the event fires.
            var events_1 = (target.__events__ = target.__events__ || {});
            events_1[eventName] = events_1[eventName] || {
                count: 0
            };
            events_1[eventName][this._id] = events_1[eventName][this._id] || [];
            events_1[eventName][this._id].push(eventRecord);
            events_1[eventName].count++;
            if (EventGroup._isElement(target)) {
                var processElementEvent = function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    if (_this._isDisposed) {
                        return;
                    }
                    try {
                        var result = callback.apply(parent, args);
                        if (result === false && args[0] && args[0].preventDefault) {
                            var e = args[0];
                            e.preventDefault();
                            EventGroup.stopPropagation(e);
                        }
                    }
                    catch (e) {
                        ErrorHelper_1.default.log(e);
                    }
                    return result;
                };
                eventRecord.elementCallback = processElementEvent;
                if (target.addEventListener) {
                    /* tslint:disable:ban-native-functions */
                    target.addEventListener(eventName, processElementEvent, useCapture);
                }
            }
            else {
                var processObjectEvent = function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    if (_this._isDisposed) {
                        return;
                    }
                    return callback.apply(parent, args);
                };
                eventRecord.objectCallback = processObjectEvent;
            }
            // Remember the record locally, so that it can be removed.
            this._eventRecords.push(eventRecord);
        }
    };
    EventGroup.prototype.off = function (target, eventName, callback, useCapture) {
        for (var i = 0; i < this._eventRecords.length; i++) {
            var eventRecord = this._eventRecords[i];
            if ((!target || target === eventRecord.target) &&
                (!eventName || eventName === eventRecord.eventName) &&
                (!callback || callback === eventRecord.callback) &&
                ((typeof useCapture !== 'boolean') || useCapture === eventRecord.useCapture)) {
                var events = eventRecord.target.__events__;
                var targetArrayLookup = events[eventRecord.eventName];
                var targetArray = targetArrayLookup ? targetArrayLookup[this._id] : null;
                // We may have already target's entries, so check for null.
                if (targetArray) {
                    if (targetArray.length === 1 || !callback) {
                        targetArrayLookup.count -= targetArray.length;
                        delete events[eventRecord.eventName][this._id];
                    }
                    else {
                        targetArrayLookup.count--;
                        targetArray.splice(targetArray.indexOf(eventRecord), 1);
                    }
                    if (!targetArrayLookup.count) {
                        delete events[eventRecord.eventName];
                    }
                }
                if (eventRecord.elementCallback) {
                    if (eventRecord.target.removeEventListener) {
                        eventRecord.target.removeEventListener(eventRecord.eventName, eventRecord.elementCallback, eventRecord.useCapture);
                    }
                }
                this._eventRecords.splice(i--, 1);
            }
        }
    };
    /** Trigger the given event in the context of this instance of EventGroup. */
    EventGroup.prototype.raise = function (eventName, eventArgs, bubbleEvent) {
        return EventGroup.raise(this._parent, eventName, eventArgs, bubbleEvent);
    };
    /** Declare an event as being supported by this instance of EventGroup. */
    EventGroup.prototype.declare = function (event) {
        var declaredEvents = this._parent.__declaredEvents = this._parent.__declaredEvents || {};
        if (typeof event === 'string') {
            declaredEvents[event] = true;
        }
        else {
            for (var i = 0; i < event.length; i++) {
                declaredEvents[event[i]] = true;
            }
        }
    };
    return EventGroup;
}());
EventGroup._uniqueId = 0;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = EventGroup;


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

;
/**
 * This file contains the known list of features (a.k.a. flights or ramps).
 * The signature of one entry is:
 *  static FeatureName: IFlight = { ODB: 100, ODC: "foo", Fallback: true };
 * ODB            Is the numerical value of the flight from the ExpFeature enumeration.
 *                Omit if the flight does not have a correspondent in ODB.
 * ODC            Is the string identifier in ODC.
 *                Omit if the flight does not have a correspondent ramp in ODC.
 * OneDrive       Is the value of the flight in OneDrive.
 *                Omit if the flight does not have a correspondent ramp in OneDrive.
 * Fallback       The state of the flight, true = on false = off.
 *                The fallback is used only when the ODB or ODC flight is not applicable.
 *                For example: The Flight is an ODB flight with no ODC counterpart and the app runs in ODC mode.
 *                The fallback also allows declaring app only switches that are not known to the backend.
 *                Omit if false.
 */
var Features = (function () {
    function Features() {
    }
    /**
     * Performs the initialization of the client side features for
     * SP and ODB in scenarios where the window['_spPageContextInfo']
     * is not available.
     *
     * @param {number[]} expFeatures - The bit map of the client side features
     * usually provided by the ISPPageContext.
     *
     * @example initSPExpFeatures(pageContextInfo.ExpFeatures)
     */
    Features.initSPExpFeatures = function (expFeatures) {
        Features._expFeatures = expFeatures;
    };
    /**
     * This function will return true when the feature is enabled and
     * will check the proper config for SP,ODB and/or ODC to determine.
     *
     * @requires In scenarios where the window['_spPagecontextInfo'] might not exist
     * this function requires initSPExpFeatures before checing the state of ODB features.
     *
     * @param {IFeature} feature - the feature to be checked if enabled.
     * @return {boolean} - True if the feature is found active.
     */
    Features.isFeatureEnabled = function (feature) {
        var result = !!feature.Fallback;
        // OneDriveWeb initialization
        var oneDrivePageContext = window['PageContext'];
        // ODC initialization
        var _odcFlightInfo = window['Flight'];
        var _odcConfig = window['FilesConfig'];
        // SP/ODB: for backward compatibility,
        // if _spPageContextInfo is still available
        // this performs the initialization of the _expFeatures.
        var _flighting = window['Flighting']; // Old SharePoint pages use this.
        var _spPageContextInfo = window['_spPageContextInfo'];
        if (!Features._expFeatures && _spPageContextInfo) {
            if (!_spPageContextInfo.ExpFeatures &&
                _flighting && _flighting.ExpFeatures) {
                _spPageContextInfo.ExpFeatures = _flighting.ExpFeatures;
            }
            Features.initSPExpFeatures(_spPageContextInfo.ExpFeatures);
        }
        var odb = feature.ODB;
        if (typeof odb === 'boolean') {
            result = odb;
        }
        else if (odb > 0 && Features._expFeatures) {
            var elem = Math.floor(odb / 32);
            var mask = 1 << (odb % 32);
            result = (elem < Features._expFeatures.length) &&
                (Features._expFeatures[elem] & mask) !== 0;
        }
        if (feature.ODC && !!_odcConfig) {
            if (typeof feature.ODC === 'boolean') {
                result = feature.ODC;
            }
            else if (_odcFlightInfo && _odcFlightInfo.Ramps && _odcFlightInfo.Ramps[feature.ODC]) {
                result = true;
            }
            else if (_odcConfig && _odcConfig[feature.ODC]) {
                result = true;
            }
        }
        if (feature.OneDrive && !!oneDrivePageContext) {
            result = feature.OneDrive;
        }
        return result;
    };
    return Features;
}());
/* This feature is always on */
Features.On = { Fallback: true };
/* This feature is always off */
Features.Off = {};
//You should not add features here but in your own file
Features._expFeatures = null;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Features;


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ItemType;
(function (ItemType) {
    ItemType[ItemType["File"] = 0] = "File";
    ItemType[ItemType["Folder"] = 1] = "Folder";
    ItemType[ItemType["Media"] = 2] = "Media";
    ItemType[ItemType["OneNote"] = 3] = "OneNote";
    ItemType[ItemType["Unknown"] = 4] = "Unknown";
    ItemType[ItemType["Error"] = 5] = "Error";
    ItemType[ItemType["App"] = 6] = "App";
    ItemType[ItemType["Subsite"] = 7] = "Subsite";
    /** A shortcut link pointing to some target destination or Url */
    ItemType[ItemType["Shortcut"] = 8] = "Shortcut";
})(ItemType = exports.ItemType || (exports.ItemType = {}));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ItemType;


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var Locale = (function () {
    function Locale() {
    }
    /**
     * Sets the locale to be used by the app.
     * @param {string} language - The language used to render the app.
     */
    Locale.invalidate = function (language) {
        Locale.isRightToLeft = (document.documentElement.getAttribute('dir') === 'rtl');
        Locale.safeLeft = Locale.isRightToLeft ? 'right' : 'left';
        Locale.safeRight = Locale.isRightToLeft ? 'left' : 'right';
        /** Robert Chen has the detailed explanation here : The most magic thing here is that OneDrive page and teamsite page has exactly the same line of code with regard to html tag Lang attribute.
         * <SharePoint:SPHtmlTag lang="<%$Resources:wss,language_value%>" dir="<%$Resources:wss,multipages_direction_dir_value%>" ID="SPHtmlTag" runat="server">
         * And in teamsite doclib, this lang gets executed to the current user locale. And that is actually already a magic------What happens here is the in order to get the doclib page in ContentDB, we had a standard MondoSproc call which gets the page and the SPWeb. In constructing the web, SP *  * code has smart logic to set Thread.CurrentThread.CurrentUICulture to match the MUI language! And with that magic, ="<%$Resources:wss,language_value%> actually gets sets properly to the user language, not the pre-defined web language.
         * For OneDrive.aspx which lives inside _layouts folder, the order of code execution changes. We must have executed this line of ASPX code first ="<%$Resources:wss,language_value%> before SPWeb was opened and did the magic to set Thread.CurrentThread.CurrentUICulture.
         * So the Thread.CurrentThread.CurrentUICulture affecting ="<%$Resources:wss,language_value%> with SPWeb magic end up not working in Onedrive.aspx! And there’s really nothing that we can do about it unless we rewrite the page!
         * So the conclusion is that the lang attribute is by design (of implementation) different from the regular team site pages which live inside content db.
         */
        language = language || window["_spPageContextInfo"] && window["_spPageContextInfo"].currentUICultureName;
        // fallback of xml:lang for IE9
        Locale.language = language ||
            document.documentElement.getAttribute('lang') ||
            document.documentElement.getAttribute('xml:lang') ||
            'en-us';
    };
    return Locale;
}());
Locale.invalidate();
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Locale;


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:CoverageThreshold(75)

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var EventBase_1 = __webpack_require__(8);
var Manager_1 = __webpack_require__(5);
var ResultTypeEnum_1 = __webpack_require__(14);
var ErrorHelper_1 = __webpack_require__(3);
var Async_1 = __webpack_require__(4);
var ObjectUtil_1 = __webpack_require__(6);
var schemaExceptionErrorCode = 'GetSchemaException';
var promiseCreationFailureErrorCode = 'PromiseCreationFailed';
var timeoutErrorCode = 'Timeout';
function generateQosResult(resultType, resultCode, error) {
    var schema = {
        resultType: resultType
    };
    if (resultCode) {
        schema.resultCode = resultCode;
    }
    if (error) {
        schema.error = error;
    }
    return schema;
}
function createPairedEvent(props, metadata, baseClass) {
    var PairedEvent = (function (_super) {
        __extends(PairedEvent, _super);
        function PairedEvent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return PairedEvent;
    }(PairedEventBase));
    EventBase_1.addEventProps(PairedEvent.prototype, props, metadata, baseClass);
    return PairedEvent;
}
exports.createPairedEvent = createPairedEvent;
var PairedEventBase = (function (_super) {
    __extends(PairedEventBase, _super);
    function PairedEventBase(data, parent) {
        return _super.call(this, data, EventBase_1.ClonedEventType.Start, parent) || this;
    }
    PairedEventBase.instrumentPromise = function (startSchema, createPromise, getCompleteSchema, getErrorSchema, timeoutMs, timeoutSchema, parent) {
        var promise;
        var event = new this(startSchema, parent);
        if (timeoutMs) {
            event.setTimeout(timeoutMs, timeoutSchema);
        }
        var onComplete = function (result) {
            var schema;
            if (getCompleteSchema) {
                try {
                    schema = getCompleteSchema(result);
                }
                catch (e) {
                    schema = generateQosResult(ResultTypeEnum_1.ResultTypeEnum.Failure, schemaExceptionErrorCode, e.toString());
                }
            }
            else {
                schema = generateQosResult(ResultTypeEnum_1.ResultTypeEnum.Success);
            }
            event.end(schema);
        };
        var onError = function (errorArgs) {
            var schema;
            if (getErrorSchema) {
                try {
                    schema = getErrorSchema(errorArgs);
                }
                catch (e) {
                    schema = generateQosResult(ResultTypeEnum_1.ResultTypeEnum.Failure, schemaExceptionErrorCode, e.toString());
                }
            }
            else if (errorArgs) {
                var failureResultType = (errorArgs instanceof Error && errorArgs.name === "Canceled") ?
                    ResultTypeEnum_1.ResultTypeEnum.ExpectedFailure : ResultTypeEnum_1.ResultTypeEnum.Failure;
                schema = generateQosResult(failureResultType, null, ObjectUtil_1.safeSerialize(errorArgs));
            }
            else {
                schema = generateQosResult(ResultTypeEnum_1.ResultTypeEnum.Failure);
            }
            event.end(schema);
        };
        try {
            promise = createPromise();
        }
        catch (e) {
            event.end(generateQosResult(ResultTypeEnum_1.ResultTypeEnum.Failure, promiseCreationFailureErrorCode, e.toString()));
            throw e;
        }
        promise.then(onComplete, onError);
        return promise;
    };
    PairedEventBase.prototype.setTimeout = function (ms, data) {
        if (!this.async) {
            this.async = new Async_1.default(this);
        }
        this._clearTimeout();
        if (!data) {
            data = generateQosResult(ResultTypeEnum_1.ResultTypeEnum.Failure, timeoutErrorCode);
        }
        this.async.setTimeout(this.end.bind(this, data), ms);
    };
    PairedEventBase.prototype.verbose = function (message) {
        if (this.endTime) {
            // event already ended, no need to log anymore
            return;
        }
        if (this._isQosEvent()) {
            var qosSchema = this.data;
            ErrorHelper_1.default.verbose(message, qosSchema.name);
        }
    };
    PairedEventBase.prototype.end = function (data) {
        // Make sure end can only be called once
        if (!this.endTime) {
            if (data) {
                this._setData(data);
            }
            // Set the end time
            this.endTime = Manager_1.Manager.getTime();
            // Log the event end
            this._logEvent(EventBase_1.ClonedEventType.End);
            // If this is a QOS event log and contains an error message trigger the upload of logs by calling
            // the ErrorHelper
            if (this._isQosEvent()) {
                var qosSchema = this.data;
                if (qosSchema.error) {
                    ErrorHelper_1.default.log(qosSchema.error, qosSchema.name, qosSchema.resultCode, qosSchema.resultType);
                }
            }
            this._clearTimeout();
        }
    };
    PairedEventBase.prototype._clearTimeout = function () {
        if (this.async && this.timeoutId) {
            this.async.clearTimeout(this.timeoutId);
            this.timeoutId = null;
        }
    };
    PairedEventBase.prototype._isQosEvent = function () {
        return this.eventName.indexOf('Qos,') >= 0;
    };
    return PairedEventBase;
}(EventBase_1.EventBase));


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var SingleEventBase_1 = __webpack_require__(1);
var Trace_event_1 = __webpack_require__(59);
exports.CaughtError = SingleEventBase_1.createSingleEvent({
    eventName: 'CaughtError,Trace,',
    shortEventName: 'CaughtError',
    critical: true,
    requiresParent: false
}, {
    stack: 1 /* String */,
    extraData: 4 /* Object */
}, Trace_event_1.Trace);
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.CaughtError;


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var SingleEventBase_1 = __webpack_require__(1);
exports.PLT = SingleEventBase_1.createSingleEvent({
    eventName: 'PLT,',
    shortEventName: 'PLT',
    samplingFeature: { ODB: true, ODC: 'PLTLoggingSampling', Fallback: false }
}, {
    name: {
        isKey: true,
        type: 1 /* String */
    },
    w3cResponseEnd: 2 /* Number */,
    prefetchStart: 2 /* Number */,
    deferredListDataRender: 2 /* Number */,
    appStart: 2 /* Number */,
    preRender: 2 /* Number */,
    dataFetch: 2 /* Number */,
    dataFetchServerTime: 2 /* Number */,
    postRender: 2 /* Number */,
    render: 2 /* Number */,
    plt: 2 /* Number */,
    pltWithUnload: 2 /* Number */,
    httpRequests: 2 /* Number */,
    appCacheHit: 3 /* Boolean */
});
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.PLT;


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// OneDrive:IgnoreCodeCoverage
var Async_1 = __webpack_require__(4);
var PageTransitionType_1 = __webpack_require__(63);
var RUMOneSLAPI_1 = __webpack_require__(64);
var RUMOneErrorsSLAPI_1 = __webpack_require__(120);
var RUMOneDataUpload_event_1 = __webpack_require__(57);
var PlatformDetection_1 = __webpack_require__(18);
var PerformanceMarker_1 = __webpack_require__(71);
var PerformanceDataState;
(function (PerformanceDataState) {
    /**
     * Not enought data collected to upload
     * At this state logger isRunning is true
     */
    PerformanceDataState[PerformanceDataState["Incomplete"] = 1] = "Incomplete";
    /**
     * Required data collected and can be uploaded.
     * Practically all expected controls has rendered by this time
     * and EUPL has been set.
     * At this state logger isRunning is true but sooner to change to false.
     */
    PerformanceDataState[PerformanceDataState["ReadyToUpload"] = 2] = "ReadyToUpload";
    /**
     * Incomplete -> ReadyToUpload |  ERROR_TIMEOUT time elapsed -> Uploaded
     * Performance data has been uploaded for the current page.
     * Until reset, no more data will be uploaded.
     */
    PerformanceDataState[PerformanceDataState["Uploaded"] = 3] = "Uploaded";
    /**
     * Incomplete -> ERROR_TIMEOUT time elapsed -> TimeOut -> Uploaded
     * Timeout occured before expected controls could finish rendering
     * Data will be uploaded as it is but without EUPL.
     * Consumer should consider EUPL="" as > 30 sec for performance analysis
     */
    PerformanceDataState[PerformanceDataState["TimeOut"] = 4] = "TimeOut";
    /**
     * Incomplete -> (ERROR_TIMEOUT time elapsed && TimeOut) | ReadyToUpload -> Skipped
     * This is a state where data has been collected or timeout but uploading the data was skipped
     * This happens when consumer has asked to do so based on the page's debug environment
     */
    PerformanceDataState[PerformanceDataState["Skipped"] = 5] = "Skipped";
})(PerformanceDataState || (PerformanceDataState = {}));
var APICallPerformanceData = (function () {
    function APICallPerformanceData(url, duration, correlationid, status, startTime, endTime, name) {
        this.url = url;
        this.duration = duration;
        this.correlationId = correlationid;
        this.status = status;
        this.startTime = startTime;
        this.endTime = endTime;
        this.name = name;
    }
    return APICallPerformanceData;
}());
exports.APICallPerformanceData = APICallPerformanceData;
var ControlPerformanceData = (function () {
    function ControlPerformanceData(controlId, startTime, endTime, renderTimeCalculator, renderTimeRequiredDataChecker, ignoreForEUPL) {
        this.controlId = controlId;
        this.startTime = startTime;
        this.endTime = endTime;
        this.renderTimeCalculator = renderTimeCalculator;
        this.renderTimeRequiredDataChecker = renderTimeRequiredDataChecker;
        this.ignoreForEUPL = !!ignoreForEUPL;
    }
    return ControlPerformanceData;
}());
exports.ControlPerformanceData = ControlPerformanceData;
function isNullOrUndefined(item) {
    'use strict';
    return item === null || item === undefined;
}
var performance = window.performance;
/**
 * It is a new client side perf instrumentation, it logs more metrics, like scenario, api data, server request id, duration, etc in 1 single schema.
 * It has server side usage DB and cosmos supports.
 */
var RUMOneLogger = (function () {
    function RUMOneLogger(logFunc) {
        this.async = new Async_1.default(this);
        this.dataStartTime = Number((new Date()).getTime());
        this.performanceData = null;
        this.dataState = PerformanceDataState.Incomplete;
        this.controls = [];
        this.apis = [];
        this.perfDataTimer = null;
        this.euplBreakDown = {};
        this.serverMetrics = {};
        this.isW3cTimingCollected = false;
        this.isW3cResourceTimingCollected = false;
        this.tempData = {};
        this._emergencyUpdateFunc = this._emergencyUpload.bind(this);
        this.performanceData = null;
        this.loggingFunc = logFunc;
        this.getPerformanceData();
        this.setPerfDataTimer();
        this._platformDetection = new PlatformDetection_1.default();
        this._hookUnloadEvent();
    }
    /**
     * RUMOneLogger.getRUMOneLogger: Use this method to get a singleton reference of RUMOneLogger
     * with default parameters.
     */
    RUMOneLogger.getRUMOneLogger = function (logFunc) {
        var loggingFunc = logFunc || (function (streamName, dictProperties) {
            RUMOneDataUpload_event_1.RUMOneDataUpload.logData({ streamName: streamName, dictionary: dictProperties });
        });
        if (!RUMOneLogger.rumOneLogger) {
            try {
                RUMOneLogger.rumOneLogger = new RUMOneLogger(loggingFunc);
            }
            catch (e) {
                // If RUMOneLogger fails, don't block UX
                RUMOneLogger.rumOneLogger = null;
            }
        }
        return RUMOneLogger.rumOneLogger;
    };
    RUMOneLogger.prototype.getPerformanceData = function () {
        if (!this.performanceData) {
            this.performanceData = new RUMOneSLAPI_1.default();
            this.logMessageInConsole("RUMOne object initiated!");
        }
        return this.performanceData;
    };
    RUMOneLogger.prototype.resetLogger = function () {
        this._emergencyUpload(); // upload ready key metrics if we have not. this should rarely happen
        this.dataStartTime = (new Date()).getTime();
        this.dataState = PerformanceDataState.Incomplete;
        this.isW3cTimingCollected = false;
        this.isW3cResourceTimingCollected = false;
        this.controls = [];
        this.apis = [];
        this.tempData = {};
        this.performanceData = null;
        this._excludePageData = false;
        this._waitOnAddingExpectedControl = false;
        this.getPerformanceData();
        this.clearPerfDataTimer();
        this.setPerfDataTimer();
        this.euplBreakDown = {};
        this.serverMetrics = {};
        this.clearResourceTimings();
        PerformanceMarker_1.clearMarks();
        this._unhookUnloadEvent();
        this._hookUnloadEvent();
        this.logMessageInConsole("Reset performance Logger Done");
    };
    /**
     * Consumer should own logic to determine whether to ignore the  page for perf data collection
     * when Called this API, RUMOneLogger will not upload data but display in the console for debug purpose
     * E.g. Hidden Preload.aspx page for sharepoint or a debug page with #debugManifest or ?moduleLoader= in the url
     *
     */
    RUMOneLogger.prototype.excludePageForPerfData = function () {
        this._excludePageData = true;
    };
    RUMOneLogger.prototype.logPerformanceData = function (key, value) {
        if (!key || !this.performanceData || !this.verifyPropertyMatchingSchema(key)) {
            return;
        }
        this.getPerformanceData();
        this.performanceData[key] = value;
    };
    RUMOneLogger.prototype.getPerformanceDataPropertyValue = function (key) {
        if (!this.performanceData || !key || !this.verifyPropertyMatchingSchema(key)) {
            return null;
        }
        return this.performanceData[key];
    };
    RUMOneLogger.prototype.verifyPropertyMatchingSchema = function (propertyName) {
        var properties = this.getRUMOnePropertyNames(this.performanceData);
        return properties.join().indexOf(propertyName) !== -1;
    };
    RUMOneLogger.prototype.addExpectedControl = function (control) {
        var normalizedControl = this._normalizeControl(control);
        if (!this.expectingControl(control)) {
            this.controls.push(normalizedControl);
        }
        else {
            // Ensure expected controls are not ignored from EUPL
            this.controls.filter(function (expected) { return expected.controlId === normalizedControl.controlId; })[0].ignoreForEUPL = normalizedControl.ignoreForEUPL;
        }
    };
    RUMOneLogger.prototype.expectingControl = function (control) {
        var normalizedControl = this._normalizeControl(control);
        return this.controls.filter(function (expected) { return expected.controlId === normalizedControl.controlId; }).length > 0;
    };
    RUMOneLogger.prototype.writeServerCorrelationId = function (correlationId) {
        if (!this.isCollected('ServerCorrelationId')) {
            this.logPerformanceData('ServerCorrelationId', correlationId);
        }
    };
    RUMOneLogger.prototype.writeServerUrl = function (url) {
        if (!this.isCollected('ServerUrl')) {
            var serverUrl = url || window.location.href;
            this.logPerformanceData('ServerUrl', serverUrl);
        }
    };
    RUMOneLogger.prototype.writeServerSideLatency = function (duration, iisLatency) {
        if (!this.isCollected('ServerRequestDuration')) {
            this.logPerformanceData('ServerRequestDuration', duration);
            this.logPerformanceData('IISLatency', iisLatency);
        }
    };
    RUMOneLogger.prototype.writeControlPerformanceData = function (controlData) {
        if (controlData) {
            var foundControl = this.controls.filter(function (control) { return control.controlId === controlData.controlId; })[0];
            if (foundControl) {
                if (!foundControl.data) {
                    foundControl.data = controlData;
                }
            }
            else {
                var control = {
                    controlId: controlData.controlId,
                    ignoreForEUPL: controlData.ignoreForEUPL || true,
                    data: controlData
                };
                this.controls.push(control);
            }
        }
    };
    RUMOneLogger.prototype.writeAPICallPerformanceData = function (apiData) {
        if (apiData) {
            this.apis.push(apiData);
        }
    };
    RUMOneLogger.prototype.readAPICallPerformanceData = function () {
        return this.apis;
    };
    RUMOneLogger.prototype.writeAppCache = function (appCache) {
        if (!this.isCollected('AppCache')) {
            this.logPerformanceData('AppCache', appCache);
        }
    };
    RUMOneLogger.prototype.writePageTransitionType = function (pageTransitionType, overwrite) {
        if ((!this.isCollected('PageTransitionType') || overwrite) &&
            (pageTransitionType === PageTransitionType_1.default.fullPageLoad || pageTransitionType === PageTransitionType_1.default.none || pageTransitionType === PageTransitionType_1.default.onePageAppNavigation)) {
            this.logPerformanceData('PageTransitionType', pageTransitionType);
        }
    };
    RUMOneLogger.prototype.writeScenarioId = function (scenarioId, overwrite) {
        if (!this.isCollected('ScenarioId') || overwrite) {
            this.logPerformanceData('ScenarioId', scenarioId);
        }
    };
    RUMOneLogger.prototype.collectW3CPerfTimings = function () {
        if (!this.isW3cTimingCollected) {
            var w3cTimeStampNames = ['navigationStart', 'unloadEventStart', 'unloadEventEnd', 'fetchStart', 'redirectStart', 'redirectEnd', 'domainLookupStart', 'domainLookupEnd', 'connectStart', 'secureConnectionStart', 'connectEnd', 'requestStart', 'responseStart', 'responseEnd', 'domLoading', 'domComplete', 'loadEventStart', 'loadEventEnd'];
            var perfTimingObject = performance && performance.timing;
            if (perfTimingObject) {
                for (var index = 0; index < w3cTimeStampNames.length; index++) {
                    var w3cObject = perfTimingObject[w3cTimeStampNames[index]];
                    if (w3cObject) {
                        this.logPerformanceData(this.getW3cTimingName(w3cTimeStampNames[index]), Number(w3cObject));
                    }
                }
                this.isW3cTimingCollected = true;
            }
        }
    };
    RUMOneLogger.prototype.collectW3cResourceTimings = function () {
        if (!this.isW3cResourceTimingCollected && performance && performance.getEntriesByType) {
            var allRequests = performance.getEntriesByType("resource");
            var iFrames = document.getElementsByTagName("iframe");
            for (var index = 0; index < iFrames.length; index++) {
                var iFramePerformance = null;
                try {
                    iFramePerformance = iFrames[index].contentWindow.performance;
                }
                catch (e) {
                }
                if (iFramePerformance && iFramePerformance.getEntriesByType) {
                    allRequests.concat(iFramePerformance.getEntriesByType("resource"));
                }
            }
            var fromSources = {};
            fromSources["SharePoint"] = function (element) { return /\.sharepoint\.com|\.spoppe\.com/i.test(element.name); }; //matching sharepoint.com or spoppe.com
            fromSources["CDN"] = function (element) { return /(cdn(ppe)?|static(ppe)?)\.sharepointonline\.com|\.akamaihd\.net/i.test(element.name); }; //matching cdn(ppe)sharepointonline.com or adamaihd.net
            fromSources["ThirdParty"] = function (element) { return !fromSources["SharePoint"](element) && !fromSources["CDN"](element); }; // all requests other than sharepoint requests or cdn requests
            var types = {};
            types["ASPX"] = function (element) { return /\.aspx/i.test(element.name); };
            types["JS"] = function (element) { return /script/i.test(element.initiatorType); };
            types["CSS"] = function (element) { return /link|css/i.test(element.initiatorType); };
            types["IMG"] = function (element) { return /img/i.test(element.initiatorType); };
            var sources = Object.keys(fromSources);
            for (var index = 0; index < sources.length; index++) {
                var source = sources[index];
                var requests = this.categorizeResourceRequests(allRequests, {
                    from: fromSources[source],
                    requestType: null //match any type to get total request count for this source
                });
                this.logPerformanceData(source + "RequestCountTotal", requests.length); //SharePoint|CDN|ThirdParty resource request count
                var typeKeys = Object.keys(types);
                for (var typeIndex = 0; typeIndex < typeKeys.length; typeIndex++) {
                    var type = typeKeys[typeIndex];
                    this.logPerformanceData(source + "RequestCount" + type, this.categorizeResourceRequests(requests, {
                        from: null,
                        requestType: types[type]
                    }).length); //SharePoint|CDN|ThirdParty ASPX resource request count
                }
                if (requests.length > 0) {
                    this.logPerformanceData(source + "RequestDownloadTime", Math.round(requests.reduce(function (sum, currentVal) {
                        return sum + currentVal.duration;
                    }, 0) / requests.length)); //SharePoint|CDN|ThirdParty resource request average duration
                    // log the file names of all resource requests in a JSON string. The output after processing will looks like:
                    // [{name: "require-db6c47e2.js", startTime: 500, duration: 100},{name: "RenderListDataAsStream", startTime: 200, duration: 10}]
                    // The raw resource name before this processing is "https://msft.spoppe.com/teams/SPGroups/_api/web/GetList(@listUrl)/RenderListDataAsStream?Paged=TRUE&p_FileLeafRef=test%2eurl&p_ID=213&PageFirstRow=121&View=6eab4254-2f2f-4086-91c0-549ae900cc93&@listUrl=%27%2Fteams%2FSPGroups%2FVNextDocLib%27"
                    var files = JSON.stringify(requests.map(function (timing) {
                        return {
                            name: timing.name.split("/").map(function (urlToken) {
                                return urlToken.split("?")[0];
                            }).filter(function (urlToken) {
                                return urlToken && urlToken.length > 0;
                            }).slice(-1)[0].replace(/\(.*?\)/g, '()'),
                            startTime: Math.round(timing.startTime),
                            duration: Math.round(timing.duration),
                            transferSize: timing['transferSize'] || 0
                        };
                    }));
                    this.logPerformanceData(source + "RequestNames", files);
                }
            }
            this.isW3cResourceTimingCollected = true;
        }
    };
    RUMOneLogger.prototype.saveTempData = function (key, value) {
        this.tempData[key] = value;
    };
    RUMOneLogger.prototype.readTempData = function (key) {
        return this.tempData[key];
    };
    RUMOneLogger.prototype.writeRenderTime = function (renderTime, overwrite) {
        if (!this.isCollected('RenderTime') || overwrite) {
            this.logPerformanceData('RenderTime', renderTime);
        }
    };
    RUMOneLogger.prototype.writePreRenderTime = function (preRender) {
        if (!this.isCollected('PreRender')) {
            this.logPerformanceData('PreRender', preRender);
        }
    };
    RUMOneLogger.prototype.writePostRenderTime = function (postRender) {
        if (!this.isCollected('PostRender')) {
            this.logPerformanceData('PostRender', postRender);
        }
    };
    RUMOneLogger.prototype.writeDataFetchTime = function (dataFetch, overwrite) {
        if (!this.isCollected('DataFetch') || overwrite) {
            this.logPerformanceData('DataFetch', dataFetch);
        }
    };
    RUMOneLogger.prototype.isRunning = function () {
        return !(this.dataState === PerformanceDataState.Uploaded ||
            this.dataState === PerformanceDataState.TimeOut ||
            this.dataState === PerformanceDataState.Skipped);
    };
    RUMOneLogger.prototype.writeEUPLBreakdown = function (euplBreakdown, overwrite) {
        if (euplBreakdown) {
            try {
                var breakdown = JSON.parse(euplBreakdown);
                for (var key in breakdown) {
                    if (!breakdown.hasOwnProperty(key)) {
                        continue;
                    }
                    this.addEUPLBreakdown(key, breakdown[key], overwrite);
                }
            }
            catch (e) {
                // in case the euplBreakdown is invalid JSON
                this.logMessageInConsole("Failed to write EUPL breakdown data:" + e.toString());
            }
        }
    };
    RUMOneLogger.prototype.addEUPLBreakdown = function (name, value, overwrite) {
        if (name && !isNullOrUndefined(value)) {
            if (isNullOrUndefined(this.euplBreakDown[name]) || overwrite) {
                this.euplBreakDown[name] = value;
            }
        }
    };
    RUMOneLogger.prototype.readEUPLBreakdown = function (name) {
        return !!name ? this.euplBreakDown[name] : this.euplBreakDown;
    };
    /**
     * Add list of flights enabled for this page.
     */
    RUMOneLogger.prototype.addFlights = function (flights) {
        if (flights && flights.length > 0) {
            var _flights = JSON.parse(this.getPerformanceDataPropertyValue('Flights') || '[]');
            for (var index = 0; index < flights.length; index++) {
                var flight = flights[index];
                if (flight && _flights.indexOf(flight) === -1) {
                    _flights.push(flight);
                }
            }
            this.logPerformanceData('Flights', JSON.stringify(_flights));
        }
    };
    RUMOneLogger.prototype.addServerMetrics = function (metric, overwrite) {
        if (metric) {
            for (var key in metric) {
                if (key && !isNullOrUndefined(metric[key]) &&
                    (isNullOrUndefined(this.serverMetrics[key]) || overwrite)) {
                    this.serverMetrics[key] = metric[key];
                }
            }
        }
    };
    /**
     * Write version of the Sharepoint server served the request
     */
    RUMOneLogger.prototype.writeServerVersion = function (version) {
        this.logPerformanceData('SharePointServerVersion', version);
    };
    RUMOneLogger.prototype.readControlPerformanceData = function () {
        return this.controls.filter(function (control) { return !!control.data; }).map(function (control) { return control.data; });
    };
    RUMOneLogger.prototype.mark = function (name) {
        PerformanceMarker_1.mark(name);
    };
    RUMOneLogger.prototype.now = function () {
        return performance && performance.now ? Math.round(performance.now()) : NaN;
    };
    /**
     * Register handler function that will be called back when EUPL is computed successfully.
     * @param handler function that app register, wiill be called back when EUPL is computed.
     */
    RUMOneLogger.prototype.registerEUPLComputedHandler = function (handler) {
        this._EUPLComputedHandler = handler;
    };
    /**
     * Register handler function that will be called back when timeout happens.
     * @param handler function that app register, will be called back when timeout happens
     */
    RUMOneLogger.prototype.registerErrorHandler = function (handler) {
        this._errorHandler = handler;
    };
    RUMOneLogger.prototype.getMarkerTime = function (name) {
        return PerformanceMarker_1.getMarkerTime(name);
    };
    Object.defineProperty(RUMOneLogger.prototype, "waitOnAddingExpectedControl", {
        /**
         * If set to true, RUMOnelogger will wait until this is not set false again before concluding all expected controls are added
         * Set it to true if not all expected controls are added
         * Set it to false once all expected controls has been added
         */
        set: function (wait) {
            this._waitOnAddingExpectedControl = wait;
        },
        enumerable: true,
        configurable: true
    });
    RUMOneLogger.prototype.clearResourceTimings = function () {
        if (performance && performance.clearResourceTimings) {
            performance.clearResourceTimings();
        }
    };
    RUMOneLogger.prototype.collectMarks = function () {
        var marks = {};
        var markerIndex = 0;
        PerformanceMarker_1.getAllMarks().forEach(function (mark) {
            if (markerIndex < RUMOneLogger.MAX_MARKS) {
                var markName = mark.name.substr(PerformanceMarker_1.MARKER_PREFIX.length) + (".mark" + markerIndex++);
                marks[markName] = Math.round(mark.startTime); // covert to rumone collected marks to object and merge to EUPL Breakdown
            }
        });
        this.writeEUPLBreakdown(JSON.stringify(marks));
    };
    RUMOneLogger.prototype.logMessageInConsole = function (message) {
        if (this.isRUMOneDebuggingEnabled) {
            console.log(message);
        }
    };
    Object.defineProperty(RUMOneLogger.prototype, "isRUMOneDebuggingEnabled", {
        get: function () {
            try {
                if ('sessionStorage' in window && window.sessionStorage) {
                    var debugStr = window.sessionStorage["enableRUMOneDebugging"];
                    var debug = debugStr && debugStr.toLowerCase() === "true";
                    return debug && typeof console !== "undefined" && !!console;
                }
            }
            catch (e) {
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    RUMOneLogger.prototype.logObjectForDebugging = function (propertyName, dictProperties) {
        if (this.isRUMOneDebuggingEnabled) {
            var logMessageText = propertyName + " : " + JSON.stringify(dictProperties);
            console.log(logMessageText);
        }
    };
    RUMOneLogger.prototype.isCollected = function (name) {
        return !isNullOrUndefined(this.getPerformanceDataPropertyValue(name));
    };
    RUMOneLogger.prototype._normalizeControl = function (control) {
        return typeof control === 'string' ? {
            controlId: control,
            ignoreForEUPL: false
        } : control;
    };
    RUMOneLogger.prototype.getRUMOnePropertyNames = function (obj) {
        var names = [];
        var index = 0;
        if (!isNullOrUndefined(obj)) {
            for (var property in obj) {
                if (obj.hasOwnProperty(property)) {
                    names[index++] = property;
                }
            }
        }
        return names;
    };
    RUMOneLogger.prototype.setPerfDataTimer = function () {
        this.perfDataTimer = this.async.setTimeout(this.loopForDataCompleteness, RUMOneLogger.CHECK_INTERVAL);
    };
    RUMOneLogger.prototype.clearPerfDataTimer = function () {
        if (!isNullOrUndefined(this.perfDataTimer)) {
            this.async.clearTimeout(this.perfDataTimer);
            this.perfDataTimer = null;
        }
    };
    RUMOneLogger.prototype._hookUnloadEvent = function () {
        /* tslint:disable:ban-native-functions */
        if (window.addEventListener) {
            window.addEventListener('beforeunload', this._emergencyUpdateFunc);
        }
        /* tslint:enable:ban-native-functions */
    };
    RUMOneLogger.prototype._unhookUnloadEvent = function () {
        /* tslint:disable:ban-native-functions */
        if (window.removeEventListener) {
            window.removeEventListener('beforeunload', this._emergencyUpdateFunc);
        }
        /* tslint:enable:ban-native-functions */
    };
    RUMOneLogger.prototype.categorizeResourceRequests = function (requests, categorizer) {
        var ret = [];
        for (var index = 0; index < requests.length; index++) {
            var request = requests[index];
            if ((!categorizer.from || categorizer.from(request)) && (!categorizer.requestType || categorizer.requestType(request))) {
                ret.push(request);
            }
        }
        return ret;
    };
    RUMOneLogger.prototype.collectSupplementaryData = function () {
        this.setAPIDataToRUMOne();
        this.collectMarks();
        this.writeServerUrl(null);
        this.setBrowseInfo();
        this.setReferrer();
        this.logPerformanceData('ServerMetrics', JSON.stringify(this.serverMetrics));
        this.logPerformanceData('EUPLBreakdown', JSON.stringify(this.euplBreakDown));
    };
    RUMOneLogger.prototype.loopForDataCompleteness = function () {
        this.clearPerfDataTimer();
        if (!this._waitOnAddingExpectedControl) {
            if (this.isRUMOneDebuggingEnabled) {
                this.logObjectForDebugging("RUMONE: ", this.performanceData);
                this.logObjectForDebugging("RUMOne DataState: ", String(this.getReadableDataState(this.dataState)));
                this.logObjectForDebugging("Controls: ", this.controls);
                this.logObjectForDebugging("API Performance Data: ", this.apis);
                this.logObjectForDebugging("Temp Data: ", this.tempData);
                this.logObjectForDebugging("EUPLBreakdown: ", this.euplBreakDown);
                this.logObjectForDebugging("ServerMetrics: ", this.serverMetrics);
                this.logMessageInConsole("====================================================================");
            }
            if (!this.isRunning()) {
                return;
            }
            this._updateState();
            if (this.dataState === PerformanceDataState.ReadyToUpload) {
                this.finishPerfDataUpload();
                return;
            }
            this.processControlRenderTime();
            if (this.readyToComputeEUPL()) {
                this.setEUPL();
                this._updateState();
            }
        }
        // Check timeout
        this._checkTimeout();
        if (this.isRunning()) {
            this.setPerfDataTimer();
        }
    };
    /**
     * Check if we reached ERROR_TIMEOUT without being ready to upload and timeout if so
     */
    RUMOneLogger.prototype._checkTimeout = function () {
        if (!this.isRunning() || this.dataState === PerformanceDataState.ReadyToUpload) {
            return;
        }
        if (Number((new Date()).getTime()) - Number(this.dataStartTime) <= RUMOneLogger.ERROR_TIMEOUT) {
            return; // Nope, we still have time
        }
        // Upload whatever data we have without all key metrics
        this.dataState = PerformanceDataState.TimeOut;
        this.finishPerfDataUpload();
        // Report timeout error
        this.reportErrors({
            reason: 'TimeOut',
            details: {
                'MissingMetrics': this._getMissedKeyMetrics(),
                'MissingControls': this._getMissedControls()
            }
        });
    };
    RUMOneLogger.prototype._updateState = function () {
        this.dataState =
            (this._getMissedKeyMetrics().length === 0 && this._getMissedControls().length === 0)
                ? PerformanceDataState.ReadyToUpload
                : PerformanceDataState.Incomplete;
    };
    /**
     * Get array of missing key metrices
     */
    RUMOneLogger.prototype._getMissedKeyMetrics = function () {
        var missedKeyMetrics = [];
        for (var i = 0; i < RUMOneLogger.KeyMetrics.length; i++) {
            var keyMetricValue = this.getPerformanceDataPropertyValue(RUMOneLogger.KeyMetrics[i]);
            if (isNullOrUndefined(keyMetricValue)) {
                missedKeyMetrics.push(RUMOneLogger.KeyMetrics[i]);
            }
        }
        return missedKeyMetrics;
    };
    /**
     * Get array of controls missing data
     */
    RUMOneLogger.prototype._getMissedControls = function () {
        return this.controls.filter(function (control) { return !control.data || !control.data.renderTime; });
    };
    // since we allow secondary controls reported but not be used to calculate EUPL,
    // these controls might be very slow and we are in higher risky that end user navigates
    // away from this page before we upload our data although EUPL might be available already.
    // This should be hooked with onunload event and resetlogger method
    RUMOneLogger.prototype._emergencyUpload = function () {
        if (this.isRunning() && this._getMissedKeyMetrics().length === 0) {
            this.finishPerfDataUpload(true);
        }
    };
    // if emergency set to true, we will not validate data state in uploadPerfData call
    // since current page is navigating away, mostly likely we already collected key metrics
    // only waiting for secondary controls, we should upload data collected so far
    RUMOneLogger.prototype.finishPerfDataUpload = function (emergency) {
        this.writeControlDataToRUMOne();
        this.collectSupplementaryData();
        try {
            this.uploadPerfData(emergency);
            if (this.isRUMOneDebuggingEnabled) {
                this.logMessageInConsole('Final Data uploaded');
                this.logObjectForDebugging("RUMONE: ", this.performanceData);
                this.logObjectForDebugging("RUMOne DataState: ", this.getReadableDataState(this.dataState));
            }
        }
        catch (e) {
            (function (errorText) {
                if (typeof console !== "undefined" && Boolean(console)) {
                    console.error(errorText);
                }
            })("PerformanceLogger error writing RUMOne data: " + e);
        }
        finally {
            this._unhookUnloadEvent();
        }
    };
    RUMOneLogger.prototype.getReadableDataState = function (_dataState) {
        for (var key in PerformanceDataState) {
            if (_dataState === Number(PerformanceDataState[key])) {
                return key;
            }
        }
        return 'NaN';
    };
    /**
     * Write Control and corresponding render time for top 10 renderTime controls.
     */
    RUMOneLogger.prototype.writeControlDataToRUMOne = function () {
        if (this.controls && this.controls.length) {
            var byRenderTime = this.controls.slice(0).filter(function (control) { return !!control.data && !!control.data.renderTime && !control.ignoreForEUPL; });
            byRenderTime.sort(function (control1, control2) {
                return control2.data.renderTime - control1.data.renderTime;
            });
            // We have maximum 10 slots for the Control render data collection
            for (var index = 0; index < 10 && index < byRenderTime.length; index++) {
                this.logPerformanceData("Control" + (index + 1) + "Id", byRenderTime[index].controlId);
                this.logPerformanceData("Control" + (index + 1) + "RenderTime", byRenderTime[index].data.renderTime);
            }
            // for secondary controls, we wrote data into EUPL breakdown
            var secondaryControls_1 = {};
            this.controls.slice(0).filter(function (control) { return !!control.data && !!control.data.renderTime && !!control.ignoreForEUPL; }).forEach(function (control) {
                secondaryControls_1[control.controlId] = control.data.renderTime;
            });
            if (Object.keys(secondaryControls_1).length > 0) {
                this.writeEUPLBreakdown(JSON.stringify(secondaryControls_1), true);
            }
        }
    };
    /**
     * Calculate renderTime for the controls ready for it.
     */
    RUMOneLogger.prototype.processControlRenderTime = function () {
        for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {
            var control = _a[_i];
            // if this control is not processed yet and ready to be processed
            if (control.data && !control.data.renderTime && control.data.renderTimeRequiredDataChecker(this, control.data)) {
                control.data.renderTime = control.data.renderTimeCalculator(this, control.data);
            }
        }
    };
    RUMOneLogger.prototype.readyToComputeEUPL = function () {
        var keyControls = this.controls.filter(function (control) { return !control.ignoreForEUPL; });
        var ready = keyControls.length > 0;
        for (var _i = 0, keyControls_1 = keyControls; _i < keyControls_1.length; _i++) {
            var control = keyControls_1[_i];
            if (!control.data || !control.data.renderTime) {
                ready = false;
                break;
            }
        }
        return ready;
    };
    RUMOneLogger.prototype.setEUPL = function () {
        if (!this.isCollected('EUPL')) {
            var eupl = 0;
            for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {
                var control = _a[_i];
                if (!control.ignoreForEUPL && control.data && control.data.renderTime && eupl < control.data.renderTime) {
                    eupl = control.data.renderTime;
                }
            }
            this.logPerformanceData('EUPL', eupl);
            if (typeof this._EUPLComputedHandler === 'function') {
                this._EUPLComputedHandler(eupl);
            }
        }
    };
    RUMOneLogger.prototype.setBrowseInfo = function () {
        this.logPerformanceData('Browser', this._platformDetection.browserName + this._platformDetection.browserMajor);
        this.logPerformanceData('BrowserIsMobile', this._platformDetection.isMobile);
    };
    RUMOneLogger.prototype.setAPIDataToRUMOne = function () {
        var calls = 0;
        var durationSum = 0;
        for (var index = 0; index < this.apis.length; index++) {
            var apiData = this.apis[index];
            if (apiData) {
                calls++;
                durationSum += apiData.duration;
                // only take the function part of the API url to avoid cosmos data scrubber
                // url before processing: /teams/SPGroups/_api/web/GetList(@listUrl)/RenderListDataAsStream?Paged=TRUE&p_FileLeafRef=test%2eurl&p_ID=213&PageFirstRow=121&View=6eab4254-2f2f-4086-91c0-549ae900cc93&@listUrl=%27%2Fteams%2FSPGroups%2FVNextDocLib%27"
                // url after processing: RenderListDataAsStream
                apiData.url = apiData.url.split("/").map(function (s) { return s.split("?")[0]; }).slice(-1)[0].replace(/\(.*?\)/g, '()');
            }
        }
        this.logPerformanceData('APICallCount', calls);
        this.logPerformanceData('APICallDurationSum', durationSum);
        this.logPerformanceData('APICalls', JSON.stringify(this.apis));
    };
    RUMOneLogger.prototype.setReferrer = function () {
        if (!this.isCollected('Referrer')) {
            this.logPerformanceData('Referrer', document.referrer);
        }
    };
    RUMOneLogger.prototype.getW3cTimingName = function (timingName) {
        if (timingName !== 'secureConnectionStart') {
            return 'W3c' + timingName.charAt(0).toUpperCase() + timingName.slice(1);
        }
        else {
            return 'W3cSecureConnectStart'; // to workaround a RUMOne schema issue W3cSecureConnectStart should be W3cSecureConnectionStart
        }
    };
    RUMOneLogger.prototype.uploadPerfData = function (emergency) {
        if (this._excludePageData) {
            this.dataState = PerformanceDataState.Skipped;
            this.logMessageInConsole('Uploading perf data skipped as requested by the consumer');
        }
        else if (!emergency && this.dataState !== PerformanceDataState.ReadyToUpload &&
            this.dataState !== PerformanceDataState.TimeOut) {
            console.error("Error: Uploading perf data called with wrong data state " + this.dataState);
        }
        else if (!this.loggingFunc) {
            console.error('Uploading perf data skipped as loggingFunc is not defined');
        }
        else if (!this.performanceData) {
            console.error('Error: Uploading perf data called but perf data is not available');
        }
        else {
            this.loggingFunc("RUMOne", this.getPerformanceData());
            this.dataState = PerformanceDataState.Uploaded;
        }
    };
    RUMOneLogger.prototype.reportErrors = function (error) {
        if (this._errorHandler) {
            this._errorHandler(error);
        }
        var errorMessage = JSON.stringify(error);
        this.logMessageInConsole(errorMessage);
        var errorObj = new RUMOneErrorsSLAPI_1.default();
        errorObj.Reason = error.reason;
        errorObj.Message = errorMessage;
        if (this.loggingFunc) {
            this.loggingFunc("RUMOneErrors", errorObj);
        }
    };
    return RUMOneLogger;
}());
RUMOneLogger.rumOneLogger = null;
RUMOneLogger.CHECK_INTERVAL = 100; // in milliseconds
RUMOneLogger.ERROR_TIMEOUT = 30000; // in milliseconds
RUMOneLogger.MAX_MARKS = 100; // suppport maximum 100 perf markers
RUMOneLogger.KeyMetrics = ['EUPL', 'ScenarioId'];
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = RUMOneLogger;


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SuiteNavSource;
(function (SuiteNavSource) {
    SuiteNavSource[SuiteNavSource["SPO"] = 0] = "SPO";
    SuiteNavSource[SuiteNavSource["OnPrem"] = 1] = "OnPrem";
})(SuiteNavSource = exports.SuiteNavSource || (exports.SuiteNavSource = {}));


/***/ }),
/* 37 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_37__;

/***/ }),
/* 38 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_38__;

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var decorators_1 = __webpack_require__(86);
var sp_core_library_1 = __webpack_require__(0);
var sp_core_library_2 = __webpack_require__(0);
var SuiteNavManagerConfiguration_1 = __webpack_require__(184);
var SPThemeProvider_1 = __webpack_require__(84);
var BaseApplication = (function () {
    function BaseApplication() {
        this._shell = undefined;
        this._domElement = undefined;
        this['__type'] = 'BaseApplication';
    }
    Object.defineProperty(BaseApplication.prototype, "shell", {
        get: function () {
            sp_core_library_1.Validate.isNotNullOrUndefined(this._shell, 'shell');
            return this._shell;
        },
        set: function (value) {
            throw new Error('The property cannot be assigned because it is read-only');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseApplication.prototype, "domElement", {
        get: function () {
            sp_core_library_1.Validate.isNotNullOrUndefined(this._domElement, 'domElement');
            return this._domElement;
        },
        set: function (value) {
            throw new Error('The property cannot be assigned because it is read-only');
        },
        enumerable: true,
        configurable: true
    });
    BaseApplication.prototype._load = function (shell) {
        this._shell = shell;
        this.onLoad();
    };
    BaseApplication.prototype._render = function (domElement) {
        this._domElement = domElement;
        this.onRender();
    };
    BaseApplication.prototype._dispose = function () {
        this.onDispose();
        this._shell = undefined;
        this._domElement = undefined;
    };
    BaseApplication.prototype.getBrowserCompatibility = function () {
        return {
            supportLevel: sp_core_library_1.BrowserSupportLevel.None,
            warning: undefined
        };
    };
    BaseApplication.prototype.suiteNavConfiguration = function () {
        return new SuiteNavManagerConfiguration_1.default({
            currentUICultureName: this.shell.pageContext.cultureInfo.currentUICultureName,
            disableSuiteNav: this._shouldDisableSuiteNav(),
            settingsData: this.shell.pageContext.legacyPageContext.MenuData ?
                this.shell.pageContext.legacyPageContext.MenuData.SettingsData :
                undefined,
            signoutUrl: this.shell.pageContext.legacyPageContext.MenuData ?
                this.shell.pageContext.legacyPageContext.MenuData.SignOutUrl :
                undefined,
            siteClientTag: this.shell.pageContext.legacyPageContext.siteClientTag,
            systemUserKey: this.shell.pageContext.legacyPageContext.systemUserKey,
            webServerRelativeUrl: this.shell.pageContext.web.serverRelativeUrl
        });
    };
    BaseApplication.prototype.onLoad = function () {
    };
    BaseApplication.prototype.onRender = function () {
    };
    BaseApplication.prototype.onDispose = function () {
    };
    BaseApplication.prototype._loadTheme = function () {
        var themeProvider = new SPThemeProvider_1.default(this.shell.serviceScope);
        themeProvider.loadThemedStyles();
    };
    BaseApplication.prototype.raiseNavigatedEvent = function () {
        sp_core_library_2._EventManager.instance._raiseEvent(BaseApplication._navigatedEventName, {});
    };
    BaseApplication.prototype.raiseLayoutChangedEvent = function () {
        sp_core_library_2._EventManager.instance._raiseEvent(BaseApplication._layoutChangedEventName, {});
    };
    BaseApplication.prototype._shouldDisableSuiteNav = function () {
        var urlQueryParams = new sp_core_library_1.UrlQueryParameterCollection(window.location.href);
        return window.location.hostname === 'localhost' ||
            urlQueryParams.getValue('disableSuiteNav') === 'true' ?
            true :
            false;
    };
    BaseApplication._navigatedEventName = 'application.navigatedEvent';
    BaseApplication._layoutChangedEventName = 'application.layoutChangedEvent';
    __decorate([
        decorators_1.virtual
    ], BaseApplication.prototype, "getBrowserCompatibility", null);
    __decorate([
        decorators_1.virtual
    ], BaseApplication.prototype, "onLoad", null);
    __decorate([
        decorators_1.virtual
    ], BaseApplication.prototype, "onRender", null);
    __decorate([
        decorators_1.virtual
    ], BaseApplication.prototype, "onDispose", null);
    return BaseApplication;
}());
exports.default = BaseApplication;


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var sp_core_library_1 = __webpack_require__(0);
var BaseApplication_1 = __webpack_require__(39);
var ApplicationAccessor = (function () {
    function ApplicationAccessor(serviceScope) {
        this._navigatedEvent = new sp_core_library_1.Event(BaseApplication_1.default._navigatedEventName);
        this._privateLayoutChangedEvent = new sp_core_library_1.Event(BaseApplication_1.default._layoutChangedEventName);
    }
    Object.defineProperty(ApplicationAccessor.prototype, "navigatedEvent", {
        get: function () {
            return this._navigatedEvent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApplicationAccessor.prototype, "_layoutChangedEvent", {
        get: function () {
            return this._privateLayoutChangedEvent;
        },
        enumerable: true,
        configurable: true
    });
    return ApplicationAccessor;
}());
exports.default = ApplicationAccessor;


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var sp_extension_base_1 = __webpack_require__(37);
var PlaceholderProvider_1 = __webpack_require__(47);
var ApplicationAccessor_1 = __webpack_require__(40);
var ApplicationCustomizerContext = (function (_super) {
    __extends(ApplicationCustomizerContext, _super);
    function ApplicationCustomizerContext(extensionContextParameters, applicationCustomizerContextParameters) {
        var _this = _super.call(this, extensionContextParameters) || this;
        _this._placeholderProvider =
            new PlaceholderProvider_1.default(_this.serviceScope, applicationCustomizerContextParameters.sequence);
        _this._applicationAccessor = new ApplicationAccessor_1.default(_this.serviceScope);
        return _this;
    }
    Object.defineProperty(ApplicationCustomizerContext.prototype, "placeholderProvider", {
        get: function () {
            return this._placeholderProvider;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApplicationCustomizerContext.prototype, "application", {
        get: function () {
            return this._applicationAccessor;
        },
        enumerable: true,
        configurable: true
    });
    return ApplicationCustomizerContext;
}(sp_extension_base_1.ExtensionContext));
exports.default = ApplicationCustomizerContext;


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var decorators_1 = __webpack_require__(86);
var sp_extension_base_1 = __webpack_require__(37);
var BaseApplicationCustomizer = (function (_super) {
    __extends(BaseApplicationCustomizer, _super);
    function BaseApplicationCustomizer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BaseApplicationCustomizer.prototype.onRender = function () {
    };
    __decorate([
        decorators_1.virtual
    ], BaseApplicationCustomizer.prototype, "onRender", null);
    return BaseApplicationCustomizer;
}(sp_extension_base_1.BaseExtension));
exports.default = BaseApplicationCustomizer;


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var sp_core_library_1 = __webpack_require__(0);
var DialogManagerConfiguration = (function () {
    function DialogManagerConfiguration() {
    }
    Object.defineProperty(DialogManagerConfiguration, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new DialogManagerConfiguration();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DialogManagerConfiguration.prototype, "allowDialogs", {
        get: function () {
            sp_core_library_1.Validate.isNotNullOrUndefined(this._allowDialogs, 'allowDialogs');
            return this._allowDialogs;
        },
        set: function (value) {
            sp_core_library_1.Validate.isNotNullOrUndefined(value, 'value');
            this._allowDialogs = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DialogManagerConfiguration.prototype, "domElement", {
        get: function () {
            sp_core_library_1.Validate.isNotNullOrUndefined(this._domElement, 'domElement');
            return this._domElement;
        },
        enumerable: true,
        configurable: true
    });
    DialogManagerConfiguration.prototype.initialize = function (domElement, allowDialogs) {
        if (allowDialogs === void 0) { allowDialogs = true; }
        this._allowDialogs = allowDialogs;
        this._domElement = domElement;
    };
    DialogManagerConfiguration.prototype.dispose = function () {
        this._allowDialogs = undefined;
        this._domElement = undefined;
    };
    return DialogManagerConfiguration;
}());
exports.default = DialogManagerConfiguration;


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var sp_core_library_1 = __webpack_require__(0);
var PlaceholderContent_1 = __webpack_require__(45);
var Placeholder = (function () {
    function Placeholder(definition, manager) {
        this._entries = [];
        sp_core_library_1.Validate.isNotNullOrUndefined(definition, 'definition');
        sp_core_library_1.Validate.isNotNullOrUndefined(definition.domElement, 'definition.domElement');
        sp_core_library_1.Validate.isNotNullOrUndefined(manager, 'manager');
        this._name = definition.name;
        this._domElement = definition.domElement;
        this._manager = manager;
    }
    Object.defineProperty(Placeholder.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    Placeholder.prototype.createPlaceholderContent = function (sequence, options) {
        var newDiv = document.createElement('div');
        var i = 0;
        while (i < this._entries.length && sequence >= this._entries[i].sequence) {
            i++;
        }
        if (i < this._entries.length - 1) {
            var nextDiv = this._entries[i + 1].placeholderContent.domElement;
            this._domElement.insertBefore(newDiv, nextDiv);
        }
        else {
            this._domElement.appendChild(newDiv);
        }
        var placeholderContent = new PlaceholderContent_1.default({
            placeholder: this,
            sequence: sequence,
            domElement: newDiv,
            options: options
        });
        this._entries.splice(i, 0, { placeholderContent: placeholderContent, sequence: sequence });
        return placeholderContent;
    };
    Placeholder.prototype.removePlaceholderContent = function (placeholderContent) {
        for (var i = 0; i < this._entries.length; i++) {
            if (this._entries[i].placeholderContent === placeholderContent) {
                this._domElement.removeChild(this._entries[i].placeholderContent.domElement);
                this._entries.splice(i, 1);
            }
        }
    };
    Placeholder.prototype.dispose = function () {
        for (var _i = 0, _a = this._entries; _i < _a.length; _i++) {
            var entry = _a[_i];
            entry.placeholderContent.dispose();
        }
        this._entries = [];
    };
    return Placeholder;
}());
exports.default = Placeholder;


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var sp_telemetry_1 = __webpack_require__(2);
var PlaceholderContent = (function () {
    function PlaceholderContent(parameters) {
        this._disposeHandler = undefined;
        this._placeholder = parameters.placeholder;
        this._disposeHandler = parameters.options ? parameters.options.onDispose : undefined;
        this._domElement = parameters.domElement;
    }
    Object.defineProperty(PlaceholderContent.prototype, "name", {
        get: function () {
            return this._placeholder.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlaceholderContent.prototype, "domElement", {
        get: function () {
            return this._domElement;
        },
        enumerable: true,
        configurable: true
    });
    PlaceholderContent.prototype.dispose = function () {
        if (this._domElement) {
            if (this._disposeHandler) {
                try {
                    this._disposeHandler(this);
                }
                catch (error) {
                    sp_telemetry_1._TraceLogger.logError(PlaceholderContent._logSource, new Error("The onDispose API threw an exception for placeholder '" + this._placeholder.name + "'. Error information is '" + error.message + "'")); 
                }
                this._disposeHandler = undefined;
            }
            this._placeholder.removePlaceholderContent(this);
        }
    };
    PlaceholderContent._logSource = sp_telemetry_1._LogSource.create('Placeholder');
    return PlaceholderContent;
}());
exports.default = PlaceholderContent;


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var PlaceholderName;
(function (PlaceholderName) {
    PlaceholderName[PlaceholderName["Top"] = 1] = "Top";
    PlaceholderName[PlaceholderName["Bottom"] = 2] = "Bottom";
})(PlaceholderName || (PlaceholderName = {}));
exports.default = PlaceholderName;


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var sp_telemetry_1 = __webpack_require__(2);
var PlaceholderManager_1 = __webpack_require__(23);
var PlaceholderProvider = (function () {
    function PlaceholderProvider(serviceScope, sequence) {
        var _this = this;
        this._placeholders = undefined;
        this._sequence = sequence;
        serviceScope.whenFinished(function () {
            _this._placeholderManager = serviceScope.consume(PlaceholderManager_1.default.serviceKey);
        });
    }
    PlaceholderProvider.prototype.tryCreateContent = function (name, options) {
        var qosMonitor = new sp_telemetry_1._QosMonitor('Placeholder.tryCreateContent');
        if (!this._tryInitialize() || !this._placeholders.has(name)) {
            var error = new Error("No placeholder found with the name '" + name + "'");
            qosMonitor.writeExpectedFailure('PlaceholderNotFound', error, { name: name });
            return undefined;
        }
        var placeholder = this._placeholders.get(name);
        if (!placeholder) {
            var error = new Error('Placeholder dictionary has only the key but not the value for the placeholder');
            qosMonitor.writeUnexpectedFailure('NoValueInPlaceholdersMap', error, { name: name });
            return undefined;
        }
        var content;
        try {
            content = placeholder.createPlaceholderContent(this._sequence, options);
        }
        catch (error) {
            qosMonitor.writeUnexpectedFailure('CreateContentFailed', error, { name: name });
            return undefined;
        }
        if (content) {
            qosMonitor.writeSuccess({ name: name });
        }
        else {
            var error = new Error('Placeholder could not create new content');
            qosMonitor.writeUnexpectedFailure('CreateContentUndefined', error, { name: name });
        }
        return content;
    };
    Object.defineProperty(PlaceholderProvider.prototype, "placeholderNames", {
        get: function () {
            if (!this._tryInitialize()) {
                return [];
            }
            var array = [];
            if (this._placeholders) {
                var iterator = this._placeholders.keys();
                for (var result = iterator.next(); !result.done; result = iterator.next()) {
                    if (result.value) {
                        array.push(result.value);
                    }
                }
            }
            return array;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlaceholderProvider.prototype, "changedEvent", {
        get: function () {
            return this._placeholderManager.changedEvent;
        },
        enumerable: true,
        configurable: true
    });
    PlaceholderProvider.prototype._tryInitialize = function () {
        if (this._placeholders) {
            return true;
        }
        if (this._placeholderManager && this._placeholderManager.placeholders) {
            this._placeholders = new Map();
            for (var _i = 0, _a = this._placeholderManager.placeholders; _i < _a.length; _i++) {
                var placeholder = _a[_i];
                this._placeholders.set(placeholder.name, placeholder);
            }
            return true;
        }
        return false;
    };
    return PlaceholderProvider;
}());
exports.default = PlaceholderProvider;


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function generateUuidPart(length) {
    "use strict";
    var str = '';
    while (str.length < length) {
        var num = Math.random() * 16;
        num = num | 0; // clear decimal
        str += num.toString(16);
    }
    return str;
}
var Guid = (function () {
    function Guid() {
    }
    /**
     * Return a v4 UUID as specified by RFC 4122 http://tools.ietf.org/html/rfc4122
     */
    Guid.generate = function () {
        var parts = [];
        parts.push(generateUuidPart(8));
        parts.push(generateUuidPart(4));
        // first digit must be 4 since we are using pseudorandom numbers
        var timeHighAndVersion = '4' + generateUuidPart(3);
        parts.push(timeHighAndVersion);
        // first digit must have first two bits set to 10
        var clockSeqHiAndReserved = generateUuidPart(4);
        var intVal = parseInt(clockSeqHiAndReserved[0], 10);
        intVal = intVal & 3; // clear out first two bits
        intVal = intVal | 8; // set first bit to 1
        clockSeqHiAndReserved = intVal.toString(16) + clockSeqHiAndReserved.substr(1);
        parts.push(clockSeqHiAndReserved);
        parts.push(generateUuidPart(12));
        return parts.join('-');
    };
    /**
     * Normalizes a GUID to lowercase. Returns '' if guid is not given.
     * @param includeBrackets - if true, add or keep brackets; if false, strip brackets
     */
    Guid.normalizeLower = function (guid, includeBrackets) {
        return guid ? Guid._normalizeBrackets(guid.toLowerCase(), includeBrackets) : '';
    };
    /**
     * Normalizes a GUID to uppercase. Returns '' if guid is not given.
     * @param includeBrackets - if true, add or keep brackets; if false, strip brackets
     */
    Guid.normalizeUpper = function (guid, includeBrackets) {
        return guid ? Guid._normalizeBrackets(guid.toUpperCase(), includeBrackets) : '';
    };
    Guid._normalizeBrackets = function (guid, includeBrackets) {
        var match = guid.match(/^\{(.*)\}$/);
        if (match) {
            return includeBrackets ? match[0] : match[1];
        }
        return includeBrackets ? '{' + guid + '}' : guid;
    };
    return Guid;
}());
Guid.Empty = "00000000-0000-0000-0000-000000000000";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Guid;


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ItemType_1 = __webpack_require__(29);
/**
 * Enumeration of icon file names, and what extensions they map to.
 * Please keep items alphabetical. Items without extensions may require specific logic in the code to map.
 * Track icon accuracy status here: https://msft-my.spoppe.com/personal/caperez_microsoft_com/Documents/Missing%20List.xlsx?web=1
 */
var FileTypeIconMap = {
    'accdb': { extensions: ['accdb', 'mdb'] },
    'archive': { type: ItemType_1.default.Unknown, extensions: ['7z', 'ace', 'arc', 'arj', 'dmg', 'gz', 'iso', 'lzh', 'pkg', 'rar', 'sit', 'tgz', 'tar', 'rar', 'z'] },
    'audio': { type: ItemType_1.default.Unknown, extensions: ['aif', 'aiff', 'aac', 'amr', 'au', 'awb', 'dct', 'dss', 'dvf', 'flac', 'gsm', 'm4a', 'm4p', 'mid', 'mmf', 'mp3', 'ogg', 'oga', 'ra', 'rm', 'wav', 'wma', 'wv'] },
    'code': { extensions: ['Hcp', 'abap', 'ada', 'adp', 'ahk', 'as', 'as3', 'asc', 'ascx', 'asm', 'asp', 'awk', 'bash', 'bash_login', 'bash_logout', 'bash_profile', 'bashrc', 'bat', 'bib', 'bsh', 'build', 'builder', 'c', 'c++', 'capfile', 'cc', 'cfc', 'cfm', 'cfml', 'cl', 'clj', 'cls', 'cmake', 'cmd', 'coffee', 'cpp', 'cpt', 'cpy', 'cs', 'cshtml', 'cson', 'csproj', 'css', 'ctp', 'cxx', 'd', 'ddl', 'di', 'disco', 'dml', 'dtd', 'dtml', 'el', 'emakefile', 'erb', 'erl', 'f', 'f90', 'f95', 'fs', 'fsi', 'fsscript', 'fsx', 'gemfile', 'gemspec', 'gitconfig', 'go', 'groovy', 'gvy', 'h', 'h++', 'haml', 'handlebars', 'hbs', 'hh', 'hpp', 'hrl', 'hs', 'htc', 'hxx', 'idl', 'iim', 'inc', 'inf', 'ini', 'inl', 'ipp', 'irbrc', 'jade', 'jav', 'java', 'js', 'json', 'jsp', 'jsx', 'l', 'less', 'lhs', 'lisp', 'log', 'lst', 'ltx', 'lua', 'm', 'make', 'markdn', 'markdown', 'mdown', 'mkdn', 'ml', 'mli', 'mll', 'mly', 'mm', 'mud', 'nfo', 'opml', 'osascript', 'p', 'pas', 'patch', 'php', 'php2', 'php3', 'php4', 'php5', 'phtml', 'pl', 'pm', 'pod', 'pp', 'profile', 'ps1', 'pt', 'py', 'pyw', 'r', 'rake', 'rb', 'rbx', 'rc', 're', 'reg', 'rest', 'resw', 'resx', 'rhtml', 'rjs', 'rprofile', 'rpy', 'rss', 'rst', 'rxml', 's', 'sass', 'scala', 'scm', 'sconscript', 'sconstruct', 'script', 'scss', 'sgml', 'sh', 'sh', 'shtml', 'sml', 'sql', 'sql', 'sty', 'tcl', 'tex', 'textile', 'tld', 'tli', 'tmpl', 'tpl', 'vb', 'vi', 'vim', 'wsdl', 'xhtml', 'xoml', 'xsd', 'xslt', 'yaml', 'yaws', 'yml', 'zsh'] },
    'css': {},
    'csv': { extensions: ['csv'] },
    'docset': { type: ItemType_1.default.Folder, iconType: 'svg' },
    'docx': { extensions: ['doc', 'docm', 'docx'] },
    'dotx': { extensions: ['dot', 'dotm', 'dotx'] },
    'email': { type: ItemType_1.default.Unknown, extensions: ['eml', 'msg', 'ost', 'pst'] },
    'exe': { type: ItemType_1.default.Unknown, extensions: ['application', 'appref-ms', 'apk', 'app', 'appx', 'exe', 'ipa', 'msi', 'xap'] },
    'folder': { type: ItemType_1.default.Folder, iconType: 'svg' },
    'font': { type: ItemType_1.default.Unknown, extensions: ['ttf', 'otf', 'woff'] },
    'genericfile': { type: ItemType_1.default.Unknown },
    'html': { extensions: ['htm', 'html', 'mht'] },
    'link': { type: ItemType_1.default.Unknown, extensions: ['lnk', 'link', 'url', 'website', 'webloc'] },
    'listitem': { type: ItemType_1.default.Unknown, extensions: ['listitem'] },
    'model': { extensions: ['3ds', 'blend', 'dae', 'df', 'dwfx', 'dwg', '3mf', 'fbx', 'ply', 'obj', 'stl', 'gltf', 'glb', 'dxf', 'layout', 'off', 'max', 'skp', 'stp', 't', 'thl', 'x'] },
    'mpp': { extensions: ['mpp'] },
    'mpt': { extensions: ['mpt'] },
    'odp': { extensions: ['odp'] },
    'ods': { extensions: ['ods'] },
    'odt': { extensions: ['odt'] },
    'one': { type: ItemType_1.default.OneNote, extensions: ['one'] },
    'onepkg': { type: ItemType_1.default.OneNote, extensions: ['onepkg'] },
    'onetoc': { type: ItemType_1.default.OneNote, extensions: ['ms-one-stub', 'onetoc', 'onetoc2'] },
    'pdf': { extensions: ['pdf'] },
    'photo': { type: ItemType_1.default.Media, extensions: ['arw', 'bmp', 'cr2', 'crw', 'dcr', 'dds', 'dib', 'dng', 'erf', 'gif', 'ico', 'jfi', 'jfif', 'jif', 'jpe', 'jpeg', 'jpg', 'kdc', 'mrw', 'nef', 'orf', 'pct', 'pict', 'png', 'pns', 'psd', 'raw', 'tga', 'tif', 'tiff', 'wdp'] },
    'potx': { extensions: ['pot', 'potm', 'potx'] },
    'ppsx': { extensions: ['pps', 'ppsm', 'ppsx'] },
    'pptx': { extensions: ['ppt', 'pptm', 'pptx'] },
    'pub': { extensions: ['pub'] },
    'spo': { extensions: ['aspx'] },
    'rtf': { extensions: ['epub', 'rtf', 'wri'] },
    'sharedfolder': { type: ItemType_1.default.Folder, iconType: 'svg' },
    'sysfile': { type: ItemType_1.default.Unknown, extensions: ['bak', 'bin', 'cab', 'cache', 'cat', 'cer', 'class', 'dat', 'db', 'dbg', 'dl_', 'dll', 'ithmb', 'jar', 'kb', 'kdc', 'ldt', 'lrprev', 'ppa', 'ppam', 'pdb', 'rom', 'thm', 'thmx', 'vsl', 'xla', 'xlam', 'xll'] },
    'txt': { extensions: ['dif', 'diff', 'md', 'markdown', 'out', 'plist', 'properties', 'readme', 'text', 'txt'] },
    'vector': { type: ItemType_1.default.Unknown, extensions: ['ai', 'dgn', 'pd', 'emf', 'eps', 'indd', 'indt', 'ps', 'svg', 'svgz', 'wmf'] },
    'video': { type: ItemType_1.default.Media, extensions: ['3gp', 'asf', 'avi', 'dvr-ms', 'flv', 'm1v', 'm4v', 'mkv', 'mod', 'mov', 'mm4p', 'mp2', 'mp2v', 'mp4', ' mpa', 'mpe', 'mpeg', 'mpg', 'mpv', 'mpv2', 'mts', 'ogg', 'qt', 'swf', 'ts', 'vob', 'webm', 'wlmp', 'wm', 'wmv', 'wmx'] },
    'vsdx': { extensions: ['vsd', 'vsdm', 'vsdx', 'vdw'] },
    'vssx': { extensions: ['vss', 'vssm', 'vssx'] },
    'vstx': { extensions: ['vst', 'vstm', 'vstx'] },
    'xlsx': { extensions: ['xls', 'xlsb', 'xlsm', 'xlsx'] },
    'xltx': { extensions: ['xlt', 'xltm', 'xltx'] },
    'xml': { extensions: ['xaml', 'xml', 'xsl'] },
    'xps': { extensions: ['oxps', 'xps'] },
    'xsn': { extensions: ['xsn'] },
    'zip': { type: ItemType_1.default.Unknown, extensions: ['zip'] }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = FileTypeIconMap;


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var FileTypeIconMap_1 = __webpack_require__(49);
var ItemType_1 = __webpack_require__(29);
var SharingTypeHelper = __webpack_require__(52);
var GENERIC_FILE = 'genericfile';
var CODE_FILE = 'code';
var ONENOTE_FILE = 'one';
var FOLDER = 'folder';
var SHARED_FOLDER = 'sharedfolder';
var DOCSET_FOLDER = 'docset';
var VIDEO_FILE = 'video';
var PHOTO_FILE = 'photo';
var LIST_ITEM = 'listitem';
var _extensionToIconName;
exports.genericFile = GENERIC_FILE;
exports.codeFile = CODE_FILE;
exports.videoFile = VIDEO_FILE;
exports.photoFile = PHOTO_FILE;
function getIconNameFromItem(item) {
    var iconName = '';
    if (item.type === ItemType_1.default.Folder) {
        iconName = SharingTypeHelper.usePrivateFolderIcon(item.sharingType) ? FOLDER : SHARED_FOLDER;
        if (item.isDocSet) {
            iconName = DOCSET_FOLDER;
        }
    }
    else if (item.type === ItemType_1.default.OneNote) {
        iconName = ONENOTE_FILE;
    }
    else if (item.listItem) {
        iconName = LIST_ITEM;
    }
    else if (item.textEditorMimeType === 'text/typescript') {
        iconName = CODE_FILE;
    }
    else {
        iconName = getIconNameFromExtension(item.extension);
    }
    return iconName;
}
exports.getIconNameFromItem = getIconNameFromItem;
function getItemTypeFromExtension(extension) {
    var itemType;
    try {
        if (extension) {
            var iconName = getIconNameFromExtension(extension);
            if (FileTypeIconMap_1.default[iconName]) {
                var iconItemType = FileTypeIconMap_1.default[iconName].type;
                if (iconItemType === (void 0)) {
                    iconItemType = ItemType_1.default.File;
                }
                itemType = iconItemType;
            }
        }
    }
    catch (e) {
    }
    if (itemType === (void 0)) {
        itemType = ItemType_1.default.Unknown;
    }
    return itemType;
}
exports.getItemTypeFromExtension = getItemTypeFromExtension;
function getIconNameFromExtension(extension) {
    if (!_extensionToIconName) {
        _extensionToIconName = {};
        for (var iconName in FileTypeIconMap_1.default) {
            var extensions = FileTypeIconMap_1.default[iconName].extensions;
            if (extensions) {
                for (var i = 0; i < extensions.length; i++) {
                    _extensionToIconName[extensions[i]] = iconName;
                }
            }
        }
    }
    // Strip periods, force lowercase.
    extension = extension.replace('.', '').toLowerCase();
    return _extensionToIconName[extension] || GENERIC_FILE;
}
exports.getIconNameFromExtension = getIconNameFromExtension;


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var SharingType;
(function (SharingType) {
    SharingType[SharingType["Public"] = 0] = "Public";
    SharingType[SharingType["PublicUnlisted"] = 2] = "PublicUnlisted";
    SharingType[SharingType["Shared"] = 3] = "Shared";
    SharingType[SharingType["Private"] = 4] = "Private";
    SharingType[SharingType["Unknown"] = 5] = "Unknown";
})(SharingType || (SharingType = {}));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SharingType;


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var SharingType_1 = __webpack_require__(51);
function usePrivateFolderIcon(itemSharingType) {
    return (itemSharingType === undefined ||
        itemSharingType === SharingType_1.default.Private ||
        itemSharingType === SharingType_1.default.Unknown); // erring on caution--if sharingType is Unknown, show it as not shared
}
exports.usePrivateFolderIcon = usePrivateFolderIcon;
function showSubTextSharingIcon(itemSharingType) {
    return (itemSharingType !== undefined &&
        itemSharingType !== SharingType_1.default.Private &&
        itemSharingType !== SharingType_1.default.Unknown); // additionally, the Unknown case should be not shared as well
}
exports.showSubTextSharingIcon = showSubTextSharingIcon;
function shouldRequestSharedWithData(itemSharingType) {
    return (itemSharingType !== SharingType_1.default.Private); // not including Unknown, should fetch the shared with information when uncertain
}
exports.shouldRequestSharedWithData = shouldRequestSharedWithData;
function useSharedFolderAriaLabel(itemSharingType) {
    return (itemSharingType === SharingType_1.default.Shared); // not including Unknown, don't mentioned sharing state when uncertain
}
exports.useSharedFolderAriaLabel = useSharedFolderAriaLabel;


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Guid_1 = __webpack_require__(48);
var CorrelationVector = (function () {
    function CorrelationVector(parent, current) {
        if (parent) {
            this.root = parent.root;
            this.parent = parent.current;
        }
        else {
            this.root = this.parent = Guid_1.default.Empty;
        }
        if (current) {
            this.current = current;
        }
        else {
            this.current = Guid_1.default.generate();
        }
    }
    CorrelationVector.prototype.toString = function () {
        return this.root + "#" + this.parent + "#" + this.current;
    };
    return CorrelationVector;
}());
CorrelationVector.RootVector = window['rootVector'] || new CorrelationVector();
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = CorrelationVector;


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var PairedEventBase_1 = __webpack_require__(31);
var Qos_event_1 = __webpack_require__(13);
var ResultTypeEnum_1 = __webpack_require__(14);
exports.ResultTypeEnum = ResultTypeEnum_1.ResultTypeEnum;
exports.Api = PairedEventBase_1.createPairedEvent({
    eventName: 'Api,Qos,',
    shortEventName: 'Api',
    samplingFeature: { ODB: true, ODC: 'ApiEventLogging', Fallback: false }
}, {
    url: 1 /* String */
}, Qos_event_1.Qos);
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.Api;


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var SingleEventBase_1 = __webpack_require__(1);
exports.PLTHttpRequest = SingleEventBase_1.createSingleEvent({
    eventName: 'PLTHttpRequest,',
    shortEventName: 'PLTHttpRequest',
    samplingFeature: { ODB: true, ODC: 'PLTHttpRequestSampling', Fallback: false }
}, {
    startTime: 2 /* Number */,
    url: 1 /* String */,
    duration: 2 /* Number */
});
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.PLTHttpRequest;


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var SingleEventBase_1 = __webpack_require__(1);
var CaughtError_event_1 = __webpack_require__(32);
var ResultTypeEnum_1 = __webpack_require__(14);
exports.ResultTypeEnum = ResultTypeEnum_1.ResultTypeEnum;
exports.QosError = SingleEventBase_1.createSingleEvent({
    eventName: 'QosError,CaughtError,Trace,',
    shortEventName: 'QosError',
    critical: true
}, {
    name: {
        isKey: true,
        type: 1 /* String */
    },
    resultCode: 1 /* String */,
    resultType: {
        typeRef: ResultTypeEnum_1.ResultTypeEnum,
        type: 6 /* Enum */
    }
}, CaughtError_event_1.CaughtError);
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.QosError;


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var SingleEventBase_1 = __webpack_require__(1);
exports.RUMOneDataUpload = SingleEventBase_1.createSingleEvent({
    eventName: 'RUMOneDataUpload,',
    shortEventName: 'RUMOneDataUpload'
}, {
    streamName: 1 /* String */,
    dictionary: 4 /* Object */
});
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.RUMOneDataUpload;


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var SingleEventBase_1 = __webpack_require__(1);
exports.RequireJSError = SingleEventBase_1.createSingleEvent({
    eventName: 'RequireJSError,',
    shortEventName: 'RequireJSError',
    critical: true,
    requiresParent: false
}, {
    message: 1 /* String */,
    requireModules: 5 /* Array */,
    requireType: 1 /* String */,
    stack: 1 /* String */
});
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.RequireJSError;


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var SingleEventBase_1 = __webpack_require__(1);
exports.Trace = SingleEventBase_1.createSingleEvent({
    eventName: 'Trace,',
    shortEventName: 'Trace',
    requiresParent: false
}, {
    message: 1 /* String */
});
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.Trace;


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var SingleEventBase_1 = __webpack_require__(1);
var Trace_event_1 = __webpack_require__(59);
exports.Verbose = SingleEventBase_1.createSingleEvent({
    eventName: 'Verbose,Trace,',
    shortEventName: 'Verbose',
    requiresParent: false
}, {
    name: {
        isKey: true,
        type: 1 /* String */
    }
}, Trace_event_1.Trace);
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.Verbose;


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var BaseDataStore_1 = __webpack_require__(21);
var DataStoreCachingType_1 = __webpack_require__(15);
var Manager_1 = __webpack_require__(5);
var LogProcessor_1 = __webpack_require__(62);
var BeaconCache;
(function (BeaconCache) {
    "use strict";
    var _store = new BaseDataStore_1.default(LogProcessor_1.default.STORE_KEY,  true ? DataStoreCachingType_1.default.sharedMemory : DataStoreCachingType_1.default.session);
    BeaconCache.eventNamePrefix = "";
    BeaconCache.instance = null;
    BeaconCache.handlers = null;
    if (true) {
        try {
            console.log("Beacon: To disable logging to the console set \"window.disableBeaconLogToConsole = true\" in the debug window");
        }
        catch (error) {
        }
    }
    var OdbBeaconCache = (function () {
        function OdbBeaconCache(eventNamePrefix, handlers) {
            var _this = this;
            BeaconCache.eventNamePrefix = eventNamePrefix;
            BeaconCache.handlers = handlers;
            var bufferedEvents = Manager_1.Manager.addLogHandler(function (event) {
                _this.addEvent(event);
            });
            // Add bufferred events to local store
            for (var x = 0; x < bufferedEvents.length; x++) {
                this.addEvent(bufferedEvents[x]);
            }
        }
        OdbBeaconCache.prototype.addEvent = function (event) {
            if (event.enabled) {
                // put every new event to the session storage so that Sharepoint can upload it for us
                // if user navigates away before Beacon event
                LogProcessor_1.default.processAndLogEvent({
                    event: event,
                    logFunc: function (streamName, dictProperties) {
                        var storeSize = _store.getValue(LogProcessor_1.default.STORE_SIZE_KEY);
                        if (!storeSize) {
                            storeSize = 0;
                        }
                        _store.setValue(storeSize.toString(), { name: streamName, props: dictProperties });
                        _store.setValue(LogProcessor_1.default.STORE_SIZE_KEY, ++storeSize);
                    },
                    eventNamePrefix: BeaconCache.eventNamePrefix,
                    handlers: BeaconCache.handlers
                });
            }
        };
        return OdbBeaconCache;
    }());
    function addToLoggingManager(eventNamePrefix, handlers) {
        if (!BeaconCache.instance) {
            BeaconCache.instance = new OdbBeaconCache(eventNamePrefix, handlers);
        }
        else {
            throw new Error("The beaconCache has already been added to the logging manager with event name prefix " + eventNamePrefix + ".");
        }
    }
    BeaconCache.addToLoggingManager = addToLoggingManager;
})(BeaconCache || (BeaconCache = {}));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = BeaconCache;


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var Qos_event_1 = __webpack_require__(13);
var PLT_event_1 = __webpack_require__(33);
var Beacon_event_1 = __webpack_require__(19);
var UnhandledError_event_1 = __webpack_require__(115);
var RequireJSError_event_1 = __webpack_require__(58);
var CaughtError_event_1 = __webpack_require__(32);
var QosError_event_1 = __webpack_require__(56);
var Verbose_event_1 = __webpack_require__(60);
var Engagement_event_1 = __webpack_require__(20);
var EventBase_1 = __webpack_require__(8);
var RUMOneDataUpload_event_1 = __webpack_require__(57);
var DebugPriorityLevel_1 = __webpack_require__(117);
var LogProcessor;
(function (LogProcessor) {
    "use strict";
    LogProcessor.STORE_KEY = "SPCacheLogger";
    LogProcessor.STORE_SIZE_KEY = "Size";
    var SOURCE_V2_Engagement = "ClientV2Engagement";
    var DEBUG_LOG_STREAM = "ReliabilityLog";
    var USER_ENGAGEMENT_STREAM = "UserEngagement";
    var SOURCE_V2_Reliability = "ClientV2Reliability";
    // regex for SLAPI event names
    var SLAPI_EVENT_NAME_ALLOW = /[^a-z0-9\.\_\-\+]+/ig;
    var _spModuleLink = window['_spModuleLink'];
    var _appVersion = _spModuleLink ? _spModuleLink.buildNumber : "";
    function processAndLogEvent(params) {
        // Ignored events
        if (params.handlers.ignoredEventsHandler && params.handlers.ignoredEventsHandler(params.event)) {
            return;
        }
        // Get the data to log
        var logDataArray = Engagement_event_1.Engagement.isTypeOf(params.event) ? _processEngagementEvent(params.event) :
            Qos_event_1.Qos.isTypeOf(params.event) ? _processQosEvent(params.event, params.handlers.qosEventNameHandler || null, params.handlers.qosEventExtraDataHandler || null) :
                PLT_event_1.PLT.isTypeOf(params.event) ? _processPLTEvent(params.event) :
                    UnhandledError_event_1.UnhandledError.isTypeOf(params.event) ? _processUnhandledErrorEvent(params.event) :
                        RequireJSError_event_1.RequireJSError.isTypeOf(params.event) ? _processRequireJSErrorEvent(params.event) :
                            CaughtError_event_1.CaughtError.isTypeOf(params.event) ? _processCaughtErrorEvent(params.event) :
                                Verbose_event_1.Verbose.isTypeOf(params.event) ? _processVerboseEvent(params.event) :
                                    Beacon_event_1.Beacon.isTypeOf(params.event) ? _processBeaconEvent(params.event) :
                                        RUMOneDataUpload_event_1.RUMOneDataUpload.isTypeOf(params.event) ? _processRUMOneDataUploadEvent(params.event) :
                                            null;
        // If the log data array is not defined the event was unhandled, log
        // the event name so is easy to discover and fix
        if (!logDataArray) {
            logDataArray = [{
                    userEngagementData: {
                        EngagementName: "UnknownEvent",
                        Duration: 0,
                        LogType: 0,
                        Properties: JSON.stringify({ name: params.event.eventName }),
                        ClientTime: params.event.eventType === EventBase_1.ClonedEventType.End ? params.event.endTime : params.event.startTime,
                        Source: SOURCE_V2_Engagement
                    }
                }];
        }
        // Log all the data in the array adding the event prefix to the tag/name
        for (var index = 0, length = logDataArray.length; index < length; index++) {
            var logData = logDataArray[index];
            if (logData.debugData) {
                logData.debugData.Tag = _addEventPrefix(logData.debugData.Tag, params.eventNamePrefix).replace(SLAPI_EVENT_NAME_ALLOW, "");
                params.logFunc(DEBUG_LOG_STREAM, logData.debugData);
            }
            if (logData.userEngagementData) {
                // SPList: special case for Engagement events
                // set prefix to the name of the list type
                // to be able to track usage/engagement by list type
                var prefix = params.eventNamePrefix;
                if (Engagement_event_1.Engagement.isTypeOf(params.event) && prefix === 'SPList') {
                    // prefix will be set to a list type based on list base template
                    // if list type not found, [refix will be set back to generic SPList
                    prefix = _getScenarioNameFromListType();
                }
                logData.userEngagementData.EngagementName = _addEventPrefix(logData.userEngagementData.EngagementName, prefix).replace(SLAPI_EVENT_NAME_ALLOW, "");
                // SPList: special case for Qos events; add listBaseTemplate ID to the property bag
                if (Qos_event_1.Qos.isTypeOf(params.event) && params.eventNamePrefix === 'SPList') {
                    params.event.data.extraData["ListBaseTemplate"] = _getListBaseTemplate();
                }
                params.logFunc(USER_ENGAGEMENT_STREAM, logData.userEngagementData);
            }
            if (logData.rumOneData) {
                params.logFunc(logData.rumOneData.streamName, logData.rumOneData.dictionary);
            }
        }
    }
    LogProcessor.processAndLogEvent = processAndLogEvent;
    // get the list base template id
    function _getListBaseTemplate() {
        var listTemplate = -1;
        var spPageContextInfo = window['_spPageContextInfo'];
        if (spPageContextInfo !== undefined && spPageContextInfo !== null) {
            listTemplate = spPageContextInfo.listBaseTemplate;
        }
        return listTemplate;
    }
    // get the name of the listType; it's SPList for the unrecognized
    // list templates; TODO: add all templates
    function _getScenarioNameFromListType() {
        var scenarioName = "";
        var listTemplate = _getListBaseTemplate();
        switch (listTemplate) {
            case 100:
                scenarioName = "ListNext";
                break;
            case 101:
                scenarioName = "DocsNext";
                break;
            case 102:
                scenarioName = "SurveyNext";
                break;
            case 103:
                scenarioName = "LinksNext";
                break;
            case 104:
                scenarioName = "AnnouncementsNext";
                break;
            case 107:
                scenarioName = "TasksNext";
                break;
            case 109:
                scenarioName = "PicLibNext";
                break;
            default:
                scenarioName = "SPList";
                break;
        }
        return scenarioName;
    }
    // string examples: "{\"w3cResponseEnd\":2", "\"appStart\":750"
    function _cleanString(dataPLT) {
        var cleanString = dataPLT;
        cleanString = cleanString.replace("{", "");
        cleanString = cleanString.replace(/\"/gi, "");
        cleanString = cleanString.replace("}", "");
        return cleanString;
    }
    function _addEventPrefix(eventName, prefix) {
        if (!prefix) {
            return eventName;
        }
        return prefix + '.' + eventName;
    }
    function _getResultTypeSuffix(resultType) {
        if (resultType === Qos_event_1.ResultTypeEnum.Success) {
            return ".Success";
        }
        else if (resultType === Qos_event_1.ResultTypeEnum.Failure) {
            return ".Failure";
        }
        else if (resultType === Qos_event_1.ResultTypeEnum.ExpectedFailure) {
            return ".ExpectedFailure";
        }
        return "";
    }
    function _processRUMOneDataUploadEvent(event) {
        if (!event.data) {
            return [{
                    userEngagementData: {
                        EngagementName: "RUMOne.no_EventData",
                        Duration: 0,
                        LogType: 0,
                        ClientTime: event.startTime,
                        Source: SOURCE_V2_Engagement
                    }
                }];
        }
        var rumOneDataUpdateEventData = event.data;
        return [{
                rumOneData: {
                    streamName: rumOneDataUpdateEventData.streamName,
                    dictionary: rumOneDataUpdateEventData.dictionary
                }
            }];
    }
    function _processEngagementEvent(event) {
        var logDataList = [];
        // if the event has not data we will get this in COSMOS
        // if it's a start we have only the name and append ".Start" to it
        // else we look for resultCode and append it to data.name with result type
        // if resultCode is not present than we append only the result type to the name
        // i.e. serverDataGetValue.Start OR serverDataGetValue.ResponseText.GetAuth.ExpectedFailure
        var name = "no_EngagementName";
        var properties = "";
        if (event.data) {
            var engagementData = event.data;
            if (engagementData.name) {
                name = engagementData.name;
            }
            // if there is an experimentData object, it means there is an experiment so create and log a new tag for it
            // put all the experiment data in the properties bag;
            if (engagementData.experiment) {
                var abExperiment = engagementData.experiment;
                var experimentData = abExperiment.GetExperimentData();
                logDataList.push({ userEngagementData: {
                        EngagementName: _getExperimentEventName(experimentData, abExperiment.IsExperimentOn()),
                        Properties: JSON.stringify(experimentData),
                        Duration: 0,
                        LogType: 0,
                        ClientTime: event.startTime,
                        Source: SOURCE_V2_Engagement
                    } });
            }
            // put the extraData in the properties bag
            properties = engagementData.extraData ? JSON.stringify(engagementData.extraData) : "";
        }
        logDataList.push({ userEngagementData: {
                EngagementName: name,
                Properties: properties,
                Duration: 0,
                LogType: 0,
                ClientTime: event.startTime,
                Source: SOURCE_V2_Engagement
            } });
        return logDataList;
    }
    function _getExperimentEventName(experimentData, isOn) {
        var name = (experimentData.name ? experimentData.name : 'noExperimentData') +
            '.Experiment' +
            (isOn ? 'Treatment' : 'Control');
        return name;
    }
    function _processQosEvent(event, qoSEventNameHandler, qosEventExtraDataHandler) {
        var logData = {};
        // if the event has not data we will get this in COSMOS
        // if it's a start we have only the name and append ".Start" to it
        // else we look for resultCode and append it to data.name with result type
        // if resultCode is not present than we append only the result type to the name
        // i.e. serverDataGetValue.ResponseText.Success OR serverDataGetValue.ResponseText.GetAuth.ExpectedFailure
        var name = "no_QosName";
        var qosData = event.data ? event.data : null;
        if (qosData) {
            if (qosData.name) {
                name = qosData.name;
            }
            if (qoSEventNameHandler != null) {
                name = qoSEventNameHandler(event, name);
            }
            qosData.extraData = qosData.extraData || {};
            if (qosEventExtraDataHandler != null) {
                qosEventExtraDataHandler(event, qosData);
            }
            qosData.extraData["appver"] = _appVersion;
        }
        // Duration is calculated only when we have an END event
        var durationTime;
        if (event.eventType === EventBase_1.ClonedEventType.End && event.startTime && event.endTime) {
            durationTime = event.endTime - event.startTime;
        }
        else {
            durationTime = 0;
        }
        logData.userEngagementData = {
            EngagementName: name,
            Properties: qosData && qosData.extraData ? JSON.stringify(qosData.extraData) : "",
            Duration: durationTime,
            LogType: 0,
            ClientTime: event.eventType === EventBase_1.ClonedEventType.End ? event.endTime : event.startTime,
            Source: SOURCE_V2_Reliability
        };
        return [logData];
    }
    function _processBeaconEvent(event) {
        var logData = {};
        var durationTime;
        if (event.eventType === EventBase_1.ClonedEventType.End && event.startTime && event.endTime) {
            durationTime = event.endTime - event.startTime;
        }
        else {
            durationTime = 0;
        }
        logData.userEngagementData = {
            EngagementName: "Beacon",
            Properties: event.data ? JSON.stringify(event.data) : "no_EventData",
            Duration: durationTime,
            LogType: 0,
            ClientTime: event.eventType === EventBase_1.ClonedEventType.End ? event.endTime : event.startTime,
            Source: SOURCE_V2_Reliability
        };
        return [logData];
    }
    function _processPLTEvent(event) {
        if (!event.data) {
            return [{
                    userEngagementData: {
                        EngagementName: "PLT.no_EventData",
                        Duration: 0,
                        LogType: 0,
                        ClientTime: event.startTime,
                        Source: SOURCE_V2_Engagement
                    }
                }];
        }
        var logDataList = [];
        //get the data for this event
        var pltData = event.data;
        // this will be the prefix for the tags; i.e. PLT.SetView-Files.w3cResponseEnd
        var name = "PLT." + pltData.name.replace(" ", "");
        // break down the PLT data and log each one as a separate record in the stream
        //{"name":"SetView-Files","w3cResponseEnd":424,"appStart":254,"preRender":20,"dataFetch":310,"postRender":327,"render":347,"plt":1335}
        var dataPLT = JSON.stringify(pltData).split(',');
        var duration = 0;
        // iterate through data and extract each type
        // create tags like this: PLT.<pagename>.w3cResponseEnd; PLT.<pagename>.appStart
        for (var i = 0; i < dataPLT.length; i++) {
            var cleanedPLTString = _cleanString(dataPLT[i]);
            // split the string and get the name and duration
            // special case for duration when appCacheHit is a boolean
            var subDataPLTs = cleanedPLTString.split(':');
            // skip the 'name' key-value pair
            if (_cleanString(subDataPLTs[1]) !== pltData.name) {
                if (subDataPLTs[1] === 'true') {
                    duration = 1;
                }
                else if (subDataPLTs[1] === 'false' || subDataPLTs[1] === 'null') {
                    duration = 0;
                }
                else {
                    duration = parseInt(subDataPLTs[1], 10);
                }
                logDataList.push({ userEngagementData: {
                        EngagementName: name + "." + subDataPLTs[0],
                        Properties: (subDataPLTs[0] === 'appCacheHit') ? JSON.stringify(event.data) : "",
                        Duration: duration,
                        LogType: 0,
                        ClientTime: event.startTime,
                        Source: SOURCE_V2_Engagement
                    } });
            }
        }
        return logDataList;
    }
    function _processUnhandledErrorEvent(event) {
        return [{
                userEngagementData: {
                    EngagementName: "UnhandledError",
                    Duration: 0,
                    LogType: 0,
                    ClientTime: event.startTime,
                    Source: SOURCE_V2_Engagement
                },
                debugData: {
                    Tag: "UnhandledError",
                    Level: DebugPriorityLevel_1.default.Normal,
                    Message: event.data ? JSON.stringify(event.data) : "no_EventData",
                    Misc: "",
                    ClientTime: event.startTime
                }
            }];
    }
    function _processRequireJSErrorEvent(event) {
        var logData = {};
        var name = "RequireJSError";
        var errorData;
        var errorMessage;
        if (event.data) {
            // clone all properties so that we can omit 'message' in JSON
            errorData = {};
            for (var key in event.data) {
                if (key !== "message") {
                    errorData[key] = event.data[key];
                }
                else {
                    errorMessage = event.data[key];
                }
            }
        }
        logData.userEngagementData = {
            EngagementName: name,
            Duration: 0,
            LogType: 0,
            ClientTime: event.startTime,
            Source: SOURCE_V2_Engagement
        };
        logData.debugData = {
            Tag: name,
            Level: DebugPriorityLevel_1.default.Normal,
            Message: errorMessage ? errorMessage : "no_ErrorMessage",
            Misc: errorData ? JSON.stringify(errorData) : "no_ErrorData",
            ClientTime: event.startTime
        };
        return [logData];
    }
    function _processCaughtErrorEvent(event) {
        var logData = {};
        var name = "CaughtError";
        if (QosError_event_1.QosError.isTypeOf(event)) {
            if (event.data) {
                var qosErrorData = event.data;
                name = qosErrorData.name;
                if (qosErrorData.resultCode) {
                    name += "." + qosErrorData.resultCode;
                }
                name += _getResultTypeSuffix(qosErrorData.resultType);
            }
            else {
                name = "QosErrorEvent.no_EventData";
            }
        }
        else {
            // log it once in the UserEngagement stream to count the hits
            logData.userEngagementData = {
                EngagementName: name,
                Duration: 0,
                LogType: 0,
                ClientTime: event.startTime,
                Source: SOURCE_V2_Engagement
            };
        }
        // log it again in ReliabilityLog stream with data for debugging
        var caughtErrorData = event.data ? event.data : null;
        logData.debugData = {
            Tag: name,
            Level: DebugPriorityLevel_1.default.Normal,
            Message: caughtErrorData && caughtErrorData.message ? caughtErrorData.message : "",
            Misc: caughtErrorData && caughtErrorData.stack ? JSON.stringify(caughtErrorData.stack) : "",
            ClientTime: event.startTime
        };
        return [logData];
    }
    function _processVerboseEvent(event) {
        var logData = {};
        var name = "Verbose";
        if (event.data) {
            var verboseData = event.data;
            if (verboseData.name) {
                name = verboseData.name + ".Verbose";
            }
        }
        else {
            name += ".no_EventData";
        }
        // log it in ReliabilityLog stream with data for debugging
        logData.debugData = {
            Tag: name,
            Level: DebugPriorityLevel_1.default.Low,
            Message: verboseData.message,
            Misc: "",
            ClientTime: event.startTime
        };
        return [logData];
    }
})(LogProcessor || (LogProcessor = {}));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = LogProcessor;


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// OneDrive:IgnoreCodeCoverage
var PageTransitionType;
(function (PageTransitionType) {
    PageTransitionType[PageTransitionType["none"] = 0] = "none";
    PageTransitionType[PageTransitionType["fullPageLoad"] = 4] = "fullPageLoad";
    PageTransitionType[PageTransitionType["onePageAppNavigation"] = 5] = "onePageAppNavigation";
})(PageTransitionType || (PageTransitionType = {}));
;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = PageTransitionType;


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

//Intentionally Override the normal camel casing style to title casing style because the schema has to match exactly the server side schema which is Title casing.
//Please do not change back to camel casing.
var RUMOneSLAPI = (function () {
    function RUMOneSLAPI() {
        this.ServerCorrelationId = null;
        this.ScenarioId = null;
        this.EUPL = undefined;
        this.ServerUrl = null;
        this.Browser = null;
        this.ClientIP = null;
        this.UserAgent = null;
        this.Flights = null;
        this.PageTransitionType = undefined;
        this.AppCache = undefined;
        this.FolderNav = undefined;
        this.InitiationTimeOffset = undefined;
        this.ServerRequestDuration = undefined;
        this.IISLatency = undefined;
        this.TTFB = undefined;
        this.TTLB = undefined;
        this.ParseTime = undefined;
        this.RenderTime = undefined;
        this.Control1Id = null;
        this.Control1RenderTime = undefined;
        this.Control2Id = null;
        this.Control2RenderTime = undefined;
        this.Control3Id = null;
        this.Control3RenderTime = undefined;
        this.Control4Id = null;
        this.Control4RenderTime = undefined;
        this.SharePointRequestCountTotal = undefined;
        this.SharePointRequestCountASPX = undefined;
        this.SharePointRequestCountJS = undefined;
        this.SharePointRequestCountCSS = undefined;
        this.SharePointRequestCountIMG = undefined;
        this.SharePointRequestCountNoneCached = undefined;
        this.SharePointRequestBytes = undefined;
        this.SharePointRequestDownloadTime = undefined;
        this.CDNRequestCountTotal = undefined;
        this.CDNRequestCountASPX = undefined;
        this.CDNRequestCountJS = undefined;
        this.CDNRequestCountCSS = undefined;
        this.CDNRequestCountIMG = undefined;
        this.CDNRequestCountNoneCached = undefined;
        this.CDNRequestBytes = undefined;
        this.CDNRequestDownloadTime = undefined;
        this.ThirdPartyRequestCountTotal = undefined;
        this.ThirdPartyRequestCountASPX = undefined;
        this.ThirdPartyRequestCountJS = undefined;
        this.ThirdPartyRequestCountCSS = undefined;
        this.ThirdPartyRequestCountIMG = undefined;
        this.ThirdPartyRequestCountNoneCached = undefined;
        this.ThirdPartyRequestBytes = undefined;
        this.ThirdPartyRequestDownloadTime = undefined;
        this.FromEdge = undefined;
        this.APICallCount = undefined;
        this.APICallDurationSum = undefined;
        this.PreRender = undefined;
        this.DataFetch = undefined;
        this.PostRender = undefined;
        this.W3cNavigationStart = undefined;
        this.W3cUnloadEventStart = undefined;
        this.W3cUnloadEventEnd = undefined;
        this.W3cFetchStart = undefined;
        this.W3cRedirectStart = undefined;
        this.W3cRedirectEnd = undefined;
        this.W3cDomainLookupStart = undefined;
        this.W3cDomainLookupEnd = undefined;
        this.W3cConnectStart = undefined;
        this.W3cSecureConnectStart = undefined;
        this.W3cConnectEnd = undefined;
        this.W3cRequestStart = undefined;
        this.W3cResponseStart = undefined;
        this.W3cResponseEnd = undefined;
        this.W3cDomLoading = undefined;
        this.W3cDomLoadEnd = undefined;
        this.W3cLoadEventStart = undefined;
        this.W3cLoadEventEnd = undefined;
        this.MDSDownloadStart = undefined;
        this.MDSParseDeltaStart = undefined;
        this.MDSParseDeltaEnd = undefined;
        this.MDSGCStart = undefined;
        this.MDSGCEnd = undefined;
        this.MDSCSSStart = undefined;
        this.MDSCSSEnd = undefined;
        this.MDSInnerHTMLStart = undefined;
        this.MDSScriptLoaderStart = undefined;
        this.MDSScriptLoaderEnd = undefined;
        this.MDSAnimationStart = undefined;
        this.MDSAnimationEnd = undefined;
        this.MDSParallelDownloadStart = undefined;
        this.MDSParallelDownloadEnd = undefined;
        this.APICalls = undefined;
        this.SharePointRequestNames = undefined;
        this.CDNRequestNames = undefined;
        this.ThirdPartyRequestNames = undefined;
        this.EUPLBreakdown = undefined;
        this.Control5Id = null;
        this.Control5RenderTime = undefined;
        this.Control6Id = null;
        this.Control6RenderTime = undefined;
        this.Control7Id = null;
        this.Control7RenderTime = undefined;
        this.Control8Id = null;
        this.Control8RenderTime = undefined;
        this.Control9Id = null;
        this.Control9RenderTime = undefined;
        this.Control10Id = null;
        this.Control10RenderTime = undefined;
        this.ServerMetrics = null;
        this.Referrer = null;
        this.BrowserIsMobile = undefined;
        this.SharePointServerVersion = null;
    }
    return RUMOneSLAPI;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = RUMOneSLAPI;


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Immutable structure representing a 2D point.
 */
var Point = (function () {
    function Point(xOrPoint, y) {
        if (xOrPoint === void 0) { xOrPoint = 0; }
        if (y === void 0) { y = 0; }
        if (xOrPoint instanceof Point) {
            var point = xOrPoint;
            this.x = point.x;
            this.y = point.y;
        }
        else {
            this.x = xOrPoint;
            this.y = y;
        }
    }
    Point.areEqual = function (point1, point2, tolerance) {
        if (tolerance === void 0) { tolerance = 1E-6; }
        return Math.abs(point1.x - point2.x) < tolerance && Math.abs(point1.y - point2.y) < tolerance;
    };
    /**
     * gets the center of points.
     */
    Point.getCenter = function (points) {
        return points.reduce(function (p1, p2) { return p1.add(p2); }, Point.ORIGIN).scale(1 / points.length);
    };
    /**
     * Multiplies a point by a constant, producing a scaled point.
     */
    Point.prototype.scale = function (factor) {
        return new Point(this.x * factor, this.y * factor);
    };
    /**
     * Adds two points, creating a translated point.
     */
    Point.prototype.add = function (offset) {
        return new Point(this.x + offset.x, this.y + offset.y);
    };
    /**
     * Subtracts two points, creating a translated point.
     */
    Point.prototype.subtract = function (offset) {
        return new Point(this.x - offset.x, this.y - offset.y);
    };
    /**
     * Determines the distance from one point to another.
     */
    Point.prototype.distance = function (target) {
        var dx = this.x - target.x;
        var dy = this.y - target.y;
        return Math.sqrt((dx * dx) + (dy * dy));
    };
    /**
     * Negates a point, creating a point reflected across the origin.
     */
    Point.prototype.negate = function () {
        return new Point(-this.x, -this.y);
    };
    /**
     * Takes the absolute value of a point, getting its distance from the origin.
     */
    Point.prototype.abs = function () {
        return Math.sqrt((this.x * this.x) + (this.y * this.y));
    };
    /**
     * Gets the unit vector for a point.
     */
    Point.prototype.unit = function () {
        var abs = this.abs();
        return this.scale(abs && (1 / abs) || 0);
    };
    /**
     * Represents this point as a string.
     */
    Point.prototype.toString = function () {
        return '[Point ' + this.x + ', ' + this.y + ']';
    };
    return Point;
}());
/**
 * The origin of a 2D plane.
 */
Point.ORIGIN = new Point();
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Point;


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Point_1 = __webpack_require__(65);
var Size_1 = __webpack_require__(67);
/**
 * Describes an area enclosed by an upper-left coordinate plus a width and height.
 */
var Rectangle = (function () {
    function Rectangle(arg0, arg1, arg2, arg3) {
        this.x = 0;
        this.y = 0;
        this.width = 0;
        this.height = 0;
        if (arguments.length === 0) {
            this.x = 0;
            this.y = 0;
            this.width = 0;
            this.height = 0;
        }
        else if (arg0 instanceof Rectangle) {
            var rect = arg0;
            this.x = rect.x;
            this.y = rect.y;
            this.width = rect.width;
            this.height = rect.height;
        }
        else if (arg0 instanceof Point_1.default) {
            var point = arg0;
            var size = arg1;
            this.x = point.x;
            this.y = point.y;
            this.width = size.width;
            this.height = size.height;
        }
        else if (typeof arg0 === 'object' &&
            typeof arg0.left === 'number' &&
            typeof arg0.top === 'number' &&
            typeof arg0.width === 'number' &&
            typeof arg0.height === 'number') {
            var cRect = arg0;
            this.x = cRect.left;
            this.y = cRect.top;
            this.width = cRect.width;
            this.height = cRect.height;
        }
        else {
            this.x = arg0;
            this.y = arg1;
            this.width = arg2;
            this.height = arg3;
        }
    }
    /**
     * Clips the Rectangle to fit within the specified bounds and returns the result.
     */
    Rectangle.prototype.clip = function (bounds) {
        var rect = new Rectangle(this);
        if (rect.x < bounds.x) {
            rect.width -= bounds.x - rect.x;
            rect.x = bounds.x;
        }
        if (rect.getRight() > bounds.getRight()) {
            rect.width -= rect.getRight() - bounds.getRight();
        }
        if (rect.y < bounds.y) {
            rect.height -= bounds.y - rect.y;
            rect.y = bounds.y;
        }
        if (rect.getBottom() > bounds.getBottom()) {
            rect.height -= rect.getBottom() - bounds.getBottom();
        }
        return rect;
    };
    /**
     * Determines if the specified Point or Rectangle is entirely contained by this Rectangle.
     */
    Rectangle.prototype.contains = function (val) {
        if (val instanceof Point_1.default) {
            // test if a single point is contained within this Rectangle
            var point = val;
            return ((point.x >= this.x) &&
                (point.y >= this.y) &&
                (point.x <= this.getRight()) &&
                (point.y <= this.getBottom()));
        }
        else {
            // test upper-left and lower-right points of the Rectangle
            var rect = val;
            var pointA = rect.getPoint();
            var pointB = new Point_1.default(rect.getRight(), rect.getBottom());
            return (this.contains(pointA) && this.contains(pointB));
        }
    };
    Rectangle.prototype.getCenter = function () {
        return new Point_1.default(this.x + this.width / 2, this.y + this.height / 2);
    };
    Rectangle.prototype.getLeft = function () {
        return this.x;
    };
    Rectangle.prototype.getTop = function () {
        return this.y;
    };
    Rectangle.prototype.getRight = function () {
        return this.x + this.width;
    };
    Rectangle.prototype.getBottom = function () {
        return this.y + this.height;
    };
    Rectangle.prototype.getPoint = function () {
        return new Point_1.default(this.x, this.y);
    };
    Rectangle.prototype.getSize = function () {
        return new Size_1.default(this.width, this.height);
    };
    Rectangle.prototype.inflate = function (arg0, arg1) {
        var dx;
        var dy;
        if (typeof arg0 === 'object') {
            var size = arg0;
            dx = size.width;
            dy = size.height;
        }
        else {
            dx = arg0;
            dy = arg1;
        }
        return new Rectangle(this.x - dx / 2, this.y - dy / 2, this.width + dx, this.height + dy);
    };
    /**
     * Translates the Rectangle by the minimum distance to try and fit within the specified bounds.
     */
    Rectangle.prototype.nudge = function (bounds) {
        var result = new Rectangle(this);
        if (result.x < bounds.x) {
            result.x = bounds.x;
        }
        else if (result.getRight() > bounds.getRight()) {
            result.x = bounds.getRight() - result.width;
        }
        if (result.y < bounds.y) {
            result.y = bounds.y;
        }
        else if (result.getBottom() > bounds.getBottom()) {
            result.y = bounds.getBottom() - result.height;
        }
        return result;
    };
    Rectangle.prototype.translate = function (arg0, arg1) {
        var result;
        if (arg0 instanceof Point_1.default) {
            // allow distance to be specified in the coordinates of a Point
            var p = arg0;
            result = this.translate(p.x, p.y);
        }
        else {
            var dx = arg0;
            var dy = arg1;
            result = new Rectangle(this.x + dx, this.y + dy, this.width, this.height);
        }
        return result;
    };
    /**
     * Calculates the smallest Rectangle that contains both this rectangle and the specified rectangle.
     */
    Rectangle.prototype.union = function (rect) {
        var x1 = Math.min(this.x, rect.x);
        var y1 = Math.min(this.y, rect.y);
        var x2 = Math.max(this.x + this.width, rect.x + rect.width);
        var y2 = Math.max(this.y + this.height, rect.y + rect.height);
        return new Rectangle(x1, y1, x2 - x1, y2 - y1);
    };
    /**
     * Creates a new rectangle similar to the current rectangle, but fitted to the target rectangle,
     * either outside or inside.
     */
    Rectangle.prototype.fit = function (rect, isInside) {
        var coverRect = rect;
        if (this.width && this.height && (isInside ?
            (this.width > coverRect.width || this.height > coverRect.height) :
            (this.width > coverRect.width && this.height > coverRect.height))) {
            coverRect = this._scaleTo(rect, isInside);
        }
        else {
            coverRect = this;
        }
        var deltaX = (rect.width - coverRect.width) / 2;
        var deltaY = (rect.height - coverRect.height) / 2;
        return new Rectangle(deltaX + this.x, deltaY + this.y, coverRect.width, coverRect.height);
    };
    Rectangle.prototype._scaleTo = function (target, isInside) {
        var targetAspectRatio = target.width / target.height;
        var currentAspectRatio = this.width / this.height;
        var width = 0;
        var height = 0;
        var aspectRatio1 = isInside ? currentAspectRatio : targetAspectRatio;
        var aspectRatio2 = isInside ? targetAspectRatio : currentAspectRatio;
        if (aspectRatio1 < aspectRatio2) {
            // Target is skinnier than current. Match height of target area.
            height = target.height;
            width = currentAspectRatio * target.height;
        }
        else {
            // Current is skinnier than target. Match width of target area.
            width = target.width;
            height = target.width / currentAspectRatio;
        }
        return new Rectangle(this.x, this.y, width, height);
    };
    return Rectangle;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Rectangle;


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var Size = (function () {
    function Size(width, height) {
        this.width = 0;
        this.height = 0;
        this.width = width;
        this.height = height;
    }
    return Size;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Size;


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Attempts to extract the default export from a module.
 *
 * @export
 * @template TExport
 * @param {IModule<TExport>} module
 * @returns {TExport}
 */
function getDefaultExport(module) {
    var exportValue;
    if (isModuleWithDefault(module)) {
        exportValue = module.default;
    }
    else {
        exportValue = module;
    }
    return exportValue;
}
exports.getDefaultExport = getDefaultExport;
/**
 * Returns the module itself as its own export.
 *
 * @export
 * @template TModule
 * @param {TModule} module
 * @returns {TModule}
 */
function getIdentityExport(module) {
    return module;
}
exports.getIdentityExport = getIdentityExport;
function isModuleWithDefault(module) {
    return !!module && typeof module === 'object' && 'default' in module;
}
exports.isModuleWithDefault = isModuleWithDefault;


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

// Split from odsp-next/src/local/utilities/path/Path.ts
// Contains non SP utility methods
function splitFileName(fileName) {
    var extension = getFileExtension(fileName);
    var name = extension ? fileName.substring(0, fileName.length - extension.length) : fileName;
    return {
        name: name,
        extension: extension
    };
}
exports.splitFileName = splitFileName;
/**
 * Given a filename (without directory path), return the file extension or the empty string if one is not present.
 */
function getFileExtension(fileName, removeDot) {
    if (removeDot === void 0) { removeDot = false; }
    var extension = '';
    if (fileName) {
        var index = fileName.lastIndexOf('.');
        if (index >= 0) {
            if (removeDot) {
                extension = fileName.substr(index + 1);
            }
            else {
                extension = fileName.substr(index);
            }
        }
    }
    return extension;
}
exports.getFileExtension = getFileExtension;
function encodePath(url, encodeHash) {
    if (encodeHash === void 0) { encodeHash = true; }
    url = encodeURI(url);
    if (encodeHash) {
        // encodeURI API doesn't encode # path. Here for openUrl we know # is path, not Hash, so encode it properly "manually".
        if (url) {
            url = url.replace(/#/g, "%23");
        }
    }
    return url;
}
exports.encodePath = encodePath;


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// OneDrive:IgnoreCodeCoverage
var PLT_event_1 = __webpack_require__(33);
var PLTHttpRequest_event_1 = __webpack_require__(55);
var Api_event_1 = __webpack_require__(54);
var EventBase_1 = __webpack_require__(8);
var ErrorHelper_1 = __webpack_require__(3);
var Manager_1 = __webpack_require__(5);
var PerformanceMarker_1 = __webpack_require__(71);
exports.HighResolutionTimingSupported = PerformanceMarker_1.HighResolutionTimingSupported;
var performance = window.performance;
exports.AppStartMarkerName = "EUPL.AppStart";
exports.DataFetchStartMarkerName = "EUPL.DataManager.FirstDataFetch.GetItem.Start";
exports.DataFetchEndMarkerName = "EUPL.DataManager.FirstDataFetch.GetItem.End";
exports.OnePageNavigationStartMarkerName = "EUPL.OnePageNavigation.Start";
//For reference see http://www.w3.org/TR/navigation-timing/
//also, got tips at http://www.stevesouders.com/blog/2014/08/21/resource-timing-practical-tips/
var PerformanceCollection = (function () {
    function PerformanceCollection() {
    }
    /**
     * When list data is returned from server as deferred control, browser w3c timing responseEnd may not reflect correct timing of the manifest response end.
     * To workaround this, we write "var g_responseEnd = new Date().getTime();" in server duration script tag.
     * In most of the scenarios, we will still use performance.timing.responseEnd.
     * If g_responseEnd is less than performance.timing.responseEnd or performance.timing.responseEnd is not available yet (this is will happen for deferred SPListRender sends splist data back to html), we will use g_responseEnd.
     */
    PerformanceCollection.getResponseEnd = function () {
        if (performance && performance.timing) {
            if (window["g_responseEnd"] &&
                (!!performance.timing.responseEnd && (Number(window["g_responseEnd"]) < performance.timing.responseEnd) || !performance.timing.responseEnd)) {
                return Number(window["g_responseEnd"]);
            }
            else {
                return performance.timing.responseEnd;
            }
        }
        else {
            return NaN;
        }
    };
    ;
    PerformanceCollection.appStart = function () {
        try {
            if (performance && performance.timing) {
                PerformanceCollection.mark(exports.AppStartMarkerName);
                Manager_1.Manager.addLogHandler(this.eventLogHandler);
                this.summary.w3cResponseEnd = (PerformanceCollection.getResponseEnd() - performance.timing.fetchStart); //Time to get the aspx from the server
                this._times["appStart"] = Date.now(); //Time it takes for our app to *start* running
                this.summary.appStart = this._times["appStart"] - PerformanceCollection.getResponseEnd(); //Time it takes for our app to *start* running
                this.summary.prefetchStart = -1;
                this.summary.deferredListDataRender = -1;
            }
        }
        catch (e) {
            ErrorHelper_1.default.log(e);
        }
    };
    //called when the view is fully loaded
    PerformanceCollection.plt = function (name) {
        try {
            if (performance && performance.timing && PerformanceCollection._times["plt"] === undefined) {
                var now = Date.now();
                var performanceNow = Math.round(performance.now());
                Manager_1.Manager.removeLogHandler(this.eventLogHandler);
                var onePageNavStart = PerformanceMarker_1.getMarkerTime(exports.OnePageNavigationStartMarkerName);
                this._times["plt"] = isNaN(onePageNavStart) ? (now - performance.timing.fetchStart) : (performanceNow - onePageNavStart);
                this.summary.preRender = PerformanceMarker_1.getMarkerTime(exports.DataFetchStartMarkerName) - PerformanceMarker_1.getMarkerTime(exports.AppStartMarkerName); //Time it takes for our app to make the relevant data fetch for this view
                this.summary.dataFetch = PerformanceMarker_1.getMarkerTime(exports.DataFetchEndMarkerName) - PerformanceMarker_1.getMarkerTime(exports.DataFetchStartMarkerName); //Time it takes for our app to get data back from the server
                this.summary.postRender = PerformanceCollection.now() - PerformanceMarker_1.getMarkerTime(exports.DataFetchEndMarkerName);
                this.summary.render = this.summary["preRender"] + this.summary["postRender"];
                this.summary.plt = this._times["plt"]; //unbiased end to end PLT from fetchStart that excludes unload of previous page.
                this.summary.pltWithUnload = now - performance.timing.navigationStart; //unbiased end to end PLT from navigationStart that includes the unload of the previous page
                this.summary.name = name;
                //we consider an appcache hit if the w3cResponseEnd time is less than 40ms
                this.summary.appCacheHit = this.summary.w3cResponseEnd <= 40 &&
                    Boolean(window.applicationCache) &&
                    Boolean(window.applicationCache.status !== window.applicationCache.UNCACHED);
                // ASSERT(this.summary.appStart +
                //     this.summary.dataFetch +
                //     this.summary.postRender +
                //     this.summary.preRender +
                //     this.summary.w3cResponseEnd ===
                //     this.summary.plt,
                //     "PLT summary times do not add up");
                // Get the count of events so we have it in the plt event logs
                // This must be logged before log data otherwise the count is not passed
                this.getHttpRequests();
                var event_1 = PLT_event_1.PLT.logData(this.summary);
                if (this.httpRequestCollection) {
                    for (var _i = 0, _a = this.httpRequestCollection; _i < _a.length; _i++) {
                        var eventData = _a[_i];
                        PLTHttpRequest_event_1.PLTHttpRequest.logData(eventData, event_1);
                    }
                }
                PerformanceCollection.mark('EUPL.glass');
            }
        }
        catch (e) {
            ErrorHelper_1.default.log(e);
        }
    };
    PerformanceCollection.mark = function (name, limit) {
        PerformanceMarker_1.mark(name, limit);
    };
    PerformanceCollection.pageLoaded = function () {
        return this._times["plt"] !== undefined;
    };
    PerformanceCollection.getMarkerTime = function (name) {
        return PerformanceMarker_1.getMarkerTime(name);
    };
    PerformanceCollection.now = function () {
        if (PerformanceMarker_1.HighResolutionTimingSupported) {
            return Math.round(performance.now());
        }
        else {
            return Date.now();
        }
    };
    PerformanceCollection.eventLogHandler = function (event) {
        // Look at all api events
        if (Api_event_1.Api.isTypeOf(event)) {
            if (PerformanceCollection._times["appDataFetchStart"] === undefined) {
                // Calculate the start time from the first api event
                PerformanceCollection._times["appDataFetchStart"] = event.startTime;
            }
            else if (event.eventType === EventBase_1.ClonedEventType.End || event.eventType === EventBase_1.ClonedEventType.Single) {
                // Calculate the end time from the api events
                PerformanceCollection._times["appDataFetchEnd"] = PerformanceCollection._times["appDataFetchEnd"] ? Math.max(PerformanceCollection._times["appDataFetchEnd"], event.endTime) : event.endTime;
            }
        }
    };
    PerformanceCollection.getHttpRequests = function () {
        if (performance && performance.getEntriesByType) {
            var httpRequestCollection = [];
            var perfEntries = performance.getEntriesByType("resource");
            var httpRequests = perfEntries.length;
            for (var j = 0; j < httpRequests; j++) {
                var data = {
                    startTime: Math.round(perfEntries[j].startTime),
                    url: perfEntries[j].name,
                    duration: Math.round(perfEntries[j].duration)
                };
                httpRequestCollection.push(data);
            }
            //Make sure we get all the http requests from iframes as well
            var iFrames = document.getElementsByTagName("iframe");
            httpRequests += iFrames.length;
            for (var i = 0; i < iFrames.length; i++) {
                try {
                    perfEntries = iFrames[i].contentWindow.performance.getEntriesByType("resource");
                }
                catch (e) {
                    // If the iframe in question isn't domain lowered, we can't access it.
                    perfEntries = null;
                }
                if (perfEntries) {
                    var requests = perfEntries.length;
                    httpRequests += requests;
                    for (var j = 0; j < requests; j++) {
                        var iframeData = {
                            startTime: Math.round(perfEntries[j].startTime),
                            url: perfEntries[j].name,
                            duration: Math.round(perfEntries[j].duration)
                        };
                        httpRequestCollection.push(iframeData);
                    }
                }
            }
            this.summary.httpRequests = httpRequests;
            this.httpRequestCollection = httpRequestCollection;
        }
    };
    return PerformanceCollection;
}());
PerformanceCollection.summary = {};
PerformanceCollection._times = {};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = PerformanceCollection;


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// OneDrive:IgnoreCodeCoverage
var performance = window.performance;
var HighResolutionTimingSupported = !!performance && typeof performance.mark === 'function' &&
    typeof performance.clearMarks === 'function' &&
    typeof performance.now === 'function';
exports.HighResolutionTimingSupported = HighResolutionTimingSupported;
exports.MARKER_PREFIX = "EUPL.";
var _markCount = 0;
var _perfMarks = window['_perfMarks'] = window['_perfMarks'] || []; // used for browsers do not support native performance.mark
function mark(name, limit) {
    'use strict';
    var markName = name.lastIndexOf(exports.MARKER_PREFIX, 0) === 0 ? name : exports.MARKER_PREFIX + name;
    if (limit === null || limit === undefined || _markCount < limit) {
        if (HighResolutionTimingSupported) {
            performance.mark(markName);
        }
        else {
            _perfMarks.push({
                name: markName,
                startTime: Date.now()
            });
        }
        _markCount++;
    }
}
exports.mark = mark;
function getMarkerTime(name) {
    'use strict';
    var markName = name.lastIndexOf(exports.MARKER_PREFIX, 0) === 0 ? name : exports.MARKER_PREFIX + name;
    if (HighResolutionTimingSupported) {
        var mark_1 = performance.getEntriesByName(markName);
        return mark_1 && mark_1.length > 0 ? Math.round(mark_1[0].startTime) : NaN;
    }
    else {
        var mark_2 = _perfMarks.filter(function (mark) { return mark.name === markName; })[0];
        return mark_2 && mark_2.startTime;
    }
}
exports.getMarkerTime = getMarkerTime;
function clearMarks() {
    'use strict';
    if (HighResolutionTimingSupported) {
        performance.getEntriesByType("mark").filter(function (mark) {
            return mark.name.lastIndexOf(exports.MARKER_PREFIX, 0) === 0;
        }).forEach(function (mark) {
            performance.clearMarks(mark.name);
        });
    }
    else {
        _perfMarks = [];
    }
}
exports.clearMarks = clearMarks;
function getAllMarks() {
    'use strict';
    if (HighResolutionTimingSupported) {
        return performance.getEntriesByType("mark").filter(function (mark) {
            return mark.name.lastIndexOf(exports.MARKER_PREFIX, 0) === 0;
        });
    }
    else {
        return _perfMarks;
    }
}
exports.getAllMarks = getAllMarks;


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var Promise_1 = __webpack_require__(7);
var Signal_1 = __webpack_require__(12);
var Scope_1 = __webpack_require__(73);
var Disposable_1 = __webpack_require__(25);
var lastId = 0;
var ResourceKey = (function () {
    function ResourceKey(nameOrOptions) {
        this.id = ++lastId;
        if (typeof nameOrOptions === 'string') {
            this.name = nameOrOptions;
        }
        else {
            this.name = nameOrOptions.name;
            this.factory = nameOrOptions.factory;
            this.loader = nameOrOptions.loader;
        }
    }
    Object.defineProperty(ResourceKey.prototype, "lazy", {
        /**
         * Gets an identifier for this {ResourceKey} as a lazy dependency (wrap in a function for deferred evaluation)
         */
        get: function () {
            return new ResourceDependency(this, 1 /* lazy */);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResourceKey.prototype, "local", {
        /**
         * Gets an identifier for this {ResourceKey} as a local dependency (resolved in the local ResourceScope)
         */
        get: function () {
            return new ResourceDependency(this, 2 /* local */);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResourceKey.prototype, "optional", {
        /**
         * Gets an identifier for this {ResourceKey} as an optional dependency
         */
        get: function () {
            return new ResourceDependency(this, 4 /* optional */);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Provides information about this resource key
     */
    ResourceKey.prototype.toString = function () {
        return "Resource #" + this.id + " \"" + this.name + "\"";
    };
    return ResourceKey;
}());
exports.ResourceKey = ResourceKey;
var ResourceDependency = (function () {
    function ResourceDependency(key, flags) {
        this.key = key;
        this.flags = flags;
    }
    Object.defineProperty(ResourceDependency.prototype, "lazy", {
        get: function () {
            return new ResourceDependency(this.key, this.flags | 1 /* lazy */);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResourceDependency.prototype, "local", {
        get: function () {
            return new ResourceDependency(this.key, this.flags | 2 /* local */);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResourceDependency.prototype, "optional", {
        get: function () {
            return new ResourceDependency(this.key, this.flags | 4 /* optional */);
        },
        enumerable: true,
        configurable: true
    });
    return ResourceDependency;
}());
var ConstantResourceFactory = (function () {
    function ConstantResourceFactory(value) {
        this._value = value;
        this.dependencies = {};
    }
    ConstantResourceFactory.prototype.create = function () {
        return { instance: this._value };
    };
    return ConstantResourceFactory;
}());
exports.ConstantResourceFactory = ConstantResourceFactory;
exports.resourceScopeKey = new ResourceKey({
    name: 'resources'
});
exports.asyncLoadBarrierKey = new ResourceKey({
    name: 'asyncLoadBarrier'
});
var CacheOnSuccessLoader = (function () {
    function CacheOnSuccessLoader(loader) {
        this._loader = loader;
    }
    CacheOnSuccessLoader.prototype.load = function () {
        var _this = this;
        var load = preventCancellation(this._loader.load());
        load.done(undefined, function () {
            // On error, reset the cache so the next load can try again.
            delete _this.load;
        });
        this.load = function () { return load; };
        return load;
    };
    return CacheOnSuccessLoader;
}());
var Handle = (function () {
    function Handle(entry, instanceManager) {
        this.entry = entry;
        this.manager = instanceManager;
    }
    Handle.prototype.getInstance = function (key, resourceScopeOptions) {
        var manager = this.manager;
        var factory = this.entry.factory;
        var resource = factory.create(manager.resolve(factory.dependencies, resourceScopeOptions));
        var instance = resource.instance;
        if (resource.disposable) {
            manager.scope.attach(resource.disposable);
        }
        this.getInstance = function () { return instance; };
        return instance;
    };
    Handle.prototype.promote = function (targetHandleManager) {
        var entry = this.entry;
        return new Handle({
            manager: targetHandleManager,
            loader: entry.loader,
            factory: entry.factory
        });
    };
    return Handle;
}());
var logBeginConstruction;
var logEndConstruction;
var logConsume;
var logExpose;
var log;
function getResolvedConstructor(resolvableConstructor, resolvedDependencies) {
    var Resolved = function (params) {
        var instance = resolvableConstructor.call(this, params, resolvedDependencies) || this;
        return instance;
    };
    if (true) {
        // This pattern results in the correct type being displayed in the debugger
        var wrappedConstructor_1 = Resolved;
        Resolved = function (params) {
            logBeginConstruction(resolvableConstructor, 'Resources.resolved');
            var instance = wrappedConstructor_1.call(Object.create(resolvableConstructor.prototype), params);
            logEndConstruction(resolvableConstructor, 'Resources.resolved');
            return instance;
        };
    }
    Resolved.prototype = resolvableConstructor.prototype;
    return Resolved;
}
exports.getResolvedConstructor = getResolvedConstructor;
var HandleManager = (function () {
    function HandleManager(parentOrOptions) {
        this._handles = {};
        this._isLocked = false;
        var options;
        if (parentOrOptions instanceof HandleManager) {
            if (parentOrOptions.isDisposed) {
                throw new Error('Parent ResourceScope has already been disposed!');
            }
            options = parentOrOptions.options;
            this._parent = parentOrOptions;
            this._level = parentOrOptions._level + 1;
        }
        else {
            options = parentOrOptions || {};
            this._level = 0;
            if (true) {
                // Check for setting and enable tracing if set
                if (!('__ResourceTraceState' in window) && (localStorage && localStorage['EnableResourceTracing'])) {
                    window['__ResourceTraceState'] = {
                        log: [],
                        stack: [],
                        types: {},
                        exposed: {}
                    };
                }
                log('Created new root level Resource Scope');
            }
        }
        this.scope = new Scope_1.default();
        this.options = options;
    }
    Object.defineProperty(HandleManager.prototype, "isDisposed", {
        get: function () {
            return this.scope.isDisposed;
        },
        enumerable: true,
        configurable: true
    });
    HandleManager.prototype.block = function (key) {
        return this._expose(key);
    };
    HandleManager.prototype.isDescendantOf = function (manager) {
        return this._level > manager._level;
    };
    HandleManager.prototype.getHandle = function (key) {
        var manager = this;
        var keyId = key.id;
        // Starting with this scope, attempt to find the first scope with an entry (may be undefined)
        // for the given key. Stop when there are no more ancestor scopes.
        while (!(keyId in manager._handles) && manager._parent) {
            manager = manager._parent;
        }
        var handles = manager._handles;
        return handles[keyId] || this.options.useFactoriesOnKeys &&
            (key.factory && (handles[keyId] = new Handle({
                factory: key.factory,
                manager: manager
            })) || (key.loader && (handles[keyId] = new Handle({
                loader: new CacheOnSuccessLoader(key.loader),
                manager: manager
            }))));
    };
    HandleManager.prototype.expose = function (key, source, instance) {
        return this._expose(key, function (handleManager) { return new Handle({
            factory: source.factory,
            loader: source.loader,
            manager: handleManager
        }, instance && handleManager); });
    };
    HandleManager.prototype.getLoader = function () {
        this.lock();
        var loader = new ResourceLoader(this);
        this.getLoader = function () { return loader; };
        return loader;
    };
    HandleManager.prototype.dispose = function () {
        this.scope.dispose();
        this._handles = {};
        this.consume = this.resolve = onConsumeAfterDispose;
        this.getLoader = onLoadAfterDispose;
    };
    HandleManager.prototype.bind = function (key) {
        var handle = this.getHandle(key);
        if (handle) {
            return this._expose(key, function (handleManager) { return handle.promote(handleManager); });
        }
        return this;
    };
    HandleManager.prototype.lock = function () {
        this._isLocked = !!this.options.lockResourcesForChildren;
    };
    HandleManager.prototype.consume = function (dependency, scopeOptions) {
        var _this = this;
        this.lock();
        var key = (dependency.key || dependency);
        var options = dependency.flags;
        var thunk;
        if (key === exports.resourceScopeKey) {
            var resourceScope_1;
            thunk = function () {
                if (!resourceScope_1) {
                    resourceScope_1 = _this.scope.attach(new ResourceScope(_this, scopeOptions || { owner: "" + key }));
                }
                return resourceScope_1;
            };
        }
        else {
            var handle_1 = this._getValidHandle(dependency, []);
            if (!(handle_1 instanceof Error)) {
                thunk = function () { return handle_1.getInstance(key, scopeOptions || { owner: "" + key }); };
            }
            else if (!(options & 4 /* optional */)) {
                throw handle_1;
            }
        }
        return ((options & 1 /* lazy */) ? thunk : (thunk && thunk()));
    };
    HandleManager.prototype.isExposed = function (dependency) {
        return !(this._getValidHandle(dependency, []) instanceof Error);
    };
    HandleManager.prototype.resolve = function (dependencies, scopeOptions) {
        var result = {};
        for (var _i = 0, _a = Object.keys(dependencies); _i < _a.length; _i++) {
            var id = _a[_i];
            var dependency = dependencies[id];
            if (!dependency) {
                continue;
            }
            result[id] = this.consume(dependencies[id], scopeOptions);
        }
        return result;
    };
    HandleManager.prototype._getValidHandle = function (resourceDependency, stack) {
        var key = (resourceDependency.key || resourceDependency);
        var keyId = key.id;
        if (stack.indexOf(key) >= 0) {
            // Circular reference will *always* throw, even on isExposed.
            throw new Error(key + " has a circular dependency.");
        }
        // If we have a handle with a manager cached, return it.
        var localHandle = this._handles[keyId];
        if (localHandle && localHandle.manager) {
            return localHandle;
        }
        var handle = this.getHandle(key);
        if (!handle) {
            return new Error(key + " is being consumed, but has not been exposed by a parent scope.");
        }
        var entry = handle.entry;
        var factory = entry.factory;
        if (!factory) {
            return new Error(key + " is being consumed synchronously, but was exposed asynchronously and has not been loaded.");
        }
        // Find the highest possible scope at which an instance of T can be stored.
        stack.push(key);
        var instanceManager = handle.manager;
        var targetManager = (resourceDependency.flags & 2 /* local */)
            ? this : instanceManager || entry.manager;
        var dependencies = factory.dependencies || {};
        for (var _i = 0, _a = Object.keys(dependencies); _i < _a.length; _i++) {
            var id = _a[_i];
            var dependency = dependencies[id];
            // Dependency on resourceScopeKey does not affect targeting
            if (!dependency || (dependency.key || dependency) === exports.resourceScopeKey) {
                continue;
            }
            // Recurse on dependencies.
            var dependencyHandle = this._getValidHandle(dependency, stack);
            if (dependencyHandle instanceof Error) {
                if (!(dependency.flags & 4 /* optional */)) {
                    stack.pop();
                    return dependencyHandle;
                }
            }
            else if (dependencyHandle.manager.isDescendantOf(targetManager)) {
                targetManager = dependencyHandle.manager;
            }
        }
        stack.pop();
        if (!instanceManager || instanceManager !== targetManager) {
            // Need a new handle.
            handle = new Handle(entry, targetManager);
            // Place on targetManager, so that other levels can reuse
            targetManager._handles[keyId] = handle;
        }
        return this._handles[keyId] = handle;
    };
    HandleManager.prototype._expose = function (key, createHandle) {
        if (this.isDisposed) {
            throw new Error('Cannot expose a resource on a ResourceScope that has been disposed.');
        }
        if (key === exports.resourceScopeKey) {
            throw new Error('It is illegal to expose the ResourceScope key');
        }
        var keyId = key.id;
        var handleManager = this._isLocked ? this.scope.attach(new HandleManager(this)) : this;
        var handles = handleManager._handles;
        if (handles[keyId]) {
            if (this.options.noDoubleExpose) {
                throw new Error(key + " has already been exposed/consumed at this scope.");
            }
            else if (true) {
                log("Duplicate exposure of " + key + ".");
            }
        }
        handles[keyId] = createHandle ? createHandle(handleManager) : void 0;
        return handleManager;
    };
    return HandleManager;
}());
function onConsumeAfterDispose() {
    throw new Error('Cannot consume a resource from a ResourceScope that has been disposed.');
}
function onLoadAfterDispose() {
    throw new Error('Cannot load a resource from a ResourceScope that has been disposed.');
}
function voidify() {
    // Do nothing
}
function getFirstError(errors) {
    for (var key in errors) {
        if (errors[key]) {
            return Promise_1.default.wrapError(errors[key]);
        }
    }
    return Promise_1.default.wrapError(new Error('A dependency could not be loaded.'));
}
var ResourceLoader = (function () {
    function ResourceLoader(handleManager) {
        this._handleManager = handleManager;
        this._loadState = {};
        this._root = handleManager.consume(exports.asyncLoadBarrierKey.optional);
    }
    /**
     * Performs an async load of the specified resource. Should return a successful result if the value is optional or loads.
     * Should return an error result if the value is non-optional and fails to load.
     * Should return the same promise for multiple requests to the same key.
     */
    ResourceLoader.prototype.loadAsync = function (dependency) {
        // Loading the ResourceScope key is always successful.
        var key = dependency.key || dependency;
        if (key === exports.resourceScopeKey) {
            return Promise_1.default.as();
        }
        var options = dependency.flags;
        var promise = this._loadAsync(key);
        return (options & 4 /* optional */) ? promise.then(null, voidify) : promise;
    };
    ResourceLoader.prototype.loadAllAsync = function (dependencies) {
        if (dependencies) {
            var dependencyNames = Object.keys(dependencies);
            var length_1 = dependencyNames.length;
            if (length_1 > 0) {
                var promises = {};
                while (length_1--) {
                    var name_1 = dependencyNames[length_1];
                    var dependency = dependencies[name_1];
                    if (!dependency) {
                        continue;
                    }
                    promises[name_1] = this.loadAsync(dependency);
                }
                return Promise_1.default.all(promises).then(voidify, getFirstError);
            }
        }
        return Promise_1.default.as();
    };
    ResourceLoader.prototype._loadAsync = function (key) {
        var _this = this;
        // Check the cache
        var keyId = key.id;
        var loadStateMap = this._loadState;
        var cached = loadStateMap[keyId];
        if (cached) {
            return cached;
        }
        // Validate that there is a valid handle for the key
        var handleManager = this._handleManager;
        var handle = handleManager.getHandle(key);
        if (!handle) {
            return loadStateMap[keyId] = Promise_1.default.wrapError(new Error(key + " is being loaded, but has no factory/loader."));
        }
        // Mark possible circular reference
        loadStateMap[keyId] = Promise_1.default.as();
        // If we have a synchronously available factory, load its dependencies
        var entry = handle.entry;
        var factory = entry.factory;
        if (factory) {
            return loadStateMap[keyId] = this.loadAllAsync(factory.dependencies);
        }
        // Finally, fall back to the loader
        var loader = entry.loader;
        if (!loader) {
            return loadStateMap[keyId] = Promise_1.default.wrapError(new Error(key + " is being loaded, but no loader was defined."));
        }
        var root = this._root;
        var rootPromise = root && root.wait() || Promise_1.default.as();
        return loadStateMap[keyId] = rootPromise.then(function () { return loader.load(); }).then(function (value) {
            if (true) {
                log("Loaded " + key);
            }
            entry.factory = value;
            var factoryDependencies = value.dependencies;
            if (factoryDependencies) {
                return _this.loadAllAsync(factoryDependencies);
            }
        });
    };
    return ResourceLoader;
}());
var ResourceScope = (function () {
    function ResourceScope(parentOrOptions, options) {
        var parentOwner;
        var handleManager;
        if (parentOrOptions instanceof ResourceScope) {
            handleManager = parentOrOptions._handleManager;
            parentOwner = parentOrOptions._owner;
        }
        else if (parentOrOptions instanceof HandleManager) {
            handleManager = parentOrOptions;
        }
        else {
            options = parentOrOptions || options;
        }
        var scope = new Scope_1.default();
        if (handleManager) {
            if (handleManager.scope.isDisposed) {
                throw new Error('Parent ResourceScope has already been disposed.');
            }
            handleManager.lock();
            if (!handleManager.options.lockResourcesForChildren) {
                this._prepareWrite = this._fork;
            }
        }
        this._handleManager = handleManager || (handleManager = scope.attach(new HandleManager(options)));
        this._scope = scope;
        var owner = options ? options.owner : '';
        this._owner = parentOwner ? parentOwner + " > " + owner : owner;
        if (true) {
            log("new ResourceScope: '" + owner + "'");
        }
    }
    /**
     * Obtains an instance of a resource with the given key exposed by either this scope
     * or a parent. Throws if the resource is not found and isOptional is not set.
     * @param key {ResourceKey} - a shared resource key corresponding to a specific named resource.
     * @returns an instance of the resource, if available in this scope or a parent.
     */
    ResourceScope.prototype.consume = function (dependency) {
        if (true) {
            logConsume(dependency);
        }
        return this._handleManager.consume(dependency);
    };
    /**
     * Obtains an instance of a resource with the given key exposed by either this scope
     * or a parent. Throws if the resource is not found and isOptional is not set.
     * @param key {ResourceKey} - a shared resource key corresponding to a specific named resource.
     * @returns a promise for an instance of the resource, if available in this scope or a parent.
     */
    ResourceScope.prototype.consumeAsync = function (dependency) {
        if (true) {
            logConsume(dependency);
        }
        var handleManager = this._handleManager;
        return preventCancellation(handleManager.getLoader().loadAsync(dependency).then(function () {
            return handleManager.consume(dependency);
        }));
    };
    /**
     * Ensures that the specified dependencies have been loaded for synchronous consumption.
     * @param dependencies {IResourceDependencies} - the dependencies to load.
     * @returns a promise that will complete when the specified resources are available.
     */
    ResourceScope.prototype.load = function (dependencies) {
        return preventCancellation(this._handleManager.getLoader().loadAllAsync(dependencies));
    };
    /**
     * Exposes an asynchronous loader for a resource with the given type-safe key.
     * @param key {ResourceKey} - a shared resource key corresponding to a specific named resource.
     * @param loader - the object that can asynchronously load a factory of the desired type
     */
    ResourceScope.prototype.exposeAsync = function (key, loader) {
        this._expose(key, {
            loader: new CacheOnSuccessLoader(loader)
        });
    };
    /**
     * Exposes a factory for a resource with the given type-safe key.
     * @param key {ResourceKey} - a shared resource key corresponding to a specific named resource.
     * @param factory - the factory that will construct instances when required by this or any child scope.
     */
    ResourceScope.prototype.exposeFactory = function (key, factory) {
        this._expose(key, {
            factory: factory
        });
    };
    /**
     * Exposes a resource with the given type-safe key.
     * @param key {ResourceKey} - a shared resource key corresponding to a specific named resource.
     * @param instance - the instance of the resource to use within this scope.
     */
    ResourceScope.prototype.expose = function (key, instance) {
        if (true) {
            logExpose(key, this._owner, instance);
        }
        this._expose(key, {
            factory: new ConstantResourceFactory(instance)
        }, instance);
        return instance;
    };
    /**
     * Hides any resources exposed by parent scopes for the specified key.
     * @param key {ResourceKey} - a shared resource key corresponding to a specific named resource.
     */
    ResourceScope.prototype.block = function (key) {
        this._handleManager = this._prepareWrite().block(key);
    };
    /**
     * Re-exposes the currently exposed resource at the specified key at the current resource scope.
     * The effect of this is that the lifetime of instances created by the resource system that depend on the
     * specific key will not exceed the lifetime of this resource scope.
     * @param key {ResourceKey} - a shared resource key corresponding to a specific named resource.
     */
    ResourceScope.prototype.bind = function (key) {
        this._handleManager = this._prepareWrite().bind(key);
    };
    /**
     * Checks if a given resource key is defined and known to the system.
     */
    ResourceScope.prototype.isDefined = function (key) {
        var handleManager = this._handleManager;
        return !handleManager.isDisposed && !!handleManager.getHandle(key);
    };
    /**
     * Checks if a given resource key is exposed in the resource scope (including in parent scopes).
     * @param key {ResourceKey} - a shared resource key corresponding to a specific named resource.
     * @return {boolean}
     */
    ResourceScope.prototype.isExposed = function (dependency) {
        if (true) {
            logConsume(dependency);
        }
        var handleManager = this._handleManager;
        return !handleManager.isDisposed && handleManager.isExposed(dependency);
    };
    /**
     * Produces an alternate constructor for the given type which pre-injects the instance with resources
     * before invoking the real constructor.
     * This function preserves the original argument types for the constructor, allowing validation
     * of arguments.
     * @param type - the type of object for which to create an injected constructor.
     * @returns an injected version of the original constructor for the type.
     */
    ResourceScope.prototype.injected = function (type, options) {
        if (options === void 0) { options = {}; }
        var injectChildResourceScope = options.injectChildResourceScope;
        var childOptions = {
            owner: options.owner || type.name
        };
        var resources = injectChildResourceScope ? this._scope.attach(new ResourceScope(this, childOptions)) : this;
        var Injected = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this.resources = resources;
            var instance = type.apply(this, args) || this;
            if (injectChildResourceScope) {
                Disposable_1.hook(instance, disposeInstanceResources);
            }
            return instance;
        };
        if (true) {
            // This pattern results in the correct type being displayed in the debugger
            var wrappedConstructor_2 = Injected;
            Injected = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                logBeginConstruction(type, 'Resources.injected');
                var instance = wrappedConstructor_2.apply(Object.create(type.prototype), args);
                logEndConstruction(type, 'Resources.injected');
                return instance;
            };
        }
        Injected.prototype = type.prototype;
        return Injected;
    };
    /**
     * Resolves a set of resource keys
     *
     * @param dependencies - an object that maps names to {ResourceKey} instances.
     * @returns an object mapping the original names to the resolved resources.
     */
    ResourceScope.prototype.resolve = function (dependencies) {
        return this._handleManager.resolve(dependencies);
    };
    /**
     * Resolves a set of resource keys
     *
     * @param dependencies - an object that maps names to {ResourceKey} instances.
     * @returns an object mapping the original names to the resolved resources.
     */
    ResourceScope.prototype.resolveAsync = function (dependencies) {
        var _this = this;
        return this.load(dependencies).then(function () { return _this.resolve(dependencies); });
    };
    ResourceScope.prototype.resolved = function (type, dependencies) {
        return getResolvedConstructor(type, this.resolve(__assign({}, (type.dependencies || {}), (dependencies || {}))));
    };
    ResourceScope.prototype.resolvedAsync = function (type, dependencies) {
        var _this = this;
        return this.load(__assign({}, (type.dependencies || {}), (dependencies || {}))).then(function () { return _this.resolved(type, dependencies); });
    };
    /**
     * Disposes this resource scope and any resources bound to this scope's lifetime.
     */
    ResourceScope.prototype.dispose = function () {
        this._scope.dispose();
    };
    ResourceScope.prototype._expose = function (key, source, instance) {
        this._handleManager = this._prepareWrite().expose(key, source, instance);
    };
    // These methods are to support legacy call patterns by imitating old behavior
    ResourceScope.prototype._prepareWrite = function () {
        return this._handleManager;
    };
    ResourceScope.prototype._fork = function () {
        delete this._prepareWrite;
        if (true) {
            log("Fork: '" + this._owner + "'");
        }
        return this._scope.attach(new HandleManager(this._handleManager));
    };
    return ResourceScope;
}());
exports.ResourceScope = ResourceScope;
function disposeInstanceResources() {
    this.resources.dispose();
}
if (true) {
    var lastTypeNameId_1 = 0;
    var getTraceState_1 = function () {
        return window['__ResourceTraceState'];
    };
    logBeginConstruction = function (type, wrapperType) {
        var traceState = getTraceState_1();
        if (traceState) {
            var typeName = type['name'] + "_" + ++lastTypeNameId_1;
            var stack = traceState.stack, types = traceState.types;
            var parent_1 = stack[stack.length - 1] || '_root';
            stack.push(typeName);
            (types[parent_1] || (types[parent_1] = {}))[typeName] = wrapperType;
            if (!(typeName in types)) {
                types[typeName] = {};
            }
        }
    };
    logEndConstruction = function (type, wrapperType) {
        var traceState = getTraceState_1();
        if (traceState) {
            traceState.stack.pop();
        }
    };
    logConsume = function (dependency) {
        var traceState = getTraceState_1();
        var key = dependency.key || dependency;
        var isOptional = dependency.flags & 4 /* optional */;
        if (traceState) {
            var stack = traceState.stack, types = traceState.types;
            var parent_2 = stack[stack.length - 1] || '_root';
            (types[parent_2] || (types[parent_2] = {}))[isOptional ? key.id + "?" : key.id] = key.name;
        }
    };
    logExpose = function (key, owner, instance) {
        var traceState = getTraceState_1();
        if (traceState) {
            var typeName = instance && instance.constructor['name'];
            var exposed = traceState.exposed;
            (exposed[owner] || (exposed[owner] = [])).push({
                id: key.id,
                name: key.name,
                type: typeName
            });
        }
    };
    log = function (message) {
        var traceState = getTraceState_1();
        if (traceState) {
            traceState.log.push(message);
        }
    };
}
function preventCancellation(promise) {
    var signal = new Signal_1.default();
    promise.done(function (result) { return signal.complete(result); }, function (error) { return signal.error(error); });
    return signal.getPromise();
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ResourceScope;


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Disposable_1 = __webpack_require__(25);
/**
 * Lifetime manager for scoping components.
 *
 * @export
 * @class Scope
 * @implements {IDisposable}
 *
 * @example
 *  const scope = new Scope();
 *
 *  let instance = new (scope.attached(MyComponent))();
 *
 *  scope.dispose();
 */
var Scope = (function () {
    /**
     * Creates an instance of Scope.
     */
    function Scope() {
        this._disposables = {};
        this._lastDisposableId = 0;
    }
    /**
     * Produces a constructor for instances of a type which will be bound to the lifetime
     * of this scope.
     *
     * @template T the type of object to be created.
     * @param {T} the original constructor for the type.
     * @returns {T} a new constructor to invoke to create the object.
     */
    Scope.prototype.attached = function (type) {
        var scope = this;
        var Attached = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return scope.attach(type.apply(this, args) || this);
        };
        if (true) {
            // This pattern results in the correct type being displayed in the debugger
            var wrappedConstructor_1 = Attached;
            Attached = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return wrappedConstructor_1.apply(Object.create(type.prototype), args);
            };
        }
        Attached.prototype = type.prototype;
        return Attached;
    };
    Scope.prototype.attach = function (instance) {
        var _this = this;
        var id = "" + ++this._lastDisposableId;
        var disposable = Disposable_1.hook(instance, function () {
            delete _this._disposables[id];
        });
        this._disposables[id] = disposable;
        return disposable;
    };
    /**
     * Disposes this scope and any attached objects.
     */
    Scope.prototype.dispose = function () {
        if (!this.isDisposed) {
            this.isDisposed = true;
        }
        var disposables = this._disposables;
        for (var _i = 0, _a = Object.keys(disposables); _i < _a.length; _i++) {
            var id = _a[_i];
            var disposable = disposables[id];
            if (disposable && Disposable_1.isDisposable(disposable)) {
                disposable.dispose();
            }
            delete disposables[id];
        }
    };
    return Scope;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Scope;


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

exports.strings = { "fileSizeTB": "{0} TB", "fileSizeGB": "{0} GB", "fileSizeMB": "{0} MB", "fileSizeKB": "{0} KB", "fileSizeBytesPlural": "{0} bytes", "fileSizeBytesSingular": "1 byte" };


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var HslColor_1 = __webpack_require__(76);
var RgbaColor_1 = __webpack_require__(10);
var Shades_1 = __webpack_require__(128);
/**
 * Utility class with static methods to work with Fabric-style themes.
 */
var FabricTheming = (function () {
    function FabricTheming() {
    }
    /**
     * Generates a palette of Fabric colors from a primary RGB color value.
     * @param {RgbaColor} primaryRgb Primary RGB color used to generate a palette.
     * @param {boolean} inverted Whether the theme is inverted, with a dark background and light foreground.
     */
    FabricTheming.generateFabricColors = function (primaryRgb, inverted) {
        if (inverted === void 0) { inverted = false; }
        var generatedShades = {
            "themeDarker": Shades_1.Shades.Darkest,
            "themeDark": Shades_1.Shades.Darker,
            "themeDarkAlt": Shades_1.Shades.Darker,
            "themeLight": Shades_1.Shades.Lighter,
            "themeLightAlt": Shades_1.Shades.Lighter,
            "themeLighter": Shades_1.Shades.Lightest,
            "themeLighterAlt": Shades_1.Shades.Lightest,
            "themePrimary": Shades_1.Shades.Unshaded,
            "themeAccent": Shades_1.Shades.Unshaded,
            "themeSecondary": Shades_1.Shades.Medium,
            "themeTertiary": Shades_1.Shades.Lighter,
            "themeTertiaryAlt": Shades_1.Shades.Lighter
        };
        // Expected color slots. Start each defaulting to null to avoid warnings about missing slots.
        var colors = FabricTheming._getDefaultThemeTokenMap();
        // Starting points for the generated palette.
        var primaryColor = RgbaColor_1.default.fromRgba(primaryRgb.R, primaryRgb.G, primaryRgb.B);
        for (var shadeName in generatedShades) {
            var shade = generatedShades[shadeName];
            if (inverted && shade !== Shades_1.Shades.Unshaded) {
                shade = Shades_1.Shades.Darkest + Shades_1.Shades.Lightest - shade;
            }
            colors[shadeName] = Shades_1.getShade(primaryColor, shade);
        }
        var accent = colors["themeAccent"];
        colors["themeAccentTranslucent10"] = accent ?
            RgbaColor_1.default.fromRgba(accent.R, accent.G, accent.B, 0.1 * RgbaColor_1.default.maxComponent) : null;
        // Handle neutral slots for inverted themes
        if (inverted) {
            var invertedText = '#f8f8f8'; // neutralLighterAlt
            var invertedNeutralQuaternary = '#6b6b6b';
            var invertedNeutralQuaternaryAlt = '#707070';
            var invertedNeutralColors = {
                'black': '#fff',
                'blackTranslucent40': '#66ffffff',
                'neutralDark': '#fff',
                'neutralPrimary': invertedText,
                'neutralPrimaryTranslucent50': '#7ff8f8f8',
                'neutralPrimaryAlt': '#f4f4f4',
                'neutralSecondary': '#eaeaea',
                'neutralSecondaryAlt': '#c8c8c8',
                'neutralTertiary': '#a6a6a6',
                'neutralTertiaryAlt': '#767676',
                'neutralQuaternary': invertedNeutralQuaternary,
                'neutralQuaternaryAlt': invertedNeutralQuaternaryAlt,
                'cmdbarSelected': invertedNeutralQuaternary,
                'cmdbarSelectedHover': invertedNeutralQuaternaryAlt,
                'neutralLight': '#666666',
                'neutralLighter': '#333',
                'neutralLighterAlt': '#212121',
                'primaryText': invertedText,
                'primaryBackground': '#000',
                'white': '#000',
                'whiteTranslucent40': '#66000000',
                'error': '#f00',
                'errorBackground': '#7e3333'
            };
            for (var neutralSlot in invertedNeutralColors) {
                if (invertedNeutralColors.hasOwnProperty(neutralSlot)) {
                    colors[neutralSlot] =
                        RgbaColor_1.default.fromHtmlColor(invertedNeutralColors[neutralSlot]);
                }
            }
        }
        return colors;
    };
    /**
     * Applies an Hsl delta to an HslColor to produce a new HslColor.
     * @param {HslColor} primaryHsl Starting HSL color value.
     * @param {number} hDelta Delta to apply to the hue.
     * @param {number} sDelta Delta to apply to the saturation.
     * @param {number} lDelta Delta to apply to the luminance.
     */
    FabricTheming.applyHslDelta = function (primaryHsl, hDelta, sDelta, lDelta) {
        var hue = primaryHsl.hue - hDelta;
        if (hue > 1 || hue < 0) {
            hue = hue - Math.floor(hue);
        }
        var sat = primaryHsl.sat - sDelta;
        if (sat > 1) {
            sat = 1;
        }
        else if (sat < 0) {
            sat = 0;
        }
        var lum = primaryHsl.lum - lDelta;
        if (lum > 1) {
            lum = 1;
        }
        else if (lum < 0) {
            lum = 0;
        }
        var hslValue = new HslColor_1.default(hue, sat, lum);
        return hslValue;
    };
    FabricTheming._getDefaultThemeTokenMap = function () {
        return {
            backgroundOverlay: null,
            primaryBackground: null,
            primaryText: null,
            themeDarker: null,
            themeDark: null,
            themeDarkAlt: null,
            themePrimary: null,
            themeSecondary: null,
            themeTertiary: null,
            themeLight: null,
            themeLighter: null,
            themeLighterAlt: null,
            black: null,
            cmdbarSelected: null,
            cmdbarSelectedHover: null,
            neutralDark: null,
            neutralPrimary: null,
            neutralPrimaryAlt: null,
            neutralPrimaryTranslucent50: null,
            neutralSecondary: null,
            neutralSecondaryAlt: null,
            neutralTertiary: null,
            neutralTertiaryAlt: null,
            neutralQuaternary: null,
            neutralQuaternaryAlt: null,
            neutralLight: null,
            neutralLighter: null,
            neutralLighterAlt: null,
            white: null,
            blackTranslucent40: null,
            whiteTranslucent40: null,
            yellow: null,
            yellowLight: null,
            orange: null,
            orangeLight: null,
            redDark: null,
            red: null,
            magentaDark: null,
            magenta: null,
            magentaLight: null,
            purpleDark: null,
            purple: null,
            purpleLight: null,
            blueDark: null,
            blueMid: null,
            blue: null,
            blueLight: null,
            tealDark: null,
            teal: null,
            tealLight: null,
            greenDark: null,
            green: null,
            greenLight: null,
            error: null,
            errorBackground: null,
            success: null,
            successBackground: null,
            alert: null,
            alertBackground: null,
            infoBackground: null,
            info: null,
            orangeLighter: null
        };
    };
    return FabricTheming;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = FabricTheming;


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var RgbaColor_1 = __webpack_require__(10);
/**
 * A color represented by hue, saturation, luminance, and alpha (opacity) components.
 */
var HslColor = (function () {
    /**
     * Constructs a new HSL color object.
     * @param {number} h The hue (between 0 and 1) of the color.
     * @param {number} s The saturation (between 0 and 1) of the color.
     * @param {number} l The luminance (between 0 and 1) of the color.
     * @param {number} a The opacity (between 0 and 255) of the color.
     */
    function HslColor(h, s, l, a) {
        function LimitNumberToUnitInterval(value) {
            return Math.min(1.0, Math.max(0.0, value));
        }
        this.hue = LimitNumberToUnitInterval(h);
        this.sat = LimitNumberToUnitInterval(s);
        this.lum = LimitNumberToUnitInterval(l);
        this.alpha = a == null ? RgbaColor_1.default.maxComponent : a;
    }
    /**
     * Constructs an HslColor from an RgbaColor.
     * @param {RgbaColor} color The color to convert to HSL.
     */
    HslColor.fromRgba = function (color) {
        // Using integer values as much as possible to make comparisons easier.
        // I will indicate non-integer values with a  "_float" suffix.
        // These integer values are each some integer multiple of the true value.
        var scaleFactor = RgbaColor_1.default.maxComponent;
        var h_float = 0.0;
        var s_float = 0.0;
        var l_float = 0.0;
        var r = color.R;
        var g = color.G;
        var b = color.B;
        var cMax = Math.max(Math.max(r, g), b);
        var cMin = Math.min(Math.min(r, g), b);
        var twiceL = cMax + cMin;
        l_float = twiceL / (2 * scaleFactor);
        if (cMax === cMin) {
            s_float = 0.0;
            h_float = -1.0;
        }
        else {
            var dmax = cMax - cMin;
            var pmax = cMax + cMin;
            // The scale factor cancels when we divide scaled values, so divisions can ignore it.
            if (twiceL <= 1 * scaleFactor) {
                s_float = dmax / pmax;
            }
            else {
                s_float = dmax / (2 * scaleFactor - pmax); // Safe, since cMax != cMin
            }
            var dr_float = (cMax - r) * (1 / 6) / dmax;
            var dg_float = (cMax - g) * (1 / 6) / dmax;
            var db_float = (cMax - b) * (1 / 6) / dmax;
            if (r === cMax) {
                h_float = db_float - dg_float;
            }
            else if (g === cMax) {
                h_float = (1 / 3) + dr_float - db_float;
            }
            else {
                h_float = (2 / 3) + dg_float - dr_float;
            }
            if (h_float < 0) {
                h_float += 1.0;
            }
            if (h_float > 1.0) {
                h_float -= 1.0;
            }
        }
        return new HslColor(h_float, s_float, l_float, color.A);
    };
    /**
     * Converts a hue, saturation, or luminance value between 0 and 1 into
     * an integer between 0 and 255.
     */
    HslColor._hslComponentToByte = function (value) {
        var c_rgbaMax = RgbaColor_1.default.maxComponent;
        var result = Math.round(c_rgbaMax * value);
        return Math.min(c_rgbaMax, Math.max(0, result));
    };
    /**
     * Internal method which given the calculated magic numbers and the hue,
     * will calculate the appropriate RGB number.
     * This algorithm is intended to stay in-sync with the equivalent code in
     * mso\officespace\fscolorgallery.cpp.
     * @param {number} m1 The first magic number.
     * @param {number} m2 The second magic number.
     * @param {number} hue The hue to be converted using the magic numbers.
     */
    HslColor._hueToRgbComponent = function (m1, m2, hue) {
        var result;
        if (hue < 0) {
            hue += 1;
        }
        if (hue > 1) {
            hue -= 1;
        }
        if (hue < 1 / 6) {
            result = m1 + (m2 - m1) * hue * 6;
        }
        else if (hue < 1 / 2) {
            result = m2;
        }
        else if (hue < 2 / 3) {
            result = m1 + (m2 - m1) * (2 / 3 - hue) * 6;
        }
        else {
            result = m1;
        }
        return HslColor._hslComponentToByte(result);
    };
    /**
     * Darkens the color by the provided factor.
     * @param {number} factor The factor (between 0 and 1) by which to scale the luminance.
     */
    HslColor.prototype.darken = function (factor) {
        // TODO: Validate input.
        this.lum *= factor;
    };
    /**
     * Lightens the color by the provided factor.
     * @param {number} factor The factor (between 0 and 1) by which to scale the luminance.
     */
    HslColor.prototype.lighten = function (factor) {
        // TODO: Validate input.
        this.lum = this.lum * factor + (1 - factor);
    };
    /**
     * Returns an RgbaColor representation of this HslColor.
     */
    HslColor.prototype.toRgbaColor = function () {
        var r;
        var g;
        var b;
        var hue = this.hue;
        var saturation = this.sat;
        var luminance = this.lum;
        if (Math.round(saturation * RgbaColor_1.default.maxComponent) === 0) {
            r = g = b = HslColor._hslComponentToByte(luminance);
        }
        else {
            var m1;
            var m2;
            if (luminance <= 0.5) {
                m2 = luminance * (1 + saturation);
            }
            else {
                m2 = luminance + saturation - (luminance * saturation);
            }
            m1 = 2 * luminance - m2;
            r = HslColor._hueToRgbComponent(m1, m2, hue + (1 / 3));
            g = HslColor._hueToRgbComponent(m1, m2, hue);
            b = HslColor._hueToRgbComponent(m1, m2, hue - (1 / 3));
        }
        return RgbaColor_1.default.fromRgba(r, g, b, this.alpha);
    };
    return HslColor;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = HslColor;


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var BaseDataStore_1 = __webpack_require__(21);
var DataStoreCachingType_1 = __webpack_require__(15);
var THEME_CACHE_VERSION = '1.7';
var THEME_CACHE_PREFIX = 'odTheme';
var DATA_KEY = 'Data';
var TOKEN_KEY = 'CacheToken';
var VERSION_KEY = 'CacheVersion';
/**
 * Utility methods for caching theme data.
 */
var ThemeCache = (function () {
    function ThemeCache() {
    }
    /**
     * Clears the theme cache.
     */
    ThemeCache.clearThemeCache = function () {
        "use strict";
        var ds = ThemeCache.getThemeDataStore();
        ds.remove(DATA_KEY);
        ds.remove(TOKEN_KEY);
        ds.remove(VERSION_KEY);
    };
    /**
     * Reads the cached theme, if the cacheToken is compatible.
     * @param {string} cacheToken The cached value will only be returned if it has the same cache token.
     */
    ThemeCache.getCachedTheme = function (cacheToken) {
        "use strict";
        var cachedTheme;
        var ds = ThemeCache.getThemeDataStore();
        try {
            // Make sure the data was cached with the expected version and
            // the current theme cache token. Otherwise, return undefined.
            if (cacheToken === ds.getValue(TOKEN_KEY) &&
                THEME_CACHE_VERSION === ds.getValue(VERSION_KEY)) {
                cachedTheme = ds.getValue(DATA_KEY);
            }
        }
        catch (exReadCache) {
        }
        return cachedTheme;
    };
    /**
     * Updates the theme data in the cache.
     * @param {IThemeData} themeData The new theme data to cache.
     */
    ThemeCache.updateThemeCache = function (themeData, cacheToken) {
        "use strict";
        var ds = ThemeCache.getThemeDataStore();
        ds.setValue(DATA_KEY, themeData);
        ds.setValue(TOKEN_KEY, cacheToken || themeData.cacheToken);
        ds.setValue(VERSION_KEY, THEME_CACHE_VERSION);
    };
    /**
     * Returns an instance of the supporting data store for this cache.
     */
    ThemeCache.getThemeDataStore = function () {
        "use strict";
        return new BaseDataStore_1.default(THEME_CACHE_PREFIX, DataStoreCachingType_1.default.local);
    };
    return ThemeCache;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ThemeCache;


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ObjectUtil_1 = __webpack_require__(6);
var StringHelper_1 = __webpack_require__(9);
var UriPartial;
(function (UriPartial) {
    /** The scheme segment of the URI */
    UriPartial[UriPartial["scheme"] = 0] = "scheme";
    /** The scheme and authority segments of the URI */
    UriPartial[UriPartial["authority"] = 1] = "authority";
    /** The scheme, authority, and path segments of the URI */
    UriPartial[UriPartial["path"] = 2] = "path";
    /** The scheme, authority, path, and query segments of the URI */
    UriPartial[UriPartial["query"] = 3] = "query";
})(UriPartial = exports.UriPartial || (exports.UriPartial = {}));
var DELIMITERS = /[;\/?:@&=$,]/;
var AUTHORITY_TERMINATORS = /[\/?]/;
function queryToLower(queryObj) {
    var newQuery = {};
    for (var key in queryObj) {
        if (queryObj.hasOwnProperty(key)) {
            newQuery[key.toLowerCase()] = queryObj[key].toLowerCase();
        }
    }
    return newQuery;
}
/**
 * Partial port of groove\Misc\URI.cpp, which was based on RFC2396 and RFC3986 (http://www.ietf.org/rfc/rfc2396.txt).
 * There are a few differences between this implementation and the RFC:
 *  - Implementation does not support parameters (we don't use them, and partial implementation was incorrect)
 *  - Implementation supports some relative URIs at a glance but more investigation required
 *
 *   foo://example.com:8042/over/there?name=ferret#nose
 *   \_/   \______________/\_________/ \_________/ \__/
 *    |           |            |            |        |
 * scheme     authority       path        query   fragment
 *
 * Possible improvements:
 *  - Support path parameters
 *  - Fully support and test relative URLs based on RFC
 *  - Allow changing/removing remaining URI components (i.e. user, host, port, parameters)
 *  - URI.equals could allow ?foo=1&bar=2 equals ?bar=2&foo=1
 *  - URI.parseURI should have better error handling rather than just setting it as path
 *  - URI.getQueryAsObject should have better error handling for query of "a=1&a=2"
 */
var Uri = (function () {
    function Uri(uriString, options) {
        // All of these are decoded (if relevant) unless specified as encoded.
        this._scheme = "";
        this._user = "";
        this._host = "";
        this._port = "";
        this._path = "";
        this._pathSegments = [];
        this._pathEncoded = "";
        this._query = {};
        this._fragment = "";
        if (options) {
            this._queryCaseInsensitive = !!options.queryCaseInsensitive;
            this._pathCaseInsensitive = !!options.pathCaseInsensitive;
        }
        this._parseURI(uriString);
    }
    Uri.concatenate = function () {
        var uriParts = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            uriParts[_i] = arguments[_i];
        }
        var result = '';
        for (var i = 0; i < uriParts.length; i++) {
            var part = uriParts[i];
            if (i > 0) {
                part = Uri.ensureNoPrecedingSlash(part);
            }
            if (i < uriParts.length - 1) {
                part = Uri.ensureTrailingSlash(part);
            }
            result += part;
        }
        return result;
    };
    Uri.ensureNoPrecedingSlash = function (part) {
        return part[0] === "/" ? part.substr(1) : part;
    };
    Uri.ensureTrailingSlash = function (part) {
        return part[part.length - 1] !== "/" ? (part + "/") : part;
    };
    Uri.prototype.getScheme = function () {
        return this._scheme;
    };
    Uri.prototype.setScheme = function (scheme) {
        this._scheme = scheme;
    };
    Uri.prototype.getAuthority = function () {
        return this._getAuthority(false);
    };
    Uri.prototype.setAuthority = function (authority) {
        this._parseAuthority(authority);
    };
    Uri.prototype.getUser = function () {
        return this._user;
    };
    Uri.prototype.getHost = function () {
        return this._host;
    };
    Uri.prototype.getPort = function () {
        return this._port;
    };
    Uri.prototype.getPath = function (trimTrailingSlash) {
        var retPath = this._path;
        if (Boolean(trimTrailingSlash)) {
            // If the last character is a slash
            if (retPath !== null && retPath.lastIndexOf("/") === (retPath.length - 1)) {
                retPath = retPath.slice(0, -1); //trim last character
            }
        }
        return retPath;
    };
    /**
     * Returns a string containing the leftmost portion of the URI string, ending with the portion specified by part
     */
    Uri.prototype.getLeftPart = function (part) {
        var ret = this._scheme + "://"; // default value is UriPartial.scheme
        if (part === UriPartial.authority) {
            ret += this.getAuthority();
        }
        if (part === UriPartial.path) {
            ret += this.getPath();
        }
        if (part === UriPartial.query) {
            ret += this.getQuery();
        }
        return ret;
    };
    Uri.prototype.setPath = function (path) {
        if (path && path[0] !== "/") {
            path = "/" + path;
        }
        this._parsePath(path);
    };
    Uri.prototype.getPathSegments = function () {
        return this._pathSegments;
    };
    Uri.prototype.getLastPathSegment = function () {
        var pathSegments = this._pathSegments;
        return pathSegments[pathSegments.length - 1] || "";
    };
    Uri.prototype.getQuery = function (encoded) {
        return this._serializeQuery(encoded);
    };
    /**
     * Query is not well-defined but is commonly formatted as key=value and delimited with & or ;
     * (http://www.w3.org/TR/REC-html40/appendix/notes.html#h-B.2.2)
     *  - URI with query "a=1&b=2" or "a=1;b=2" will return {a: "1", b: "2"}
     *  - Mixed-mode will also work: "a=1&b=2;c=3" will return {a: "1", b: "2", c: "3"}
     *  - Assumes that parameters will be unique (i.e. "a=1&a=2" is not allowed and will produce unexpected results)
     */
    Uri.prototype.setQuery = function (query) {
        this.setQueryFromObject(this._deserializeQuery(query));
    };
    Uri.prototype.getQueryAsObject = function () {
        return this._query;
    };
    Uri.prototype.setQueryFromObject = function (queryObj) {
        this._query = {};
        for (var queryKey in queryObj) {
            if (queryObj.hasOwnProperty(queryKey)) {
                this.setQueryParameter(queryKey, queryObj[queryKey]);
            }
        }
    };
    Uri.prototype.getQueryParameter = function (queryKey) {
        var ret = null;
        var query = this._query;
        if (this._queryCaseInsensitive) {
            queryKey = queryKey.toLowerCase();
            for (var key in query) {
                if (query.hasOwnProperty(key) && key.toLowerCase() === queryKey) {
                    ret = query[key];
                }
            }
        }
        else {
            ret = query[queryKey];
        }
        return ret || null;
    };
    /**
     * Adds query parameter to the end if queryKey does not exist, or
     * overwrites existing query value if queryKey already exists.
     */
    Uri.prototype.setQueryParameter = function (queryKey, queryValue, ignoreEmptyValues) {
        if (ignoreEmptyValues === void 0) { ignoreEmptyValues = true; }
        var queryValueDecoded = this._decodeQueryString(queryValue);
        // there is no point adding undefined or modifying existing values to undefined or null.
        if (!!queryValueDecoded || ignoreEmptyValues) {
            this._query[this._decodeQueryString(queryKey)] = queryValueDecoded;
        }
    };
    Uri.prototype.removeQueryParameter = function (queryKey) {
        delete this._query[this._decodeQueryString(queryKey)];
    };
    Uri.prototype.getFragment = function () {
        return this._fragment;
    };
    Uri.prototype.setFragment = function (fragment) {
        if (fragment[0] === "#") {
            fragment = fragment.substring(1);
        }
        // Treat the fragment as a query string (decode + as space) because we pass in
        // query parameters using the fragment on page load.
        this._fragment = this._decodeQueryString(fragment);
    };
    /**
     * Does a strict equality check of URIs (including same query parameters
     * in the same order, and most comparisons case-sensitive).
     * According to RFC3986: scheme and host should be case-insensitive.
     * Note: This does not follow RFC2616's URI Comparison since it is not HTTP-specific.
     *
     * KNOWN ISSUE: Depending on your definition of "incorrect," this could return
     * incorrect results for URI parts that get decoded.
     * For example: http://somewhere/my%2fpath and http://somewhere/my/path
     * will compare as equal because the comparisons are done to decoded versions.
     */
    Uri.prototype.equals = function (uri) {
        return StringHelper_1.equalsCaseInsensitive(this._scheme, uri.getScheme()) &&
            this._user === uri.getUser() &&
            StringHelper_1.equalsCaseInsensitive(this._host, uri.getHost()) &&
            this._port === uri.getPort() &&
            this._fragment === uri.getFragment() &&
            this._equalsCaseAppropriate(this.getPath(/*trimTrailingSlash*/ true), uri.getPath(true), this._pathCaseInsensitive) &&
            this._equalsCaseAppropriate(this.getQuery(), uri.getQuery(), this._queryCaseInsensitive);
    };
    /**
     * Does an equivalence check of two URIs. Checks to see if the URIs are
     * equivalent, but they may not be exact! Strings are compared case
     * insensitive and query parameters can be in any order.
     *
     * KNOWN ISSUE: Depending on your definition of "incorrect," this could return
     * incorrect results for URI parts that get decoded.
     * For example: http://somewhere/my%2fpath and http://somewhere/my/path
     * will compare as equal because the comparisons are done to decoded versions.
     */
    Uri.prototype.equivalent = function (uri) {
        return StringHelper_1.equalsCaseInsensitive(this._scheme, uri.getScheme()) &&
            StringHelper_1.equalsCaseInsensitive(this._user, uri.getUser()) &&
            StringHelper_1.equalsCaseInsensitive(this._host, uri.getHost()) &&
            StringHelper_1.equalsCaseInsensitive(this._port, uri.getPort()) &&
            StringHelper_1.equalsCaseInsensitive(this.getPath(/*trimTrailingSlash*/ true), uri.getPath(true)) &&
            ObjectUtil_1.deepCompare(queryToLower(this.getQueryAsObject()), queryToLower(uri.getQueryAsObject())) &&
            StringHelper_1.equalsCaseInsensitive(this._fragment, uri.getFragment());
    };
    /**
     * Note that this returns the URL encoded/escaped while the getXXX() methods
     * for the individual components return the unescaped strings. Returning a
     * concatenation of the decoded components would change the semantics of the
     * URL. See section 2.4.2 of RFC 2396 (http://www.ietf.org/rfc/rfc2396.txt).
     *
     * Use doNotPercentEncodeHost to indicate that the output should not have a
     * percent-encoded host, such as when passing to the url parameter of
     * XmlHttpRequest.open(). Section 3.2.2 of RFC 2396 only allows alphanumeric
     * characters and hyphen in the host of a URL, so percent-encoded hosts are
     * not allowed. While section 3.2.2 of RFC 3986 does not restrict the host
     * character set anymore, not all browsers can handle a percent-encoded host
     * - DNS lookup fails.  But, they will convert the unencoded Unicode to the
     * IDNA encoding (punycode), so leaving the host as-is in this case is preferred.
     */
    Uri.prototype.toString = function (outputOptions) {
        return this._getStringInternal(/*encoded*/ true, outputOptions);
    };
    /**
     * This method should be used to obtain a string for display purposes only,
     * because as mentioned above, a decoded URL may have different semantics than
     * the encoded version.
     */
    Uri.prototype.getDecodedStringForDisplay = function () {
        return this._getStringInternal(/*encoded*/ false);
    };
    /*
     * Input URI of "foo://user:pass@host.com/alpha/beta/gamma/delta;p;a;r;a;m;s?q=1&u=2&e=3&r=4&y=5#fragment"
     * would return "foo://user:pass@host.com/alpha/beta/gamma/delta;p;a;r;a;m;s";
     */
    Uri.prototype.getStringWithoutQueryAndFragment = function () {
        return this._getStringWithoutQueryAndFragmentInternal(/*encoded=*/ true);
    };
    Uri.prototype._equalsCaseAppropriate = function (a, b, isCaseInsensitive) {
        if (isCaseInsensitive) {
            return StringHelper_1.equalsCaseInsensitive(a, b);
        }
        return a === b;
    };
    Uri.prototype._getStringInternal = function (encoded, outputOptions) {
        var ret = this._getStringWithoutQueryAndFragmentInternal(encoded, outputOptions);
        var query = this.getQuery(encoded);
        if (query) {
            ret += "?" + query;
        }
        if (this._fragment) {
            ret += "#" + (encoded ? encodeURIComponent(this._fragment) : this._fragment);
        }
        return ret;
    };
    Uri.prototype._getStringWithoutQueryAndFragmentInternal = function (encoded, outputOptions) {
        var ret = "";
        if (this._scheme) {
            ret += (encoded ? encodeURIComponent(this._scheme) : this._scheme) + ":";
        }
        // Authority includes user, host, and port
        var authority = this._getAuthority(/*encoded=*/ encoded, outputOptions);
        if (authority) {
            ret += "//" + authority;
        }
        if (this._pathEncoded) {
            ret += (encoded ? this._pathEncoded : this._path);
        }
        return ret;
    };
    Uri.prototype._deserializeQuery = function (queryStr) {
        var queryObj = {};
        if (queryStr.indexOf("?") === 0) {
            queryStr = queryStr.substring(1);
        }
        for (var _i = 0, _a = queryStr.split(/[;&]+/); _i < _a.length; _i++) {
            var queryPart = _a[_i];
            var keyEndIndex = queryPart.indexOf('=');
            // "foo" is a legal query string equivalent to "foo="
            if (keyEndIndex < 0) {
                keyEndIndex = queryPart.length;
            }
            if (keyEndIndex > 0) {
                queryObj[queryPart.substr(0, keyEndIndex)] = queryPart.substr(keyEndIndex + 1);
            }
        }
        return queryObj;
    };
    Uri.prototype._serializeQuery = function (encoded) {
        var queryStr = "";
        for (var queryKey in this._query) {
            if (this._query.hasOwnProperty(queryKey)) {
                var key = queryKey;
                var value = this._query[queryKey];
                if (encoded) {
                    key = encodeURIComponent(key);
                    value = encodeURIComponent(value);
                }
                if (value === null || value === "") {
                    queryStr += key + "=&";
                }
                else {
                    queryStr += key + "=" + value + "&";
                }
            }
        }
        if (queryStr !== "") {
            queryStr = queryStr.slice(0, -1); //trim extra & at the end
        }
        return queryStr;
    };
    Uri.prototype._parseURI = function (uriString) {
        var remainingString = uriString;
        // Find fragment
        var fragmentBeginPos = remainingString.indexOf("#");
        if (fragmentBeginPos >= 0) {
            var fragment = remainingString.substring(fragmentBeginPos + 1);
            this.setFragment(fragment);
            remainingString = remainingString.substring(0, fragmentBeginPos); //remove fragment
        }
        // Find scheme
        var schemeEndPos = remainingString.search(DELIMITERS);
        if (schemeEndPos >= 0) {
            if (remainingString[schemeEndPos] === ":") {
                this.setScheme(remainingString.substring(0, schemeEndPos));
                remainingString = remainingString.substring(schemeEndPos + 1); //remove scheme
            }
        }
        else {
            this.setPath(remainingString);
            return;
        }
        // Find authority
        var authority = "";
        var doubleSlashPos = remainingString.indexOf("//");
        if (doubleSlashPos === 0) {
            remainingString = remainingString.substring(2); //skip the //
            var authorityEndPos = remainingString.search(AUTHORITY_TERMINATORS);
            if (authorityEndPos >= 0) {
                authority = remainingString.substring(0, authorityEndPos);
                remainingString = remainingString.substring(authorityEndPos); //remove authority
            }
            else {
                authority = remainingString;
                remainingString = "";
            }
            this.setAuthority(authority);
            if (!remainingString) {
                this.setPath("");
                return;
            }
        }
        // Find query
        var queryBeginPos = remainingString.indexOf("?");
        if (queryBeginPos >= 0) {
            this.setQuery(remainingString.substring(queryBeginPos + 1));
            remainingString = remainingString.substring(0, queryBeginPos);
        }
        this.setPath(remainingString);
    };
    Uri.prototype._parseAuthority = function (authority) {
        this._host = authority;
        var userNameEndPos = authority.lastIndexOf("@");
        if (userNameEndPos >= 0) {
            this._host = this._host.substring(userNameEndPos + 1);
        }
        var hostPortSeparatorPos = this._host.indexOf(":");
        if (userNameEndPos < 0 && hostPortSeparatorPos < 0) {
            return;
        }
        var authorityComponents = authority;
        if (userNameEndPos < 0) {
            this._host = authorityComponents;
        }
        else {
            this._user = authorityComponents.substring(0, userNameEndPos);
            this._host = authorityComponents.substring(userNameEndPos + 1);
        }
        if (hostPortSeparatorPos >= 0) {
            this._port = this._host.substring(hostPortSeparatorPos + 1);
            this._host = this._host.substring(0, hostPortSeparatorPos);
        }
        this._user = decodeURIComponent(this._user);
        this._host = decodeURIComponent(this._host);
    };
    Uri.prototype._parsePath = function (remainingString) {
        this._path = decodeURIComponent(remainingString);
        var pathSegments = this._pathSegments = [];
        this._pathEncoded = remainingString;
        // We have to split the path BEFORE decoding so that encoded / characters
        // don't get interpreted as path separators.
        var encodedPathSegments = remainingString.split("/");
        for (var i = 0; i < encodedPathSegments.length; ++i) {
            pathSegments[i] = decodeURIComponent(encodedPathSegments[i]);
        }
        // Trims first/last element if empty
        if (pathSegments[0] === "") {
            pathSegments.shift(); // remove first element
        }
        if (pathSegments[pathSegments.length - 1] === "") {
            pathSegments.pop(); // remove last element
        }
    };
    Uri.prototype._getAuthority = function (encoded, outputOptions) {
        if (outputOptions === void 0) { outputOptions = {}; }
        // Note that if encoded is false, doNotPercentEncodeHost doesn't matter - the whole URI (including host) will not be encoded.
        var doNotPercentEncodeHost = outputOptions && outputOptions.doNotPercentEncodeHost;
        var authority = "";
        var user;
        var host;
        var port;
        if (encoded) {
            // While technically a reserved character, ':' is commonly used in the
            // username to denote username:password, so we special case not encoding
            // the first occurence of this character.
            user = encodeURIComponent(this._user).replace("%3A", ":");
            if (doNotPercentEncodeHost) {
                host = this._host;
            }
            else {
                host = encodeURIComponent(this._host);
            }
            port = encodeURIComponent(this._port);
        }
        else {
            user = this._user;
            host = this._host;
            port = this._port;
        }
        if (user !== "") {
            authority = user + "@";
        }
        if (this._host !== "") {
            authority += host;
        }
        if (this._port !== "") {
            authority += ":" + port;
        }
        return authority;
    };
    Uri.prototype._decodeQueryString = function (component) {
        // For query strings only, "+" is a valid substitute for a space, but decodeURIComponent
        // doesn't take this into account. (Note that replace("+", " ") only replaces one +.)
        var result = component;
        try {
            result = decodeURIComponent(component.replace(/\+/g, " "));
        }
        catch (e) {
        }
        return result;
    };
    return Uri;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Uri;


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Sets the virtual parent of an element.
 * Pass `undefined` as the `parent` to clear the virtual parent.
 *
 * @public
 */
function setVirtualParent(child, parent) {
    var virtualChild = child;
    var virtualParent = parent;
    if (!virtualChild._virtual) {
        virtualChild._virtual = {
            children: []
        };
    }
    var oldParent = virtualChild._virtual.parent;
    if (oldParent && oldParent !== parent) {
        // Remove the child from its old parent.
        var index = oldParent._virtual.children.indexOf(virtualChild);
        if (index > -1) {
            oldParent._virtual.children.splice(index, 1);
        }
    }
    virtualChild._virtual.parent = virtualParent || undefined;
    if (virtualParent) {
        if (!virtualParent._virtual) {
            virtualParent._virtual = {
                children: []
            };
        }
        virtualParent._virtual.children.push(virtualChild);
    }
}
exports.setVirtualParent = setVirtualParent;
/**
 * Gets the virtual parent given the child element, if it exists.
 *
 * @public
 */
function getVirtualParent(child) {
    var parent;
    if (child && isVirtualElement(child)) {
        parent = child._virtual.parent;
    }
    return parent;
}
exports.getVirtualParent = getVirtualParent;
/**
 * Gets the element which is the parent of a given element.
 * If `allowVirtuaParents` is `true`, this method prefers the virtual parent over
 * real DOM parent when present.
 *
 * @public
 */
function getParent(child, allowVirtualParents) {
    if (allowVirtualParents === void 0) { allowVirtualParents = true; }
    return child && (allowVirtualParents && getVirtualParent(child) ||
        child.parentNode && child.parentNode);
}
exports.getParent = getParent;
/**
 * Determines whether or not a parent element contains a given child element.
 * If `allowVirtualParents` is true, this method may return `true` if the child
 * has the parent in its virtual element hierarchy.
 *
 * @public
 */
function elementContains(parent, child, allowVirtualParents) {
    if (allowVirtualParents === void 0) { allowVirtualParents = true; }
    var isContained = false;
    if (parent && child) {
        if (allowVirtualParents) {
            isContained = false;
            while (child) {
                var nextParent = getParent(child);
                if (nextParent === parent) {
                    isContained = true;
                    break;
                }
                child = nextParent;
            }
        }
        else if (parent.contains) {
            isContained = parent.contains(child);
        }
    }
    return isContained;
}
exports.elementContains = elementContains;
var _isSSR = false;
/**
 * Helper to set ssr mode to simulate no window object returned from getWindow helper.
 *
 * @public
 */
function setSSR(isEnabled) {
    _isSSR = isEnabled;
}
exports.setSSR = setSSR;
/**
 * Helper to get the window object.
 *
 * @public
 */
function getWindow(rootElement) {
    if (_isSSR || typeof window === 'undefined') {
        return undefined;
    }
    else {
        return (rootElement &&
            rootElement.ownerDocument &&
            rootElement.ownerDocument.defaultView ?
            rootElement.ownerDocument.defaultView :
            window);
    }
}
exports.getWindow = getWindow;
/**
 * Helper to get the document object.
 *
 * @public
 */
function getDocument(rootElement) {
    if (_isSSR || typeof document === 'undefined') {
        return undefined;
    }
    else {
        return rootElement && rootElement.ownerDocument ? rootElement.ownerDocument : document;
    }
}
exports.getDocument = getDocument;
/**
 * Helper to get bounding client rect, works with window.
 *
 * @public
 */
function getRect(element) {
    var rect;
    if (element) {
        if (element === window) {
            rect = {
                left: 0,
                top: 0,
                width: window.innerWidth,
                height: window.innerHeight,
                right: window.innerWidth,
                bottom: window.innerHeight
            };
        }
        else if (element.getBoundingClientRect) {
            rect = element.getBoundingClientRect();
        }
    }
    return rect;
}
exports.getRect = getRect;
/**
 * Determines whether or not an element has the virtual hierarchy extension.
 *
 * @public
 */
function isVirtualElement(element) {
    return element && !!element._virtual;
}



/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var emptyFunction = __webpack_require__(144);

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  var printWarning = function printWarning(format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  warning = function warning(condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

module.exports = warning;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.processStyleName = undefined;
exports.createMarkupForStyles = createMarkupForStyles;

var _camelizeStyleName = __webpack_require__(143);

var _camelizeStyleName2 = _interopRequireDefault(_camelizeStyleName);

var _dangerousStyleValue = __webpack_require__(149);

var _dangerousStyleValue2 = _interopRequireDefault(_dangerousStyleValue);

var _hyphenateStyleName = __webpack_require__(146);

var _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);

var _memoizeStringOnly = __webpack_require__(147);

var _memoizeStringOnly2 = _interopRequireDefault(_memoizeStringOnly);

var _warning = __webpack_require__(80);

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var processStyleName = exports.processStyleName = (0, _memoizeStringOnly2.default)(_hyphenateStyleName2.default); /**
                                                                                                                   * Copyright 2013-present, Facebook, Inc.
                                                                                                                   * All rights reserved.
                                                                                                                   *
                                                                                                                   * This source code is licensed under the BSD-style license found in the
                                                                                                                   * LICENSE file in the root directory of this source tree. An additional grant
                                                                                                                   * of patent rights can be found in the PATENTS file in the same directory.
                                                                                                                   *
                                                                                                                   * @providesModule CSSPropertyOperations
                                                                                                                   */

if (process.env.NODE_ENV !== 'production') {
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;

  var warnHyphenatedStyleName = function warnHyphenatedStyleName(name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, 'Unsupported style property %s. Did you mean %s?%s', name, (0, _camelizeStyleName2.default)(name), checkRenderMessage(owner)) : void 0;
  };

  var warnBadVendoredStyleName = function warnBadVendoredStyleName(name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
  };

  var warnStyleValueWithSemicolon = function warnStyleValueWithSemicolon(name, value, owner) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
  };

  var warnStyleValueIsNaN = function warnStyleValueIsNaN(name, value, owner) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;
    process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
  };

  var checkRenderMessage = function checkRenderMessage(owner) {
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  };

  /**
   * @param {string} name
   * @param {*} value
   * @param {ReactDOMComponent} component
   */
  var warnValidStyle = function warnValidStyle(name, value, component) {
    //eslint-disable-line no-var
    var owner = void 0;
    if (component) {
      owner = component._currentElement._owner;
    }
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name, owner);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name, owner);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value, owner);
    }

    if (typeof value === 'number' && isNaN(value)) {
      warnStyleValueIsNaN(name, value, owner);
    }
  };
}

/**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @param {ReactDOMComponent} component
   * @return {?string}
   */

function createMarkupForStyles(styles, component) {
  var serialized = '';
  for (var styleName in styles) {
    var isCustomProp = styleName.indexOf('--') === 0;
    if (!styles.hasOwnProperty(styleName)) {
      continue;
    }
    if (styleName === 'label') {
      continue;
    }
    var styleValue = styles[styleName];
    if (process.env.NODE_ENV !== 'production' && !isCustomProp) {
      warnValidStyle(styleName, styleValue, component);
    }
    if (styleValue != null) {
      if (isCustomProp) {
        serialized += styleName + ':' + styleValue + ';';
      } else {
        serialized += processStyleName(styleName) + ':';
        serialized += (0, _dangerousStyleValue2.default)(styleName, styleValue, component) + ';';
      }
    }
  }
  return serialized || null;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = capitalizeString;
function capitalizeString(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
module.exports = exports["default"];

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var sp_core_library_1 = __webpack_require__(0);
var SPThemeProvider_1 = __webpack_require__(84);
var SPGlobalErrorHandler_1 = __webpack_require__(175);
var DialogManagerConfiguration_1 = __webpack_require__(43);
var SPPageChrome_module_scss_1 = __webpack_require__(178);
var SPPageChrome = (function () {
    function SPPageChrome(serviceScope) {
        this._createPageChrome();
        DialogManagerConfiguration_1.default.instance.initialize(this.dialogContainerDiv);
        var guid = sp_core_library_1.Guid.parse('48CB5A9D-4E94-40F0-B51F-24480C28E565');
        if (!sp_core_library_1._SPKillSwitch.isActivated(guid, '7/13/2016', 'EnableTheming')) {
            this._spThemeProvider = new SPThemeProvider_1.default(serviceScope);
            this._spThemeProvider.loadThemedStyles();
        }
    }
    SPPageChrome.getInstance = function (serviceScope) {
        if (SPPageChrome._instance === undefined) {
            SPPageChrome._instance = new SPPageChrome(serviceScope);
        }
        return SPPageChrome._instance;
    };
    SPPageChrome.prototype.changeSuiteNavHeight = function (pixels) {
        var top = parseInt(pixels, 10) + 'px';
        if (!this._isFlexLayoutEnabled) {
            this.appDiv.style.top = top;
            this.appDiv.style.height = "calc(100% - " + top + ")";
            this.propertyPaneContainerDiv.style.top = top;
        }
        this.suiteNavDiv.style.height = top;
    };
    SPPageChrome.prototype._createPageChrome = function () {
        document.body.className = 'ms-font-m';
        var pageChromeDiv = document.createElement('div');
        pageChromeDiv.setAttribute('class', this._isFlexLayoutEnabled ? 'SPPageChrome' : 'SPPageChromeNoFlexbox');
        this.suiteNavDiv = document.createElement('div');
        this.suiteNavDiv.setAttribute('id', 'SuiteNavPlaceHolder');
        this.appDiv = document.createElement('div');
        this.appDiv.setAttribute('class', this._isFlexLayoutEnabled ? "SPPageChrome-app" : "SPPageChromeNoFlexbox-app " + SPPageChrome_module_scss_1.default.spPageContentTransition);
        this.appDiv.setAttribute('id', 'spPageChromeAppDiv');
        this.propertyPaneContainerDiv = document.createElement('div');
        if (this._isFlexLayoutEnabled) {
            this.propertyPaneContainerDiv.setAttribute('class', "spPropertyPaneContainer " + SPPageChrome_module_scss_1.default.spPageContentTransition);
            this.propertyPaneContainerDiv.setAttribute('id', 'spPropertyPaneContainer');
        }
        else {
            this.propertyPaneContainerDiv.setAttribute('class', "spPropertyPaneContainerNoFlexbox " + SPPageChrome_module_scss_1.default.spPageContentTransition);
            this.propertyPaneContainerDiv.setAttribute('id', 'spPropertyPaneContainerNoFlexbox');
        }
        pageChromeDiv.appendChild(this.suiteNavDiv);
        if (this._isFlexLayoutEnabled) {
            this.appAndPropertyPaneDiv = document.createElement('div');
            this.appAndPropertyPaneDiv.setAttribute('class', "spAppAndPropertyPanelContainer");
            pageChromeDiv.appendChild(this.appAndPropertyPaneDiv);
            this.appAndPropertyPaneDiv.appendChild(this.appDiv);
            this.appAndPropertyPaneDiv.appendChild(this.propertyPaneContainerDiv);
        }
        else {
            pageChromeDiv.appendChild(this.appDiv);
            pageChromeDiv.appendChild(this.propertyPaneContainerDiv);
        }
        this.dialogContainerDiv = document.createElement('div');
        this.dialogContainerDiv.setAttribute('id', 'spDialogContainerDiv');
        pageChromeDiv.appendChild(this.dialogContainerDiv);
        document.body.appendChild(pageChromeDiv);
        if (this._shouldHandleGlobalErrors && !window.onerror) {
            window.onerror = SPGlobalErrorHandler_1.default.basicTracingHandler;
        }
    };
    Object.defineProperty(SPPageChrome.prototype, "_shouldHandleGlobalErrors", {
        get: function () {
            return !sp_core_library_1._SPKillSwitch.isActivated(sp_core_library_1.Guid.parse('BAC66CD5-F1C1-4BDD-9FFD-A8C6044EB285'), '10/13/2016', 'GlobalErrorHandler');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SPPageChrome.prototype, "_isFlexLayoutEnabled", {
        get: function () {
            return !sp_core_library_1._SPKillSwitch.isActivated(sp_core_library_1.Guid.parse('E17AF313-E05B-4055-BDF7-7CD508F8853F'), '5/9/2017', 'Switch to flexbox');
        },
        enumerable: true,
        configurable: true
    });
    return SPPageChrome;
}());
exports.default = SPPageChrome;


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var lodash = __webpack_require__(189);
var odsp_utilities_bundle_1 = __webpack_require__(22);
var odsp_utilities_bundle_2 = __webpack_require__(22);
var odsp_utilities_bundle_3 = __webpack_require__(22);
var sp_core_library_1 = __webpack_require__(0);
var sp_telemetry_1 = __webpack_require__(2);
var sp_http_1 = __webpack_require__(17);
var sp_page_context_1 = __webpack_require__(38);
var SPWebTemplateIds_1 = __webpack_require__(179);
var theme_1 = __webpack_require__(136);
var SPThemeProvider = (function () {
    function SPThemeProvider(serviceScope) {
        var _this = this;
        if (true) {
            window['__loadTheme'] = theme_1.loadTheme; 
        }
        serviceScope.whenFinished(function () {
            _this._pageContext = serviceScope.consume(sp_page_context_1.PageContext.serviceKey);
            _this._httpClient = serviceScope.consume(sp_http_1.SPHttpClient.serviceKey);
            _this._themeProvider = new odsp_utilities_bundle_3.ThemeProvider(_this.loadData.bind(_this));
            try {
                var contextUri = new odsp_utilities_bundle_3.Uri(window.location.href);
                _this._themeOverride = contextUri.getQueryParameter('ThemeOverride');
            }
            catch (ignoredUrlException) {
            }
        });
    }
    SPThemeProvider._deleteNullThemeColor = function (palette) {
        for (var color in palette) {
            if (palette.hasOwnProperty(color) && !palette[color]) {
                delete palette[color];
            }
        }
    };
    Object.defineProperty(SPThemeProvider, "_dontOptimizeLoadTheme", {
        get: function () {
            return sp_core_library_1._SPKillSwitch.isActivated(sp_core_library_1.Guid.parse('{433B8077-ACC7-42F1-A11F-F6C38EC90607}'), '7/31/2017', 'Do not optimize loadTheme for empty color palette');
        },
        enumerable: true,
        configurable: true
    });
    SPThemeProvider._createDefaultTheme = function () {
        var themeData = {
            backgroundImageUri: undefined,
            cacheToken: undefined,
            isDefault: undefined,
            isInverted: false,
            palette: undefined,
            version: '1.0'
        };
        return themeData;
    };
    SPThemeProvider.prototype.loadThemedStyles = function () {
        var cacheToken = this._getCacheToken();
        this._themeProvider.loadThemeTokenMap(cacheToken)
            .then(function (palette) {
            SPThemeProvider._deleteNullThemeColor(palette);
            if (SPThemeProvider._dontOptimizeLoadTheme ||
                SPThemeProvider._currentPalette ?
                !lodash.isEqual(SPThemeProvider._currentPalette, palette) :
                !lodash.isEmpty(palette)) {
                theme_1.loadTheme({ palette: palette });
            }
            SPThemeProvider._currentPalette = palette;
        });
    };
    SPThemeProvider.prototype.loadData = function () {
        var _this = this;
        var tagName = 'SPThemeProvider.loadData';
        var qosMonitor = new sp_telemetry_1._QosMonitor(tagName);
        if (this._pageContext.legacyPageContext.themedCssFolderUrl) {
            var getThemeDataUrl_1 = odsp_utilities_bundle_3.WebTheme.makeWebThemeRestUrl(this._pageContext.site.serverRelativeUrl, this._pageContext.cultureInfo.currentUICultureName, this._themeOverride);
            return new odsp_utilities_bundle_1.Promise(function (resolve, reject) {
                _this._httpClient.get(getThemeDataUrl_1, sp_http_1.SPHttpClient.configurations.v1)
                    .then(function (response) {
                    if (response.status === 200) {
                        return response.json()
                            .then(function (json) {
                            var themeDataRaw = JSON.parse(json.value);
                            if (themeDataRaw) {
                                var themeData = odsp_utilities_bundle_3.WebTheme.processRawThemeData(themeDataRaw);
                                themeData.cacheToken = _this._pageContext.legacyPageContext.themedCssFolderUrl;
                                qosMonitor.writeSuccess();
                                resolve(themeData);
                            }
                            else {
                                qosMonitor.writeUnexpectedFailure();
                                resolve(undefined);
                            }
                        });
                    }
                    else {
                        qosMonitor.writeUnexpectedFailure(tagName, new Error(response.statusText));
                        resolve(undefined);
                    }
                });
            });
        }
        else if (this._pageContext.legacyPageContext.groupColor) {
            var htmlThemeColor = this._pageContext.legacyPageContext.groupColor;
            var rgbaThemeColor = odsp_utilities_bundle_2.RgbaColor.fromHtmlColor(htmlThemeColor);
            if (rgbaThemeColor) {
                var fabTheme = {
                    backgroundImageUri: undefined,
                    cacheToken: this._getCacheToken(),
                    isDefault: false,
                    isInverted: false,
                    palette: odsp_utilities_bundle_2.FabricTheming.generateFabricColors(rgbaThemeColor),
                    version: '1'
                };
                return odsp_utilities_bundle_1.Promise.wrap(fabTheme);
            }
            else {
                return odsp_utilities_bundle_1.Promise.wrap();
            }
        }
        else {
            qosMonitor.writeSuccess();
            return odsp_utilities_bundle_1.Promise.wrap(SPThemeProvider._createDefaultTheme());
        }
    };
    SPThemeProvider.prototype._getCacheToken = function () {
        var webTemplate = String(this._pageContext.web.templateName);
        var groupColor = webTemplate === SPWebTemplateIds_1.default.teamSite ||
            webTemplate === SPWebTemplateIds_1.default.groupSite ? this._pageContext.legacyPageContext.groupColor : undefined;
        var groupColorToken = groupColor && (groupColor + ';web#' + webTemplate);
        return this._themeOverride || this._pageContext.legacyPageContext.themedCssFolderUrl || groupColorToken;
    };
    SPThemeProvider._currentPalette = undefined;
    return SPThemeProvider;
}());
exports.default = SPThemeProvider;


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var sp_telemetry_1 = __webpack_require__(2);
var sp_core_library_1 = __webpack_require__(0);
var sp_http_1 = __webpack_require__(17);
var sp_loader_1 = __webpack_require__(188);
var odsp_utilities_bundle_1 = __webpack_require__(22);
var ISuiteNavDataSource_1 = __webpack_require__(36);
var SPOSuiteNavDataSource_1 = __webpack_require__(186);
var OnPremSuiteNavDataSource_1 = __webpack_require__(185);
var O365ShellWrapper_1 = __webpack_require__(183);
var SPPageChrome_1 = __webpack_require__(83);
var SuiteNavManager = (function () {
    function SuiteNavManager(suiteNavDiv, serviceScope) {
        var _this = this;
        this._suiteNavDiv = suiteNavDiv;
        this._serviceScope = serviceScope;
        serviceScope.whenFinished(function () {
            _this._httpClient = serviceScope.consume(sp_http_1.SPHttpClient.serviceKey);
        });
    }
    SuiteNavManager._updateCache = function (model, service) {
        SuiteNavManager._cache.setValue(SuiteNavManager.DATA_KEY, model);
        SuiteNavManager._cache.setValue(SuiteNavManager.DATE_KEY, new Date());
        SuiteNavManager._cache.setValue(SuiteNavManager.VERSION_KEY, SuiteNavManager.CACHE_VERSION);
        SuiteNavManager._cache.setValue(SuiteNavManager.SESSION_KEY, true, odsp_utilities_bundle_1.DataStoreCachingType.session);
        SuiteNavManager._cache.setValue(SuiteNavManager.SERVICE_KEY, service);
    };
    SuiteNavManager._clearCache = function () {
        SuiteNavManager._cache.remove(SuiteNavManager.DATA_KEY);
        SuiteNavManager._cache.remove(SuiteNavManager.DATE_KEY);
        SuiteNavManager._cache.remove(SuiteNavManager.VERSION_KEY);
        SuiteNavManager._cache.remove(SuiteNavManager.SERVICE_KEY);
    };
    SuiteNavManager.prototype.setComponentVisibility = function (setVisible) {
        var _this = this;
        this._suiteNavDiv.hidden = !setVisible;
        if (this._suiteNavModelPromise) {
            this._suiteNavModelPromise.then(function (model) {
                if (model && model.NavBarData && model.NavBarData.Dimensions) {
                    SPPageChrome_1.default.getInstance(_this._serviceScope).changeSuiteNavHeight(setVisible ?
                        model.NavBarData.Dimensions.Top :
                        '0px');
                }
            });
        }
    };
    SuiteNavManager.prototype.loadSuiteNav = function (suiteNavConfig) {
        var _this = this;
        sp_core_library_1.Validate.isNotNullOrUndefined(suiteNavConfig, 'suiteNavConfig');
        this._suiteNavManagerConfiguration = suiteNavConfig;
        SPPageChrome_1.default.getInstance(this._serviceScope).changeSuiteNavHeight(SuiteNavManager._defaultSuiteNavHeight);
        this._suiteNavManagerConfiguration = suiteNavConfig;
        this._suiteNavManagerConfiguration.o365ShellRenderSettings.top = this._suiteNavDiv.id;
        var o365ShellWrapper = new O365ShellWrapper_1.default();
        this._suiteNavModelPromise = this._getSuiteNavModel(o365ShellWrapper.DoesShellExist());
        this._suiteNavModelPromise.then(function (suiteNavModel) {
            var suiteNavJSPromise = !o365ShellWrapper.DoesShellExist() ?
                _this._getSuiteNavShell(suiteNavModel.CssUrl, suiteNavModel.JsUrl) :
                Promise.resolve(undefined);
            suiteNavJSPromise.then(function () {
                _this._renderSuiteNav(o365ShellWrapper, suiteNavModel.NavBarData);
            });
        });
    };
    SuiteNavManager.prototype._getSuiteNavModel = function (forceFetchData) {
        var _this = this;
        var suiteNavModelPromise;
        if (!forceFetchData && this._isCacheValid() && !this._isCacheOutdated()) {
            suiteNavModelPromise = this._loadSuiteNavFromCache();
        }
        else {
            SuiteNavManager._clearCache();
            suiteNavModelPromise = this._loadSuiteNavFromServer();
        }
        return suiteNavModelPromise.then(function (model) {
            model.NavBarData =
                _this._suiteNavManagerConfiguration.modifySuiteNavData(model.NavBarData);
            model.CacheToken = _this._suiteNavManagerConfiguration.cacheToken;
            model.UserIdentifier = _this._suiteNavManagerConfiguration.systemUserKey;
            SuiteNavManager._updateCache(model, _this._suiteNavDataSource.suiteNavService);
            if (model && model.NavBarData && model.NavBarData.Dimensions && model.NavBarData.Dimensions.Top) {
                SPPageChrome_1.default.getInstance(_this._serviceScope).changeSuiteNavHeight(model.NavBarData.Dimensions.Top);
            }
            return model;
        });
    };
    SuiteNavManager.prototype._loadSuiteNavFromCache = function () {
        var _this = this;
        return new Promise(function (complete) {
            SuiteNavManager._cache.getValue(SuiteNavManager.SERVICE_KEY) ===
                ISuiteNavDataSource_1.SuiteNavSource.SPO ?
                _this._suiteNavDataSource = _this._createSPODataSource() :
                _this._suiteNavDataSource = _this._createOnPremDataSource();
            complete(SuiteNavManager._cache.getValue(SuiteNavManager.DATA_KEY));
        });
    };
    SuiteNavManager.prototype._loadSuiteNavFromServer = function () {
        var _this = this;
        this._suiteNavDataSource = this._createSPODataSource();
        var onPremDataSource = this._createOnPremDataSource();
        var onPremSuiteNavResponse = onPremDataSource.loadData();
        onPremSuiteNavResponse.catch(function () {
            _this._createSuiteNavErrorLogEntry('loadData', 'Failed to retrieve Hybrid SuiteNavData');
        });
        return this._suiteNavDataSource.loadData().then(function (response) {
            return response;
        }).catch(function () {
            _this._createSuiteNavErrorLogEntry('loadData', 'Failed to retrieve SPO SuiteNavData');
            _this._suiteNavDataSource = onPremDataSource;
            return onPremSuiteNavResponse;
        });
    };
    SuiteNavManager.prototype._getSuiteNavShell = function (cssUrl, jsUrl) {
        sp_core_library_1.Validate.isNonemptyString(cssUrl, 'cssUrl');
        sp_core_library_1.Validate.isNonemptyString(jsUrl, 'jsUrl');
        var element = document.createElement('link');
        element.rel = 'stylesheet';
        element.type = 'text/css';
        element.href = cssUrl;
        document.head.appendChild(element);
        return sp_loader_1.SPComponentLoader.loadScript(jsUrl);
    };
    SuiteNavManager.prototype._renderSuiteNav = function (o365Shell, navBarData) {
        var _this = this;
        o365Shell.SetData(navBarData);
        o365Shell.RenderAsync(this._suiteNavManagerConfiguration.o365ShellRenderSettings, function () {
            _this._onRender(o365Shell);
        }, function () {
            _this._onPostRender();
        });
        o365Shell.OnHasMember('LoadShellPlus', function () {
            _this._loadShellPlus(o365Shell);
        });
    };
    SuiteNavManager.prototype._onRender = function (o365Shell) {
        if (this._suiteNavManagerConfiguration.hamburgerCallback) {
            if (o365Shell.Navigation.OnHamburgerButtonClick) {
                o365Shell.Navigation.OnHamburgerButtonClick(this._suiteNavManagerConfiguration.hamburgerCallback);
            }
        }
    };
    SuiteNavManager.prototype._onPostRender = function () {
        if (this._suiteNavManagerConfiguration.suiteNavPostRenderCallback) {
            this._suiteNavManagerConfiguration.suiteNavPostRenderCallback();
        }
    };
    SuiteNavManager.prototype._loadShellPlus = function (o365Shell) {
        var _this = this;
        return new Promise(function () {
            o365Shell.LoadShellPlus();
        }).catch(function (errorMessage) {
            _this._createSuiteNavErrorLogEntry('loadShellPlus', errorMessage);
        });
    };
    SuiteNavManager.prototype._isCacheValid = function () {
        var model = SuiteNavManager._cache.getValue(SuiteNavManager.DATA_KEY);
        var oldVersion = SuiteNavManager._cache.getValue(SuiteNavManager.VERSION_KEY);
        var cssJsUrlPresent = model && model.NavBarData && (model.JsUrl.length > 0 && model.CssUrl.length > 0);
        var sameVersion = oldVersion === SuiteNavManager.CACHE_VERSION;
        var sameUser = model && model.UserIdentifier === this._suiteNavManagerConfiguration.systemUserKey;
        var sameCacheToken = model && model.CacheToken === this._suiteNavManagerConfiguration.cacheToken;
        return cssJsUrlPresent && sameVersion && sameUser && sameCacheToken;
    };
    SuiteNavManager.prototype._isCacheOutdated = function () {
        var cacheDate = Date.parse(SuiteNavManager._cache.getValue(SuiteNavManager.DATE_KEY));
        var currentDate = new Date();
        var cachedThisSession = SuiteNavManager._cache.getValue(SuiteNavManager.SESSION_KEY, odsp_utilities_bundle_1.DataStoreCachingType.session);
        return (isNaN(cacheDate) ||
            currentDate.getTime() - cacheDate > 24 * 60 * 60 * 1000 ||
            (odsp_utilities_bundle_1.DataStore.hasStorageType(odsp_utilities_bundle_1.DataStoreCachingType.session) && !cachedThisSession));
    };
    SuiteNavManager.prototype._createSPODataSource = function () {
        return new SPOSuiteNavDataSource_1.default(this._httpClient, this._suiteNavManagerConfiguration.currentUICultureName, this._suiteNavManagerConfiguration.webServerRelativeUrl);
    };
    SuiteNavManager.prototype._createOnPremDataSource = function () {
        return new OnPremSuiteNavDataSource_1.default(this._httpClient, this._suiteNavManagerConfiguration.currentUICultureName, this._suiteNavManagerConfiguration.webServerRelativeUrl);
    };
    SuiteNavManager.prototype._createSuiteNavErrorLogEntry = function (moduleName, errorMessage) {
        sp_telemetry_1._TraceLogger.logVerbose(SuiteNavManager._logSource, 'SuiteNavManager ' + moduleName + ' ' + errorMessage);
    };
    SuiteNavManager._defaultSuiteNavHeight = '50px';
    SuiteNavManager.CACHE_PREFIX = 'SPPPLATSuiteNav';
    SuiteNavManager.SERVICE_KEY = 'SuiteNavService';
    SuiteNavManager.DATA_KEY = 'Data';
    SuiteNavManager.DATE_KEY = 'CacheDate';
    SuiteNavManager.VERSION_KEY = 'CacheVersion';
    SuiteNavManager.SESSION_KEY = 'CachedThisSession';
    SuiteNavManager.CACHE_VERSION = 1;
    SuiteNavManager._cache = new odsp_utilities_bundle_1.DataStore(SuiteNavManager.CACHE_PREFIX, odsp_utilities_bundle_1.DataStoreCachingType.local);
    SuiteNavManager._logSource = sp_telemetry_1._LogSource.create('SuiteNavManager');
    return SuiteNavManager;
}());
exports.default = SuiteNavManager;


/***/ }),
/* 86 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_86__;

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Shell_1 = __webpack_require__(180);
var _spShell = Shell_1.default.getInstance();
exports.default = _spShell;


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

var content = __webpack_require__(89);
var loader = __webpack_require__(24);

if(typeof content === "string") content = [[module.i, content]];

// add the styles to the DOM
for (var i = 0; i < content.length; i++) loader.loadStyles(content[i][1], true);

if(content.locals) module.exports = content.locals;

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(141)();
// imports


// module
exports.push([module.i, "body{height:100vh;margin:0;padding:0}.SPPageChrome{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;height:100%}#SuiteNavPlaceHolder{background-color:#333;width:100%;z-index:5}#SuiteNavPlaceHolder:empty{display:none}.SPPageChrome-app,.SPPageChrome-app>div{-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;display:-webkit-box;display:-ms-flexbox;display:flex;max-width:100%}.SPPageChromeNoFlexbox-app{position:absolute;right:0;bottom:0;left:0;overflow:visible}.spAppAndPropertyPanelContainer{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;height:100%}.spPropertyPaneContainer{width:0;position:relative;z-index:999}.spPropertyPaneContainer button{display:none}.spPropertyPaneContainerNoFlexbox{top:50px;position:fixed;right:-340px;bottom:0;z-index:999}.spPageContentTransition_dd91ea77{transition:width 367ms cubic-bezier(.1,.9,.2,1);-webkit-transition:width 367ms cubic-bezier(.1,.9,.2,1)}", ""]);

// exports


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Uri_1 = __webpack_require__(78);
var Qos_event_1 = __webpack_require__(13);
var EXPIRATION_TOKEN = '_eat_';
var EXPIRATION_TOKEN_SEPARATOR = '_';
// @internalremarks: Note - 'UserPhotoAspx' is defined by a constant UserPhotoKey specified in
// @internalremarks: depot/devmainoverride/sporel/sts/stsom/SitePages/SitePageAlternativeUrlMapBuilder.cs
var USER_PHOTO_KEY = 'UserPhotoAspx';
var DEFAULT_USER_PHOTO_BASE_URL = '/_layouts/15/userphoto.aspx';
var USER_PHOTO_SIZE_PARAM = 'size';
var USER_PHOTO_ACCOUNT_NAME_PARAM = 'accountname';
var _urlTable = {};
var QOS_TRYGETALTERNATIVEURLFAILURE = 'TryGetAlternativeUrlFailure';
/**
 * If an alternative URL is available, then this returns the URL that should be used
 * for rendering the image.  Otherwise, undefined is returned.
 */
function tryGetAlternativeUrl(primaryUrl) {
    try {
        var alternativeUrl = _urlTable && _urlTable[primaryUrl];
        if (!alternativeUrl) {
            return undefined;
        }
        // Check for expired items.
        // Private CDN item will have a query string parameter _eat_=xxxx_yyyyyyyyyy, where xxxx is an expiration
        // time in Epoch format (number of seconds since 1970/1/1).
        // The real URL example is
        // https://privatecdn.sharepointonline.com/msft.spoppe.com/sites/wex/SiteAssets/SitePages/SamplePage/image.jpg
        //   ?_eat_=1480392900_16330f287fe138cea33c424221c6fa1d79e6cdeb470bc0000894645994ba1a14
        //   &_oat_=1480392900_f312136e0ffd87c26165973f042a98dfd40130d4981d6d3fd71643c7e4fdb485
        //   &width=300
        // If the parameter is available in the alternative Url,
        // check whether this is at least 30 seconds out in the future, and return the alternative
        // URL only if still valid. Return undefined otherwise, falling back to the original non-optimized behavior
        // note that the URLs provided by the server always have at least 15 minutes of the valid time, so it is
        // unlikely expired situation will appear too often.
        var uri = new Uri_1.default(alternativeUrl);
        var authToken = uri.getQueryParameter(EXPIRATION_TOKEN);
        if (authToken) {
            var split = authToken.split(EXPIRATION_TOKEN_SEPARATOR);
            var expirationTime = undefined;
            if (split.length === 2) {
                expirationTime = Number(split[0]);
            }
            if (!expirationTime) {
                // hightly unexpected, but logging nevertheless
                var qosEvent = new Qos_event_1.Qos({ name: QOS_TRYGETALTERNATIVEURLFAILURE });
                qosEvent.end({
                    resultType: Qos_event_1.ResultTypeEnum.Failure,
                    resultCode: 'EatParamUnexpectedFormat',
                    extraData: {
                        eatParam: authToken
                    }
                });
                return alternativeUrl;
            }
            // Shift expiration time by 30 seconds to ensure the browser has ample time to fetch the resource
            // before it actually does expire.
            expirationTime -= 30;
            // getTime() returns Epoch time in milliseconds.
            if (Date.now() / 1000 > expirationTime) {
                delete _urlTable[primaryUrl];
                return undefined;
            }
        }
        return alternativeUrl;
    }
    catch (ex) {
        var qosEvent = new Qos_event_1.Qos({ name: QOS_TRYGETALTERNATIVEURLFAILURE });
        qosEvent.end({
            resultType: Qos_event_1.ResultTypeEnum.Failure,
            resultCode: 'Unexpected',
            extraData: {
                error: ex
            }
        });
    }
    return undefined;
}
exports.tryGetAlternativeUrl = tryGetAlternativeUrl;
/**
 * Updates the map by adding the specified entries, overwriting any previous entries
 * with the same key names.
 */
function updateMap(alternativeUrlTable) {
    if (!alternativeUrlTable) {
        return;
    }
    for (var key in alternativeUrlTable) {
        _urlTable[key] = alternativeUrlTable[key];
    }
    ;
}
exports.updateMap = updateMap;
/**
 * For diagnostic purposes, this returns the current map.
 * The key is the primaryUrl, and the value is the alternativeUrl.
 */
function getUrlTable() {
    return _urlTable;
}
exports.getUrlTable = getUrlTable;
/**
 * UserPhoto mapping is auto added into the Alternative URL map when private CDN is enabled
 * and tenant admin configured origin * /userphoto.aspx
 * If CDN is not enabled, the default _layouts/15/userphoto.aspx will be used.
 * @param size Parameter may have value S,L,M. If none or other is provided, S will be used by default.
 */
function getUserPhotoUrl(accountName, size) {
    var userPhotoBaseUrl = tryGetAlternativeUrl(USER_PHOTO_KEY) || DEFAULT_USER_PHOTO_BASE_URL;
    var sizeLetter;
    switch (size) {
        case 2 /* Medium */:
            sizeLetter = 'M';
            break;
        case 3 /* Large */:
            sizeLetter = 'L';
            break;
        default:
            // Default to small if size is not provided. Server will assume small either way, but having the
            // parameter explicitly will reduce variability in CDN, and will increase probability of the cache hit.
            sizeLetter = 'S';
    }
    var userPhotoUri = new Uri_1.default(userPhotoBaseUrl);
    userPhotoUri.setQueryParameter(USER_PHOTO_SIZE_PARAM, sizeLetter);
    // empty accountName will resolve to the default doughboy picture
    userPhotoUri.setQueryParameter(USER_PHOTO_ACCOUNT_NAME_PARAM, accountName || '');
    return userPhotoUri.toString();
}
exports.getUserPhotoUrl = getUserPhotoUrl;


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var EventBase_1 = __webpack_require__(8);
var Manager_1 = __webpack_require__(5);
var Beacon_event_1 = __webpack_require__(19);
var ErrorHelper_1 = __webpack_require__(3);
var BeforeUnload_1 = __webpack_require__(93);
var PlatformDetection_1 = __webpack_require__(18);
var StringHelper_1 = __webpack_require__(9);
var ARIA_QOS_NAME = "AriaBeacon";
var ariaTelemetry;
var logger;
var config = {
    logStartEvents: false,
    Init: init
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = config;
function init(tenantToken, context, aria) {
    try {
        ariaTelemetry = aria;
        config.logStartEvents = true;
        var platformDetection = new PlatformDetection_1.default();
        ariaTelemetry.LogManager.initialize(tenantToken);
        logger = new ariaTelemetry.Logger();
        var semanticContext = logger.getSemanticContext();
        var contextMap = semanticContext['contextMap'];
        contextMap.Add("AppInfo.Session", context.session);
        semanticContext.setAppVersion(context.version);
        contextMap.Add("AppInfo.Manifest", context.manifest);
        semanticContext.setUserLanguage(context.market || '');
        semanticContext.setUserId(context.userId);
        semanticContext.setDeviceOsName(platformDetection.osName);
        semanticContext.setDeviceOsVersion(platformDetection.osVersion);
        BeforeUnload_1.default.init();
        BeforeUnload_1.default.registerHandler(function (unload) {
            if (unload) {
                ariaTelemetry.LogManager.flush(null);
            }
            return null;
        });
        var loggerContext = {
            AccountType: EventBase_1.AccountType[context.accountType],
            Environment: context.environment,
            Workload: context.workload,
            IsAuthenticated: context.isAuthenticated ? 1 : 0,
            BrowserName: platformDetection.browserName,
            BrowserMajVer: platformDetection.browserMajor,
            BrowserMinVer: platformDetection.browserMinor,
            BrowserUserAgent: platformDetection.userAgent,
            BrowserIsMobile: platformDetection.isMobile,
            SiteSubscriptionId: context.siteSubscriptionId || ""
        };
        if (context.farmLabel) {
            loggerContext.FarmLabel = context.farmLabel;
        }
        for (var key in loggerContext) {
            logger.setContext(key, loggerContext[key]);
        }
        // Listen to aria beaconing and send qos events to monitor its success rate
        ariaTelemetry.LogManager.addCallbackListener(function (isSuccess, statusCode, tenantToken, events) {
            new Beacon_event_1.Beacon({
                name: ARIA_QOS_NAME,
                retryCount: 0,
                totalRetries: 0,
                eventCount: events ? events.length : 0
            }).end({
                success: isSuccess === 0,
                status: statusCode + ''
            });
            if (true) {
                // Display errors if the aria logger is failing to log
                if (isSuccess !== 0) {
                    ErrorHelper_1.default.log(new Error("Aria logger failed with status code " + statusCode));
                }
            }
        });
        Manager_1.Manager.addLogHandler(safeLogEvent).forEach(safeLogEvent);
    }
    catch (e) {
        if (e instanceof ariaTelemetry.Exception) {
            e = new Error("Aria error: " + e.toString());
        }
        ErrorHelper_1.default.log(e);
    }
}
function safeLogEvent(event) {
    // Try/catch individual events so that one bad event doesn't cause the rest to fail to get logged
    try {
        logEvent(event);
    }
    catch (exception) {
        var error = void 0;
        if (exception instanceof ariaTelemetry.Exception) {
            error = new Error("Aria error: " + exception.toString());
        }
        if (!exception || !exception.handled) {
            // Only log the exception if it was not already logged before
            ErrorHelper_1.default.log(error || exception);
        }
    }
}
function logEvent(event) {
    if (event.enabled && (event.eventType !== EventBase_1.ClonedEventType.Start || config.logStartEvents) &&
        !(Beacon_event_1.Beacon.isTypeOf(event) && event.data && event.data.name === ARIA_QOS_NAME)) {
        var eventProperties = new ariaTelemetry.EventProperties();
        var values = {
            "CorrelationVector": event.vector.toString(),
            "ValidationErrors": event.validationErrors,
            "WebLog_FullName": event.eventName,
            "WebLog_EventType": EventBase_1.ClonedEventType[event.eventType]
        };
        if (event.eventType === EventBase_1.ClonedEventType.End) {
            values['Duration'] = event.endTime - event.startTime;
        }
        var names = event.eventName.split(',');
        for (var _i = 0, names_1 = names; _i < names_1.length; _i++) {
            var name_1 = names_1[_i];
            if (name_1) {
                values["WebLog_Type_" + name_1] = 1;
            }
        }
        var data = event.data;
        if (data) {
            for (var field in data) {
                var value = data[field];
                if (value === undefined || value === null) {
                    continue;
                }
                var propertyMetadata = event.metadata[field];
                if (propertyMetadata) {
                    var loggingName = propertyMetadata.isPrefixingDisabled ? StringHelper_1.capitalize(field) : StringHelper_1.capitalize(propertyMetadata.definedInName) + "_" + field;
                    var type = propertyMetadata.type;
                    if (type === 4 /* Object */) {
                        for (var subField in value) {
                            if (value[subField] !== undefined) {
                                values[loggingName + "_" + subField.replace('.', '_')] = value[subField];
                            }
                        }
                    }
                    else {
                        values[loggingName] = type === 6 /* Enum */ ? propertyMetadata.typeRef[value] : value;
                    }
                }
            }
        }
        eventProperties.name = "ev_" + names[names.length - 2];
        setProperties(eventProperties, values);
        logger.logEvent(eventProperties);
    }
}
function setProperties(properties, values) {
    // We are getting a lot of errorCode 3 aria errors complaining about invalid property keys
    // In order to fix the problem we need to know what the problematic keys are
    var key;
    try {
        for (key in values) {
            properties.setProperty(key, values[key]);
        }
    }
    catch (exception) {
        var errorCode = void 0;
        var error = void 0;
        if (exception instanceof ariaTelemetry.Exception) {
            errorCode = exception.ErrorCode();
            error = new Error("Aria error: " + exception.toString());
        }
        if (error) {
            // If it is an aria error that is thrown then log it with the error code and the key we tried to set
            exception.handled = true;
            ErrorHelper_1.default.logError(error, {
                errorCode: errorCode,
                propertyKey: key
            });
        }
        // Regardless of what kind of error it was, rethrow the error so we don't try to log the event
        throw exception;
    }
}


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Signal_1 = __webpack_require__(12);
/**
 * Provides a mechanism for limiting the maximum number of promises going on at one time.
 */
var Semaphore = (function () {
    /**
     * @param concurrency How many promises to kick off before waiting for some to finish. Defaults to 1.
     */
    function Semaphore(concurrency) {
        this.concurrency = concurrency || 1;
        this._running = 0;
        this._queue = [];
        this._promiseComplete = this._promiseComplete.bind(this);
    }
    /**
     * Enqueue a callback that kicks off some asynchronous work.
     * @param callback - Does some async work and returns a promise to indicate completion.
     * @returns A promise of the same shape as the one returned by callback, so you can chain seamlessly.
     */
    Semaphore.prototype.enqueue = function (callback) {
        var result;
        if (this._running < this.concurrency) {
            this._running++;
            result = callback();
            result.done(this._promiseComplete, this._promiseComplete);
        }
        else {
            var item = {
                callback: callback,
                signal: null,
                canceled: false,
                result: null
            };
            item.signal = new Signal_1.default(function () {
                item.canceled = true;
                if (item.result) {
                    item.result.cancel();
                }
            });
            this._queue.push(item);
            result = item.signal.getPromise();
        }
        return result;
    };
    Semaphore.prototype._promiseComplete = function () {
        var _this = this;
        this._running--;
        if (this._running < this.concurrency && this._queue.length) {
            var item = this._queue.shift();
            while (item && item.canceled) {
                if (this._queue.length) {
                    item = this._queue.shift();
                }
                else {
                    item = null;
                }
            }
            if (item) {
                this._running++;
                item.result = item.callback();
                item.result.done(function (value) {
                    item.signal.complete(value);
                    _this._promiseComplete();
                }, function (error) {
                    item.signal.error(error);
                    _this._promiseComplete();
                });
            }
        }
    };
    return Semaphore;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Semaphore;


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var ErrorHelper_1 = __webpack_require__(3);
var Async_1 = __webpack_require__(4);
var BeforeUnload = (function () {
    function BeforeUnload() {
        this._localHandlers = [];
    }
    BeforeUnload.init = function () {
        var _this = this;
        if (!this._initialized) {
            this._initialized = true;
            // Wire up before unload
            this._originalBeforeUnload = window.onbeforeunload;
            window.onbeforeunload = window['__onbeforeunload'] = function (ev) {
                return _this._handleBeforeUnload(ev);
            };
        }
    };
    BeforeUnload.registerHandler = function (callback) {
        this._handlers.push(callback);
    };
    BeforeUnload.unRegisterHandler = function (callback) {
        for (var x = 0; x < this._handlers.length; x++) {
            if (this._handlers[x] === callback) {
                this._handlers.splice(x, 1);
                break;
            }
        }
    };
    BeforeUnload.dispose = function () {
        if (this._originalBeforeUnload) {
            window.onbeforeunload = this._originalBeforeUnload;
        }
        else {
            window.onbeforeunload = null;
        }
    };
    BeforeUnload._handleBeforeUnload = function (ev) {
        var response = undefined;
        if (!this._allowNavs) {
            for (var x = 0; x < this._handlers.length; x++) {
                try {
                    response = this._handlers[x](true);
                    if (response) {
                        break;
                    }
                }
                catch (e) {
                    ErrorHelper_1.default.log(e);
                }
            }
            if (!response && this._originalBeforeUnload) {
                try {
                    response = this._originalBeforeUnload(ev);
                }
                catch (e) {
                    ErrorHelper_1.default.log(e);
                }
            }
        }
        // Make sure the response is undefined so ie will not block
        return response ? response : undefined;
    };
    BeforeUnload.prototype.registerHashNavDialogCallback = function (callback) {
        this._hashNavDialogCallback = callback;
    };
    BeforeUnload.prototype.allowHashNav = function (allowNavCallback, disallowNavCallback) {
        var response = undefined;
        if (!BeforeUnload._isDialogOpen && !BeforeUnload._allowNavs) {
            for (var x = 0; x < BeforeUnload._handlers.length; x++) {
                try {
                    response = BeforeUnload._handlers[x](false);
                    if (response) {
                        break;
                    }
                }
                catch (e) {
                    ErrorHelper_1.default.log(e);
                }
            }
            if (response) {
                BeforeUnload._isDialogOpen = true;
                this._hashNavDialogCallback(response)
                    .then(function () {
                    BeforeUnload._isDialogOpen = false;
                    BeforeUnload._allowNavs = true;
                    // Dont block until we have a new stack
                    if (!BeforeUnload._blockNavsAgainId) {
                        BeforeUnload._blockNavsAgainId = BeforeUnload._async.setImmediate(function () {
                            BeforeUnload._allowNavs = false;
                            BeforeUnload._blockNavsAgainId = null;
                        });
                    }
                    if (allowNavCallback) {
                        allowNavCallback();
                    }
                }, function () {
                    BeforeUnload._isDialogOpen = false;
                    if (disallowNavCallback) {
                        disallowNavCallback();
                    }
                });
            }
        }
        return !response && !BeforeUnload._isDialogOpen;
    };
    BeforeUnload.prototype.registerHandler = function (callback) {
        this._localHandlers.push(callback);
        BeforeUnload.registerHandler(callback);
    };
    BeforeUnload.prototype.unRegisterHandler = function (callback) {
        for (var x = 0; x < this._localHandlers.length; x++) {
            if (this._localHandlers[x] === callback) {
                this._localHandlers.splice(x, 1);
                break;
            }
        }
        BeforeUnload.unRegisterHandler(callback);
    };
    BeforeUnload.prototype.dispose = function () {
        // Clean up any hanging handlers
        for (var _i = 0, _a = this._localHandlers; _i < _a.length; _i++) {
            var handler = _a[_i];
            BeforeUnload.unRegisterHandler(handler);
        }
    };
    return BeforeUnload;
}());
BeforeUnload._handlers = [];
BeforeUnload._async = new Async_1.default();
BeforeUnload._initialized = false;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = BeforeUnload;
BeforeUnload.init();


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Scope_1 = __webpack_require__(73);
var Resources_1 = __webpack_require__(125);
/**
 * Base class for lifetime-managed, scoped components.
 *
 * Many web components ultimately need to set up subscriptions to events,
 * manage HTML elements, wait on asychronous activities, and clean up
 * loaded state. The `Component` base class provides a way to create a hierarchy
 * of objects with lifetime management and automatic resource scoping.
 *
 * `Component` combines the benefits of `ResourceScope` and `Scope` into a single
 *  package for convenience.
 *
 * If a component-like class needs the benefits of lifetime management but cannot
 * extend `Component`, consider wrapping a `Scope` and a `ResourceScope` in order
 * to create child components.
 *
 * @export
 * @class Component
 * @implements {IDisposable}
 *
 * @example
 *  export interface ISearchServiceParams extends IComponentParams {
 *      searchMode: SearchMode;
 *  }
 *
 *  export interface ISearchDependencies extends IComponentDependencies {
 *      context: IContext
 *      DataRequestor?: typeof DataRequestor;
 *  }
 *
 *  export default class SearchService extends Component {
 *      public static readonly dependencies: IResourceDependencies<ISearchDependencies> = {
 *          ...Component.dependencies,
 *          context: contextKey
 *      }
 *
 *      private _dataRequestor: DataRequestor;
 *      private _context: IContext;
 *      private _searchMode: SearchMode;
 *
 *      constructor(params: ISearchServiceParams, dependencies: ISearchServiceDependencies) {
 *          super(params, dependencies);
 *
 *          const {
 *              searchMode
 *          } = params;
 *
 *          const {
 *              context
 *              DataRequestor: dataRequestorType // This parameter is only used in unit tests
 *          } = dependencies;
 *
 *          this._searchMode = searchMode;
 *
 *          this._context = context;
 *
 *          this._dataRequestor = new (this.child(dataRequestorType))();
 *      }
 *
 *      public search(options: ISearchOptions): Promise<ISearchResult> {
 *          return this._dataRequestor.getData(...).then((data: ISearchResponse) => {
 *              return this._processResponse(data);
 *          });
 *      }
 *  }
 */
var Component = (function () {
    /**
     * Creates an instance of Component.
     * In general, derived classes should invoke `super(params, dependencies)`, supplying both
     * `params` and `dependencies` to the `Component` class.
     * When creating a new instance of a derived component, use either
     * `new (resources.injected(MyComponent))()`
     * when outside a `Component` or
     * `new (this.child(MyComponent))()`
     * when inside a `Component`. This will ensure that resources are properly passed and lifetimes
     * are properly managed.
     *
     * @param {IComponentParams} [params={}] Optional params to control behaviors of this class.
     * In general, classes which extend components
     * @param {IComponentDependencies} [dependencies={}] Optional dependencies to override types consumed by this class.
     * `dependencies` is intended for use during unit testing, to override types consumed outside of resourcing.
     * Most dependency injection should be done using `ResourceScope`.
     */
    function Component(params, dependencies) {
        if (params === void 0) { params = {}; }
        if (dependencies === void 0) { dependencies = {}; }
        var _a = this.resources, resources = _a === void 0 ? (dependencies.resources ?
            // If the resource scope comes via dependencies, then it might not be unique to this component instance.
            // To be safe, create a new child resource scope for resource exposures.
            new Resources_1.ResourceScope(dependencies.resources) :
            params.resources) : _a;
        this.resources = resources;
        this._Component_scope = new Scope_1.default();
    }
    Object.defineProperty(Component.prototype, "scope", {
        /**
         * Gets the lifetime scope manager for this component.
         * In general, use `new (this.child(Type))()` to create child components
         * with proper lifetime management.
         * However, `this.scope` can be used to attach arbitrary disposable objects
         * to bind their lifetimes to the current component instance.
         *
         * @protected
         * @type {Scope}
         */
        get: function () {
            return this._Component_scope;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Component.prototype, "isDisposed", {
        /**
         * Determines whether or not this component has been disposed.
         *
         * @readonly
         * @protected
         * @type {boolean}
         */
        get: function () {
            return this.scope.isDisposed;
        },
        enumerable: true,
        configurable: true
    });
    Component.prototype.dispose = function () {
        this._Component_scope.dispose();
    };
    /**
     * Produces a constructor for a type which injects instances
     * with this component's current resources and binds them
     * to this component's lifetime. New code should prefer `this.child`.
     *
     * @protected
     * @template T
     * @param {T} type
     * @returns {T}
     */
    Component.prototype.managed = function (type) {
        if (this.resources) {
            type = this.resources.injected(type);
        }
        return this.scope.attached(type);
    };
    Component.prototype.child = function (keyOrType) {
        var type;
        if (keyOrType instanceof Resources_1.ResourceKey) {
            type = this.resources.consume(keyOrType);
        }
        else if (this.resources) {
            type = this.resources.injected(keyOrType, {
                injectChildResourceScope: true
            });
        }
        else {
            type = keyOrType;
        }
        return this.scope.attached(type);
    };
    return Component;
}());
Component.dependencies = {
    resources: Resources_1.resourceScopeKey
};
exports.Component = Component;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Component;


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

/**
 * This datasource makes a call to the Acronyms and Colors service and returns an IAcronymColor object.
 */
var SiteHeaderLogoAcronym = (function () {
    /**
     * @constructor
     */
    function SiteHeaderLogoAcronym(pageContext) {
        this._pageContext = pageContext;
    }
    /**
     * Given a site name, return an URL to a REST endpoint where the site logo acronym and color information can be retrieved from.
     * The REST endpoint is through the GetAcronymsAndColors API.
     * Note: API takes in additional optional arguments like lcid, which as of this writing this method doesn't support.
     *       Please extend as appropriate.
     *
     * @param {string} siteName Name of the site.
     * @returns { string} the REST endpoint relative URL.
     */
    SiteHeaderLogoAcronym.prototype.getAcronymRESTUrl = function (siteName) {
        return this._pageContext.webServerRelativeUrl + ("/_api/sphome/GetAcronymsAndColors?labels=[{Text:" + encodeURIComponent('"' + siteName + '"') + "}]");
    };
    SiteHeaderLogoAcronym.prototype.getAcronymColor = function (responseText) {
        //parse the responseText
        var rtnObj = { acronym: undefined, color: undefined };
        try {
            var response = JSON.parse(responseText);
            var responseResult = response.d.GetAcronymsAndColors.results[0];
            rtnObj.acronym = responseResult.Acronym;
            rtnObj.color = responseResult.Color;
        }
        catch (e) {
            // try xml parsing
            var parser = this._parseFn();
            var elements = void 0;
            var xmlDoc = parser(responseText);
            if (elements = xmlDoc.getElementsByTagName("element")) {
                var element = elements[0];
                for (var i = 0; i < element.childNodes.length; i++) {
                    switch (element.childNodes[i].nodeName) {
                        case 'Acronym':
                            rtnObj.acronym = element.childNodes[i].nodeValue;
                            break;
                        case 'Color':
                            rtnObj.color = element.childNodes[i].nodeValue;
                            break;
                    }
                }
            }
        }
        return rtnObj;
    };
    /**
     * Returns an XML parser.
     */
    SiteHeaderLogoAcronym.prototype._parseFn = function () {
        var parseXml;
        if (DOMParser) {
            parseXml = function (xmlStr) {
                return (new DOMParser()).parseFromString(xmlStr, "text/xml");
            };
        }
        else if (ActiveXObject &&
            new ActiveXObject("Microsoft.XMLDOM")) {
            parseXml = function (xmlStr) {
                var xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
                xmlDoc.async = "false";
                xmlDoc.loadXML(xmlStr);
                return xmlDoc;
            };
        }
        else {
            throw new Error("No XML parser found");
        }
        return parseXml;
    };
    return SiteHeaderLogoAcronym;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SiteHeaderLogoAcronym;


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var StringHelper_1 = __webpack_require__(9);
var MembersList_1 = __webpack_require__(97);
/**
 * This datasource makes server call to get group related information.
 */
var GroupDataSource = (function () {
    /**
     * @constructor
     */
    function GroupDataSource(pageContext) {
        this._pageContext = pageContext;
    }
    /**
     * Get REST Url to get group properties
     * @param {string} Id (Guid) of the group
     * @returns the REST url that can be used to get group basic properties
     */
    GroupDataSource.prototype.getGroupBasicPropertiesRESTUrl = function (groupId, withMembership) {
        return this._getRESTUrl(StringHelper_1.format(withMembership ? GroupDataSource.groupBasicPropertiesWithMembershipUrlTemplate : GroupDataSource.groupBasicPropertiesUrlTemplate, groupId), 'SP.Directory.DirectorySession');
    };
    GroupDataSource.prototype.getGroupBasicProperties = function (responseText) {
        var group = {};
        try {
            var response = JSON.parse(responseText);
            if (response.d) {
                group = this._copyGroup(response.d);
                this._calculateMissingGroupProperties(group, group.id);
            }
        }
        catch (e) {
            group = {};
        }
        return group;
    };
    GroupDataSource.prototype._getRESTUrl = function (op, ns) {
        return this._pageContext.webServerRelativeUrl + '/_api/' + ns + '/' + op;
    };
    /**
     * Given response from the server convert it into a group
     */
    GroupDataSource.prototype._copyGroup = function (src) {
        var groupInfo = {};
        if (src.description) {
            groupInfo.description = src.description;
        }
        if (src.alias) {
            groupInfo.alias = src.alias;
        }
        if (src.displayName) {
            groupInfo.name = src.displayName;
        }
        if (src.principalName) {
            groupInfo.principalName = src.principalName;
        }
        if (src.creationTime) {
            groupInfo.creationTime = src.creationTime;
        }
        if (src.pictureUrl) {
            groupInfo.pictureUrl = src.pictureUrl;
        }
        if (src.inboxUrl) {
            groupInfo.inboxUrl = src.inboxUrl;
        }
        if (src.calendarUrl) {
            groupInfo.calendarUrl = src.calendarUrl;
        }
        if (src.documentsUrl) {
            groupInfo.filesUrl = src.documentsUrl;
        }
        if (src.siteUrl) {
            groupInfo.sharePointUrl = src.siteUrl;
        }
        if (src.editGroupUrl) {
            groupInfo.editUrl = src.editGroupUrl;
        }
        if (src.peopleUrl) {
            groupInfo.membersUrl = src.peopleUrl;
        }
        if (src.notebookUrl) {
            groupInfo.notebookUrl = src.notebookUrl;
        }
        if (src.isPublic) {
            groupInfo.isPublic = src.isPublic;
        }
        if (src.mail) {
            groupInfo.mail = src.mail;
        }
        // TODO: remove this once all branches get lowerCamelCase changelist
        if (src.Description) {
            groupInfo.description = src.Description;
        }
        if (src.Alias) {
            groupInfo.alias = src.Alias;
        }
        if (src.DisplayName) {
            groupInfo.name = src.DisplayName;
        }
        if (src.PrincipalName) {
            groupInfo.principalName = src.PrincipalName;
        }
        if (src.CreationTime) {
            groupInfo.creationTime = src.CreationTime;
        }
        if (src.PictureUrl) {
            groupInfo.pictureUrl = src.PictureUrl;
        }
        if (src.InboxUrl) {
            groupInfo.inboxUrl = src.InboxUrl;
        }
        if (src.CalendarUrl) {
            groupInfo.calendarUrl = src.CalendarUrl;
        }
        if (src.DocumentsUrl) {
            groupInfo.filesUrl = src.DocumentsUrl;
        }
        if (src.SiteUrl) {
            groupInfo.sharePointUrl = src.SiteUrl;
        }
        if (src.EditGroupUrl) {
            groupInfo.editUrl = src.EditGroupUrl;
        }
        if (src.PeopleUrl) {
            groupInfo.membersUrl = src.PeopleUrl;
        }
        if (src.NotebookUrl) {
            groupInfo.notebookUrl = src.NotebookUrl;
        }
        if (src.IsPublic) {
            groupInfo.isPublic = src.IsPublic;
        }
        if (src.Mail) {
            groupInfo.mail = src.Mail;
        }
        if (src.members || src.owners) {
            this._copyMembership(src);
        }
        return groupInfo;
    };
    /**
     *  Remove once federated directory makes appropriate fixes
     */
    GroupDataSource.prototype._calculateMissingGroupProperties = function (group, groupId) {
        if (!group.creationTime) {
            group.creationTime = Date.now();
        }
        if (!group.pictureUrl) {
            group.pictureUrl = group.pictureUrl.replace("EWS/Exchange.asmx/s/GetUserPhoto", "OWA/service.svc/s/GetPersonaPhoto");
        }
        if (!group.profileUrl) {
            group.profileUrl = this._getProfileUrl(groupId);
        }
        if (!group.notebookUrl && groupId) {
            group.notebookUrl = this._getGroupStatusNotebookUrl(groupId);
        }
    };
    GroupDataSource.prototype._getProfileUrl = function (id) {
        return this._pageContext.siteAbsoluteUrl + StringHelper_1.format(GroupDataSource.groupStatusPageTemplate, id, 'profile');
    };
    GroupDataSource.prototype._getGroupStatusNotebookUrl = function (id) {
        return this._pageContext.siteAbsoluteUrl + StringHelper_1.format(GroupDataSource.groupStatusPageTemplate, id, 'notebook');
    };
    GroupDataSource.prototype._copyMembership = function (src) {
        var membershipInfo = {};
        if (src.members && src.members.results) {
            var membersList = this._copyMembers(src.members.results);
            membershipInfo.membersList = membersList;
        }
        if (src.owners && src.owners.results) {
            var ownersList = this._copyMembers(src.owners.results);
            membershipInfo.ownersList = ownersList;
        }
        return membershipInfo;
    };
    /**
     * Copy from member list json to memberList object
     */
    GroupDataSource.prototype._copyMembers = function (src) {
        var membersList = new MembersList_1.default();
        var members = new Array();
        for (var i = 0; i < src.length; i++) {
            var member = this._copyMember(src[i]);
            members.push(member);
        }
        membersList.members = members;
        membersList.totalCount = members.length;
        return membersList;
    };
    /**
     * Copy from json to IPerson object
     */
    GroupDataSource.prototype._copyMember = function (src) {
        var user = {};
        if (src.alias) {
            user.sip = src.alias;
        }
        if (src.id) {
            user.userId = src.id;
        }
        if (src.principalName) {
            user.email = src.principalName;
        }
        if (src.displayName) {
            user.name = src.displayName;
        }
        if (src.title) {
            user.job = src.title;
        }
        if (src.pictureUrl) {
            user.image = src.pictureUrl;
        }
        if (src.profilePage) {
            user.profilePage = src.profilePage;
        }
        return user;
    };
    return GroupDataSource;
}());
/**
 * Static members
 */
// Url templates
GroupDataSource.groupBasicPropertiesUrlTemplate = 'Group(\'{0}\')?$select=PrincipalName,DisplayName,Alias,Description,InboxUrl,CalendarUrl,DocumentsUrl,SiteUrl,EditGroupUrl,PictureUrl,PeopleUrl,NotebookUrl,Mail,IsPublic,CreationTime';
GroupDataSource.groupBasicPropertiesWithMembershipUrlTemplate = 'Group(\'{0}\')?$expand=Members,Owners&$select=PrincipalName,DisplayName,Alias,Description,InboxUrl,CalendarUrl,DocumentsUrl,SiteUrl,EditGroupUrl,PictureUrl,PeopleUrl,NotebookUrl,Mail,IsPublic,CreationTime,Members/PrincipalName,Members/Id,Members/DisplayName,Members/PictureUrl,Owners/PrincipalName,Owners/Id,Owners/DisplayName,Owners/PictureUrl';
GroupDataSource.groupStatusPageTemplate = '_layouts/15/groupstatus?id={0}&target={1}';
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = GroupDataSource;


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

;
var MembersList = (function () {
    function MembersList() {
        this.totalCount = 0;
        this.members = new Array();
    }
    /**
     * Add given user to the members list of the group
     */
    MembersList.prototype.addUserToList = function (user) {
        this.members.unshift(user);
        this.totalCount++;
    };
    /**
     * Remove user from members list of a group
     */
    MembersList.prototype.removeUserFromList = function (user) {
        var indexToRemove = -1; // not found by default
        for (var i = 0; i < this.members.length; i++) {
            if (this.members[i].userId === user.userId) {
                indexToRemove = i; // find the index
            }
        }
        // If user exists in members list then remove it
        if (indexToRemove >= 0) {
            this.members.splice(indexToRemove, 1);
            this.totalCount--;
        }
    };
    return MembersList;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = MembersList;


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var DatetimeResx = __webpack_require__(99);
var Locale_1 = __webpack_require__(30);
var StringHelper_1 = __webpack_require__(9);
// this is the difference between the .net ticks and the javascript Date ticks
var TICKS_CONVERSION_CONSTANT = 62135596800000;
// number of milliseconds for the given timespan
// copied from SPRelativeDateTime, including 32 days to a month
var ONE_SECOND = 1000;
var ONE_MINUTE = 60 * ONE_SECOND;
var TWO_MINUTES = 2 * ONE_MINUTE;
var ONE_HOUR = 60 * ONE_MINUTE;
var TWO_HOURS = 2 * ONE_HOUR;
var ONE_DAY = 24 * ONE_HOUR;
var TWO_DAYS = 2 * ONE_DAY;
var ONE_WEEK = 7 * ONE_DAY;
var ONE_MONTH = 32 * ONE_DAY;
var _getLocale;
var supportsTimeZoneDateOptions;
var shortDateFormat;
var shortTimeFormat;
var shortDateFormatUTC;
var shortTimeFormatUTC;
var formatShortDate;
var formatShortTime;
var formatShortDateUTC;
var formatShortTimeUTC;
/**
 * Convert a date-time string to a JavaScript Date object, for IE8 compat.
 *  Modern browsers and IE9+ can just take the string directly to the Date constructor.
 *  Format is: 1999-12-31T12:34:56.0000000Z
 *  Trailing Z indicates UTC timezone, otherwise it uses the browser's time zone.
 */
function iso8601DateTimeToJsDate(dateTime) {
    'use strict';
    // note that Date.parse() doesn't work for this format in IE8 either
    var isUTC = false;
    if (dateTime.toUpperCase().indexOf('Z') === dateTime.length - 1) {
        isUTC = true;
    }
    var timeValues = dateTime.split(/[^0-9]/);
    if (timeValues.length < 6) {
        return; // error
    }
    // note that Date 0-indexes months
    if (!isUTC) {
        return new Date(Number(timeValues[0]), Number(timeValues[1]) - 1, Number(timeValues[2]), Number(timeValues[3]), Number(timeValues[4]), Number(timeValues[5]));
    }
    else {
        return new Date(Date.UTC(Number(timeValues[0]), Number(timeValues[1]) - 1, Number(timeValues[2]), Number(timeValues[3]), Number(timeValues[4]), Number(timeValues[5])));
    }
}
exports.iso8601DateTimeToJsDate = iso8601DateTimeToJsDate;
/**
 * Get a string like "X minutes ago" that reflects the time elapsed since the input time.
 * Only works for past times, future times just return a browser-determined localized time string.
 */
function getRelativeDateTimeStringPast(pastTime, startWithLowerCase) {
    'use strict';
    if (startWithLowerCase === void 0) { startWithLowerCase = false; }
    var timespan = Date.now() - pastTime.getTime(); // time elapsed in ms
    if (timespan < -5 * ONE_MINUTE) {
        return pastTime.toLocaleDateString(Locale_1.default.language);
    }
    else if (timespan < ONE_MINUTE) {
        // "Less than a minute ago"
        return startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_LessThanAMinute_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_LessThanAMinute;
    }
    else if (timespan < TWO_MINUTES) {
        // "About a minute ago"
        return startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_AboutAMinute_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_AboutAMinute;
    }
    else if (timespan < ONE_HOUR) {
        // "{0} minutes ago"
        var minutes = Math.floor(timespan / ONE_MINUTE);
        return StringHelper_1.getLocalizedCountValue(DatetimeResx.strings.RelativeDateTime_XMinutes, DatetimeResx.strings.RelativeDateTime_XMinutesIntervals, minutes).replace("{0}", String(minutes));
    }
    else if (timespan < TWO_HOURS) {
        // "About an hour ago"
        return startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_AboutAnHour_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_AboutAnHour;
    }
    else if (timespan < ONE_DAY) {
        // "{0} hours ago"
        var hours = Math.floor(timespan / ONE_HOUR);
        return StringHelper_1.getLocalizedCountValue(DatetimeResx.strings.RelativeDateTime_XHours, DatetimeResx.strings.RelativeDateTime_XHoursIntervals, hours).replace("{0}", String(hours));
    }
    else if (timespan < TWO_DAYS) {
        // "Yesterday at {0}"
        return startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_YesterdayAndTime_StartWithLowerCase.replace("{0}", pastTime.toLocaleTimeString(Locale_1.default.language)) :
            DatetimeResx.strings.RelativeDateTime_YesterdayAndTime.replace("{0}", pastTime.toLocaleTimeString(Locale_1.default.language));
    }
    else if (timespan < ONE_MONTH) {
        // "{0} days ago" (in the past month-ish)
        var days = Math.floor(timespan / ONE_DAY);
        return StringHelper_1.getLocalizedCountValue(DatetimeResx.strings.RelativeDateTime_XDays, DatetimeResx.strings.RelativeDateTime_XDaysIntervals, days).replace("{0}", String(days));
    }
    // Any other time, just return the regular full original time
    return pastTime.toLocaleDateString(Locale_1.default.language); // browser-determined localized date (no time)
}
exports.getRelativeDateTimeStringPast = getRelativeDateTimeStringPast;
/**
 * This is a modified implementation of DateTime.GetRelativeDateTimeStringPast(...).
 * The differences here are as follows:
 *      (1) The time string for yesterday does not include the seconds
 *      (2) Instead of showing 'X days ago' for dates older than a month, default to showing the full date
 *      (3) The full date will also include the time (also without seconds)
 */
function getRelativeDateTimeStringPastWithHourMinute(pastTime) {
    'use strict';
    var timespan = Date.now() - pastTime.getTime(); // time elapsed in ms
    var date = pastTime.toLocaleDateString(Locale_1.default.language); // browser-determined localized date
    var time = pastTime.toLocaleTimeString(Locale_1.default.language, { hour: 'numeric', minute: '2-digit' }); //time without seconds
    if (timespan < ONE_DAY) {
        return getRelativeDateTimeStringPast(pastTime);
    }
    else if (timespan < TWO_DAYS) {
        // "Yesterday at {0}" without seconds
        return StringHelper_1.format(DatetimeResx.strings.RelativeDateTime_YesterdayAndTime, time);
    }
    // Any other time, just return the regular full original date with time, without seconds
    return StringHelper_1.format(DatetimeResx.strings.DateTime_DateAndTime, date, time);
}
exports.getRelativeDateTimeStringPastWithHourMinute = getRelativeDateTimeStringPastWithHourMinute;
/**
 * True if the given dates have the same day month and year.
 */
function isSameDay(a, b) {
    return a.getDate() === b.getDate() && Math.abs(b.getTime() - a.getTime()) < ONE_DAY;
}
exports.isSameDay = isSameDay;
/**
 * True if the given dates have the same month and year.
 */
function isSameMonth(a, b) {
    return a.getFullYear() === b.getFullYear() && b.getMonth() === a.getMonth();
}
exports.isSameMonth = isSameMonth;
/**
 * True if the date is on or between the first and last day of the current week. This uses the Date function getDay()
 * which returns the day of the week for the specified date according to local time, where 0 represents Sunday.
 * You can optionally specify the date to use as the current date/time.
 */
function isThisWeek(pastTime, now) {
    'use strict';
    now = now || new Date();
    var start = new Date(now.getTime() - now.getDay() * ONE_DAY);
    var end = new Date(start.getTime() + ONE_WEEK - ONE_DAY);
    var isThisWeek = (start.getTime() <= pastTime.getTime() && pastTime.getTime() <= end.getTime());
    return isThisWeek;
}
exports.isThisWeek = isThisWeek;
/**
 * True if the date is on or between the first and last day of the previous week. This uses the Date function getDay()
 * which returns the day of the week for the specified date according to local time, where 0 represents Sunday.
 * You can optionally specify the date to use as the current date/time.
 */
function isLastWeek(pastTime, now) {
    'use strict';
    now = now || new Date();
    var start = new Date(now.getTime() - now.getDay() * ONE_DAY - ONE_WEEK);
    var end = new Date(start.getTime() + ONE_WEEK - ONE_DAY);
    var isLastWeek = (start.getTime() <= pastTime.getTime() && pastTime.getTime() <= end.getTime());
    return isLastWeek;
}
exports.isLastWeek = isLastWeek;
// for use with lists' server-processed date value
/**
 * @param relativeDateTimeJSString: list server-processed date value string
 * @startWithLowerCase: use this option when the return string is not at beginning of the sentence.
 */
function getRelativeDateTimeStringForLists(relativeDateTimeJSString, startWithLowerCase) {
    'use strict';
    if (startWithLowerCase === void 0) { startWithLowerCase = false; }
    var ret = null;
    var retTemplate = null;
    var codes = relativeDateTimeJSString.split('|');
    // Passthrough case
    if (codes[0] === "0") {
        return relativeDateTimeJSString.substring(2);
    }
    var bFuture = codes[1] === "1";
    var timeBucket = codes[2];
    var timeValue = codes.length >= 4 ? codes[3] : null;
    var timeValue2 = codes.length >= 5 ? codes[4] : null;
    switch (timeBucket) {
        // a few seconds
        case "1":
            ret = bFuture ? (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_AFewSecondsFuture_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_AFewSecondsFuture) :
                (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_AFewSeconds_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_AFewSeconds);
            break;
        // about a minute
        case "2":
            ret = bFuture ? (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_AboutAMinuteFuture_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_AboutAMinuteFuture) :
                (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_AboutAMinute_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_AboutAMinute);
            break;
        // x minutes
        case "3":
            retTemplate = StringHelper_1.getLocalizedCountValue(bFuture ? (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_XMinutesFuture_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_XMinutesFuture)
                : DatetimeResx.strings.RelativeDateTime_XMinutes, bFuture ? DatetimeResx.strings.RelativeDateTime_XMinutesFutureIntervals : DatetimeResx.strings.RelativeDateTime_XMinutesIntervals, Number(timeValue));
            break;
        // about an hour
        case "4":
            ret = bFuture ? (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_AboutAnHourFuture_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_AboutAnHourFuture)
                : (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_AboutAnHour_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_AboutAnHour);
            break;
        // yesterday / tomorrow
        case "5":
            if (timeValue == null) {
                ret = bFuture ? (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_Tomorrow_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_Tomorrow)
                    : (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_Yesterday_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_Yesterday);
            }
            else {
                retTemplate = bFuture ? (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_TomorrowAndTime_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_TomorrowAndTime)
                    : (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_YesterdayAndTime_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_YesterdayAndTime);
            }
            break;
        // x hours
        case "6":
            retTemplate = StringHelper_1.getLocalizedCountValue(bFuture ? (startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_XHoursFuture_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_XHoursFuture)
                : DatetimeResx.strings.RelativeDateTime_XHours, bFuture ? DatetimeResx.strings.RelativeDateTime_XHoursFutureIntervals : DatetimeResx.strings.RelativeDateTime_XHoursIntervals, Number(timeValue));
            break;
        // day and time
        case "7":
            if (timeValue2 === null) {
                ret = timeValue;
            }
            else {
                retTemplate = DatetimeResx.strings.RelativeDateTime_DayAndTime;
            }
            break;
        // <Days> days
        case "8":
            retTemplate = StringHelper_1.getLocalizedCountValue(bFuture ? DatetimeResx.strings.RelativeDateTime_XDaysFuture : DatetimeResx.strings.RelativeDateTime_XDays, bFuture ? DatetimeResx.strings.RelativeDateTime_XDaysFutureIntervals : DatetimeResx.strings.RelativeDateTime_XDaysIntervals, Number(timeValue));
            break;
        // today
        case "9":
            ret = startWithLowerCase ? DatetimeResx.strings.RelativeDateTime_Today_StartWithLowerCase : DatetimeResx.strings.RelativeDateTime_Today;
            break;
    }
    if (retTemplate !== null) {
        ret = retTemplate.replace("{0}", timeValue);
        if (timeValue2 !== null) {
            ret = ret.replace("{1}", timeValue2);
        }
    }
    return ret;
}
exports.getRelativeDateTimeStringForLists = getRelativeDateTimeStringForLists;
/**
 * Converts a given date string into its UTC/ISO standard format
 */
function convertDateToISOString(expiration) {
    'use strict';
    var expirationDate = new Date(expiration);
    // For more info on the time zone offset and its signage, see:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset
    var isOffsetNegative = (expirationDate.getTimezoneOffset() < 0) ? true : false;
    var year = expirationDate.getFullYear().toString();
    var month = _padStringWithZeroes((expirationDate.getMonth() + 1).toString(), 2); //zero based month
    var day = _padStringWithZeroes(expirationDate.getDate().toString(), 2);
    var hours = _padStringWithZeroes(expirationDate.getHours().toString(), 2);
    var minutes = _padStringWithZeroes(expirationDate.getMinutes().toString(), 2);
    var seconds = _padStringWithZeroes(expirationDate.getSeconds().toString(), 2);
    var offsetHours = _padStringWithZeroes((isOffsetNegative ? Math.ceil(expirationDate.getTimezoneOffset() / 60).toString().replace("-", "") : Math.floor(expirationDate.getTimezoneOffset() / 60).toString()), 2);
    var offsetMinutes = _padStringWithZeroes((expirationDate.getTimezoneOffset() % 60).toString().replace("-", ""), 2);
    var expirationString = year + month + day + 'T' + hours + minutes + seconds + (isOffsetNegative ? '+' : '-') + offsetHours + offsetMinutes;
    return expirationString;
}
exports.convertDateToISOString = convertDateToISOString;
/**
 * get the last day of the month based on the input date
 */
function getLastDayOfMonth(date) {
    'use strict';
    var lastDay = new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), 1, 0, 0, 0, 0));
    // To get the last day of the month we will increment the month
    lastDay.setUTCMonth(lastDay.getUTCMonth() + 1);
    // Then subtract a day
    lastDay.setUTCDate(lastDay.getUTCDate() - 1);
    // Then set the time to be the last second of the day
    lastDay.setUTCHours(23, 59, 59, 999);
    return lastDay;
}
exports.getLastDayOfMonth = getLastDayOfMonth;
/**
 * Given the .Net ticks of a date, convert it to a Date
 */
function getDateFromDotNetTicks(dotNetTicks) {
    'use strict';
    if (!dotNetTicks) {
        return null;
    }
    var ticksInMilliseconds = (dotNetTicks / 10000) - TICKS_CONVERSION_CONSTANT;
    return new Date(ticksInMilliseconds);
}
exports.getDateFromDotNetTicks = getDateFromDotNetTicks;
function createShortDateFormatters() {
    'use strict';
    var locale = _getLocale();
    var supportsUTC = _supportsTimeZoneDateOptions();
    if (window['Intl'] && window['Intl']['DateTimeFormat']) {
        var dateOptions = {};
        var timeOptions = { hour: '2-digit', minute: '2-digit' };
        shortDateFormat = new Intl.DateTimeFormat(locale, dateOptions);
        shortTimeFormat = new Intl.DateTimeFormat(locale, timeOptions);
        if (supportsUTC) {
            dateOptions.timeZone = 'UTC';
            timeOptions.timeZone = 'UTC';
        }
        shortDateFormatUTC = new Intl.DateTimeFormat(locale, dateOptions);
        shortTimeFormatUTC = new Intl.DateTimeFormat(locale, timeOptions);
        formatShortDate = shortDateFormat.format;
        formatShortTime = shortTimeFormat.format;
        formatShortDateUTC = shortDateFormatUTC.format;
        formatShortTimeUTC = shortTimeFormatUTC.format;
    }
    else {
        // No support for formatter objects.
        formatShortDate = formatShortDateUTC = function (date) {
            return date.toLocaleDateString(locale);
        };
        formatShortTime = formatShortTimeUTC = function (date) {
            return date.toLocaleTimeString(locale);
        };
    }
}
/**
 * Returns a short version of a date to display (e.g. 11:45 PM if today, or 11/2/2015 if not today)
 */
function getShortDisplayDate(date, useUTCTimezone) {
    'use strict';
    if (!date) {
        return '';
    }
    if (!formatShortDate) {
        createShortDateFormatters();
    }
    var isToday = isSameDay(new Date(), date);
    var formatter;
    if (useUTCTimezone) {
        if (isToday) {
            formatter = formatShortTimeUTC;
        }
        else {
            formatter = formatShortDateUTC;
        }
    }
    else {
        if (isToday) {
            formatter = formatShortTime;
        }
        else {
            formatter = formatShortDate;
        }
    }
    return formatter(date);
}
exports.getShortDisplayDate = getShortDisplayDate;
/**
 * Returns a full version of a date to display (e.g. 11/2/2015 11:45 PM)
 * useUTCTimezone defaults to false
 * useHour12 is ignored, and will be determined by the locale.
 */
function getFullDisplayDate(date, useUTCTimezone, useHour12) {
    'use strict';
    if (!formatShortDate) {
        createShortDateFormatters();
    }
    var dateString = useUTCTimezone ? formatShortDateUTC(date) : formatShortDate(date);
    var timeString = useUTCTimezone ? formatShortTimeUTC(date) : formatShortTime(date);
    return StringHelper_1.format(DatetimeResx.strings.DateAndTime, dateString, timeString);
}
exports.getFullDisplayDate = getFullDisplayDate;
_getLocale = function () {
    'use strict';
    var validLocale;
    var locales = [
        window['$Config'] && window['$Config']['mkt'],
        Locale_1.default.language,
        navigator.language,
        'en'
    ].filter(function (str) { return !!str; });
    for (var _i = 0, locales_1 = locales; _i < locales_1.length; _i++) {
        var locale = locales_1[_i];
        try {
            new Date().toLocaleDateString(locale);
            validLocale = locale;
            break;
        }
        catch (e) {
        }
    }
    _getLocale = function () { return validLocale; };
    return validLocale;
};
function _supportsTimeZoneDateOptions() {
    'use strict';
    if (supportsTimeZoneDateOptions === void 0) {
        try {
            var locale = _getLocale();
            (new Date()).toLocaleDateString(locale, { timeZone: 'UTC' });
            supportsTimeZoneDateOptions = true;
        }
        catch (E) {
            // We know of some versions of IE 11 that fail when date options with a timezone is specified.
            supportsTimeZoneDateOptions = false;
        }
    }
    return supportsTimeZoneDateOptions;
}
/**
 * Pads a date string with the request number of '0' characters
 */
function _padStringWithZeroes(toPad, numDigits) {
    'use strict';
    var paddedString = toPad;
    while (paddedString.length < numDigits) {
        paddedString = '0' + paddedString;
    }
    return paddedString;
}


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

exports.strings = { "RelativeDateTime_AFewSeconds": "A few seconds ago", "RelativeDateTime_AFewSeconds_StartWithLowerCase": "a few seconds ago", "RelativeDateTime_Format_DateTimeFormattingString_Override": "", "RelativeDateTime_Format_DateTimeFormattingString": "{0}, {1}", "RelativeDateTime_AFewSecondsFuture": "In a few seconds", "RelativeDateTime_AFewSecondsFuture_StartWithLowerCase": "in a few seconds", "RelativeDateTime_AboutAMinuteFuture": "In about a minute", "RelativeDateTime_AboutAMinuteFuture_StartWithLowerCase": "in about a minute", "RelativeDateTime_LessThanAMinute": "Less than a minute ago", "RelativeDateTime_LessThanAMinute_StartWithLowerCase": "less than a minute ago", "RelativeDateTime_AboutAMinute": "About a minute ago", "RelativeDateTime_AboutAMinute_StartWithLowerCase": "about a minute ago", "RelativeDateTime_XMinutesFuture": "In {0} minute||In {0} minutes", "RelativeDateTime_XMinutesFuture_StartWithLowerCase": "in {0} minute||in {0} minutes", "RelativeDateTime_XMinutesFutureIntervals": "1||2-", "RelativeDateTime_XMinutesIntervals": "1||2-", "RelativeDateTime_AboutAnHourFuture": "In about an hour", "RelativeDateTime_AboutAnHourFuture_StartWithLowerCase": "in about an hour", "RelativeDateTime_AboutAnHour": "About an hour ago", "RelativeDateTime_AboutAnHour_StartWithLowerCase": "about an hour ago", "RelativeDateTime_Tomorrow": "Tomorrow", "RelativeDateTime_Tomorrow_StartWithLowerCase": "tomorrow", "RelativeDateTime_Yesterday": "Yesterday", "RelativeDateTime_Yesterday_StartWithLowerCase": "yesterday", "RelativeDateTime_YesterdayAndTime": "Yesterday at {0}", "RelativeDateTime_YesterdayAndTime_StartWithLowerCase": "yesterday at {0}", "DateTime_DateAndTime": "{0} at {1}", "RelativeDateTime_TomorrowAndTime": "Tomorrow at {0}", "RelativeDateTime_TomorrowAndTime_StartWithLowerCase": "tomorrow at {0}", "RelativeDateTime_XHoursFuture": "In {0} hour||In {0} hours", "RelativeDateTime_XHoursFuture_StartWithLowerCase": "in {0} hour||in {0} hours", "RelativeDateTime_XHours": "{0} hour ago||{0} hours ago", "RelativeDateTime_XHoursFutureIntervals": "1||2-", "RelativeDateTime_XHoursIntervals": "1||2-", "RelativeDateTime_DayAndTime": "{0} at {1}", "RelativeDateTime_XDaysFuture": "{0} day from now||{0} days from now", "RelativeDateTime_XDays": "{0} day ago||{0} days ago", "RelativeDateTime_XDaysFutureIntervals": "1||2-", "RelativeDateTime_XDaysIntervals": "1||2-", "RelativeDateTime_Today": "Today", "RelativeDateTime_Today_StartWithLowerCase": "today", "RelativeDateTime_XMinutes": "{0} minute ago||{0} minutes ago", "DateAndTime": "{0} {1}", "MonthAndYear": "{0} {1}", "january": "January", "february": "February", "march": "March", "april": "April", "may": "May", "june": "June", "july": "July", "august": "August", "september": "September", "october": "October", "november": "November", "december": "December", "shortJanuary": "Jan", "shortFebruary": "Feb", "shortMarch": "Mar", "shortApril": "Apr", "shortMay": "May", "shortJune": "Jun", "shortJuly": "Jul", "shortAugust": "Aug", "shortSeptember": "Sep", "shortOctober": "Oct", "shortNovember": "Nov", "shortDecember": "Dec", "sunday": "Sunday", "monday": "Monday", "tuesday": "Tuesday", "wednesday": "Wednesday", "thursday": "Thursday", "friday": "Friday", "saturday": "Saturday", "shortSunday": "S", "shortMonday": "M", "shortTuesday": "T", "shortWednesday": "W", "shortThursday": "T", "shortFriday": "F", "shortSaturday": "S", "today": "Today", "yesterday": "Yesterday" };


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/// <summary>
/// DOM utilities, including helpers for injecting styles, creating elements, toggling classes.
/// </summary>
var TEXT_SETTING_METHOD;
var Rectangle_1 = __webpack_require__(66);
var PlatformDetection_1 = __webpack_require__(18);
/** This is exported as a one-off to preserve backwards compatibility with the generated style loading. */
function loadStyles(rules) {
    DomUtils.loadStyles(rules);
}
exports.loadStyles = loadStyles;
var DomUtils = (function () {
    function DomUtils() {
    }
    DomUtils.hasClass = function (element, className) {
        if (element.classList) {
            return element.classList.contains(className);
        }
        else {
            var classList = element.className ? element.className.split(' ') : [];
            return classList.indexOf(className) !== -1;
        }
    };
    DomUtils.toggleClass = function (element, className, isEnabled) {
        if (element.classList) {
            if (isEnabled) {
                element.classList.add(className);
            }
            else {
                element.classList.remove(className);
            }
        }
        else {
            var classList = element.className ? element.className.split(' ') : [];
            var index = classList.indexOf(className);
            if (isEnabled) {
                if (index === -1) {
                    classList.push(className);
                }
            }
            else if (index > -1) {
                classList.splice(index, 1);
            }
            element.className = classList.join(' ');
        }
    };
    DomUtils.loadStyles = function (rules) {
        DomUtils._platform.isUnlimitedStyleSheetsSupported ? DomUtils.registerStyle(rules) : DomUtils.registerStyleIE(rules);
    };
    /**
     * Registers a set of style text. If it is registered too early, we will register it when the window.load event is fired.
     * @param {string} styleText Style to register.
     */
    DomUtils.registerStyle = function (styleText) {
        var head = document.getElementsByTagName('head')[0];
        var styleElement = document.createElement("style");
        styleElement.type = "text/css";
        styleElement.appendChild(document.createTextNode(styleText));
        head.appendChild(styleElement);
    };
    /**
     * Registers a set of style text, for IE 9 and below, which has a ~30 style element limit so we need to register slightly differently.
     * @param {string} styleText Style to register.
     */
    DomUtils.registerStyleIE = function (styleText) {
        var head = document.getElementsByTagName('head')[0];
        var lastStyleContent = !!DomUtils._lastStyleElement ? DomUtils._lastStyleElement['styleSheet']['cssText'] : "";
        if (!DomUtils._lastStyleElement || (lastStyleContent.length + DomUtils._styleText.length) > DomUtils.MAX_STYLE_CONTENT_SIZE) {
            DomUtils._lastStyleElement = document.createElement("style");
            DomUtils._lastStyleElement.type = "text/css";
            head.appendChild(DomUtils._lastStyleElement);
        }
        DomUtils._lastStyleElement['styleSheet']['cssText'] += styleText;
    };
    DomUtils.loadStylesheet = function (url) {
        var element = document.createElement('link');
        element.rel = "stylesheet";
        element.type = "text/css";
        element.href = url;
        document.head.appendChild(element);
    };
    DomUtils.setText = function (el, text) {
        if (TEXT_SETTING_METHOD === undefined) {
            TEXT_SETTING_METHOD = (DomUtils.ce('div').textContent !== void (0)) ? 'textContent' : 'innerText';
        }
        el[TEXT_SETTING_METHOD] = text;
    };
    DomUtils.ce = function (tagName, attributes, children) {
        var el = document.createElement(tagName);
        if (attributes) {
            var attributeKeys = Object.keys(attributes);
            for (var i = 0; i < attributeKeys.length; i++) {
                var attribute = attributeKeys[i];
                el.setAttribute(attribute, attributes[attribute]);
            }
        }
        if (children) {
            for (var j = 0; j < children.length; j++) {
                el.appendChild(children[j]);
            }
        }
        return el;
    };
    DomUtils.setShadowParent = function (element, parent) {
        element[DomUtils.SHADOW_PARENT_KEY] = parent;
    };
    DomUtils.getParent = function (element, allowShadow) {
        if (allowShadow === void 0) { allowShadow = true; }
        return (allowShadow && element[DomUtils.SHADOW_PARENT_KEY]) || element.parentElement;
    };
    DomUtils.ct = function (val) {
        return document.createTextNode(val);
    };
    DomUtils.createComment = function (value) {
        return document.createComment(value);
    };
    DomUtils.clickElement = function (element) {
        if (element.onclick) {
            element['onclick'](undefined);
        }
        else if (element.click) {
            element.click();
        }
    };
    DomUtils.insertAfter = function (newChild, sibling) {
        var parent = sibling.parentNode;
        var next = sibling.nextSibling;
        if (next) {
            // IE and Chrome do not like undefined for refChild
            parent.insertBefore(newChild, next);
        }
        else {
            parent.appendChild(newChild);
        }
    };
    DomUtils.getElementByTagAndPartialId = function (document, tagName, partialId) {
        var ret = [];
        var eles = document.getElementsByTagName(tagName);
        for (var index = 0; index < eles.length; index++) {
            if (eles[index].id.indexOf(partialId) >= 0) {
                ret.push(eles[index]);
            }
        }
        if (ret.length > 0) {
            return ret[0];
        }
        return null;
    };
    /**
     *   Finds an element with a given className starting at the provided element and walking up the DOM heirarchy.
     */
    DomUtils.findAncestor = function (element, className, allowShadow) {
        if (allowShadow === void 0) { allowShadow = true; }
        while (element && element !== document.body) {
            if (DomUtils.hasClass(element, className)) {
                return element;
            }
            element = DomUtils.getParent(element, allowShadow);
        }
        return null;
    };
    /**
     * Calculates the minimum Rectangle that includes this element. Coordinates are relative to the viewport and
     * take into account the element border, padding, and optionally the margins.
     */
    DomUtils.calculateRect = function (element, includeMargins) {
        var domRect = element.getBoundingClientRect();
        var marginLeft = 0;
        var marginRight = 0;
        var marginTop = 0;
        var marginBottom = 0;
        if (includeMargins) {
            var style = window.getComputedStyle(element);
            marginLeft = parseFloat(style.marginLeft);
            marginRight = parseFloat(style.marginRight);
            marginTop = parseFloat(style.marginTop);
            marginBottom = parseFloat(style.marginBottom);
        }
        return new Rectangle_1.default(domRect.left - marginLeft, domRect.top - marginTop, domRect.width + marginLeft + marginRight, domRect.height + marginTop + marginBottom);
    };
    /**
     * Calculates the minimum Rectangle that includes this element and all its descendant elements. Coordinates are relative to the viewport.
     */
    DomUtils.calculateSubtreeRect = function (element) {
        var result = null;
        var stack = [element];
        while (stack.length > 0) {
            element = stack.shift();
            var elementRect = DomUtils.calculateRect(element);
            // exclude zero width/height elements
            if ((elementRect.width > 0) && (elementRect.height > 0)) {
                if (result) {
                    result = result.union(elementRect);
                }
                else {
                    result = elementRect;
                }
            }
            for (var i = 0, len = element.children.length; i < len; i++) {
                stack.push(element.children[i]);
            }
        }
        if (!result) {
            result = new Rectangle_1.default();
        }
        return result;
    };
    /* todo: verify this works and use in OverlayHostViewModel
      Calculates the offset FROM the first element TO the second. The returned Rectangle's
      left/top/right/bottom gives the offset for each of the four sides that can be added
      to the first element's offsets to get to the second.

    public static calculateOffsetRect(from: HTMLElement, to: HTMLElement): Rectangle {
        var fromRect = from.getBoundingClientRect();
        var toRect = to.getBoundingClientRect();

        var left = toRect.left - fromRect.left;
        var top = toRect.top - fromRect.top;

        return new Rectangle(
            left,
            top,
            -(left - (toRect.right - fromRect.right)), // width
            -(top - (toRect.bottom - fromRect.bottom))); // height
    }*/
    /**
     * Appends the child node to the parent node at the given index, optionally only including
     * instances of a certain tag when determining index.
     *
     * @param parent - parent element
     * @param child - child element
     * @param index - index to add at, based ONLY on Element children (not text/comments).
     *   index < 0 adds at beginning and too large index adds at end.
     * @param tagName - only count elements with this tag name (UPPERCASE for HTML documents);
     *   element will be added immediately after the last tag with the given name
     */
    DomUtils.insertAtIndex = function (parent, child, index, tagName) {
        if (!parent || !child) {
            return;
        }
        index = index < 0 ? 0 : index;
        var sibling = parent.firstElementChild;
        var count = 0;
        while (count < index && !!sibling) {
            if (!tagName || tagName === sibling.tagName) {
                count++;
            }
            sibling = sibling.nextElementSibling;
        }
        if (sibling) {
            parent.insertBefore(child, sibling);
        }
        else {
            parent.appendChild(child);
        }
    };
    return DomUtils;
}());
DomUtils.MAX_STYLE_CONTENT_SIZE = 10000;
DomUtils.SHADOW_PARENT_KEY = '_OneDrive_shadowParent';
DomUtils._platform = new PlatformDetection_1.default();
DomUtils._lastStyleElement = null;
DomUtils._styleText = "";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = DomUtils;


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// encode <>&'"
var ENCODE_HTML_TEXT_REGEX = /[<>&'"\\]/g;
var CODES = {
    '<': '&lt;',
    '>': '&gt;',
    '&': '&amp;',
    '"': '&quot;',
    '\'': '&#39;',
    '\\': '&#92;'
};
function replacer(match) {
    return CODES[match];
}
var HtmlEncoding = (function () {
    function HtmlEncoding() {
    }
    /**
     * Encodes a string for use in HTML text. Not recommended for attribute values
     * or anything that might be used in a URL.
     */
    HtmlEncoding.encodeText = function (inputString) {
        if (!inputString) {
            return "";
        }
        return inputString.replace(ENCODE_HTML_TEXT_REGEX, replacer);
    };
    return HtmlEncoding;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = HtmlEncoding;


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var TAG_BODY = '(?:[^"\'>]|"[^"]*"|\'[^\']*\')*';
/** Regex that matches all non-text in an HTML string. */
var NONTEXT_PATTERN = new RegExp('<(?:'
    + '!--(?:(?:-*[^->])*--+|-?)'
    + '|script\\b' + TAG_BODY + '>[\\s\\S]*?</script\\s*'
    + '|style\\b' + TAG_BODY + '>[\\s\\S]*?</style\\s*'
    + '|/?[a-z]' + TAG_BODY
    + ')>', 'gi');
/**
 * Contains utility functions to sanitize user input.
 * This should only be used for DISPLAYING user input, not for sending it to the server. The server itself
 * also needs to sanitize user input to avoid security risks.
 */
var Sanitize = (function () {
    function Sanitize() {
    }
    /**
     * Takes a string with HTML elements and returns only the text contents that the user would read.
     * This differs from .innerText in that it also removes the contents of script tags, and other similar differences.
     */
    Sanitize.getTextFromHtml = function (html) {
        var oldHtml = '';
        do {
            oldHtml = html;
            html = oldHtml.replace(NONTEXT_PATTERN, '');
        } while (oldHtml !== html);
        return html;
    };
    /**
     * Sanitizes the text by calling getTextFromHtml(), then decodes the HTML Entities, for example "&lt" to "<"
     */
    Sanitize.decodeHtmlEntities = function (text) {
        text = Sanitize.getTextFromHtml(text);
        var element = document.createElement('div');
        element.innerHTML = text;
        return element.textContent;
    };
    return Sanitize;
}());
exports.Sanitize = Sanitize;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Sanitize;


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// OneDrive:IgnoreCodeCoverage
var Signal_1 = __webpack_require__(12);
var Promise_1 = __webpack_require__(7);
function buildDirectoryEntry(tree) {
    return {
        name: tree.name,
        type: 2 /* directory */,
        getEntries: function () {
            return Promise_1.default.wrap({
                entries: buildEntries(tree)
            });
        }
    };
}
function buildFileEntry(file) {
    var entry;
    if (file.type) {
        entry = {
            name: file.name,
            type: 1 /* file */,
            getFile: function () { return Promise_1.default.wrap(file); }
        };
    }
    else {
        entry = {
            name: file.name,
            type: 0 /* unknown */,
            getFile: function () { return Promise_1.default.wrap(file); }
        };
    }
    return entry;
}
function buildEntries(tree) {
    var entries = [];
    for (var name_1 in tree.directories) {
        if (name_1) {
            entries.push(buildDirectoryEntry(tree.directories[name_1]));
        }
    }
    for (var _i = 0, _a = tree.files; _i < _a.length; _i++) {
        var file = _a[_i];
        entries.push(buildFileEntry(file));
    }
    return entries;
}
function buildEntriesFromFileList(files) {
    var root = {
        name: '',
        directories: {},
        files: []
    };
    for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {
        var file = files_1[_i];
        var _a = file.webkitRelativePath, path = _a === void 0 ? file.name : _a;
        var folder = root;
        for (var _b = 0, _c = path.split('/').slice(0, -1); _b < _c.length; _b++) {
            var part = _c[_b];
            folder = folder.directories[part] || (folder.directories[part] = {
                name: part,
                directories: {},
                files: []
            });
        }
        folder.files.push(file);
    }
    return buildEntries(root);
}
exports.buildEntriesFromFileList = buildEntriesFromFileList;
function readEntries(reader) {
    var signal = new Signal_1.default();
    reader.readEntries(function (entries) { return signal.complete(entries); }, function (error) { return signal.error(error); });
    return signal.getPromise();
}
function getFile(fileSystemFileEntry) {
    var signal = new Signal_1.default();
    fileSystemFileEntry.file(function (file) {
        signal.complete(file);
    }, function (error) {
        signal.error(error);
    });
    return signal.getPromise();
}
function getPage(reader) {
    return readEntries(reader).then(function (fileSystemEntries) {
        var page;
        if (fileSystemEntries.length) {
            page = {
                entries: fileSystemEntries.map(getEntry),
                getEntries: function () { return getPage(reader); }
            };
        }
        else {
            page = {
                entries: []
            };
        }
        return page;
    });
}
function getEntry(fileSystemEntry) {
    var entry;
    if (fileSystemEntry.isDirectory) {
        entry = {
            name: fileSystemEntry.name,
            type: 2 /* directory */,
            getEntries: function () {
                return getPage(fileSystemEntry.createReader());
            }
        };
    }
    else if (fileSystemEntry.isFile) {
        entry = {
            name: fileSystemEntry.name,
            type: 1 /* file */,
            getFile: function () {
                return getFile(fileSystemEntry);
            }
        };
    }
    return entry;
}
function buildEntriesFromEntryList(fileSystemEntries) {
    return fileSystemEntries.map(getEntry);
}
exports.buildEntriesFromEntryList = buildEntriesFromEntryList;


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var IconSelector = __webpack_require__(50);
var Path = __webpack_require__(69);
var idSeed = 0;
var Html5FileUpload = (function () {
    function Html5FileUpload(params, dependencies) {
        var file = params.file;
        this._file = file;
        this.eTag = file.eTag;
        var fileName = file.fileName || file.name;
        var _a = Path.splitFileName(fileName), nameWithoutExtension = _a.name, extension = _a.extension;
        this.extension = extension;
        this.iconName = IconSelector.getIconNameFromExtension(extension);
        this.size = file.size;
        var name;
        // when upload images from ios camera roll,
        // all the images are named 'image.jpg'.
        // This part is trying to give unique name for the image.
        if (dependencies.platformDetection.isIOS && nameWithoutExtension === 'image' && this.iconName === 'photo') {
            var _b = file.lastModifiedDate, lastModified = _b === void 0 ? new Date() : _b;
            name = "IMG_" + this._getLastModifiedISO8601(lastModified) + "_" + ++idSeed + extension;
        }
        else {
            name = fileName;
        }
        if (file.lastModifiedDate) {
            this.lastModifiedDate = file.lastModifiedDate;
        }
        this.name = name;
    }
    Html5FileUpload.prototype.slice = function (startByte, endByte) {
        var file = this._file;
        var slice = file.slice || file.mozSlice || file.webkitSlice;
        return slice.call(file, startByte, endByte);
    };
    Html5FileUpload.prototype._getLastModifiedISO8601 = function (date) {
        return date.getUTCFullYear() + ":" + leftPad(date.getUTCMonth() + 1, 2) + ":" + leftPad(date.getUTCDate(), 2) + " " + leftPad(date.getUTCHours(), 2) + ":" + leftPad(date.getUTCMinutes(), 2) + ":" + leftPad(date.getSeconds(), 2);
    };
    return Html5FileUpload;
}());
exports.Html5FileUpload = Html5FileUpload;
function leftPad(value, length) {
    var result = "" + value;
    while (result.length < length) {
        result = "0" + result;
    }
    return result;
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Html5FileUpload;


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Attaches a placeholder to a graft extension to remove the target field.
 * Once the graft is applied, the target object will have the key removed.
 *
 * @export
 * @template T
 * @returns {T}
 *
 * @example
 *  let item = {
 *      name: 'Test',
 *      upload: {
 *          percent: 50
 *      }
 *  };
 *
 *  graft(item, {
 *      upload: Graft.remove()
 *  });
 *
 *  expect(item).to.deep.equal({
 *      name: 'Test'
 *  });
 */
function remove() {
    return {
        graftOperationType: 3 /* remove */
    };
}
exports.remove = remove;
/**
 * Attaches a wrapper to a graft extension to ensure that the target field
 * is only replaced or added if the extension value is defined.
 *
 * @export
 * @template T
 * @param {T} [value]
 * @returns {T}
 *
 * @example
 *  let item = {
 *      name: 'Test'
 *  };
 *
 *  let childCount: number = undefined;
 *
 *  graft(item, {
 *      childCount: Graft.optional(childCount)
 *  });
 *
 *  expect(item).to.deep.equal({
 *      name: 'Test'
 *      // Note the lack of a 'childCount' key at all.
 *  });
 */
function optional(value) {
    return {
        graftOperationType: 2 /* optional */,
        value: value
    };
}
exports.optional = optional;
/**
 * Attaches a wrapper to a graft extension to ensure that the target field
 * is only added, and never replaced if already defined.
 *
 * If the extension value is an object but the target already defines the field,
 * the extension values will not be merged with the target values.
 *
 * @export
 * @template T
 * @param {T} value
 * @returns {T}
 *
 * @example
 *  let item = {
 *      name: 'Test',
 *      displayName: 'Existing'
 *  };
 *
 *  graft(item, {
 *      displayName: Graft.backup('Backup')
 *  });
 *
 *  expect(item).to.deep.equal({
 *      name: 'Test',
 *      displayName: 'Existing'
 *  });
 */
function backup(value) {
    return {
        graftOperationType: 4 /* backup */,
        value: value
    };
}
exports.backup = backup;
/**
 * Attaches a wrapper to a graft extension value to ensure that the target field
 * is only ever replaced or added, never merged.
 *
 * The extension value will be used directly, and not copied. Subsequent modifications
 * to the target item may result in changes to the extension value if it is an object.
 *
 * @export
 * @template T
 * @param {T} value
 * @returns {T}
 *
 * @example
 *  let item = {
 *      name: 'Test',
 *      photo: {
 *          width: 500,
 *          height: 300
 *      }
 *  };
 *
 *  graft(item, {
 *      photo: Graft.replace({
 *          originalUrl: 'http://test/unknown/jpg'
 *      })
 *  });
 *
 *  expect(item).to.deep.equal({
 *      name: 'Test',
 *      photo: {
 *          // Note that width and height are no longer present.
 *          originalUrl: 'http://test/unknown.jpg'
 *      }
 *  });
 */
function replace(value) {
    return {
        graftOperationType: 1 /* replace */,
        value: value
    };
}
exports.replace = replace;
/**
 * Grafts new updates to an existing object.
 * By default, `graft` deep-copies all values from `extension` onto `base`,
 * overriding new primitive and function fields, merging matching object fields, and concatenating
 * matching array fields.
 *
 * This function only copies fields defined on the `extension` object and its sub-objects, leaving
 * existing fields on the `base` tree which are not part of `extension` intact.
 *
 * The default merge behavior can be modified by wrapping the values supplied to fields of
 * the `extension` object.
 *
 * @export
 * @template B
 * @template E
 * @param {B} base
 * @param {E} extension
 * @returns {(B & E)}
 *
 * @example
 *  let base = {
 *      id: 'test',
 *      name: 'Test item',
 *      photo: {
 *          width: 400,
 *          height: 300
 *      },
 *      childCount: 7
 *  };
 *
 *  graft(base, {
 *      name: 'Renamed item',
 *      photo: {
 *          originalUrl: 'http://thumbnail/test.jpg'
 *      }
 *  });
 *
 *  expect(base).to.deep.equal({
 *      id: 'test',
 *      name: 'Renamed item',
 *      photo: {
 *          width: 400,
 *          height: 300,
 *          originalUrl: 'http://thumbnail/test.jpg'
 *      },
 *      childCount: 7
 *  });
 */
function graft(base, extension) {
    if (!isObject(base)) {
        throw new Error("Value for 'base' passed to 'graft' is not an object.");
    }
    if (!isObject(extension)) {
        throw new Error("Value for 'extension' passed to 'graft' is not an object");
    }
    if (extension === base) {
        // If the extension is the same object, do nothing.
        return base;
    }
    // Use Object.keys to copy the key list before iterating.
    for (var _i = 0, _a = Object.keys(extension); _i < _a.length; _i++) {
        var key = _a[_i];
        var extensionValue = extension[key];
        var baseValue = base[key];
        if (extensionValue === baseValue) {
            // If the base value is the same value, skip this key.
            continue;
        }
        var patch = extensionValue;
        if (isGraftOperation(patch)) {
            // A patch may perform an override action and skip to the next key,
            // or it may simply produce a new value to use for default grafting.
            if (isReplaceGraftOperation(patch)) {
                var value = patch.value;
                baseValue = undefined;
                extensionValue = value;
            }
            else if (isBackupGraftOperation(patch)) {
                var value = patch.value;
                var baseValue_1 = base[key];
                if (baseValue_1 === void 0) {
                    extensionValue = value;
                }
                else {
                    continue;
                }
            }
            else if (isOptionalGraftOperation(patch)) {
                var value = patch.value;
                if (value === void 0) {
                    continue;
                }
                else {
                    extensionValue = value;
                }
            }
            else if (isRemoveGraftOperation(patch)) {
                delete base[key];
                continue;
            }
            else {
                // Not a valid patch.
                // This would imply a caller assembled an object marked as a patch by circumventing the
                // exported functions of this module.
                throw new Error('Unknown patch specified for grafting. Only use exported functions from Graft to create patches.');
            }
        }
        var newValue = void 0;
        if (isDate(extensionValue)) {
            // The extension value is a date.
            // Dates are objects, but should be treated like primitives.
            // Since they are mutable, they should be copied instead of reused.
            newValue = new Date(extensionValue.getTime());
        }
        else if (isArray(extensionValue)) {
            // The extension value is an array, and the contents
            // should be used in place of the base values.
            var baseValueAsArray = baseValue;
            if (!isArray(baseValueAsArray)) {
                // Start with a new base value.
                baseValueAsArray = [];
            }
            // Replace the old array values with the new array values.
            baseValueAsArray.splice.apply(baseValueAsArray, [0, baseValueAsArray.length].concat(extensionValue));
            newValue = baseValueAsArray;
        }
        else if (isObject(extensionValue)) {
            // The extension value is an object (and not null), and the properties
            // should be merged with the base value.
            var baseValueAsObject = baseValue;
            if (!isObject(baseValueAsObject)) {
                // Start with a new base object.
                baseValueAsObject = {};
            }
            // Merge the new properties.
            graft(baseValueAsObject, extensionValue);
            newValue = baseValueAsObject;
        }
        else {
            // The extension value is a primitive, so the value should be replaced.
            // Note that function values are also handled here. Ultimately, there is no
            // way to copy a function precisely since they may contain closure references.
            newValue = extensionValue;
        }
        // Always re-assign the new value.
        // If the base uses property mutators, it will have a chance to inspect
        // the final value.
        base[key] = newValue;
    }
    return base;
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = graft;
// Use of type guards facilitates the type safety of the graft function.
function isObject(value) {
    return typeof value === 'object' && !!value;
}
function isDate(value) {
    return value instanceof Date;
}
function isArray(value) {
    return Array.isArray(value);
}
function isGraftOperation(value) {
    return isObject(value) && !!value.graftOperationType;
}
function isBackupGraftOperation(graftOperation) {
    return graftOperation.graftOperationType === 4 /* backup */;
}
function isRemoveGraftOperation(graftOperation) {
    return graftOperation.graftOperationType === 3 /* remove */;
}
function isOptionalGraftOperation(graftOperation) {
    return graftOperation.graftOperationType === 2 /* optional */;
}
function isReplaceGraftOperation(graftOperation) {
    return graftOperation.graftOperationType === 1 /* replace */;
}


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var doc = 'ms-word';
var one = 'onenote|UsePlain';
var ppt = 'ms-powerpoint';
var xls = 'ms-excel';
var vsd = 'ms-visio';
var pub = 'ms-publisher';
var accdb = 'ms-access';
var mpp = 'ms-project';
exports.wordType = doc;
exports.onenoteType = one;
exports.powerpointType = ppt;
exports.excelType = xls;
exports.visioType = vsd;
exports.OfficeAppToExtensionsMap = {
    'ms-access': ['accdb'],
    'ms-word': ['doc', 'docm', 'docx', 'dot', 'dotm', 'dotx', 'odt'],
    'ms-project': ['mpp'],
    'onenote|UsePlain': ['one', 'onepkg', 'onetoc2', 'notebook'],
    'ms-powerpoint': ['odp', 'pot', 'potm', 'potx', 'ppa', 'ppam', 'pps', 'ppsm', 'ppsx', 'ppt', 'pptm', 'pptx'],
    'ms-publisher': ['pub'],
    'ms-excel': ['ods', 'xla', 'xlam', 'xll', 'xls', 'xlsb', 'xlsm', 'xlsx', 'xlt', 'xltm', 'xltx'],
    'ms-visio': ['vdw', 'vsd', 'vsdm', 'vsdx', 'vsl', 'vss', 'vssm', 'vssx', 'vst', 'vstm', 'vstx']
};
exports.OfficeIconFileTypeMap = {
    accdb: accdb,
    doc: doc,
    docm: doc,
    docx: doc,
    dot: doc,
    dotm: doc,
    dotx: doc,
    pdf: doc,
    odp: ppt,
    ods: xls,
    odt: doc,
    one: one,
    onepkg: one,
    onetoc2: one,
    mpp: mpp,
    notebook: one,
    pot: ppt,
    potm: ppt,
    potx: ppt,
    ppa: ppt,
    ppam: ppt,
    pps: ppt,
    ppsm: ppt,
    ppsx: ppt,
    ppt: ppt,
    pptm: ppt,
    pptx: ppt,
    pub: pub,
    vdw: vsd,
    vsd: vsd,
    vsdm: vsd,
    vsdx: vsd,
    vsl: vsd,
    vss: vsd,
    vssm: vsd,
    vssx: vsd,
    vst: vsd,
    vstm: vsd,
    vstx: vsd,
    xla: xls,
    xlam: xls,
    xll: xls,
    xls: xls,
    xlsb: xls,
    xlsm: xls,
    xlsx: xls,
    xlt: xls,
    xltm: xls,
    xltx: xls
};
var officeFriendlyNameMap = (_a = {},
    _a[accdb] = 'Access',
    _a[doc] = 'Word',
    _a[one] = 'OneNote',
    _a[ppt] = 'PowerPoint',
    _a[xls] = 'Excel',
    _a[vsd] = 'Visio',
    _a[pub] = 'Publisher',
    _a[mpp] = 'Project',
    _a);
function getOfficeAppFriendlyName(app) {
    return officeFriendlyNameMap[app] || app;
}
exports.getOfficeAppFriendlyName = getOfficeAppFriendlyName;
var officeAppMap = (_b = {},
    _b[doc] = 'Word',
    _b[xls] = 'Excel',
    _b[ppt] = 'PowerPoint',
    _b[one] = 'OneNote',
    _b[vsd] = 'Visio',
    _b);
function getApp(item) {
    var extension = item.extension;
    // Special case pdf, because it's mapped to word but we want to distinguish it
    // on the navigation to wac
    if (extension && extension.toLowerCase() === ".pdf") {
        return 'WordPdf';
    }
    // Default to word in case no match is found
    return officeAppMap[item.appMap] || 'Word';
}
exports.getApp = getApp;
var _a, _b;


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var EventGroup_1 = __webpack_require__(27);
var Promise_1 = __webpack_require__(7);
function createImageThumbnail(imageBlob, maxWidth, maxHeight) {
    return readBlobAsDataUrl(imageBlob).then(function (sourceImageDataUrl) {
        // create an <img> element from source image file to get dimensions
        var imageElement = document.createElement('img');
        imageElement.src = sourceImageDataUrl;
        var width = imageElement.width;
        var height = imageElement.height;
        // compute thumbnail dimensions by scaling along its largest axis and maintaining
        // the source image's aspect ratio
        if (width > height) {
            if (width > maxWidth) {
                height *= maxWidth / width;
                width = maxWidth;
            }
        }
        else {
            if (height > maxHeight) {
                width *= maxHeight / height;
                height = maxHeight;
            }
        }
        width = Math.floor(width);
        height = Math.floor(height);
        if (width === imageElement.width && height === imageElement.height) {
            // nothing to do, bail out early
            return imageBlob;
        }
        // render image at new dimensions into <canvas>
        var canvasElement = document.createElement('canvas');
        canvasElement.width = width;
        canvasElement.height = height;
        var canvasContext = canvasElement.getContext('2d');
        canvasContext.drawImage(imageElement, 0 /*dstX*/, 0 /*dstY*/, width, height);
        // would be nice to use canvas.toBlob() but appears to be too bleeding edge for now so need to render out
        // to a data URL and then manually convert to a Blob by converting the base64 encoding to a byte array
        // render canvas into an image data URL with a matching MIME type
        // explicitly pass encoder quality for JPEGs to ensure consistency across browsers (Chrome and Firefox
        // both default to a 0.92 encoder quality so go with that)
        var dataUrl = (imageBlob.type === 'image/jpeg') ?
            canvasElement.toDataURL(imageBlob.type, 0.92) :
            canvasElement.toDataURL(imageBlob.type);
        // convert data URL to a Blob
        return getBlobFromDataUrl(dataUrl);
    });
}
exports.createImageThumbnail = createImageThumbnail;
function getBlobFromDataUrl(dataUrl) {
    // data:[<MIME-type>][;charset=<encoding>][;base64],<data>
    // parse out <data> and <MIME-type> segments
    var byteString = atob(dataUrl.split(',')[1]);
    var byteArray = new Uint8Array(byteString.length);
    var mimeType = dataUrl.split(',')[0].split(':')[1].split(';')[0];
    // copy bytes from decoded base64 string into byte array
    for (var i = 0, len = byteString.length; i < len; i++) {
        byteArray[i] = byteString.charCodeAt(i);
    }
    return new Blob([byteArray], { type: mimeType });
}
function readBlobAsDataUrl(blob) {
    var events = new EventGroup_1.default(this);
    return new Promise_1.default(function (complete, error) {
        var fileReader = new FileReader();
        events.on(fileReader, 'load', function (ev) {
            complete(fileReader.result);
            events.dispose();
        });
        events.on(fileReader, 'error', function (ev) {
            error(fileReader.error); // DOMError
            events.dispose();
        });
        fileReader.readAsDataURL(blob);
    });
}


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Killswitch = (function () {
    function Killswitch() {
    }
    /**
     * Performs the static initialization of the kill switches map.
     * @param {{[key: string]: boolean}} killSwitches - The map of all active killswitches.
     */
    Killswitch.initKillSwitches = function (killSwitches) {
        Killswitch._killSwitches = killSwitches || {};
    };
    /**
     * Returns true if the given SPO killswitch is found in the static map
     * of active killswitches.
     * @requires - The application should initialize the static map
     * of active killswitches using initKillSwitches before invoking this method.
     * @param {string} killSwitch - The string representation of the guid identifying the
     * killswitch to check.
     * @param {string} date - The date when the kill switch check has been added to the codebase.
     * @param {string} message - A text message associated with the kill switch.
     * @returns {boolean} - True if the given kill switch is found active.
     */
    Killswitch.isActivated = function (killSwitch, date, message) {
        // use _spPageContextInfo for backward compatibility while still available
        var _spPageContextInfo = window['_spPageContextInfo'];
        if (!Killswitch._killSwitches && _spPageContextInfo && _spPageContextInfo.killSwitches) {
            Killswitch.initKillSwitches(_spPageContextInfo.killSwitches);
        }
        return killSwitch && Killswitch._killSwitches &&
            Killswitch._killSwitches[killSwitch.toUpperCase()];
    };
    return Killswitch;
}());
Killswitch._killSwitches = null;
exports.Killswitch = Killswitch;


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Features_1 = __webpack_require__(28);
var ShortcutLink = { ODB: 563, ODC: null, Fallback: false };
var ShortcutUtilities;
(function (ShortcutUtilities) {
    'use strict';
    /**
     * Returns true if item is a Shortcut item, and false otherwise.
     * Checks the file extension for .url and .website
     */
    function isShortcutItem(item) {
        if (!item || !item.extension) {
            return false;
        }
        var fileType;
        if (item.extension[0] !== '.') {
            // Technically, extension should always start with a '.' but that's not actually the case
            fileType = item.extension;
        }
        else {
            fileType = item.extension.slice(1);
        }
        return isShortcutFileType(fileType);
    }
    ShortcutUtilities.isShortcutItem = isShortcutItem;
    /**
     * Identifies whether or not a given file type should be treated as a shortcut item.
     * Note that while a file extension has a preceding '.' character, a file type does not.
     */
    function isShortcutFileType(fileType) {
        // note: lnk files are not supported in odb's SP shortcuts API, we should not treat .lnk files as shortcut files.
        return fileType === 'url' || fileType === 'website';
    }
    ShortcutUtilities.isShortcutFileType = isShortcutFileType;
    function isShortcutEnabled() {
        return Features_1.default.isFeatureEnabled(ShortcutLink);
    }
    ShortcutUtilities.isShortcutEnabled = isShortcutEnabled;
    var ShortcutErrors;
    (function (ShortcutErrors) {
        /** Generic unknown error */
        ShortcutErrors[ShortcutErrors["UnknownError"] = 0] = "UnknownError";
        /** File already exists (error during new file creation). */
        ShortcutErrors[ShortcutErrors["NewFileCreationFileAlreadyExistsError"] = 1] = "NewFileCreationFileAlreadyExistsError";
        /** Filename contains an invalid character, such as # % * : < > ? / | */
        ShortcutErrors[ShortcutErrors["InvalidCharacterError"] = 2] = "InvalidCharacterError";
    })(ShortcutErrors = ShortcutUtilities.ShortcutErrors || (ShortcutUtilities.ShortcutErrors = {}));
})(ShortcutUtilities || (ShortcutUtilities = {}));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ShortcutUtilities;


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var Engagement_event_1 = __webpack_require__(20);
;
/**
 * Enum for the types of targets that can be used to run an experiment.
 * @enum {number}
 */
var TargetType;
(function (TargetType) {
    /** Value for user population. */
    TargetType[TargetType["user"] = 1] = "user";
    /** Value for tenant population.  */
    TargetType[TargetType["tenant"] = 2] = "tenant";
    /** Value for farm population. */
    TargetType[TargetType["farm"] = 3] = "farm";
})(TargetType = exports.TargetType || (exports.TargetType = {}));
/**
 * This class will be used for AB Testing type of experiments.
 */
var ABExperiment = (function () {
    /**
     * @constructor
     * @param {IABExperimentData} experimentData The data for the experiment.
     * @example
     * // set the experiment data
     * let newMenuExperimentData: IABExperimentData = { name: "NewMenu", startDate: "11/17/2016", segmentPopulation: 0.4};
     * // create the experiment object
     * let newMenuExperiment: ABExperiment = new ABExperiment(newMenuExperimentData);
     */
    function ABExperiment(experimentData) {
        // set the _experimentData
        // if segementPopulation is not specified set it to half, 0.5
        // if targetType is not specified set it to user type
        this._experimentData = {
            name: experimentData.name,
            startDate: experimentData.startDate,
            segmentPopulation: (experimentData.segmentPopulation === undefined) ? 0.5 : experimentData.segmentPopulation,
            targetType: (experimentData.targetType === undefined) ? TargetType.user : experimentData.targetType
        };
        // set isOn to false, by default
        this._isOn = false;
        if (ABExperiment._pageContext === null || ABExperiment._pageContext === undefined) {
            // log that the App that wasnts to do experiments
            // does not have host settings and quit doing the experiment checks
            Engagement_event_1.Engagement.logData({ name: this._experimentData.name + ".Experiment.HostSettingsMissing" });
        }
        else {
            // set the isOn flag based on the target type
            // if it ever reaches the default then return false
            switch (this._experimentData.targetType) {
                case TargetType.user:
                    this._isOn = this._isUserExperimentOn();
                    break;
                case TargetType.tenant:
                    this._isOn = this._isTenantExperimentOn();
                    break;
                case TargetType.farm:
                    this._isOn = this._isFarmExperimentOn();
                    break;
            }
        }
    }
    /**
     * Initializes ABExperiment with the pageContext.
     * @param {ISpPageContext} pageContext The _spPageContextInfo of the app where is experiment is running.
     */
    ABExperiment.Init = function (pageContext) {
        ABExperiment._pageContext = pageContext;
        ABExperiment._pageContext = {
            userLoginName: pageContext.userLoginName || 'missing_user',
            siteSubscriptionId: pageContext.siteSubscriptionId || 'missing_tenant',
            farmLabel: pageContext.farmLabel || 'missing_farm'
        };
    };
    /**
     * Returns the experiment data to be used for logging purposes.
     * @return {IABExperimentData}.
     */
    ABExperiment.prototype.GetExperimentData = function () {
        return this._experimentData;
    };
    /**
     * Checks if the current specified target is being selected to be part of the experiment.
     * @param {string} targetType is the type of target that the experiment will run on. It can be user, tenant, or farm.
     * @return {boolean}.
     */
    ABExperiment.prototype.IsExperimentOn = function () {
        return this._isOn;
    };
    /**
     * Checks if the current user is being selected to be part of the experiment.
     * @return {boolean}.
     */
    ABExperiment.prototype._isUserExperimentOn = function () {
        // in case there are no host settings default to no experiments
        if (ABExperiment._pageContext === null) {
            return false;
        }
        // build an uber token
        var targetToken = this._experimentData.name + '_' +
            ABExperiment._pageContext.userLoginName + '_' +
            ABExperiment._pageContext.siteSubscriptionId + '_' +
            ABExperiment._pageContext.farmLabel;
        return this._isExperimentOn(targetToken);
    };
    /**
     * Checks if the current tenant is being selected to be part of the experiment.
     * @return {boolean}.
     */
    ABExperiment.prototype._isTenantExperimentOn = function () {
        // in case there are no settings default to no experiment path
        if (ABExperiment._pageContext === null) {
            return false;
        }
        // build an uber token
        var targetToken = this._experimentData.name + '_' +
            ABExperiment._pageContext.siteSubscriptionId + '_' +
            ABExperiment._pageContext.farmLabel;
        return this._isExperimentOn(targetToken);
    };
    /**
     * Checks if the current farm is being selected to be part of the experiment.
     * @return {boolean}.
     */
    ABExperiment.prototype._isFarmExperimentOn = function () {
        // in case there are no settings default to no experiment path
        if (ABExperiment._pageContext === null) {
            return false;
        }
        // build the token
        var targetToken = this._experimentData.name + '_' +
            ABExperiment._pageContext.farmLabel;
        return this._isExperimentOn(targetToken);
    };
    /**
     * Returns true if the curent target type is being selected to be part of the experiment.
     * @param {string} targetToken this is the unique identfier for target.
     * @returns {boolean} true if the targetToken is in the segementPopulation defined for the experiment.
     */
    ABExperiment.prototype._isExperimentOn = function (targetToken) {
        if (targetToken === null) {
            return false;
        }
        // get the hash number for the specified targetToken
        var varHash = this._getHashNumber(targetToken);
        // it returns true if varHash is less than segementPopulation
        // same time, it logs experiment info
        if (varHash <= this._experimentData.segmentPopulation) {
            this._logData(true);
            return true;
        }
        else {
            this._logData(false);
            return false;
        }
    };
    /**
     * Returns an unique number based on the string provided.
     * @param {string} inputString this is the unique uber identfier for target.
     * @returns {number}.
     */
    ABExperiment.prototype._getHashNumber = function (inputString) {
        // in case there will be empty strings returns 1
        // this will take it to the experiment off path
        if (inputString.length === 0) {
            return 1;
        }
        var hash = 5381;
        for (var i = 0; i < inputString.length; ++i) {
            hash = ((hash << 5) + hash) + inputString.charCodeAt(i);
            hash = hash & hash;
        }
        hash = hash & 0xFFFF;
        return hash / 0xFFFF;
    };
    ;
    /**
     * Log the experiment data for teting purposes.
     */
    ABExperiment.prototype._logData = function (isOn) {
        // prepare the extraData
        var extraData = {
            isTreatment: isOn,
            startDate: this._experimentData.startDate,
            isExternalGuestUser: ABExperiment._pageContext.isExternalGuestUser,
            isAnonymousGuestUser: ABExperiment._pageContext.isAnonymousGuestUser,
            farmLabel: ABExperiment._pageContext.farmLabel,
            targetType: this._experimentData.targetType
        };
        // the tag will look like this <ScenarioName>.<experimentName>.Experiment
        Engagement_event_1.Engagement.logData({ name: this._experimentData.name + ".Experiment", extraData: extraData });
    };
    return ABExperiment;
}());
exports.ABExperiment = ABExperiment;


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var Manager_1 = __webpack_require__(5);
var EventBatchCache_1 = __webpack_require__(112);
var XHR_1 = __webpack_require__(132);
var Beacon_event_1 = __webpack_require__(19);
var BeaconBase = (function () {
    function BeaconBase(endPointUrl, batchSize, flushTimeouts, useSlidingWindow, maxCriticalFlushInterval, totalRetries, resetTotalRetriesAfter, ignorePreviousEvents) {
        var _this = this;
        this._lastSendBeacon = 0;
        this._endPointUrl = endPointUrl;
        this._maxCriticalFlushInterval = maxCriticalFlushInterval;
        this._totalRetries = totalRetries === undefined ? BeaconBase.DEFAULT_TOTAL_RETRIES : totalRetries;
        this._totalRetriesStartValue = this._totalRetries;
        this._resetTotalRetriesAfter = resetTotalRetriesAfter === undefined ? BeaconBase.DEFAULT_RESET_TOTAL_RETRIES_AFTER : resetTotalRetriesAfter;
        this._ignorePreviousEvents = ignorePreviousEvents === undefined ? false : ignorePreviousEvents;
        this._eventBatchCache = new EventBatchCache_1.default(batchSize, flushTimeouts, function (event) {
            if (_this._onNewEvent) {
                _this._onNewEvent(event);
            }
        }, function (events) {
            // Create the beacon request
            _this._createBeaconRequest(events);
        }, useSlidingWindow);
        this.init();
    }
    BeaconBase.prototype.sendBeacon = function (json, headers, requestTimeoutInMS) {
        this._sendBeacon(json, headers, requestTimeoutInMS, 0);
    };
    BeaconBase.prototype._sendBeacon = function (json, headers, requestTimeoutInMS, retryCount) {
        var _this = this;
        if (retryCount === 0) {
            this._lastSendBeacon = Manager_1.Manager.getTime();
        }
        var xhr = new XHR_1.default({
            url: this._endPointUrl,
            json: json,
            headers: headers,
            requestTimeoutInMS: requestTimeoutInMS
        });
        var beaconEvent = new Beacon_event_1.Beacon({
            retryCount: retryCount,
            totalRetries: this._totalRetries
        });
        xhr.start(function (xhr, status) {
            beaconEvent.end({ status: status + '', success: true });
            if (++_this._successfulLogRequests >= _this._resetTotalRetriesAfter) {
                _this._successfulLogRequests = _this._resetTotalRetriesAfter;
                _this._totalRetries = _this._totalRetriesStartValue;
            }
        }, function (xhr, status, timeout) {
            _this._successfulLogRequests = 0;
            beaconEvent.end({ status: status + '', success: false });
            // Retry if we timed out since we failed
            if (status === -2 /* timeout */ && _this._totalRetries > 0) {
                _this._totalRetries--;
                _this._sendBeacon(json, headers, requestTimeoutInMS, retryCount + 1);
            }
        });
    };
    BeaconBase.prototype.init = function () {
        var _this = this;
        var bufferedEvents = Manager_1.Manager.addLogHandler(function (event) {
            _this.addEvent(event);
        });
        if (!this._ignorePreviousEvents) {
            for (var x = 0; x < bufferedEvents.length; x++) {
                this.addEvent(bufferedEvents[x]);
            }
        }
    };
    BeaconBase.prototype.addEvent = function (event) {
        if (event.enabled) {
            this._eventBatchCache.addEvent(event);
            if (event.critical &&
                (!this._lastSendBeacon ||
                    Manager_1.Manager.getTime() - this._lastSendBeacon > this._maxCriticalFlushInterval)) {
                this._eventBatchCache.flush();
            }
        }
    };
    return BeaconBase;
}());
BeaconBase.DEFAULT_TOTAL_RETRIES = 3;
BeaconBase.DEFAULT_RESET_TOTAL_RETRIES_AFTER = 3;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = BeaconBase;


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var Async_1 = __webpack_require__(4);
var Beacon_event_1 = __webpack_require__(19);
var ErrorHelper_1 = __webpack_require__(3);
var EventBatchCache = (function () {
    function EventBatchCache(maxSize, maxFlushTimes, newEventHandler, flushHandler, useSlidingWindow) {
        this._events = [];
        this._flushCount = 0;
        this._async = new Async_1.default(this);
        this._maxSize = maxSize;
        this._newEventHandler = newEventHandler;
        this._flushHandler = flushHandler;
        this._maxFlushTimes = maxFlushTimes;
        this._useSlidingWindow = useSlidingWindow;
    }
    EventBatchCache.prototype.addEvent = function (event) {
        this._events.push(event);
        if (this._newEventHandler) {
            try {
                this._newEventHandler(event);
            }
            catch (e) {
                ErrorHelper_1.default.log(e);
            }
        }
        // Dont create a timer for events that are of type beacon
        if (Beacon_event_1.Beacon.isTypeOf(event)) {
            return;
        }
        if (this._events.length >= this._maxSize) {
            this.flush();
        }
        else {
            this._setFlushTimeout(false);
        }
    };
    EventBatchCache.prototype.flush = function () {
        this._setFlushTimeout(true);
    };
    EventBatchCache.prototype._handleFlush = function () {
        this._clearFlushTimeout();
        if (this._events.length) {
            this._flushHandler(this._events);
            // Reset the events array
            this._events = [];
        }
    };
    EventBatchCache.prototype._clearFlushTimeout = function () {
        if (this._flushTimeoutId) {
            this._async.clearTimeout(this._flushTimeoutId);
            this._flushTimeoutId = null;
        }
        if (this._immediateflushTimeoutId) {
            this._async.clearTimeout(this._immediateflushTimeoutId);
            this._immediateflushTimeoutId = null;
        }
    };
    EventBatchCache.prototype._setFlushTimeout = function (immediate) {
        var _this = this;
        // if another immediate flush is already queued, disregard
        if (!!this._immediateflushTimeoutId) {
            return;
        }
        if (this._useSlidingWindow) {
            this._clearFlushTimeout();
            if (immediate) {
                this._immediateflushTimeoutId = this._async.setTimeout(function () {
                    _this._handleFlush();
                }, 0);
            }
            else {
                this._flushTimeoutId = this._async.setTimeout(function () {
                    _this._handleFlush();
                }, this._getFlushTime());
            }
        }
        else {
            if (immediate) {
                if (!this._immediateflushTimeoutId) {
                    this._immediateflushTimeoutId = this._async.setTimeout(function () {
                        _this._handleFlush();
                    }, 0);
                }
            }
            else if (!this._flushTimeoutId) {
                this._flushTimeoutId = this._async.setTimeout(function () {
                    _this._handleFlush();
                }, this._getFlushTime());
            }
        }
    };
    EventBatchCache.prototype._getFlushTime = function () {
        if (this._flushCount < this._maxFlushTimes.length) {
            var flushCount = this._flushCount;
            this._flushCount++;
            return this._maxFlushTimes[flushCount];
        }
        else {
            return this._maxFlushTimes[this._maxFlushTimes.length - 1];
        }
    };
    return EventBatchCache;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = EventBatchCache;


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var RequireJSError_event_1 = __webpack_require__(58);
var ErrorHelper_1 = __webpack_require__(3);
var RequireJSErrorHandler = (function () {
    function RequireJSErrorHandler() {
    }
    RequireJSErrorHandler.log = function (err) {
        // Log the error as data an fire log error so it shows up in the error logs
        RequireJSError_event_1.RequireJSError.logData(err);
        // Only log script errors to log error
        if (err &&
            (err.requireType === "define" ||
                err.requireType === "require") &&
            err.stack &&
            err.requireModules) {
            ErrorHelper_1.default.log(err);
        }
    };
    RequireJSErrorHandler.registerRequireOnError = function () {
        if (window["requirejs"] && typeof window["requirejs"] === 'function') {
            var prevOnError = window["requirejs"].onError;
            window["requirejs"].onError = function (err) {
                RequireJSErrorHandler.log(err);
                if (prevOnError && !err.isTest) {
                    prevOnError(err);
                }
            };
        }
    };
    return RequireJSErrorHandler;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = RequireJSErrorHandler;
RequireJSErrorHandler.registerRequireOnError();


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var SingleEventBase_1 = __webpack_require__(1);
exports.Nav = SingleEventBase_1.createSingleEvent({
    eventName: 'Nav,',
    shortEventName: 'Nav'
}, {
    viewParams: 4 /* Object */,
    url: 1 /* String */
});
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.Nav;


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var SingleEventBase_1 = __webpack_require__(1);
exports.UnhandledError = SingleEventBase_1.createSingleEvent({
    eventName: 'UnhandledError,',
    shortEventName: 'UnhandledError',
    critical: true,
    requiresParent: false
}, {
    message: 1 /* String */,
    stack: 1 /* String */,
    builtStack: 1 /* String */,
    line: 2 /* Number */,
    col: 2 /* Number */,
    url: 1 /* String */
});
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.UnhandledError;


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ErrorHelper_1 = __webpack_require__(3);
var BeaconBase_1 = __webpack_require__(111);
var BeaconCache_1 = __webpack_require__(61);
var BaseDataStore_1 = __webpack_require__(21);
var DataStoreCachingType_1 = __webpack_require__(15);
var LogProcessor_1 = __webpack_require__(62);
var Beacon;
(function (Beacon) {
    "use strict";
    var LOGGING_REQUEST_TIMEOUT = 10000; // 10 seconds
    var FLUSH_TIMEOUT = 5000; // 5 seconds
    var BEACON_BATCH_SIZE = 100;
    var BEACON_MAX_CRITICAL_FLUSH_INTERVAL_SIZE = 5000; // 5 seconds
    // SLAPI
    var SLAPI_STREAM_ID = 1234;
    var SLAPI_JSON_VERSION = "V1";
    var SLAPI_IDX_VERSION = 0;
    var SLAPI_IDX_EVENTNAME = 1;
    var SLAPI_IDX_PROPERTY_START = 2;
    // BSQM Constants
    var SLAPI_MAX_DATA_SIZE = 64 * 1024;
    var SLAPI_MAX_ROWS_IN_STREAM = 1000;
    var SLAPI_SIZE_DWORD = 4;
    var SLAPI_SIZE_DATAPOINT_ENTRY = 3 * 4 /*SIZE_DWORD*/;
    var SLAPI_SIZE_STREAM_ENTRY = 3 * 4 /*SIZE_DATAPOINT_ENTRY*/;
    var SLAPI_MS_BTN_EPOCHS = 11644473600000; // Milliseconds between 1/1/1070 and 1/1/1601
    var SLAPI_MAX_INT32 = 0xFFFFFFFF;
    var SLAPI_MAX_SQM_DATAID = 0x7FFFFFFF;
    var SLAPI_DATAKEY_SESSION_NORMAL = 0;
    var SLAPI_DATAKEY_SESSION_CONTINUATION = 1;
    var SLAPI_FLAG_BSQM_ENABLED = 0x00000010;
    // const SLAPI_FLAG_QOS_ENABLED = 0x00000020;
    // SQM Datapoints
    var SLAPI_DATAID_BSQM_MAXSTREAMROWSSTREAMID = 8048;
    var SLAPI_DATAID_BSQM_MAXSTREAMROWS = 7993;
    var SLAPI_DATAID_SESSION_TYPE = 60;
    var WSAStreamRow = (function () {
        function WSAStreamRow(values) {
            this.Tic = 0;
            this.Vals = null;
            var _this = this;
            _this.Tic = _getTicks32();
            var numValues = values.length;
            _this.Vals = new Array(numValues);
            for (var i = 0; i < numValues; i++) {
                _this.Vals[i] = values[i];
            }
        }
        return WSAStreamRow;
    }());
    var WSADatapoint = (function () {
        function WSADatapoint(id, value) {
            var _this = this;
            _this.Id = id;
            _this.Val = value;
            _this.Tic = _getTicks32();
        }
        return WSADatapoint;
    }());
    var WSAStream = (function () {
        function WSAStream(id, width) {
            var _this = this;
            _this.Id = id;
            _this.Width = width;
            _this.Rows = new Array(0);
        }
        return WSAStream;
    }());
    var WSAData = (function () {
        function WSAData() {
            this.StartTime = null;
            this.EndTime = null;
            this.Flags = 0;
            this.wsaDatapoints = null;
            this.wsaStreams = null;
            var _this = this;
            _this.StartTime = _getTicks64();
            _this.EndTime = null;
            _this.CorrelationId = null;
            _this.Flags = SLAPI_FLAG_BSQM_ENABLED;
            _this.wsaDatapoints = new Array(0);
            _this.wsaStreams = new Array(0);
        }
        return WSAData;
    }());
    var _startTicks = 0;
    var _wsaData = null;
    var _numDatapoints = 0;
    var _numStreams = 0;
    var _numStreamBytes = 0;
    var _dictStreams = null;
    var _dictDatapoints = null;
    var _streamRowCount = 0;
    var _isDataAvailableForUpload = false;
    var _isContinuation = false;
    var _isInitialized = false;
    var _emptyCorrelationId = '00000000-0000-0000-0000-000000000000';
    var _eventNamePrefix = "";
    var _store = null;
    var _storeSize = null;
    var _instance = null;
    var _handlers = null;
    if (true) {
        try {
            console.log("Beacon: To disable logging to the console set \"window.disableBeaconLogToConsole = true\" in the debug window");
        }
        catch (error) {
        }
    }
    var OdbBeacon = (function (_super) {
        __extends(OdbBeacon, _super);
        function OdbBeacon(eventNamePrefix, handlers, cacheEnabled, correlationId, flushTimeout) {
            if (flushTimeout === void 0) { flushTimeout = FLUSH_TIMEOUT; }
            var _this = _super.call(this, '/_layouts/15/WsaUpload.ashx', BEACON_BATCH_SIZE, [flushTimeout], true, /* useSlidingWindow */ BEACON_MAX_CRITICAL_FLUSH_INTERVAL_SIZE, BeaconBase_1.default.DEFAULT_TOTAL_RETRIES, BeaconBase_1.default.DEFAULT_RESET_TOTAL_RETRIES_AFTER, cacheEnabled /* ignorePreviousEvents */) || this;
            _eventNamePrefix = eventNamePrefix;
            _handlers = handlers;
            _store = new BaseDataStore_1.default(LogProcessor_1.default.STORE_KEY,  true ? DataStoreCachingType_1.default.sharedMemory : DataStoreCachingType_1.default.session);
            _storeSize = _store.getValue(LogProcessor_1.default.STORE_SIZE_KEY);
            if (!_storeSize) {
                _storeSize = 0;
            }
            if (correlationId) {
                _this._cid = correlationId;
            }
            return _this;
        }
        OdbBeacon.prototype.beacon = function () {
            if (false) {
                var json = _getUploadData();
                if (json != null && json.length > 0) {
                    var headers = {};
                    headers["Content-Type"] = "application/json";
                    this.sendBeacon(json, headers, LOGGING_REQUEST_TIMEOUT);
                }
            }
            else if (!window["disableBeaconLogToConsole"]) {
                try {
                    console.log("Beacon: Uploaded to COSMOS (To disable logging to the console set \"window.disableBeaconLogToConsole = true\" in the debug window)");
                }
                catch (error) {
                }
            }
            // Set session storage size to zero instead of clearing
            _storeSize = 0;
            _store.setValue(LogProcessor_1.default.STORE_SIZE_KEY, _storeSize);
        };
        OdbBeacon.prototype._createBeaconRequest = function (events) {
            _SetCorrelationId(this._correlationId);
            // Converts to SP logging format
            for (var x = 0; x < events.length; x++) {
                var event = events[x];
                LogProcessor_1.default.processAndLogEvent({
                    event: event,
                    logFunc: function (streamName, dictProperties) {
                        _WriteLog(streamName, dictProperties);
                    },
                    eventNamePrefix: _eventNamePrefix,
                    handlers: _handlers
                });
            }
            this.beacon();
        };
        OdbBeacon.prototype._onNewEvent = function (event) {
            // BeaconCache puts every new event to the session storage so that Sharepoint can upload it for us
            // if user navigates away before Beacon event. So we do nothing here.
        };
        Object.defineProperty(OdbBeacon.prototype, "_correlationId", {
            get: function () {
                // Avoid reading from the global variable if correlationId has been passed in.
                // The _spPageContextInfo may not always exist.
                if (this._cid) {
                    return this._cid;
                }
                var spPageContextInfo = window['_spPageContextInfo'];
                if (spPageContextInfo) {
                    return spPageContextInfo.CorrelationId;
                }
                return _emptyCorrelationId;
            },
            enumerable: true,
            configurable: true
        });
        return OdbBeacon;
    }(BeaconBase_1.default));
    function addToLoggingManager(eventNamePrefix, handlers, correlationId, flushTimeout) {
        if (!_instance) {
            var cacheEnabled = false;
            if (BeaconCache_1.default.instance) {
                eventNamePrefix = BeaconCache_1.default.eventNamePrefix;
                handlers = BeaconCache_1.default.handlers;
                cacheEnabled = true;
            }
            if (!eventNamePrefix || !handlers) {
                throw new Error("You have to pass in eventNamePrefix and IBeaconHandlers object if no BeaconCache present.");
            }
            _instance = new OdbBeacon(eventNamePrefix, handlers, cacheEnabled, correlationId, flushTimeout);
            // read any events Sharepoint (or BeaconCache) put into session storage but haven't uploaded
            for (var i = 0; i < _storeSize; i++) {
                var item = _store.getValue(i.toString());
                if (!item || !item['name'] || !item['props']) {
                    continue;
                }
                _WriteLog(item['name'], item['props']);
            }
        }
        else {
            throw new Error("The beacon has already been added to the logging manager with event name prefix " + _eventNamePrefix + ".");
        }
    }
    Beacon.addToLoggingManager = addToLoggingManager;
    function _initialize() {
        if (_isInitialized) {
            return;
        }
        _wsaData = new WSAData();
        _dictStreams = new Array(0);
        _dictDatapoints = new Array(0);
        _createStream(SLAPI_STREAM_ID, 1);
        _isInitialized = true;
    }
    function _createStream(streamId, width) {
        if (!Boolean(_dictStreams[streamId])) {
            var wsaStream = new WSAStream(streamId, width);
            var idxStream = _numStreams;
            _wsaData.wsaStreams[idxStream] = wsaStream;
            _numStreams++;
            _numStreamBytes += SLAPI_SIZE_STREAM_ENTRY;
            _dictStreams[streamId] = idxStream;
        }
    }
    function _addToStream(streamId, dictValues) {
        try {
            var wsaStreamRow = new WSAStreamRow(dictValues);
            if (_isMaxSizeReachedCheck()) {
                return;
            }
            _isDataAvailableForUpload = true;
            _setDatapoint(SLAPI_DATAID_BSQM_MAXSTREAMROWSSTREAMID, streamId);
            var wsaStream = _wsaData.wsaStreams[_dictStreams[streamId]];
            if (Boolean(wsaStream)) {
                if (_streamRowCount < SLAPI_MAX_ROWS_IN_STREAM) {
                    wsaStream.Rows[_streamRowCount++] = wsaStreamRow;
                    _numStreamBytes += _getTotalBytesForRow(wsaStreamRow);
                    _setDatapoint(SLAPI_DATAID_BSQM_MAXSTREAMROWS, _streamRowCount); // update row count datapoint
                }
                else {
                    throw ("Beacon: MAX_ROWS_IN_STREAM exceeded for stream ID " + String(streamId));
                }
            }
        }
        catch (e) {
            ErrorHelper_1.default.log(e);
        }
    }
    function _getTotalBytesForRow(row) {
        var numTotalBytes = SLAPI_SIZE_DWORD;
        for (var i = 0; i < row.Vals.length; i++) {
            var value = String(row.Vals[i]);
            numTotalBytes += value.length * 2; // A JavaScript char is 16 bit 2 byte
        }
        numTotalBytes += (row.Vals.length - 1) * 6; // plus the commas and quotes when serialized
        return numTotalBytes;
    }
    function _setDatapoint(datapointId, datapointValue) {
        if (datapointId < 1 || datapointId > SLAPI_MAX_SQM_DATAID) {
            return;
        }
        if (datapointValue < 0 || datapointValue > SLAPI_MAX_INT32) {
            return;
        }
        var savedDatapoint = null;
        var idxDP = _dictDatapoints[datapointId];
        if (Boolean(idxDP)) {
            savedDatapoint = _wsaData.wsaDatapoints[idxDP];
        }
        if (savedDatapoint == null) {
            var datapoint = new WSADatapoint(datapointId, datapointValue);
            var idxDatapoint = _numDatapoints;
            _wsaData.wsaDatapoints[idxDatapoint] = datapoint;
            _dictDatapoints[datapointId] = idxDatapoint;
            _numDatapoints++;
        }
        else {
            savedDatapoint.Val = datapointValue;
        }
    }
    function _uploadData() {
        if (_wsaData == null) {
            return "";
        }
        try {
            if (_isDataAvailableForUpload) {
                // Add final datapoints
                if (Boolean(_isContinuation)) {
                    _setDatapoint(SLAPI_DATAID_SESSION_TYPE, SLAPI_DATAKEY_SESSION_CONTINUATION);
                }
                else {
                    _setDatapoint(SLAPI_DATAID_SESSION_TYPE, SLAPI_DATAKEY_SESSION_NORMAL);
                    _isContinuation = true;
                }
                _wsaData.EndTime = _getTicks64();
                var jsonString = null;
                try {
                    jsonString = JSON.stringify(_wsaData);
                }
                catch (e) {
                    ErrorHelper_1.default.log(e);
                }
                // Initialize the session data for continuation session
                _initContinuationSession();
                return jsonString;
            }
        }
        catch (e) {
            ErrorHelper_1.default.log(e);
            return "";
        }
    }
    function _initContinuationSession() {
        _dictStreams = new Array(0);
        _dictDatapoints = new Array(0);
        _numDatapoints = 0;
        _numStreams = 0;
        _streamRowCount = 0;
        _numStreamBytes = 0;
        _numDatapoints = 0;
        var sessID = _wsaData.CorrelationId;
        _wsaData = new WSAData();
        _wsaData.CorrelationId = sessID;
        _createStream(SLAPI_STREAM_ID, 1);
        _isDataAvailableForUpload = false;
    }
    function _isMaxSizeReachedCheck() {
        var size = _numDatapoints * SLAPI_SIZE_DATAPOINT_ENTRY + _numStreamBytes;
        if (size >= SLAPI_MAX_DATA_SIZE) {
            _instance.beacon();
            size = _numDatapoints * SLAPI_SIZE_DATAPOINT_ENTRY + _numStreamBytes;
            return size >= SLAPI_MAX_DATA_SIZE;
        }
        return false;
    }
    function _SetCorrelationId(correlationId) {
        _initialize();
        if (Boolean(_wsaData)) {
            if (correlationId !== null && correlationId !== undefined) {
                _wsaData.CorrelationId = correlationId;
            }
            else {
                _wsaData.CorrelationId = _emptyCorrelationId;
            }
        }
    }
    function _WriteLog(eventName, dictProperties) {
        _initialize();
        if ((!Boolean(eventName)) || (!Boolean(dictProperties))) {
            return;
        }
        if (false) {
            var values = new Array(SLAPI_IDX_PROPERTY_START + 1);
            values[SLAPI_IDX_VERSION] = SLAPI_JSON_VERSION;
            values[SLAPI_IDX_EVENTNAME] = eventName;
            var index = SLAPI_IDX_PROPERTY_START;
            for (var key in dictProperties) {
                var propVal = dictProperties[key];
                if (propVal !== undefined && propVal !== null) {
                    if (propVal instanceof Date) {
                        propVal = propVal.getTime();
                    }
                    values[index++] = key;
                    values[index++] = propVal;
                }
            }
            _addToStream(SLAPI_STREAM_ID, values);
        }
        else if (!window["disableBeaconLogToConsole"]) {
            try {
                console.log("Beacon: Logged to " + eventName + " with properties: " + JSON.stringify(dictProperties));
            }
            catch (error) {
            }
        }
    }
    function _getUploadData() {
        _initialize();
        return _uploadData();
    }
    function _getTicks32() {
        var timeNow = new Date();
        var ticks64 = timeNow.getTime();
        if (_startTicks === 0) {
            _startTicks = ticks64;
        }
        return ((1 + ticks64 - _startTicks) & 0x7FFFFFFF);
    }
    function _getTicks64() {
        var timeNow = new Date();
        var ticks64 = timeNow.getTime();
        ticks64 = ticks64 + SLAPI_MS_BTN_EPOCHS; // Epoch change from 1/1/1070 to 1/1/1601
        ticks64 = ticks64 * 10000; // 1ms to 100ns resolution
        return ticks64;
    }
})(Beacon || (Beacon = {}));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Beacon;


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var DebugPriorityLevel;
(function (DebugPriorityLevel) {
    DebugPriorityLevel[DebugPriorityLevel["Low"] = 0] = "Low";
    DebugPriorityLevel[DebugPriorityLevel["Normal"] = 1] = "Normal";
})(DebugPriorityLevel || (DebugPriorityLevel = {}));
;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = DebugPriorityLevel;


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var RUMOneLogger_1 = __webpack_require__(34);
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = RUMOneLogger_1.APICallPerformanceData;


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// OneDrive:IgnoreCodeCoverage
var RUMOneLogger_1 = __webpack_require__(34);
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = RUMOneLogger_1.ControlPerformanceData;


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage
//Intentionally Override the normal camel casing style to title casing style because the schema has to match exactly the server side schema which is Title casing.
//Please do not change back to camel casing.

var RUMOneErrorsSLAPI = (function () {
    function RUMOneErrorsSLAPI() {
        this.Reason = null;
        this.Message = null;
    }
    return RUMOneErrorsSLAPI;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = RUMOneErrorsSLAPI;


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var RequireJSErrorHandler_1 = __webpack_require__(113);
var PerformanceCollection_1 = __webpack_require__(70);
var Signal_1 = __webpack_require__(12);
var ModuleHelper = __webpack_require__(68);
/**
 * Function to load a resource asynchronously which resolves the default export
 * from a given module.
 *
 * This function checks for the presense of a 'default' export in the loaded module
 * and resolves it if present. Otherwise, it assumes the module is a legacy module
 * and returns its identity export.
 *
 * @export
 * @template TExport
 * @param {IModuleDefinition<IModule<TExport>>} moduleDefinition
 * @returns {Promise<TExport>}
 *
 * @example
 *  import MyComponent from '../myComponent/MyComponent';
 *
 *  loadModule<typeof MyComponent>({
 *      path: '../myComponent/MyComponent'
 *      require: require
 *  }).then((myComponentType: typeof MyComponent) => {
 *      let component = new myComponentType();
 *
 *      return component;
 *  })
 */
function loadModule(moduleDefinition) {
    var path = moduleDefinition.path, require = moduleDefinition.require;
    return loadModuleExport({
        path: path,
        require: require,
        getExport: ModuleHelper.getDefaultExport
    });
}
exports.loadModule = loadModule;
/**
 * Function to load a resource asynchronously which resolves directly to the module.
 *
 * @export
 * @template TModule
 * @param {IModuleDefinition<TModule>} exportDefinition
 * @returns {Promise<TModule>}
 *
 * @example
 *  import MyUtilitiesModule = require('../../utilities/MyUtilities');
 *
 *  loadModuleIdentity<typeof MyUtilitiesModule>({
 *      path: '../../utilities/MyUtilities',
 *      require: require
 *  }).then((myUtilities: typeof MyUtilitiesModule) => {
 *      return myUtilities.doStuff();
 *  });
 */
function loadModuleIdentity(exportDefinition) {
    var path = exportDefinition.path, require = exportDefinition.require;
    return load(require, path);
}
exports.loadModuleIdentity = loadModuleIdentity;
/**
 * Function to load a resource asynchronously which resolves a specific export
 * from a given module.
 *
 * @export
 * @template TModule
 * @template TExport
 * @param {IExportDefinition<TModule, TExport>} exportDefinition
 * @returns {Promise<TExport>}
 *
 * @example
 *  import MyUtilitiesModule = require('../../utilities/MyUtilities');
 *
 *  loadModuleExport({
 *      path: '../../utilities/MyUtilities',
 *      require: require,
 *      getExport: (module: typeof MyUtilitiesModule) => module.doStuff
 *  }).then((doStuff: typeof MyUtilitiesModule.doStuff) => {
 *      return doStuff();
 *  });
 */
function loadModuleExport(exportDefinition) {
    var path = exportDefinition.path, require = exportDefinition.require, getExport = exportDefinition.getExport;
    return load(require, path).then(function (module) {
        return getExport(module);
    });
}
exports.loadModuleExport = loadModuleExport;
/**
 * Internal helper to invoke `require` on the input path and log performance and errors.
 *
 * @template TModule
 * @param {IRequire<TModule>} require
 * @param {string} path
 * @returns {Promise<TModule>}
 */
function load(require, path) {
    PerformanceCollection_1.default.mark("Module_" + path, 20);
    var signal = new Signal_1.default();
    require([path], function (module) {
        signal.complete(module);
    }, function (error) {
        RequireJSErrorHandler_1.default.log(error);
        signal.error(error);
    });
    return signal.getPromise();
}


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ModuleLoader_1 = __webpack_require__(121);
exports.loadModule = ModuleLoader_1.loadModule;
exports.loadModuleExport = ModuleLoader_1.loadModuleExport;
exports.loadModuleIdentity = ModuleLoader_1.loadModuleIdentity;
var ModuleHelper_1 = __webpack_require__(68);
exports.getDefaultExport = ModuleHelper_1.getDefaultExport;
exports.getIdentityExport = ModuleHelper_1.getIdentityExport;


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

function deserializeQuery(paramsString) {
    var viewParams = {};
    if (paramsString) {
        var paramParts = paramsString.split("&");
        for (var i = 0; i < paramParts.length; i++) {
            var param = paramParts[i].split("=");
            // For query strings only, "+" is a valid substitute for a space, but decodeURIComponent
            // doesn't take this into account.
            if (typeof param[1] !== 'undefined') {
                param[1] = param[1].replace(/\+/g, " ");
            }
            viewParams[param[0]] = decodeURIComponent(param[1]);
        }
    }
    return viewParams;
}
exports.deserializeQuery = deserializeQuery;
function getQueryStringFromUrl(url) {
    return url.substring(url.indexOf('?') + 1);
}
exports.getQueryStringFromUrl = getQueryStringFromUrl;
function getUrlWithoutQueryString(url) {
    return url.substring(0, url.indexOf('?'));
}
exports.getUrlWithoutQueryString = getUrlWithoutQueryString;


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ProtocolHandlerEncodeOption;
(function (ProtocolHandlerEncodeOption) {
    ProtocolHandlerEncodeOption[ProtocolHandlerEncodeOption["none"] = 0] = "none";
    ProtocolHandlerEncodeOption[ProtocolHandlerEncodeOption["encodeUrl"] = 1] = "encodeUrl";
    ProtocolHandlerEncodeOption[ProtocolHandlerEncodeOption["encodeCommand"] = 2] = "encodeCommand";
})(ProtocolHandlerEncodeOption = exports.ProtocolHandlerEncodeOption || (exports.ProtocolHandlerEncodeOption = {}));
;
var ProtocolHandlerHelper = (function () {
    function ProtocolHandlerHelper() {
    }
    /**
     * Create protocol handler Url based in inputs to laucch Office Client
     * @param strApp Input appName, like ms-excel
     * @param strUrl Input url of the file.
     * @param command Input open command, like ofv or ofe for view or edit.
     * @param defaultSaveUrl Input to specify save Url. Used for new operation.
     * @param encodeOption Input to specify if we need to encode the whole output url, or only encode the command part of the url.
     * @param isSPO Input to specify if this is for SPO output.
     */
    ProtocolHandlerHelper.CreateProtocolHandlerUrl = function (strApp, strUrl, command, defaultSaveUrl, encodeOption, isSPO) {
        var ret = [];
        // OpenApp="protocol[|UsePlain[|IgnoreCheck]]"/>
        var protocolList = strApp.split('|');
        if (protocolList.length === 2) {
            ret.push(protocolList[0]);
            ret.push(':');
            ret.push(strUrl);
            return ret.join('');
        }
        else if (protocolList.length === 3) {
            strApp = protocolList[0];
        }
        ret.push(strApp);
        ret.push(':');
        ret.push(command);
        if (isSPO && strApp === "ms-excel" && command !== this.protocolCommand.New) {
            ret.push(encodeOption === ProtocolHandlerEncodeOption.encodeCommand ? '%7Cofc' : '|ofc');
        }
        ret.push(encodeOption === ProtocolHandlerEncodeOption.encodeCommand ? '%7Cu%7C' : '|u|');
        ret.push(strUrl);
        if (command === this.protocolCommand.New) {
            ret.push(encodeOption === ProtocolHandlerEncodeOption.encodeCommand ? '%7Cs%7C' : '|s|');
            ret.push(defaultSaveUrl);
        }
        // encode uri when necessary.
        var retUrl = ret.join('');
        return encodeOption === ProtocolHandlerEncodeOption.encodeUrl ? encodeURI(retUrl) : retUrl;
    };
    return ProtocolHandlerHelper;
}());
// tslint:disable-next-line:typedef
ProtocolHandlerHelper.protocolCommand = { View: 'ofv', Edit: 'ofe', New: 'nft' };
exports.ProtocolHandlerHelper = ProtocolHandlerHelper;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ProtocolHandlerHelper;


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var ResourceScope_1 = __webpack_require__(72);
var Disposable_1 = __webpack_require__(25);
/**
 * An implementation of IResourceLoader that constructs a {ResolvedResourceFactory} from the type that the load function resolves to.
 */
var ResolvedResourceLoader = (function () {
    function ResolvedResourceLoader(load, dependencies) {
        this._load = load;
        this._dependencies = dependencies;
    }
    ResolvedResourceLoader.prototype.load = function () {
        var _this = this;
        var promise = this._load().then(function (type) {
            return new ResolvedResourceFactory(type, _this._dependencies);
        });
        this.load = function () { return promise; };
        return promise;
    };
    return ResolvedResourceLoader;
}());
exports.ResolvedResourceLoader = ResolvedResourceLoader;
/**
 * An implementation of IResourceFactory that instantiates the passed type, resolving any dependencies from resources.
 */
var ResolvedResourceFactory = (function () {
    function ResolvedResourceFactory(type, dependencies) {
        this._type = type;
        this.dependencies = __assign({}, (type.dependencies || {}), (dependencies || {}));
    }
    ResolvedResourceFactory.prototype.create = function (dependencies) {
        var instance = new this._type({}, dependencies);
        return {
            instance: instance,
            disposable: instance
        };
    };
    return ResolvedResourceFactory;
}());
exports.ResolvedResourceFactory = ResolvedResourceFactory;
/**
 * An implementation of IResourceFactory that provides a constructor for the passed type with dependencies resolved from resources.
 */
var ResolvedResourceTypeFactory = (function () {
    function ResolvedResourceTypeFactory(type, dependencies) {
        this._type = type;
        this.dependencies = __assign({}, (type.dependencies || {}), (dependencies || {}));
    }
    ResolvedResourceTypeFactory.prototype.create = function (dependencies) {
        return {
            instance: ResourceScope_1.getResolvedConstructor(this._type, dependencies)
        };
    };
    return ResolvedResourceTypeFactory;
}());
exports.ResolvedResourceTypeFactory = ResolvedResourceTypeFactory;
/**
 * An implementation of IResourceFactory for classes that have no dependencies and take no parameters.
 */
var SimpleResourceFactory = (function () {
    function SimpleResourceFactory(type) {
        this._type = type;
        this.dependencies = {};
    }
    SimpleResourceFactory.prototype.create = function () {
        var instance = new this._type();
        return {
            instance: instance,
            disposable: Disposable_1.isDisposable(instance) && instance
        };
    };
    return SimpleResourceFactory;
}());
exports.SimpleResourceFactory = SimpleResourceFactory;
var AliasResourceLoader = (function () {
    function AliasResourceLoader(load) {
        this._load = load;
    }
    AliasResourceLoader.prototype.load = function () {
        var promise = this._load().then(function (dependency) {
            return new AliasResourceFactory(dependency);
        });
        this.load = function () { return promise; };
        return promise;
    };
    return AliasResourceLoader;
}());
exports.AliasResourceLoader = AliasResourceLoader;
/**
 * An implementation of IResourceFactory which wraps an existing resource key.
 */
var AliasResourceFactory = (function () {
    function AliasResourceFactory(dependency) {
        this.dependencies = {
            value: dependency.lazy
        };
    }
    AliasResourceFactory.prototype.create = function (dependencies) {
        return {
            instance: dependencies.value()
        };
    };
    return AliasResourceFactory;
}());
exports.AliasResourceFactory = AliasResourceFactory;
function createDefaultResourceKey(require, type, dependencies) {
    return new ResourceScope_1.ResourceKey({
        name: require('module').id,
        factory: new ResolvedResourceFactory(type, dependencies)
    });
}
exports.createDefaultResourceKey = createDefaultResourceKey;
function createDefaultTypeResourceKey(require, type, dependencies) {
    return new ResourceScope_1.ResourceKey({
        name: require('module').id,
        factory: new ResolvedResourceTypeFactory(type, dependencies)
    });
}
exports.createDefaultTypeResourceKey = createDefaultTypeResourceKey;
__export(__webpack_require__(72));


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:CoverageThreshold(100)

var CircularBuffer = (function () {
    function CircularBuffer(size) {
        this._length = 0;
        this._head = -1;
        if (size <= 0) {
            throw new Error("Size must be positive");
        }
        this._size = size;
        this._buffer = new Array(size);
    }
    CircularBuffer.prototype.push = function (item) {
        if (this._length < this._size) {
            this._length++;
        }
        this._head++;
        if (this._head === this._size) {
            this._head = 0;
        }
        this._buffer[this._head] = item;
    };
    CircularBuffer.prototype.popOldest = function () {
        if (this._length === 0) {
            return null;
        }
        var tail = (this._head - this._length + 1 + this._size) % this._size;
        this._length--;
        return this._buffer[tail];
    };
    return CircularBuffer;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = CircularBuffer;


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var StringHelper = __webpack_require__(9);
var StringUtilities_resx_1 = __webpack_require__(74);
var Locale_1 = __webpack_require__(30);
var oneKiloByte = 1024;
var oneMegaByte = 1048576;
var oneGigaByte = 1073741824;
var oneTeraByte = 1099511627776;
var DriveSpaceHelper = (function () {
    function DriveSpaceHelper() {
    }
    /**
     * Creates a display string for the given number in bytes.
     * This function produces a string value meant to mimic that displyed by file explorer.
     */
    DriveSpaceHelper.getDisplayString = function (value, options) {
        if (options === void 0) { options = {}; }
        if (typeof value !== 'number' || (options.ignoreZero && value === 0) || value < 0) {
            return '';
        }
        if (value === 1) {
            return StringHelper.format(StringUtilities_resx_1.strings.fileSizeBytesSingular);
        }
        var info = this._getInfo(value);
        var numberString = this._trimNumber(info.value, options.trimDecimal);
        return StringHelper.format(info.template, numberString);
    };
    DriveSpaceHelper._getInfo = function (value) {
        // 1 byte is already handled
        // 0 bytes, 2 bytes - 1023 bytes
        if (value < oneKiloByte) {
            return { template: StringUtilities_resx_1.strings.fileSizeBytesPlural, value: value };
        }
        // 1KB - 999 KB
        if (value < 1000 * oneKiloByte) {
            return { template: StringUtilities_resx_1.strings.fileSizeKB, value: value / oneKiloByte };
        }
        // 0.97 MB - 999 MB
        if (value < 1000 * oneMegaByte) {
            return { template: StringUtilities_resx_1.strings.fileSizeMB, value: value / oneMegaByte };
        }
        // 0.97 GB - 999 GB
        if (value < 1000 * oneGigaByte) {
            return { template: StringUtilities_resx_1.strings.fileSizeGB, value: value / oneGigaByte };
        }
        // 0.97 TB ->
        return { template: StringUtilities_resx_1.strings.fileSizeTB, value: value / oneTeraByte };
    };
    DriveSpaceHelper._trimZeroes = function (value, decimalPlaces) {
        var str = value.toFixed(decimalPlaces);
        for (var i = 0; i < decimalPlaces; i++) {
            if (str[str.length - 1] === '0') {
                str = str.substring(0, str.length - 1);
            }
            else {
                break;
            }
        }
        if (str[str.length - 1] === '.') {
            str = str.substring(0, str.length - 1);
        }
        return str;
    };
    DriveSpaceHelper._trimNumber = function (value, trimDecimal) {
        // TODO: switch to toLocaleString for entire function when we update phantomJS
        var unformattedString;
        // 12.00 -> 12
        if (value === Math.floor(value)) {
            unformattedString = value.toFixed(0);
        }
        else if (value >= 100) {
            // Removes the mantissa from the value (ex: 456.789 -> 457)
            unformattedString = value.toFixed(0);
        }
        else if (value >= 10) {
            // 45.678 -> 45.7
            unformattedString = trimDecimal ? this._trimZeroes(value, 1) : value.toFixed(1);
        }
        else {
            // 4.5678 -> 4.57
            unformattedString = trimDecimal ? this._trimZeroes(value, 2) : value.toFixed(2);
        }
        // Since Number(num.toFixed) can trim decimals even when unwanted,
        // get the radix character and replace it manually
        var language = Locale_1.default.language;
        var radix = (1.2).toLocaleString(language).replace(/\d+/g, '');
        return unformattedString.replace(".", radix);
    };
    return DriveSpaceHelper;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = DriveSpaceHelper;


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var HslColor_1 = __webpack_require__(76);
var RgbaColor_1 = __webpack_require__(10);
// Various constants used for generated shades of a color.
var WhiteShadeTable = [0.95, 0.85, 0.75, 0.65, 0.50];
var BlackTintTable = [0.50, 0.65, 0.75, 0.85, 0.95];
var ColorTintTable = [0.20, 0.40, 0.60];
var ColorShadeTable = [0.75, 0.50];
var LumTintTable = [0.10, 0.25, 0.50, 0.75, 0.90];
var LumShadeTable = [0.90, 0.75, 0.50, 0.25, 0.10];
var c_LuminanceLow = 0.2;
var c_LuminanceHigh = 0.8;
var rgbaMax = RgbaColor_1.default.maxComponent;
var rgbaWhite = RgbaColor_1.default.fromRgba(rgbaMax, rgbaMax, rgbaMax);
var rgbaBlack = RgbaColor_1.default.fromRgba(0, 0, 0);
/** Shades of a given color, from Lightest to Darkest. */
var Shades;
(function (Shades) {
    Shades[Shades["Unshaded"] = 0] = "Unshaded";
    Shades[Shades["Lightest"] = 1] = "Lightest";
    Shades[Shades["Lighter"] = 2] = "Lighter";
    Shades[Shades["Medium"] = 3] = "Medium";
    Shades[Shades["Darker"] = 4] = "Darker";
    Shades[Shades["Darkest"] = 5] = "Darkest";
})(Shades = exports.Shades || (exports.Shades = {}));
/**
 * Returns true if the argument is a valid Shades value
 * @param {Shades} shade The Shades value to validate.
 */
function _isValidShade(shade) {
    'use strict';
    return (shade >= Shades.Unshaded) && (shade <= Shades.Darkest);
}
/**
 * Given an RgbaColor and a shade specification, generates the requested shade of the color.
 * @param {RgbaColor} color The base color whose shades are to be computed
 * @param {Shades} shade The shade of the base color to compute.
 */
function getShade(color, shade) {
    'use strict';
    if (!color) {
        return null;
    }
    if (shade === Shades.Unshaded || !_isValidShade(shade)) {
        return RgbaColor_1.default.fromRgba(color.R, color.G, color.B, color.A);
    }
    var hsl = HslColor_1.default.fromRgba(color);
    var lum = hsl.lum;
    var tableIndex = shade - 1;
    if (RgbaColor_1.default.equals(color, rgbaWhite)) {
        hsl.darken(WhiteShadeTable[tableIndex]);
    }
    else if (RgbaColor_1.default.equals(color, rgbaBlack)) {
        hsl.lighten(BlackTintTable[tableIndex]);
    }
    else if (lum < c_LuminanceLow) {
        hsl.lighten(LumTintTable[tableIndex]);
    }
    else if (lum > c_LuminanceHigh) {
        hsl.darken(LumShadeTable[tableIndex]);
    }
    else {
        if (tableIndex < ColorTintTable.length) {
            hsl.lighten(ColorTintTable[tableIndex]);
        }
        else {
            hsl.darken(ColorShadeTable[tableIndex - ColorTintTable.length]);
        }
    }
    color = hsl.toRgbaColor();
    return color;
}
exports.getShade = getShade;


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var RgbaColor_1 = __webpack_require__(10);
var ThemeCache_1 = __webpack_require__(77);
var Promise_1 = __webpack_require__(7);
var Engagement_event_1 = __webpack_require__(20);
var Qos_event_1 = __webpack_require__(13);
/**
 * Provides theme data, either from the local cache or from the server.
 */
var ThemeProvider = (function () {
    /**
     * Constructs a ThemeProvider which acts like the provided loadData function but with caching.
     * @param {() => Promise<IThemeData>} loadData Used to load data on a cache miss.
     */
    function ThemeProvider(loadData) {
        this._loadData = loadData;
    }
    /**
     * Given a URL, returns a string value which can be safely used as a
     * background-image value in a CSS rule. If the url is falsey, this
     * returns "none" to specify no background-image.
     * @param {string} url The URL of a background image.
     */
    ThemeProvider._makeCssUrl = function (url) {
        var cssUrlValue = "none";
        if (url) {
            cssUrlValue = 'url("' +
                ThemeProvider._escapeQuotesAndParentheses(url) +
                '")';
        }
        return cssUrlValue;
    };
    /**
     * Escapes single- and double-quotes along with parentheses so that the
     * resulting string is safe to use in a CSS background-image: url()
     * @param {string} str The string to escape.
     */
    ThemeProvider._escapeQuotesAndParentheses = function (str) {
        var replacements = { "'": "%27", '"': "%22", "(": "%28", ")": "%29" };
        var result = null;
        if (str != null) {
            result = str.replace(/(['"\(\)])/gm, function (match, capture) {
                return replacements[capture];
            });
        }
        return result;
    };
    /**
     * Loads the theme data and returns a map from theme tokens to replacement values.
     * Suitable for use with loadTheme in load-themed-styles.
     * @param {string} cacheToken Cache token used to validate cached data.
     * @param {boolean} forceUpdate Whether to force fresh data to be loaded and cached.
     */
    ThemeProvider.prototype.loadThemeTokenMap = function (cacheToken, forceUpdate) {
        return this.loadThemeData(cacheToken, forceUpdate).then(function (themeData) {
            var themeValues;
            if (themeData && themeData.palette) {
                themeValues = {};
                var palette = themeData.palette;
                for (var colorSlot in palette) {
                    var rgbaValue = palette[colorSlot];
                    themeValues[colorSlot] = rgbaValue ? RgbaColor_1.default.toHtmlString(rgbaValue) : null;
                }
                themeValues["backgroundImageUri"] =
                    ThemeProvider._makeCssUrl(themeData.backgroundImageUri);
            }
            return themeValues;
        }, function (error) { return null; }); // on error, return null
    };
    /**
     * Loads the theme data from the cache or via the a loadData method.
     * @param {string} cacheToken Cache token used to validate cached data.
     * @param {boolean} forceUpdate Whether to force fresh data to be loaded and cached.
     */
    ThemeProvider.prototype.loadThemeData = function (cacheToken, forceUpdate) {
        if (!forceUpdate && this._dataPromise) {
            return this._dataPromise;
        }
        var _this = this;
        var failureResultCode = null;
        var failureResultType = Qos_event_1.ResultTypeEnum.Failure;
        this._dataPromise = Qos_event_1.Qos.instrumentPromise(
        /*startSchema*/ { name: "ThemeProvider.LoadData" }, 
        /*createPromise*/ function () { return new Promise_1.default(function loadDataOnExecute(complete, error) {
            var previousData = null;
            if (!forceUpdate) {
                // Checks if we have valid cached data before returning it.
                previousData = ThemeCache_1.default.getCachedTheme(cacheToken);
            }
            // If we have previous data and an update is not forced, use that data.
            if (previousData) {
                Engagement_event_1.Engagement.logData({ name: "ThemeProvider.DataFromCache" });
                complete(previousData);
            }
            else {
                if (forceUpdate) {
                    Engagement_event_1.Engagement.logData({ name: "ThemeProvider.ForceUpdateData" });
                }
                Engagement_event_1.Engagement.logData({ name: "ThemeProvider.DataFromServer" });
                // Get updated data. Might result in a server call.
                _this._loadData(forceUpdate).done(function onComplete(themeData) {
                    if (themeData) {
                        if (themeData.cacheToken) {
                            ThemeCache_1.default.updateThemeCache(themeData, cacheToken);
                            complete(themeData);
                        }
                        else {
                            //TODO what happens if error() is undefined?
                            failureResultCode = "NoCacheToken";
                            if (error) {
                                error("Theme data with no CacheToken returned");
                            }
                        }
                    }
                    else {
                        failureResultCode = "NoData";
                        if (error) {
                            error("No model returned");
                        }
                    }
                }, function onError(err) {
                    if (Promise_1.default.isCanceled(error)) {
                        failureResultCode = "Canceled";
                        failureResultType = Qos_event_1.ResultTypeEnum.ExpectedFailure;
                    }
                    else {
                        failureResultCode = "ServerLoadFailure";
                    }
                    if (error) {
                        error(err);
                    }
                });
            }
        }); }, 
        /*getCompleteSchema*/ null, 
        /*getErrorSchema*/ function getErrorSchema(error) {
            if (Promise_1.default.isCanceled(error)) {
                failureResultType = Qos_event_1.ResultTypeEnum.ExpectedFailure;
                failureResultCode = "Canceled";
            }
            return {
                resultType: failureResultType,
                resultCode: failureResultCode || "Other",
                error: error
            };
        });
        return this._dataPromise;
    };
    return ThemeProvider;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ThemeProvider;


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// OneDrive:IgnoreCodeCoverage

var FabricTheming_1 = __webpack_require__(75);
var RgbaColor_1 = __webpack_require__(10);
var UriEncoding_1 = __webpack_require__(26);
/**
 * Utility methods which can be used to load the theme of a SharePoint site.
 */
var WebTheme = (function () {
    function WebTheme() {
    }
    /**
     * Constructs the URL of a REST endpoint which will return the web theme.
     * @param {IWebContextInfo} webContextInfo Context information about the web.
     * @param {string} cultureName Current UI culture.
     * @param {string} themeOverride URL to a temporary override theme (e.g. preview).
     */
    WebTheme.makeWebThemeRestUrl = function (webServerRelativeUrl, cultureName, themeOverride) {
        "use strict";
        var webUrl = webServerRelativeUrl;
        if (webUrl && webUrl[webUrl.length - 1] === '/') {
            // Trim trailing slash.
            webUrl = webUrl.substring(0, webUrl.length - 1);
        }
        webUrl = UriEncoding_1.default.escapeUrlForCallback(webUrl);
        var webThemeRestEndpoint = UriEncoding_1.default.escapeUrlForCallback(webUrl) +
            '/_api/SP.Web.GetContextWebThemeData?noImages=true&lcid=' +
            UriEncoding_1.default.encodeURIComponent(cultureName);
        if (themeOverride) {
            webThemeRestEndpoint += "&ThemeOverride=" + UriEncoding_1.default.encodeURIComponent(themeOverride);
        }
        return webThemeRestEndpoint;
    };
    /**
     * Constructs the URL of a REST endpoint which will return the web theme.
     * @param {IWebContextInfo} webContextInfo Context information about the web.
     */
    WebTheme.processWebThemeRestResponse = function (responseText) {
        // This could throw if the handler returns an HTML error page or invalis JSON.
        // DataSource will count that as an error and call the error callback.
        "use strict";
        var response = JSON.parse(responseText);
        var rawThemeData;
        if (response && response.d && response.d.GetContextWebThemeData) {
            rawThemeData = JSON.parse(response.d.GetContextWebThemeData);
        }
        var themeData = WebTheme.processRawThemeData(rawThemeData);
        return themeData;
    };
    /**
     * Converts an IThemeDataRaw into an IThemeData.
     * @param {IThemeDataRaw} themeData Raw theme data to process.
     */
    WebTheme.processRawThemeData = function (themeData) {
        "use strict";
        if (themeData) {
            var coerceToColor = WebTheme.coerceToColor;
            var colors = {};
            var inputColors = themeData.Palette ? themeData.Palette.Colors : {};
            colors = WebTheme.convertColorsToRgba(inputColors);
            var fabricColors = colors;
            if (!fabricColors['themePrimary']) {
                fabricColors = FabricTheming_1.default.generateFabricColors(colors['ContentAccent1'], themeData.IsInverted);
                var pageBG = coerceToColor(colors['PageBackground']) || null;
                var bgOverlay = coerceToColor(colors['BackgroundOverlay']) || null;
                var alpha40 = Math.round(0.4 * RgbaColor_1.default.maxComponent);
                fabricColors['white'] = pageBG;
                // RgbaColor.fromRgba and RgbaColor.clone both return new objects.
                // This is important for avoiding duplicate filtering logic in the caching layer.
                fabricColors['primaryBackground'] = RgbaColor_1.default.clone(pageBG);
                fabricColors['primaryText'] = fabricColors['primaryText'] || coerceToColor('#333');
                fabricColors['whiteTranslucent40'] = pageBG && RgbaColor_1.default.fromRgba(pageBG.R, pageBG.G, pageBG.B, alpha40);
                fabricColors['backgroundOverlay'] = bgOverlay;
                fabricColors['suiteBarBackground'] = coerceToColor(colors['SuiteBarBackground']) || null;
                fabricColors['suiteBarText'] = coerceToColor(colors['SuiteBarText']) || null;
                fabricColors['suiteBarDisabledText'] = coerceToColor(colors['SuiteBarDisabledText']) || null;
                fabricColors['topBarBackground'] = coerceToColor(colors['TopBarBackground']) || null;
                fabricColors['topBarText'] = coerceToColor(colors['TopBarText']) || null;
                fabricColors['topBarHoverText'] = coerceToColor(colors['TopBarHoverText']) || null;
                fabricColors['dialogBorder'] = coerceToColor(colors['DialogBorder']) || null;
            }
            return {
                backgroundImageUri: themeData.BackgroundImageUri,
                cacheToken: themeData.ThemeCacheToken,
                isDefault: themeData.IsDefault,
                isInverted: themeData.IsInverted,
                palette: fabricColors,
                version: themeData.Version
            };
        }
        return {
            backgroundImageUri: "",
            cacheToken: "",
            isDefault: true,
            isInverted: false,
            palette: {},
            version: ""
        };
    };
    WebTheme.convertColorsToRgba = function (colors) {
        var convertedColors = {};
        for (var colorKey in colors) {
            if (colors.hasOwnProperty(colorKey)) {
                var colorValue = WebTheme.coerceToColor(colors[colorKey]);
                // TODO: console.warn if colorValue is undefined?
                if (colorValue) {
                    convertedColors[colorKey] = colorValue;
                }
            }
        }
        return convertedColors;
    };
    /**
     * Coerces an HTML color string or a color object in raw web theme data into an RgbaColor.
     * @param {any} toColor Object to be converted into an RgbaColor.
     */
    WebTheme.coerceToColor = function (toColor) {
        "use strict";
        var resultColor;
        // Use duck typing to extract a color
        if (!toColor) {
            resultColor = null;
        }
        else if (typeof toColor === "string" || toColor instanceof String) {
            resultColor = RgbaColor_1.default.fromHtmlColor(String(toColor));
        }
        else if ("DefaultColor" in toColor) {
            resultColor = WebTheme.coerceToColor(toColor["DefaultColor"]);
        }
        else if ("R" in toColor && "G" in toColor && "B" in toColor) {
            resultColor = RgbaColor_1.default.fromRgba(toColor.R, toColor.G, toColor.B, toColor.A);
        }
        return resultColor;
    };
    return WebTheme;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = WebTheme;


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Simplified implementation of a URI parser which does not attempt decoding of segments,
 * handling of query strings, or separation of the fragment.
 *
 * This class makes several assumptions about the format of input URLs:
 * - Absolute URLs begin with '<scheme>://<host>'
 * - Relative URLs being with '/'
 * - URLs never have a trailing '/'
 *
 * @class SimpleUri
 */
var SimpleUri = (function () {
    /**
     * Creates an instance of SimpleUri.
     *
     * @param {string} value
     */
    function SimpleUri(value) {
        if (value === void 0) { value = ''; }
        this._value = value;
    }
    Object.defineProperty(SimpleUri.prototype, "format", {
        /**
         * Determines the format of the URL.
         *
         * @readonly
         * @type {UriFormat}
         *
         * @example
         *  expect(new SimpleUri('/').format).to.equal(UriFormat.serverRelative);
         * @example
         *  expect(new SimpleUri('https://test').format).to.equal(UriFormat.absolute);
         * @example
         *  expact(new SimpleUri('test').format).to.equal(UriFormat.relative);
         */
        get: function () {
            return this._getFormat();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleUri.prototype, "authority", {
        /**
         * Gets the authority component of the URI, if the URI is fully-qualified.
         * The authority is formatted as
         * '<scheme>://<host>'
         * and never has a trailing '/'.
         *
         * @readonly
         * @type {string}
         *
         * @example
         *  expect(new SimpleUri('/').authority).to.equal('');
         * @example
         *  expect(new SimpleUri('https://test').authority).to.equal('https://test');
         * @example
         *  expect(new SimpleUri('https://test/').authority).to.equal('https://test');
         * @example
         *  expect(new SimpleUri('/bad/scheme://').authority).to.equal('');
         */
        get: function () {
            return this._getAuthority();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleUri.prototype, "domain", {
        /**
         * Gets the domain of the URI, which is everything in the authority after
         * the scheme and protocol.
         *
         * @readonly
         * @type {string}
         * @memberOf SimpleUri
         *
         * @example
         *  expect(new SimpleUri('/').domain).to.equal('');
         * @example
         *  expect(new SimpleUri('https://test').domain).to.equal('test');
         * @example
         *  expect(new SimpleUri('https://test/').domain).to.equal('test');
         */
        get: function () {
            return this._getDomain();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleUri.prototype, "path", {
        /**
         * Gets the path of the URI, which is everything after the authority.
         * If the URI has no authority, this returns the entire URI.
         * If there is only an authority, this returns ''.
         *
         * @readonly
         * @type {string}
         *
         * @example
         *  expect(new SimpleUri('https://test').path).to.equal('');
         * @example
         *  expect(new SimpleUri('/').path).to.equal('/');
         * @example
         *  expect(new SimpleUri('https://test/').path).to.equal('/');
         * @example
         *  expect(new SimpleUri('/bad/scheme://').path).to.equal('/bad/scheme://');
         */
        get: function () {
            return this._getPath();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleUri.prototype, "segments", {
        /**
         * Gets the segments of the path.
         * If there is no path, this is an empty array.
         * Otherwise, this returns all segments after the first '/'.
         *
         * @readonly
         * @type {string[]}
         *
         * @example
         *  expect(new SimpleUri('https://test').segments).to.deep.equal([]);
         * @example
         *  expect(new SimpleUri('/').segments).to.deep.equal(['']);
         * @example
         *  expect(new SimpleUri('/foo').segments).to.deep.equal(['foo']);
         * @example
         *  expect(new SimpleUri('/foo/').segments).to.deep.equal(['foo', '']);
         * @example
         *  expect(new SimpleUri('/foo/bar').segments).to.deep.equal(['foo', 'bar']);
         * @example
         *  expect(new SimpleUri('/bad/scheme://').segments).to.deep.equal(['bad', 'scheme:', '', '']);
         */
        get: function () {
            return this._getSegments();
        },
        enumerable: true,
        configurable: true
    });
    SimpleUri.prototype._getFormat = function () {
        var format;
        if (this._getAuthority()) {
            format = 0 /* absolute */;
        }
        else {
            var path = this._getPath();
            if (path.indexOf('/') === 0) {
                format = 2 /* serverRelative */;
            }
            else {
                format = 1 /* relative */;
            }
        }
        this._getFormat = function () { return format; };
        return format;
    };
    SimpleUri.prototype._getAuthority = function () {
        var authority;
        var endIndexOfRootDelimeter = this._getEndIndexOfRootDelimeter();
        if (endIndexOfRootDelimeter > -1) {
            var indexOfNextSegment = this._value.indexOf('/', endIndexOfRootDelimeter);
            if (indexOfNextSegment > -1) {
                authority = this._value.substring(0, indexOfNextSegment);
            }
            else {
                authority = this._value;
            }
        }
        else {
            authority = '';
        }
        this._getAuthority = function () { return authority; };
        return authority;
    };
    SimpleUri.prototype._getDomain = function () {
        var domain;
        var authority = this._getAuthority();
        if (authority) {
            var endIndexOfRootDelimeter = this._getEndIndexOfRootDelimeter();
            domain = authority.substring(endIndexOfRootDelimeter);
        }
        else {
            domain = '';
        }
        this._getDomain = function () { return domain; };
        return domain;
    };
    SimpleUri.prototype._getPath = function () {
        var path;
        var endIndexOfSchemeDelimeter = this._getEndIndexOfRootDelimeter();
        if (endIndexOfSchemeDelimeter > -1) {
            var indexOfNextSegment = this._value.indexOf('/', endIndexOfSchemeDelimeter);
            if (indexOfNextSegment > -1) {
                path = this._value.substring(indexOfNextSegment);
            }
            else {
                path = '';
            }
        }
        else {
            path = this._value;
        }
        this._getPath = function () { return path; };
        return path;
    };
    SimpleUri.prototype._getSegments = function () {
        var path = this._getPath();
        var segments = path.split('/');
        this._getSegments = function () { return segments; };
        return segments;
    };
    SimpleUri.prototype._getEndIndexOfRootDelimeter = function () {
        var endIndexOfRootDelimeter;
        var rootDelimeter = '//';
        var indexOfRootDelimeter = this._value.indexOf(rootDelimeter);
        var indexOfPathDelimeter = this._value.indexOf('/');
        if (indexOfRootDelimeter > -1 && indexOfRootDelimeter <= indexOfPathDelimeter) {
            endIndexOfRootDelimeter = indexOfRootDelimeter + rootDelimeter.length;
        }
        else {
            endIndexOfRootDelimeter = -1;
        }
        this._getEndIndexOfRootDelimeter = function () { return endIndexOfRootDelimeter; };
        return endIndexOfRootDelimeter;
    };
    return SimpleUri;
}());
exports.SimpleUri = SimpleUri;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SimpleUri;


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Async_1 = __webpack_require__(4);
var ErrorHelper_1 = __webpack_require__(3);
var ObjectUtil_1 = __webpack_require__(6);
var XHR = (function () {
    function XHR(options) {
        this._async = new Async_1.default(this);
        var url = options.url, _a = options.requestTimeoutInMS, requestTimeoutInMS = _a === void 0 ? XHR.DEFAULT_TIMEOUT_MS : _a, postData = options.json, _b = options.headers, headers = _b === void 0 ? {} : _b, _c = options.withCredentials, withCredentials = _c === void 0 ? false : _c, _d = options.needsCors, needsCors = _d === void 0 ? false : _d, progressCallback = options.onProgress, uploadProgressCallback = options.onUploadProgress;
        var _e = options.method, method = _e === void 0 ? postData ? 'POST' : 'GET' : _e;
        this._url = url;
        this._requestTimeoutInMS = requestTimeoutInMS;
        this._postData = postData;
        this._headers = headers;
        this._method = method;
        this._withCredentials = withCredentials;
        this._needsCors = needsCors;
        this._progressCallback = progressCallback;
        this._uploadProgressCallback = uploadProgressCallback;
    }
    XHR.prototype.abort = function (isCancelled) {
        var aborted = this._abortRequest();
        if (aborted && !isCancelled) {
            this._callFailureCallback(this._request, -3 /* abort */, false);
        }
    };
    XHR.prototype.start = function (successCallback, failureCallback) {
        var _this = this;
        this._successCallback = successCallback;
        this._failureCallback = failureCallback;
        var _a = this, method = _a._method, headers = _a._headers;
        try {
            this._request = this._getRequest();
            var _b = this, progressCallback_1 = _b._progressCallback, uploadProgressCallback_1 = _b._uploadProgressCallback, request_1 = _b._request;
            if (progressCallback_1) {
                request_1.onprogress = function (event) {
                    try {
                        progressCallback_1(event);
                    }
                    catch (error) {
                        ErrorHelper_1.default.logError(error);
                    }
                };
            }
            if (uploadProgressCallback_1) {
                request_1.upload.onprogress = function (event) {
                    try {
                        uploadProgressCallback_1(event);
                    }
                    catch (error) {
                        ErrorHelper_1.default.logError(error);
                    }
                };
            }
            this._async.setTimeout(function () {
                // Check if we havent logged this event already
                if (!_this._completed) {
                    _this._timeoutCallback();
                }
            }, this._requestTimeoutInMS);
            // Report Qos on the actual qos calls
            request_1.onreadystatechange = function () {
                // Check if we havent logged this event in a timeout
                if (!_this._completed) {
                    var DONE = 4; // Default done readystate
                    try {
                        DONE = request_1.DONE || 4;
                    }
                    catch (e) {
                    }
                    if (request_1.readyState === DONE) {
                        _this._requestEndCallback();
                    }
                }
            };
            request_1.open(method, this._url, true);
            if ("withCredentials" in request_1) {
                request_1.withCredentials = this._withCredentials;
            }
            // Headers have to be set after open is called
            for (var x in headers) {
                request_1.setRequestHeader(x, headers[x]);
            }
            request_1.send(this._postData);
        }
        catch (error) {
            ErrorHelper_1.default.logError(error, {
                origin: location ? location.origin : 'unknown',
                withCredentials: this._withCredentials,
                requestUrl: this._url,
                headers: ObjectUtil_1.safeSerialize(headers),
                method: method
            });
            // abort the request and set the exception status code
            this._abortRequest();
            this._callFailureCallback(this._request, -1 /* exception */, false);
        }
    };
    XHR.prototype._getRequest = function () {
        var _this = this;
        if (!this._needsCors || !window['XDomainRequest']) {
            return new XMLHttpRequest();
        }
        // This is only needed for IE 9 to support CORS requests
        // Note: we can not set headers on XDomainRequest
        var request = new XDomainRequest();
        request.setRequestHeader = function () { };
        request.onprogress = function () { };
        request.ontimeout = function () { };
        request.onload = function () {
            _this._requestEndCallback();
        };
        return request;
    };
    XHR.prototype._abortRequest = function () {
        var actuallyAborted = false;
        if (!this._completed) {
            this._completed = true;
            // Clear the timeout for the request
            this._async.dispose();
            // Cancel the request
            try {
                if (this._request) {
                    this._request.abort();
                }
            }
            catch (error) {
            }
            actuallyAborted = true;
        }
        return actuallyAborted;
    };
    XHR.prototype._timeoutCallback = function () {
        if (!this._completed) {
            this._abortRequest();
            this._callFailureCallback(this._request, -2 /* timeout */, true);
        }
    };
    XHR.prototype._callSuccessCallback = function (xhr, statusCode) {
        try {
            if (this._successCallback) {
                this._successCallback(xhr, statusCode);
            }
        }
        catch (error) {
            ErrorHelper_1.default.log(error);
        }
    };
    XHR.prototype._callFailureCallback = function (xhr, statusCode, timeout) {
        try {
            if (this._failureCallback) {
                this._failureCallback(xhr, statusCode, timeout);
            }
        }
        catch (error) {
            ErrorHelper_1.default.log(error);
        }
    };
    XHR.prototype._requestEndCallback = function () {
        if (!this._completed) {
            this._completed = true;
            var status_1 = -1 /* exception */;
            try {
                // Clear the timeout for the request
                this._async.dispose();
                try {
                    status_1 = this._request.status;
                }
                catch (error) {
                }
            }
            catch (error) {
                status_1 = -1 /* exception */;
                ErrorHelper_1.default.log(error);
            }
            if (status_1 < 400 && status_1 > 0) {
                this._callSuccessCallback(this._request, status_1);
            }
            else {
                this._callFailureCallback(this._request, status_1, false);
            }
        }
    };
    return XHR;
}());
XHR.DEFAULT_TIMEOUT_MS = 30000;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = XHR;


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Glamor = __webpack_require__(152);
var rtl_css_js_1 = __webpack_require__(170);
var rtl_1 = __webpack_require__(139);
function _initializeGlamor() {
    // force speedy.
    // tslint:disable-next-line:no-string-literal no-any
    if (!Glamor['styleSheet'] || !Glamor['styleSheet'].isSpeedy) {
        // tslint:disable-next-line:no-string-literal no-any
        Glamor['speedy'](true);
    }
    // tslint:disable-next-line:no-string-literal no-any
    Glamor['plugins'].add(function (_a) {
        var selector = _a.selector, style = _a.style;
        return ({
            selector: selector,
            style: rtl_1.getRTL() ? rtl_css_js_1.default(style) : style
        });
    });
}
_initializeGlamor();
/**
 * Defines a :before pseudo-selector scoped style object for the given raw style.
 */
function before(style) {
    return Glamor.before(style);
}
exports.before = before;
/**
 * Defines a :after pseudo-selector scoped style object for the given raw style.
 */
function after(style) {
    return Glamor.after(style);
}
exports.after = after;
/**
 * Defines a style under a rule which is prefixed by the given selector.
 */
function parent(selector, style) {
    return Glamor.parent(selector, style);
}
exports.parent = parent;
/**
 * Registers a global rule. Be aware: registering global rules are not scoped;
 * Two versions of a global rule will colide with each other.
 */
function insertGlobal(selector, style) {
    Glamor.insertGlobal(selector, style);
}
exports.insertGlobal = insertGlobal;
/**
 * Registers a font face.
 */
function fontFace(font) {
    return Glamor.fontFace(font);
}
exports.fontFace = fontFace;
/**
 * Register a keyframe definition and returns the unique name to be used for
 * the animation name.
 */
function keyframes(timeline) {
    return Glamor.keyframes(timeline);
}
exports.keyframes = keyframes;



/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var glamorExports_1 = __webpack_require__(133);
var language_1 = __webpack_require__(138);
// Default urls.
var DefaultBaseUrl = 'https://static2.sharepointonline.com/files/fabric/assets';
// Fallback fonts, if specified system or web fonts are unavailable.
var FontFamilyFallbacks = "'Segoe UI', -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', sans-serif";
// Font face names to be registered.
var FontNameArabic = 'Segoe UI Web (Arabic)';
var FontNameCyrillic = 'Segoe UI Web (Cyrillic)';
var FontNameEastEuropean = 'Segoe UI Web (East European)';
var FontNameGreek = 'Segoe UI Web (Greek)';
var FontNameHebrew = 'Segoe UI Web (Hebrew)';
var FontNameThai = 'Leelawadee UI Web';
var FontNameVietnamese = 'Segoe UI Web (Vietnamese)';
var FontNameWestEuropean = 'Segoe UI Web (West European)';
var FontNameSelawik = 'Selawik Web';
// Font families with fallbacks, for the general regions.
var FontFamilyArabic = "'" + FontNameArabic + "'";
var FontFamilyChineseSimplified = "'Microsoft Yahei', Verdana, Simsun";
var FontFamilyChineseTraditional = "'Microsoft Jhenghei', Pmingliu";
var FontFamilyCyrillic = "'" + FontNameCyrillic + "'";
var FontFamilyEastEuropean = "'" + FontNameEastEuropean + "'";
var FontFamilyGreek = "'" + FontNameGreek + "'";
var FontFamilyHebrew = "'" + FontNameHebrew + "'";
var FontFamilyHindi = "'Nirmala UI'";
var FontFamilyJapanese = "'Yu Gothic', 'Meiryo UI', Meiryo, 'MS Pgothic', Osaka";
var FontFamilyKorean = "'Malgun Gothic', Gulim";
var FontFamilySelawik = "'" + FontNameSelawik + "'";
var FontFamilyThai = "'Leelawadee UI Web', 'Kmer UI'";
var FontFamilyVietnamese = "'" + FontNameVietnamese + "'";
var FontFamilyWestEuropean = "'" + FontNameWestEuropean + "'";
// Mapping of language prefix to to font family.
var LanguageToFontMap = {
    'ar': FontFamilyArabic,
    'bg': FontFamilyCyrillic,
    'cs': FontFamilyEastEuropean,
    'el': FontFamilyGreek,
    'et': FontFamilyEastEuropean,
    'he': FontFamilyHebrew,
    'hi': FontFamilyHindi,
    'hr': FontFamilyEastEuropean,
    'hu': FontFamilyEastEuropean,
    'ja': FontFamilyJapanese,
    'kk': FontFamilyEastEuropean,
    'ko': FontFamilyKorean,
    'lt': FontFamilyEastEuropean,
    'lv': FontFamilyEastEuropean,
    'pl': FontFamilyEastEuropean,
    'ru': FontFamilyCyrillic,
    'sk': FontFamilyEastEuropean,
    'sr-latn': FontFamilyEastEuropean,
    'th': FontFamilyThai,
    'tr': FontFamilyEastEuropean,
    'uk': FontFamilyCyrillic,
    'vi': FontFamilyVietnamese,
    'zh-hans': FontFamilyChineseSimplified,
    'zh-hant': FontFamilyChineseTraditional,
};
var FontFileVersion = 2.38;
// Standard font sizes.
var FontSizes;
(function (FontSizes) {
    FontSizes.mini = '10px';
    FontSizes.xSmall = '11px';
    FontSizes.small = '12px';
    FontSizes.smallPlus = '13px';
    FontSizes.medium = '14px';
    FontSizes.mediumPlus = '15px';
    FontSizes.icon = '16px';
    FontSizes.large = '17px';
    FontSizes.xLarge = '21px';
    FontSizes.xxLarge = '28px';
    FontSizes.superLarge = '42px';
    FontSizes.mega = '72px';
})(FontSizes = exports.FontSizes || (exports.FontSizes = {}));
// Standard font weights.
var FontWeights;
(function (FontWeights) {
    FontWeights.light = 100;
    FontWeights.semilight = 300;
    FontWeights.regular = 400;
    FontWeights.semibold = 600;
    FontWeights.bold = 700;
})(FontWeights = exports.FontWeights || (exports.FontWeights = {}));
// Standard font styling.
exports.DefaultFontStyles = {
    tiny: _createFont(FontSizes.mini, FontWeights.semibold),
    xSmall: _createFont(FontSizes.xSmall, FontWeights.regular),
    small: _createFont(FontSizes.small, FontWeights.regular),
    smallPlus: _createFont(FontSizes.smallPlus, FontWeights.regular),
    medium: _createFont(FontSizes.medium, FontWeights.regular),
    mediumPlus: _createFont(FontSizes.mediumPlus, FontWeights.regular),
    large: _createFont(FontSizes.large, FontWeights.semilight),
    xLarge: _createFont(FontSizes.xLarge, FontWeights.light),
    xxLarge: _createFont(FontSizes.xxLarge, FontWeights.light),
    superLarge: _createFont(FontSizes.superLarge, FontWeights.light),
    mega: _createFont(FontSizes.mega, FontWeights.light),
    icon: {
        fontFamily: '"FabricMDL2Icons"',
        fontWeight: FontWeights.regular,
        fontStyle: 'normal'
    }
};
function _getFontFamily() {
    var language = language_1.getLanguage();
    var fontFamily = FontFamilyWestEuropean;
    for (var lang in LanguageToFontMap) {
        if (LanguageToFontMap.hasOwnProperty(lang) && language && lang.indexOf(language) === 0) {
            // tslint:disable-next-line:no-any
            fontFamily = LanguageToFontMap[lang];
            break;
        }
    }
    return fontFamily + ", " + FontFamilyFallbacks;
}
function _createFont(size, weight) {
    return {
        fontFamily: _getFontFamily(),
        MozOsxFontSmoothing: 'grayscale',
        WebkitFontSmoothing: 'antialiased',
        fontSize: size,
        fontWeight: weight
    };
}
function _registerFontFace(fontFamily, url, fontWeight) {
    fontFamily = "'" + fontFamily + "'";
    glamorExports_1.fontFace({
        fontFamily: fontFamily,
        src: "url('" + url + ".woff2') format('woff2')," +
            ("url('" + url + ".woff') format('woff')"),
        fontWeight: fontWeight,
        fontStyle: 'normal'
    });
}
function _registerFontFaceSet(baseUrl, fontFamily, cdnFolder, cdnFontName) {
    if (cdnFontName === void 0) { cdnFontName = 'segoeui'; }
    var urlBase = baseUrl + "/" + cdnFolder + "/" + cdnFontName;
    _registerFontFace(fontFamily, urlBase + '-light', FontWeights.light);
    _registerFontFace(fontFamily, urlBase + '-semilight', FontWeights.semilight);
    _registerFontFace(fontFamily, urlBase + '-regular', FontWeights.regular);
    _registerFontFace(fontFamily, urlBase + '-semibold', FontWeights.semibold);
}
function _registerDefaultFontFaces() {
    var baseUrl = _getFontBaseUrl();
    if (baseUrl) {
        var fontUrl = baseUrl + "/fonts";
        var iconUrl = baseUrl + "/icons";
        // Produce @font-face definitions for all supported web fonts.
        _registerFontFaceSet(fontUrl, FontNameThai, 'leelawadeeui-thai', 'leelawadeeui');
        _registerFontFaceSet(fontUrl, FontNameArabic, 'segoeui-arabic');
        _registerFontFaceSet(fontUrl, FontNameCyrillic, 'segoeui-cyrillic');
        _registerFontFaceSet(fontUrl, FontNameEastEuropean, 'segoeui-easteuropean');
        _registerFontFaceSet(fontUrl, FontNameGreek, 'segoeui-greek');
        _registerFontFaceSet(fontUrl, FontNameHebrew, 'segoeui-hebrew');
        _registerFontFaceSet(fontUrl, FontNameVietnamese, 'segoeui-vietnamese');
        _registerFontFaceSet(fontUrl, FontNameWestEuropean, 'segoeui-westeuropean');
        _registerFontFaceSet(fontUrl, FontFamilySelawik, 'selawik', 'selawik');
        // Leelawadee UI (Thai) does not have a 'light' weight, so we override
        // the font-face generated above to use the 'semilight' weight instead.
        _registerFontFace('Leelawadee UI Web', fontUrl + "/leelawadeeui-thai/leelawadeeui-semilight", FontWeights.light);
        // Leelawadee UI (Thai) does not have a 'semibold' weight, so we override
        // the font-face generated above to use the 'bold' weight instead.
        _registerFontFace('Leelawadee UI Web', fontUrl + "/leelawadeeui-thai/leelawadeeui-bold", FontWeights.semibold);
        // Register icon urls.
        _registerFontFace('FabricMDL2Icons', iconUrl + "/fabricmdl2icons-" + FontFileVersion, FontWeights.regular);
    }
}
/**
 * Reads the fontBaseUrl from window.FabricConfig.fontBaseUrl or falls back to a default.
 */
function _getFontBaseUrl() {
    var win = typeof window !== 'undefined' ? window : undefined;
    // tslint:disable-next-line:no-string-literal no-any
    var fabricConfig = win ? win['FabricConfig'] : undefined;
    return (fabricConfig && fabricConfig.fontBaseUrl !== undefined) ? fabricConfig.fontBaseUrl : DefaultBaseUrl;
}
/**
 * Register the font faces.
 */
_registerDefaultFontFaces();



/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultPalette = {
    themeDarker: '#004578',
    themeDark: '#005a9e',
    themeDarkAlt: '#106ebe',
    themePrimary: '#0078d7',
    themeSecondary: '#2b88d8',
    themeTertiary: '#71afe5',
    themeLight: '#c7e0f4',
    themeLighter: '#deecf9',
    themeLighterAlt: '#eff6fc',
    black: '#000000',
    blackTranslucent40: 'rgba(0,0,0,.4)',
    neutralDark: '#212121',
    neutralPrimary: '#333333',
    neutralPrimaryAlt: '#3c3c3c',
    neutralSecondary: '#666666',
    neutralTertiary: '#a6a6a6',
    neutralTertiaryAlt: '#c8c8c8',
    neutralQuaternary: '#d0d0d0',
    neutralQuaternaryAlt: '#dadada',
    neutralLight: '#eaeaea',
    neutralLighter: '#f4f4f4',
    neutralLighterAlt: '#f8f8f8',
    white: '#ffffff',
    yellow: '#ffb900',
    yellowLight: '#fff100',
    orange: '#d83b01',
    orangeLight: '#ea4300',
    orangeLighter: '#ff8c00',
    redDark: '#a80000',
    red: '#e81123',
    magentaDark: '#5c005c',
    magenta: '#b4009e',
    magentaLight: '#e3008c',
    purpleDark: '#32145a',
    purple: '#5c2d91',
    purpleLight: '#b4a0ff',
    blueDark: '#002050',
    blueMid: '#00188f',
    blue: '#0078d7',
    blueLight: '#00bcf2',
    tealDark: '#004b50',
    teal: '#008272',
    tealLight: '#00b294',
    greenDark: '#004b1c',
    green: '#107c10',
    greenLight: '#bad80a',
};



/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(171);
var GlobalSettings_1 = __webpack_require__(137);
var DefaultFontStyles_1 = __webpack_require__(134);
var DefaultPalette_1 = __webpack_require__(135);
var load_themed_styles_1 = __webpack_require__(24);
var _theme = {
    palette: DefaultPalette_1.DefaultPalette,
    semanticColors: _makeSemanticColorsFromPalette(DefaultPalette_1.DefaultPalette),
    fonts: DefaultFontStyles_1.DefaultFontStyles,
    isInverted: false
};
exports.ThemeSettingName = 'theme';
if (!GlobalSettings_1.GlobalSettings.getValue(exports.ThemeSettingName)) {
    var win = typeof window !== 'undefined' ? window : undefined;
    // tslint:disable:no-string-literal no-any
    if (win && win['FabricConfig'] && win['FabricConfig'].theme) {
        _theme = createTheme(win['FabricConfig'].theme);
    }
    // tslint:enable:no-string-literal no-any
    // Set the default theme.
    GlobalSettings_1.GlobalSettings.setValue(exports.ThemeSettingName, _theme);
}
/**
 * Gets the theme object.
 */
function getTheme() {
    return _theme;
}
exports.getTheme = getTheme;
/**
 * Applies the theme, while filling in missing slots.
 */
function loadTheme(theme) {
    _theme = createTheme(theme);
    // Load the legacy theme from the palette.
    load_themed_styles_1.loadTheme(_theme.palette);
    GlobalSettings_1.GlobalSettings.setValue(exports.ThemeSettingName, _theme);
    return _theme;
}
exports.loadTheme = loadTheme;
/**
 * Creates a custom theme definition which can be used with the Customizer.
 */
function createTheme(theme) {
    var newPalette = tslib_1.__assign({}, DefaultPalette_1.DefaultPalette, theme.palette);
    return {
        palette: newPalette,
        fonts: tslib_1.__assign({}, DefaultFontStyles_1.DefaultFontStyles, theme.fonts),
        semanticColors: tslib_1.__assign({}, _makeSemanticColorsFromPalette(newPalette), theme.semanticColors),
        isInverted: !!theme.isInverted
    };
}
exports.createTheme = createTheme;
// Generates all the semantic slot colors based on the Fabric palette.
// We'll use these as fallbacks for semantic slots that the passed in theme did not define.
function _makeSemanticColorsFromPalette(p) {
    return {
        bodyBackground: p.white,
        bodyText: p.neutralPrimary,
        bodySubtext: p.neutralSecondary,
        bodyDivider: p.neutralLight,
        disabledBackground: p.neutralLighter,
        disabledText: p.neutralTertiaryAlt,
        disabledSubtext: p.neutralQuaternary,
        focusBorder: p.black,
        errorBackground: '#fde7e9',
        errorText: p.redDark,
        inputBorder: p.neutralTertiary,
        inputBorderHovered: p.neutralPrimary,
        inputBackgroundChecked: p.themePrimary,
        inputBackgroundCheckedHovered: p.themeDarkAlt,
        inputForegroundChecked: p.white,
        inputFocusBorderAlt: p.themePrimary,
        menuItemBackgroundHovered: p.neutralLighter,
        menuItemBackgroundChecked: p.neutralQuaternaryAlt,
        menuIcon: p.themePrimary,
        menuHeader: p.themePrimary,
        listBackground: p.white,
        listTextColor: p.neutralPrimary,
        listItemBackgroundHovered: p.neutralLighter,
        listItemBackgroundChecked: p.neutralLight,
        listItemBackgroundCheckedHovered: p.neutralQuaternaryAlt
    };
}



/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Storing global state in local module variables has issues when more than one copy
 * if the module gets loaded on the page (due to a bundling error or simply by consuming
 * a prebundled script.)
 *
 * This file contains helpers to deal with the getting and setting local state, and allows
 * callers to get called back when it mutates.
 */

Object.defineProperty(exports, "__esModule", { value: true });
var GLOBAL_SETTINGS_PROP_NAME = '__globalSettings__';
var CALLBACK_STATE_PROP_NAME = '__callbacks__';
var _globalSettings = {};
var _counter = 0;
if (typeof window !== 'undefined') {
    var win = window;
    _globalSettings = win[GLOBAL_SETTINGS_PROP_NAME] = win[GLOBAL_SETTINGS_PROP_NAME] || (_a = {},
        _a[CALLBACK_STATE_PROP_NAME] = {},
        _a);
}
var _callbacks = _globalSettings[CALLBACK_STATE_PROP_NAME];
/**
 * Global settings helper, which stores settings in the global (window) namespace.
 * If window is not provided, it will store settings in module scope. Provides a
 * way to observe changes as well when their values change.
 *
 * @public
 */
var GlobalSettings = (function () {
    function GlobalSettings() {
    }
    GlobalSettings.getValue = function (key) {
        return _globalSettings[key];
    };
    GlobalSettings.setValue = function (key, value) {
        var oldValue = _globalSettings[key];
        if (value !== oldValue) {
            _globalSettings[key] = value;
            var changeDescription = {
                oldValue: oldValue,
                value: value,
                key: key
            };
            for (var id in _callbacks) {
                if (_callbacks.hasOwnProperty(id)) {
                    _callbacks[id](changeDescription);
                }
            }
        }
    };
    GlobalSettings.addChangeListener = function (cb) {
        // Note: we use generated ids on the callbacks to create a map of the callbacks, which optimizes removal.
        // (It's faster to delete a key than it is to look up the index of an object and splice an array.)
        var id = cb.__id__;
        if (!id) {
            id = cb.__id__ = String(_counter++);
        }
        _callbacks[id] = cb;
    };
    GlobalSettings.removeChangeListener = function (cb) {
        delete _callbacks[cb.__id__];
    };
    return GlobalSettings;
}());
exports.GlobalSettings = GlobalSettings;
var _a;



/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(79);
// Default to undefined so that we initialize on first read.
var _language;
/**
 * Gets the rtl state of the page (returns true if in rtl.)
 *
 * @public
 */
function getLanguage() {
    if (_language === undefined) {
        var doc = dom_1.getDocument();
        var win = dom_1.getWindow();
        // tslint:disable-next-line:no-string-literal
        if (win && win['localStorage']) {
            var savedLanguage = localStorage.getItem('language');
            if (savedLanguage !== null) {
                _language = savedLanguage;
            }
        }
        if (_language === undefined && doc) {
            _language = doc.documentElement.getAttribute('lang');
        }
        if (_language === undefined) {
            setLanguage('en', false);
        }
    }
    return _language;
}
exports.getLanguage = getLanguage;
/**
 * Sets the rtl state of the page (by adjusting the dir attribute of the html element.)
 *
 * @public
 */
function setLanguage(language, avoidPersisting) {
    if (avoidPersisting === void 0) { avoidPersisting = false; }
    var doc = dom_1.getDocument();
    if (doc) {
        doc.documentElement.setAttribute('lang', language);
    }
    var win = dom_1.getWindow();
    // tslint:disable-next-line:no-string-literal
    if (win && win['localStorage'] && !avoidPersisting) {
        localStorage.setItem('language', language);
    }
    _language = language;
}
exports.setLanguage = setLanguage;



/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(79);
// Default to undefined so that we initialize on first read.
var _isRTL;
/**
 * Gets the rtl state of the page (returns true if in rtl.)
 *
 * @public
 */
function getRTL() {
    var isRTL = _isRTL;
    if (isRTL === undefined) {
        var doc = dom_1.getDocument();
        if (doc && doc.documentElement) {
            isRTL = doc.documentElement.getAttribute('dir') === 'rtl';
        }
    }
    return isRTL;
}
exports.getRTL = getRTL;
/**
 * Sets the rtl state of the page (by adjusting the dir attribute of the html element.)
 *
 * @public
 */
function setRTL(isRTL) {
    var doc = dom_1.getDocument();
    if (doc && doc.documentElement) {
        doc.documentElement.setAttribute('dir', isRTL ? 'rtl' : 'ltr');
    }
    _isRTL = isRTL;
}
exports.setRTL = setRTL;
/**
 * Returns the given key, but flips right/left arrows if necessary.
 *
 * @public
 */
function getRTLSafeKeyCode(key) {
    if (getRTL()) {
        if (key === 37 /* left */) {
            key = 39 /* right */;
        }
        else if (key === 39 /* right */) {
            key = 37 /* left */;
        }
    }
    return key;
}
exports.getRTLSafeKeyCode = getRTLSafeKeyCode;



/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = hyphenateProperty;

var _hyphenateStyleName = __webpack_require__(156);

var _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function hyphenateProperty(property) {
  return (0, _hyphenateStyleName2.default)(property);
}
module.exports = exports['default'];

/***/ }),
/* 141 */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function() {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		var result = [];
		for(var i = 0; i < this.length; i++) {
			var item = this[i];
			if(item[2]) {
				result.push("@media " + item[2] + "{" + item[1] + "}");
			} else {
				result.push(item[1]);
			}
		}
		return result.join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function (_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



var camelize = __webpack_require__(142);

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



var hyphenate = __webpack_require__(145);

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @typechecks static-only
 */



/**
 * Memoizes the return value of a function that accepts one string argument.
 */

function memoizeStringOnly(callback) {
  var cache = {};
  return function (string) {
    if (!cache.hasOwnProperty(string)) {
      cache[string] = callback.call(this, string);
    }
    return cache[string];
  };
}

module.exports = memoizeStringOnly;

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSProperty
 */

/**
 * CSS properties which accept numbers but are not in units of "px".
 */

var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridRowStart: true,
  gridRowEnd: true,
  gridColumn: true,
  gridColumnStart: true,
  gridColumnEnd: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true

  /**
   * @param {string} prefix vendor-specific prefix, eg: Webkit
   * @param {string} key style name, eg: transitionDuration
   * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
   * WebkitTransitionDuration
   */
};function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundAttachment: true,
    backgroundColor: true,
    backgroundImage: true,
    backgroundPositionX: true,
    backgroundPositionY: true,
    backgroundRepeat: true
  },
  backgroundPosition: {
    backgroundPositionX: true,
    backgroundPositionY: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  },
  outline: {
    outlineWidth: true,
    outlineStyle: true,
    outlineColor: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

exports.default = CSSProperty;

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _CSSProperty = __webpack_require__(148);

var _CSSProperty2 = _interopRequireDefault(_CSSProperty);

var _warning = __webpack_require__(80);

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule dangerousStyleValue
 */

var isUnitlessNumber = _CSSProperty2.default.isUnitlessNumber;
var styleWarnings = {};

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @param {ReactDOMComponent} component
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value, component) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    if (process.env.NODE_ENV !== 'production') {
      // Allow '0' to pass through without warning. 0 is already special and
      // doesn't require units, so we don't need to warn about it.
      if (component && value !== '0') {
        var owner = component._currentElement._owner;
        var ownerName = owner ? owner.getName() : null;
        if (ownerName && !styleWarnings[ownerName]) {
          styleWarnings[ownerName] = {};
        }
        var warned = false;
        if (ownerName) {
          var warnings = styleWarnings[ownerName];
          warned = warnings[name];
          if (!warned) {
            warnings[name] = true;
          }
        }
        if (!warned) {
          process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
        }
      }
    }
    value = value.trim();
  }
  return value + 'px';
}

exports.default = dangerousStyleValue;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = clean;
// Returns true for null, false, undefined and {}
function isFalsy(value) {
  return value === null || value === undefined || value === false || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && Object.keys(value).length === 0;
}

function cleanObject(object) {
  if (isFalsy(object)) return null;
  if ((typeof object === 'undefined' ? 'undefined' : _typeof(object)) !== 'object') return object;

  var acc = {},
      keys = Object.keys(object),
      hasFalsy = false;
  for (var i = 0; i < keys.length; i++) {
    var value = object[keys[i]];
    var filteredValue = clean(value);
    if (filteredValue === null || filteredValue !== value) {
      hasFalsy = true;
    }
    if (filteredValue !== null) {
      acc[keys[i]] = filteredValue;
    }
  }
  return Object.keys(acc).length === 0 ? null : hasFalsy ? acc : object;
}

function cleanArray(rules) {
  var hasFalsy = false;
  var filtered = [];
  rules.forEach(function (rule) {
    var filteredRule = clean(rule);
    if (filteredRule === null || filteredRule !== rule) {
      hasFalsy = true;
    }
    if (filteredRule !== null) {
      filtered.push(filteredRule);
    }
  });
  return filtered.length == 0 ? null : hasFalsy ? filtered : rules;
}

// Takes style array or object provided by user and clears all the falsy data 
// If there is no styles left after filtration returns null
function clean(input) {
  return Array.isArray(input) ? cleanArray(input) : cleanObject(input);
}

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = doHash;
// murmurhash2 via https://gist.github.com/raycmorgan/588423

function doHash(str, seed) {
  var m = 0x5bd1e995;
  var r = 24;
  var h = seed ^ str.length;
  var length = str.length;
  var currentIndex = 0;

  while (length >= 4) {
    var k = UInt32(str, currentIndex);

    k = Umul32(k, m);
    k ^= k >>> r;
    k = Umul32(k, m);

    h = Umul32(h, m);
    h ^= k;

    currentIndex += 4;
    length -= 4;
  }

  switch (length) {
    case 3:
      h ^= UInt16(str, currentIndex);
      h ^= str.charCodeAt(currentIndex + 2) << 16;
      h = Umul32(h, m);
      break;

    case 2:
      h ^= UInt16(str, currentIndex);
      h = Umul32(h, m);
      break;

    case 1:
      h ^= str.charCodeAt(currentIndex);
      h = Umul32(h, m);
      break;
  }

  h ^= h >>> 13;
  h = Umul32(h, m);
  h ^= h >>> 15;

  return h >>> 0;
}

function UInt32(str, pos) {
  return str.charCodeAt(pos++) + (str.charCodeAt(pos++) << 8) + (str.charCodeAt(pos++) << 16) + (str.charCodeAt(pos) << 24);
}

function UInt16(str, pos) {
  return str.charCodeAt(pos++) + (str.charCodeAt(pos++) << 8);
}

function Umul32(n, m) {
  n = n | 0;
  m = m | 0;
  var nlo = n & 0xffff;
  var nhi = n >>> 16;
  var res = nlo * m + ((nhi * m & 0xffff) << 16) | 0;
  return res;
}

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compose = exports.merge = exports.$ = exports.style = exports.presets = exports.keyframes = exports.fontFace = exports.insertGlobal = exports.insertRule = exports.plugins = exports.styleSheet = undefined;
exports.speedy = speedy;
exports.simulations = simulations;
exports.simulate = simulate;
exports.cssLabels = cssLabels;
exports.isLikeRule = isLikeRule;
exports.idFor = idFor;
exports.css = css;
exports.rehydrate = rehydrate;
exports.flush = flush;
exports.select = select;
exports.parent = parent;
exports.media = media;
exports.pseudo = pseudo;
exports.active = active;
exports.any = any;
exports.checked = checked;
exports.disabled = disabled;
exports.empty = empty;
exports.enabled = enabled;
exports._default = _default;
exports.first = first;
exports.firstChild = firstChild;
exports.firstOfType = firstOfType;
exports.fullscreen = fullscreen;
exports.focus = focus;
exports.hover = hover;
exports.indeterminate = indeterminate;
exports.inRange = inRange;
exports.invalid = invalid;
exports.lastChild = lastChild;
exports.lastOfType = lastOfType;
exports.left = left;
exports.link = link;
exports.onlyChild = onlyChild;
exports.onlyOfType = onlyOfType;
exports.optional = optional;
exports.outOfRange = outOfRange;
exports.readOnly = readOnly;
exports.readWrite = readWrite;
exports.required = required;
exports.right = right;
exports.root = root;
exports.scope = scope;
exports.target = target;
exports.valid = valid;
exports.visited = visited;
exports.dir = dir;
exports.lang = lang;
exports.not = not;
exports.nthChild = nthChild;
exports.nthLastChild = nthLastChild;
exports.nthLastOfType = nthLastOfType;
exports.nthOfType = nthOfType;
exports.after = after;
exports.before = before;
exports.firstLetter = firstLetter;
exports.firstLine = firstLine;
exports.selection = selection;
exports.backdrop = backdrop;
exports.placeholder = placeholder;
exports.cssFor = cssFor;
exports.attribsFor = attribsFor;

var _objectAssign = __webpack_require__(35);

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _sheet = __webpack_require__(155);

var _CSSPropertyOperations = __webpack_require__(81);

var _clean = __webpack_require__(150);

var _clean2 = _interopRequireDefault(_clean);

var _plugins = __webpack_require__(153);

var _hash = __webpack_require__(151);

var _hash2 = _interopRequireDefault(_hash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
/* stylesheet */


var styleSheet = exports.styleSheet = new _sheet.StyleSheet();
// an isomorphic StyleSheet shim. hides all the nitty gritty.

// /**************** LIFTOFF IN 3... 2... 1... ****************/
styleSheet.inject(); //eslint-disable-line indent
// /****************      TO THE MOOOOOOON     ****************/

// convenience function to toggle speedy
function speedy(bool) {
  return styleSheet.speedy(bool);
}

// plugins
// we include these by default
var plugins = exports.plugins = styleSheet.plugins = new _plugins.PluginSet([_plugins.prefixes, _plugins.contentWrap, _plugins.fallbacks]);
plugins.media = new _plugins.PluginSet(); // neat! media, font-face, keyframes
plugins.fontFace = new _plugins.PluginSet();
plugins.keyframes = new _plugins.PluginSet([_plugins.prefixes, _plugins.fallbacks]);

// define some constants

var isDev = process.env.NODE_ENV === 'development' || !process.env.NODE_ENV;
var isTest = process.env.NODE_ENV === 'test';
var isBrowser = typeof window !== 'undefined';

/**** simulations  ****/

// a flag to enable simulation meta tags on dom nodes
// defaults to true in dev mode. recommend *not* to
// toggle often.
var canSimulate = isDev;

// we use these flags for issuing warnings when simulate is called
// in prod / in incorrect order
var warned1 = false,
    warned2 = false;

// toggles simulation activity. shouldn't be needed in most cases
function simulations() {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  canSimulate = !!bool;
}

// use this on dom nodes to 'simulate' pseudoclasses
// <div {...hover({ color: 'red' })} {...simulate('hover', 'visited')}>...</div>
// you can even send in some weird ones, as long as it's in simple format
// and matches an existing rule on the element
// eg simulate('nthChild2', ':hover:active') etc
function simulate() {
  for (var _len = arguments.length, pseudos = Array(_len), _key = 0; _key < _len; _key++) {
    pseudos[_key] = arguments[_key];
  }

  pseudos = (0, _clean2.default)(pseudos);
  if (!pseudos) return {};
  if (!canSimulate) {
    if (!warned1) {
      console.warn('can\'t simulate without once calling simulations(true)'); //eslint-disable-line no-console
      warned1 = true;
    }
    if (!isDev && !isTest && !warned2) {
      console.warn('don\'t use simulation outside dev'); //eslint-disable-line no-console
      warned2 = true;
    }
    return {};
  }
  return pseudos.reduce(function (o, p) {
    return o['data-simulate-' + simple(p)] = '', o;
  }, {});
}

/**** labels ****/
// toggle for debug labels.
// *shouldn't* have to mess with this manually
var hasLabels = isDev;

function cssLabels(bool) {
  hasLabels = !!bool;
}

// takes a string, converts to lowercase, strips out nonalphanumeric.
function simple(str) {
  var char = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

  return str.toLowerCase().replace(/[^a-z0-9]/g, char);
}

// hashes a string to something 'unique'
// we use this to generate ids for styles


function hashify(obj) {
  var str = JSON.stringify(obj);
  var toRet = (0, _hash2.default)(str).toString(36);
  if (obj.label && obj.label.length > 0 && isDev) {
    return simple(obj.label.join('.'), '-') + '-' + toRet;
  }
  return toRet;
}

// of shape { 'data-css-<id>': '' }
function isLikeRule(rule) {
  var keys = Object.keys(rule).filter(function (x) {
    return x !== 'toString';
  });
  if (keys.length !== 1) {
    return false;
  }
  return !!/data\-css\-([a-zA-Z0-9\-_]+)/.exec(keys[0]);
}

// extracts id from a { 'data-css-<id>': ''} like object
function idFor(rule) {
  var keys = Object.keys(rule).filter(function (x) {
    return x !== 'toString';
  });
  if (keys.length !== 1) throw new Error('not a rule');
  var regex = /data\-css\-([a-zA-Z0-9\-_]+)/;
  var match = regex.exec(keys[0]);
  if (!match) throw new Error('not a rule');
  return match[1];
}

// from https://github.com/j2css/j2c/blob/5d381c2d721d04b54fabe6a165d587247c3087cb/src/helpers.js#L28-L61

// "Tokenizes" the selectors into parts relevant for the next function.
// Strings and comments are matched, but ignored afterwards.
// This is not a full tokenizers. It only recognizes comas, parentheses,
// strings and comments.
// regexp generated by scripts/regexps.js then trimmed by hand
var selectorTokenizer = /[(),]|"(?:\\.|[^"\n])*"|'(?:\\.|[^'\n])*'|\/\*[\s\S]*?\*\//g;

/**
 * This will split a coma-separated selector list into individual selectors,
 * ignoring comas in strings, comments and in :pseudo-selectors(parameter, lists).
 *
 * @param {string} selector
 * @return {string[]}
 */

function splitSelector(selector) {
  if (selector.indexOf(',') === -1) {
    return [selector];
  }

  var indices = [],
      res = [],
      inParen = 0,
      o;
  /*eslint-disable no-cond-assign*/
  while (o = selectorTokenizer.exec(selector)) {
    /*eslint-enable no-cond-assign*/
    switch (o[0]) {
      case '(':
        inParen++;break;
      case ')':
        inParen--;break;
      case ',':
        if (inParen) break;indices.push(o.index);
    }
  }
  for (o = indices.length; o--;) {
    res.unshift(selector.slice(indices[o] + 1));
    selector = selector.slice(0, indices[o]);
  }
  res.unshift(selector);
  return res;
}

function selector(id, path) {
  if (!id) {
    return path.replace(/\&/g, '');
  }
  if (!path) return '.css-' + id + ',[data-css-' + id + ']';

  var x = splitSelector(path).map(function (x) {
    return x.indexOf('&') >= 0 ? [x.replace(/\&/mg, '.css-' + id), x.replace(/\&/mg, '[data-css-' + id + ']')].join(',') // todo - make sure each sub selector has an &
    : '.css-' + id + x + ',[data-css-' + id + ']' + x;
  }).join(',');

  if (canSimulate && /^\&\:/.exec(path) && !/\s/.exec(path)) {
    x += ',.css-' + id + '[data-simulate-' + simple(path) + '],[data-css-' + id + '][data-simulate-' + simple(path) + ']';
  }
  return x;
}

// end https://github.com/j2css/j2c/blob/5d381c2d721d04b54fabe6a165d587247c3087cb/src/helpers.js#L28-L61


function toCSS(_ref) {
  var selector = _ref.selector,
      style = _ref.style;

  var result = plugins.transform({ selector: selector, style: style });
  return result.selector + '{' + (0, _CSSPropertyOperations.createMarkupForStyles)(result.style) + '}';
}

function deconstruct(style) {
  // we can be sure it's not infinitely nested here
  var plain = void 0,
      selects = void 0,
      medias = void 0,
      supports = void 0;
  Object.keys(style).forEach(function (key) {
    if (key.indexOf('&') >= 0) {
      selects = selects || {};
      selects[key] = style[key];
    } else if (key.indexOf('@media') === 0) {
      medias = medias || {};
      medias[key] = deconstruct(style[key]);
    } else if (key.indexOf('@supports') === 0) {
      supports = supports || {};
      supports[key] = deconstruct(style[key]);
    } else if (key === 'label') {
      if (style.label.length > 0) {
        plain = plain || {};
        plain.label = hasLabels ? style.label.join('.') : '';
      }
    } else {
      plain = plain || {};
      plain[key] = style[key];
    }
  });
  return { plain: plain, selects: selects, medias: medias, supports: supports };
}

function deconstructedStyleToCSS(id, style) {
  var css = [];

  // plugins here
  var plain = style.plain,
      selects = style.selects,
      medias = style.medias,
      supports = style.supports;

  if (plain) {
    css.push(toCSS({ style: plain, selector: selector(id) }));
  }
  if (selects) {
    Object.keys(selects).forEach(function (key) {
      return css.push(toCSS({ style: selects[key], selector: selector(id, key) }));
    });
  }
  if (medias) {
    Object.keys(medias).forEach(function (key) {
      return css.push(key + '{' + deconstructedStyleToCSS(id, medias[key]).join('') + '}');
    });
  }
  if (supports) {
    Object.keys(supports).forEach(function (key) {
      return css.push(key + '{' + deconstructedStyleToCSS(id, supports[key]).join('') + '}');
    });
  }
  return css;
}

// this cache to track which rules have
// been inserted into the stylesheet
var inserted = styleSheet.inserted = {};

// and helpers to insert rules into said styleSheet
function insert(spec) {
  if (!inserted[spec.id]) {
    inserted[spec.id] = true;
    var deconstructed = deconstruct(spec.style);
    var rules = deconstructedStyleToCSS(spec.id, deconstructed);
    inserted[spec.id] = isBrowser ? true : rules;
    rules.forEach(function (cssRule) {
      return styleSheet.insert(cssRule);
    });
  }
}

// a simple cache to store generated rules
var registered = styleSheet.registered = {};
function register(spec) {
  if (!registered[spec.id]) {
    registered[spec.id] = spec;
  }
}

function _getRegistered(rule) {
  if (isLikeRule(rule)) {
    var ret = registered[idFor(rule)];
    if (ret == null) {
      throw new Error('[glamor] an unexpected rule cache miss occurred. This is probably a sign of multiple glamor instances in your app. See https://github.com/threepointone/glamor/issues/79');
    }
    return ret;
  }
  return rule;
}

// todo - perf
var ruleCache = {};
function toRule(spec) {
  register(spec);
  insert(spec);

  if (ruleCache[spec.id]) {
    return ruleCache[spec.id];
  }

  var ret = _defineProperty({}, 'data-css-' + spec.id, hasLabels ? spec.label || '' : '');
  Object.defineProperty(ret, 'toString', {
    enumerable: false, value: function value() {
      return 'css-' + spec.id;
    }
  });
  ruleCache[spec.id] = ret;
  return ret;
}

function log() {
  //eslint-disable-line no-unused-vars
  console.log(this); //eslint-disable-line no-console
  return this;
}

function isSelector(key) {
  var possibles = [':', '.', '[', '>', ' '],
      found = false,
      ch = key.charAt(0);
  for (var i = 0; i < possibles.length; i++) {
    if (ch === possibles[i]) {
      found = true;
      break;
    }
  }
  return found || key.indexOf('&') >= 0;
}

function joinSelectors(a, b) {
  var as = splitSelector(a).map(function (a) {
    return !(a.indexOf('&') >= 0) ? '&' + a : a;
  });
  var bs = splitSelector(b).map(function (b) {
    return !(b.indexOf('&') >= 0) ? '&' + b : b;
  });

  return bs.reduce(function (arr, b) {
    return arr.concat(as.map(function (a) {
      return b.replace(/\&/g, a);
    }));
  }, []).join(',');
}

function joinMediaQueries(a, b) {
  return a ? '@media ' + a.substring(6) + ' and ' + b.substring(6) : b;
}

function isMediaQuery(key) {
  return key.indexOf('@media') === 0;
}

function isSupports(key) {
  return key.indexOf('@supports') === 0;
}

function joinSupports(a, b) {
  return a ? '@supports ' + a.substring(9) + ' and ' + b.substring(9) : b;
}

// flatten a nested array
function flatten(inArr) {
  var arr = [];
  for (var i = 0; i < inArr.length; i++) {
    if (Array.isArray(inArr[i])) arr = arr.concat(flatten(inArr[i]));else arr = arr.concat(inArr[i]);
  }
  return arr;
}

var prefixedPseudoSelectors = {
  '::placeholder': ['::-webkit-input-placeholder', '::-moz-placeholder', '::-ms-input-placeholder'],
  ':fullscreen': [':-webkit-full-screen', ':-moz-full-screen', ':-ms-fullscreen']

  // mutable! modifies dest.
};function build(dest, _ref2) {
  var _ref2$selector = _ref2.selector,
      selector = _ref2$selector === undefined ? '' : _ref2$selector,
      _ref2$mq = _ref2.mq,
      mq = _ref2$mq === undefined ? '' : _ref2$mq,
      _ref2$supp = _ref2.supp,
      supp = _ref2$supp === undefined ? '' : _ref2$supp,
      _ref2$src = _ref2.src,
      src = _ref2$src === undefined ? {} : _ref2$src;


  if (!Array.isArray(src)) {
    src = [src];
  }
  src = flatten(src);

  src.forEach(function (_src) {
    if (isLikeRule(_src)) {
      var reg = _getRegistered(_src);
      if (reg.type !== 'css') {
        throw new Error('cannot merge this rule');
      }
      _src = reg.style;
    }
    _src = (0, _clean2.default)(_src);
    if (_src && _src.composes) {
      build(dest, { selector: selector, mq: mq, supp: supp, src: _src.composes });
    }
    Object.keys(_src || {}).forEach(function (key) {
      if (isSelector(key)) {

        if (prefixedPseudoSelectors[key]) {
          prefixedPseudoSelectors[key].forEach(function (p) {
            return build(dest, { selector: joinSelectors(selector, p), mq: mq, supp: supp, src: _src[key] });
          });
        }

        build(dest, { selector: joinSelectors(selector, key), mq: mq, supp: supp, src: _src[key] });
      } else if (isMediaQuery(key)) {
        build(dest, { selector: selector, mq: joinMediaQueries(mq, key), supp: supp, src: _src[key] });
      } else if (isSupports(key)) {
        build(dest, { selector: selector, mq: mq, supp: joinSupports(supp, key), src: _src[key] });
      } else if (key === 'composes') {
        // ignore, we already dealth with it
      } else {
        var _dest = dest;
        if (supp) {
          _dest[supp] = _dest[supp] || {};
          _dest = _dest[supp];
        }
        if (mq) {
          _dest[mq] = _dest[mq] || {};
          _dest = _dest[mq];
        }
        if (selector) {
          _dest[selector] = _dest[selector] || {};
          _dest = _dest[selector];
        }

        if (key === 'label') {
          if (hasLabels) {
            dest.label = dest.label.concat(_src.label);
          }
        } else {
          _dest[key] = _src[key];
        }
      }
    });
  });
}

function _css(rules) {
  var style = { label: [] };
  build(style, { src: rules }); // mutative! but worth it.

  var spec = {
    id: hashify(style),
    style: style, label: hasLabels ? style.label.join('.') : '',
    type: 'css'
  };
  return toRule(spec);
}

var nullrule = {
  // 'data-css-nil': ''
};
Object.defineProperty(nullrule, 'toString', {
  enumerable: false, value: function value() {
    return 'css-nil';
  }
});

var inputCaches = typeof WeakMap !== 'undefined' ? [nullrule, new WeakMap(), new WeakMap(), new WeakMap()] : [nullrule];

var warnedWeakMapError = false;
function multiIndexCache(fn) {
  return function (args) {
    if (inputCaches[args.length]) {
      var coi = inputCaches[args.length];
      var ctr = 0;
      while (ctr < args.length - 1) {
        if (!coi.has(args[ctr])) {
          coi.set(args[ctr], new WeakMap());
        }
        coi = coi.get(args[ctr]);
        ctr++;
      }
      if (coi.has(args[args.length - 1])) {
        var ret = coi.get(args[ctr]);

        if (registered[ret.toString().substring(4)]) {
          // make sure it hasn't been flushed
          return ret;
        }
      }
    }
    var value = fn(args);
    if (inputCaches[args.length]) {
      var _ctr = 0,
          _coi = inputCaches[args.length];
      while (_ctr < args.length - 1) {
        _coi = _coi.get(args[_ctr]);
        _ctr++;
      }
      try {
        _coi.set(args[_ctr], value);
      } catch (err) {
        if (isDev && !warnedWeakMapError) {
          var _console;

          warnedWeakMapError = true;
          (_console = console).warn.apply(_console, ['failed setting the WeakMap cache for args:'].concat(_toConsumableArray(args))); // eslint-disable-line no-console
          console.warn('this should NOT happen, please file a bug on the github repo.'); // eslint-disable-line no-console
        }
      }
    }
    return value;
  };
}

var cachedCss = typeof WeakMap !== 'undefined' ? multiIndexCache(_css) : _css;

function css() {
  for (var _len2 = arguments.length, rules = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    rules[_key2] = arguments[_key2];
  }

  if (rules[0] && rules[0].length && rules[0].raw) {
    throw new Error('you forgot to include glamor/babel in your babel plugins.');
  }

  rules = (0, _clean2.default)(rules);
  if (!rules) {
    return nullrule;
  }

  return cachedCss(rules);
}

css.insert = function (css) {
  var spec = {
    id: hashify(css),
    css: css,
    type: 'raw'
  };
  register(spec);
  if (!inserted[spec.id]) {
    styleSheet.insert(spec.css);
    inserted[spec.id] = isBrowser ? true : [spec.css];
  }
};

var insertRule = exports.insertRule = css.insert;

css.global = function (selector, style) {
  style = (0, _clean2.default)(style);
  if (style) {
    return css.insert(toCSS({ selector: selector, style: style }));
  }
};

var insertGlobal = exports.insertGlobal = css.global;

function insertKeyframe(spec) {
  if (!inserted[spec.id]) {
    var inner = Object.keys(spec.keyframes).map(function (kf) {
      var result = plugins.keyframes.transform({ id: spec.id, name: kf, style: spec.keyframes[kf] });
      return result.name + '{' + (0, _CSSPropertyOperations.createMarkupForStyles)(result.style) + '}';
    }).join('');

    var rules = ['-webkit-', '-moz-', '-o-', ''].map(function (prefix) {
      return '@' + prefix + 'keyframes ' + (spec.name + '_' + spec.id) + '{' + inner + '}';
    });
    rules.forEach(function (rule) {
      return styleSheet.insert(rule);
    });

    inserted[spec.id] = isBrowser ? true : rules;
  }
}
css.keyframes = function (name, kfs) {
  if (!kfs) {
    kfs = name, name = 'animation';
  }

  // do not ignore empty keyframe definitions for now.
  kfs = (0, _clean2.default)(kfs) || {};
  var spec = {
    id: hashify({ name: name, kfs: kfs }),
    type: 'keyframes',
    name: name,
    keyframes: kfs
  };
  register(spec);
  insertKeyframe(spec);
  return name + '_' + spec.id;
};

// we don't go all out for fonts as much, giving a simple font loading strategy
// use a fancier lib if you need moar power
css.fontFace = function (font) {
  font = (0, _clean2.default)(font);
  var spec = {
    id: hashify(font),
    type: 'font-face',
    font: font
  };
  register(spec);
  insertFontFace(spec);

  return font.fontFamily;
};

var fontFace = exports.fontFace = css.fontFace;
var keyframes = exports.keyframes = css.keyframes;

function insertFontFace(spec) {
  if (!inserted[spec.id]) {
    var rule = '@font-face{' + (0, _CSSPropertyOperations.createMarkupForStyles)(spec.font) + '}';
    styleSheet.insert(rule);
    inserted[spec.id] = isBrowser ? true : [rule];
  }
}

// rehydrate the insertion cache with ids sent from
// renderStatic / renderStaticOptimized
function rehydrate(ids) {
  // load up ids
  (0, _objectAssign2.default)(inserted, ids.reduce(function (o, i) {
    return o[i] = true, o;
  }, {}));
  // assume css loaded separately
}

// clears out the cache and empties the stylesheet
// best for tests, though there might be some value for SSR.

function flush() {
  inserted = styleSheet.inserted = {};
  registered = styleSheet.registered = {};
  ruleCache = {};
  styleSheet.flush();
  styleSheet.inject();
}

var presets = exports.presets = {
  mobile: '(min-width: 400px)',
  Mobile: '@media (min-width: 400px)',
  phablet: '(min-width: 550px)',
  Phablet: '@media (min-width: 550px)',
  tablet: '(min-width: 750px)',
  Tablet: '@media (min-width: 750px)',
  desktop: '(min-width: 1000px)',
  Desktop: '@media (min-width: 1000px)',
  hd: '(min-width: 1200px)',
  Hd: '@media (min-width: 1200px)'
};

var style = exports.style = css;

function select(selector) {
  for (var _len3 = arguments.length, styles = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    styles[_key3 - 1] = arguments[_key3];
  }

  if (!selector) {
    return style(styles);
  }
  return css(_defineProperty({}, selector, styles));
}
var $ = exports.$ = select;

function parent(selector) {
  for (var _len4 = arguments.length, styles = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    styles[_key4 - 1] = arguments[_key4];
  }

  return css(_defineProperty({}, selector + ' &', styles));
}

var merge = exports.merge = css;
var compose = exports.compose = css;

function media(query) {
  for (var _len5 = arguments.length, rules = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
    rules[_key5 - 1] = arguments[_key5];
  }

  return css(_defineProperty({}, '@media ' + query, rules));
}

function pseudo(selector) {
  for (var _len6 = arguments.length, styles = Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
    styles[_key6 - 1] = arguments[_key6];
  }

  return css(_defineProperty({}, selector, styles));
}

// allllll the pseudoclasses

function active(x) {
  return pseudo(':active', x);
}

function any(x) {
  return pseudo(':any', x);
}

function checked(x) {
  return pseudo(':checked', x);
}

function disabled(x) {
  return pseudo(':disabled', x);
}

function empty(x) {
  return pseudo(':empty', x);
}

function enabled(x) {
  return pseudo(':enabled', x);
}

function _default(x) {
  return pseudo(':default', x); // note '_default' name
}

function first(x) {
  return pseudo(':first', x);
}

function firstChild(x) {
  return pseudo(':first-child', x);
}

function firstOfType(x) {
  return pseudo(':first-of-type', x);
}

function fullscreen(x) {
  return pseudo(':fullscreen', x);
}

function focus(x) {
  return pseudo(':focus', x);
}

function hover(x) {
  return pseudo(':hover', x);
}

function indeterminate(x) {
  return pseudo(':indeterminate', x);
}

function inRange(x) {
  return pseudo(':in-range', x);
}

function invalid(x) {
  return pseudo(':invalid', x);
}

function lastChild(x) {
  return pseudo(':last-child', x);
}

function lastOfType(x) {
  return pseudo(':last-of-type', x);
}

function left(x) {
  return pseudo(':left', x);
}

function link(x) {
  return pseudo(':link', x);
}

function onlyChild(x) {
  return pseudo(':only-child', x);
}

function onlyOfType(x) {
  return pseudo(':only-of-type', x);
}

function optional(x) {
  return pseudo(':optional', x);
}

function outOfRange(x) {
  return pseudo(':out-of-range', x);
}

function readOnly(x) {
  return pseudo(':read-only', x);
}

function readWrite(x) {
  return pseudo(':read-write', x);
}

function required(x) {
  return pseudo(':required', x);
}

function right(x) {
  return pseudo(':right', x);
}

function root(x) {
  return pseudo(':root', x);
}

function scope(x) {
  return pseudo(':scope', x);
}

function target(x) {
  return pseudo(':target', x);
}

function valid(x) {
  return pseudo(':valid', x);
}

function visited(x) {
  return pseudo(':visited', x);
}

// parameterized pseudoclasses
function dir(p, x) {
  return pseudo(':dir(' + p + ')', x);
}
function lang(p, x) {
  return pseudo(':lang(' + p + ')', x);
}
function not(p, x) {
  // should this be a plugin?
  var selector = p.split(',').map(function (x) {
    return x.trim();
  }).map(function (x) {
    return ':not(' + x + ')';
  });
  if (selector.length === 1) {
    return pseudo(':not(' + p + ')', x);
  }
  return select(selector.join(''), x);
}
function nthChild(p, x) {
  return pseudo(':nth-child(' + p + ')', x);
}
function nthLastChild(p, x) {
  return pseudo(':nth-last-child(' + p + ')', x);
}
function nthLastOfType(p, x) {
  return pseudo(':nth-last-of-type(' + p + ')', x);
}
function nthOfType(p, x) {
  return pseudo(':nth-of-type(' + p + ')', x);
}

// pseudoelements
function after(x) {
  return pseudo('::after', x);
}
function before(x) {
  return pseudo('::before', x);
}
function firstLetter(x) {
  return pseudo('::first-letter', x);
}
function firstLine(x) {
  return pseudo('::first-line', x);
}
function selection(x) {
  return pseudo('::selection', x);
}
function backdrop(x) {
  return pseudo('::backdrop', x);
}
function placeholder(x) {
  // https://github.com/threepointone/glamor/issues/14
  return css({ '::placeholder': x });
}

/*** helpers for web components ***/
// https://github.com/threepointone/glamor/issues/16

function cssFor() {
  for (var _len7 = arguments.length, rules = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
    rules[_key7] = arguments[_key7];
  }

  rules = (0, _clean2.default)(rules);
  return rules ? rules.map(function (r) {
    var style = { label: [] };
    build(style, { src: r }); // mutative! but worth it.
    return deconstructedStyleToCSS(hashify(style), deconstruct(style)).join('');
  }).join('') : '';
}

function attribsFor() {
  for (var _len8 = arguments.length, rules = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
    rules[_key8] = arguments[_key8];
  }

  rules = (0, _clean2.default)(rules);
  var htmlAttributes = rules ? rules.map(function (rule) {
    idFor(rule); // throwaway check for rule
    var key = Object.keys(rule)[0],
        value = rule[key];
    return key + '="' + (value || '') + '"';
  }).join(' ') : '';

  return htmlAttributes;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.PluginSet = PluginSet;
exports.fallbacks = fallbacks;
exports.contentWrap = contentWrap;
exports.prefixes = prefixes;

var _objectAssign = __webpack_require__(35);

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _CSSPropertyOperations = __webpack_require__(81);

var _prefixer = __webpack_require__(154);

var _prefixer2 = _interopRequireDefault(_prefixer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isDev = function (x) {
  return x === 'development' || !x;
}(process.env.NODE_ENV);

function PluginSet(initial) {
  this.fns = initial || [];
}

(0, _objectAssign2.default)(PluginSet.prototype, {
  add: function add() {
    var _this = this;

    for (var _len = arguments.length, fns = Array(_len), _key = 0; _key < _len; _key++) {
      fns[_key] = arguments[_key];
    }

    fns.forEach(function (fn) {
      if (_this.fns.indexOf(fn) >= 0) {
        if (isDev) {
          console.warn('adding the same plugin again, ignoring'); //eslint-disable-line no-console
        }
      } else {
        _this.fns = [fn].concat(_this.fns);
      }
    });
  },
  remove: function remove(fn) {
    this.fns = this.fns.filter(function (x) {
      return x !== fn;
    });
  },
  clear: function clear() {
    this.fns = [];
  },
  transform: function transform(o) {
    return this.fns.reduce(function (o, fn) {
      return fn(o);
    }, o);
  }
});

function fallbacks(node) {
  var hasArray = Object.keys(node.style).map(function (x) {
    return Array.isArray(node.style[x]);
  }).indexOf(true) >= 0;
  if (hasArray) {
    var style = node.style;

    var flattened = Object.keys(style).reduce(function (o, key) {
      o[key] = Array.isArray(style[key]) ? style[key].join('; ' + (0, _CSSPropertyOperations.processStyleName)(key) + ': ') : style[key];
      return o;
    }, {});
    // todo - 
    // flatten arrays which haven't been flattened yet 
    return (0, _objectAssign2.default)({}, node, { style: flattened });
  }
  return node;
}

var contentValues = ['normal', 'none', 'counter', 'open-quote', 'close-quote', 'no-open-quote', 'no-close-quote', 'initial', 'inherit'];

function contentWrap(node) {
  if (node.style.content) {
    var cont = node.style.content;
    if (contentValues.indexOf(cont) >= 0) {
      return node;
    }
    if (/^(attr|calc|counters?|url)\(/.test(cont)) {
      return node;
    }
    if (cont.charAt(0) === cont.charAt(cont.length - 1) && (cont.charAt(0) === '"' || cont.charAt(0) === "'")) {
      return node;
    }
    return _extends({}, node, { style: _extends({}, node.style, { content: '"' + cont + '"' }) });
  }
  return node;
}

function prefixes(node) {
  return (0, _objectAssign2.default)({}, node, { style: (0, _prefixer2.default)(_extends({}, node.style)) });
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = prefixer;

var _staticData = __webpack_require__(167);

var _staticData2 = _interopRequireDefault(_staticData);

var _prefixProperty = __webpack_require__(168);

var _prefixProperty2 = _interopRequireDefault(_prefixProperty);

var _prefixValue = __webpack_require__(169);

var _prefixValue2 = _interopRequireDefault(_prefixValue);

var _cursor = __webpack_require__(158);

var _cursor2 = _interopRequireDefault(_cursor);

var _crossFade = __webpack_require__(157);

var _crossFade2 = _interopRequireDefault(_crossFade);

var _filter = __webpack_require__(159);

var _filter2 = _interopRequireDefault(_filter);

var _flex = __webpack_require__(160);

var _flex2 = _interopRequireDefault(_flex);

var _flexboxOld = __webpack_require__(161);

var _flexboxOld2 = _interopRequireDefault(_flexboxOld);

var _gradient = __webpack_require__(162);

var _gradient2 = _interopRequireDefault(_gradient);

var _imageSet = __webpack_require__(163);

var _imageSet2 = _interopRequireDefault(_imageSet);

var _position = __webpack_require__(164);

var _position2 = _interopRequireDefault(_position);

var _sizing = __webpack_require__(165);

var _sizing2 = _interopRequireDefault(_sizing);

var _transition = __webpack_require__(166);

var _transition2 = _interopRequireDefault(_transition);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var plugins = [_crossFade2.default, _cursor2.default, _filter2.default, _flexboxOld2.default, _gradient2.default, _imageSet2.default, _position2.default, _sizing2.default, _transition2.default, _flex2.default]; // custom facade for inline-style-prefixer

var prefixMap = _staticData2.default.prefixMap;

function prefixer(style) {
  for (var property in style) {
    var value = style[property];

    var processedValue = (0, _prefixValue2.default)(plugins, property, value, style, prefixMap);

    // only modify the value if it was touched
    // by any plugin to prevent unnecessary mutations
    if (processedValue) {
      style[property] = processedValue;
    }

    (0, _prefixProperty2.default)(prefixMap, property, style);
  }
  return style;
}

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StyleSheet = StyleSheet;

var _objectAssign = __webpack_require__(35);

var _objectAssign2 = _interopRequireDefault(_objectAssign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/* 

high performance StyleSheet for css-in-js systems 

- uses multiple style tags behind the scenes for millions of rules 
- uses `insertRule` for appending in production for *much* faster performance
- 'polyfills' on server side 


// usage

import StyleSheet from 'glamor/lib/sheet'
let styleSheet = new StyleSheet()

styleSheet.inject() 
- 'injects' the stylesheet into the page (or into memory if on server)

styleSheet.insert('#box { border: 1px solid red; }') 
- appends a css rule into the stylesheet 

styleSheet.flush() 
- empties the stylesheet of all its contents


*/

function last(arr) {
  return arr[arr.length - 1];
}

function sheetForTag(tag) {
  if (tag.sheet) {
    return tag.sheet;
  }

  // this weirdness brought to you by firefox 
  for (var i = 0; i < document.styleSheets.length; i++) {
    if (document.styleSheets[i].ownerNode === tag) {
      return document.styleSheets[i];
    }
  }
}

var isBrowser = typeof window !== 'undefined';
var isDev = process.env.NODE_ENV === 'development' || !process.env.NODE_ENV; //(x => (x === 'development') || !x)(process.env.NODE_ENV)
var isTest = process.env.NODE_ENV === 'test';

var oldIE = function () {
  if (isBrowser) {
    var div = document.createElement('div');
    div.innerHTML = '<!--[if lt IE 10]><i></i><![endif]-->';
    return div.getElementsByTagName('i').length === 1;
  }
}();

function makeStyleTag() {
  var tag = document.createElement('style');
  tag.type = 'text/css';
  tag.setAttribute('data-glamor', '');
  tag.appendChild(document.createTextNode(''));
  (document.head || document.getElementsByTagName('head')[0]).appendChild(tag);
  return tag;
}

function StyleSheet() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$speedy = _ref.speedy,
      speedy = _ref$speedy === undefined ? !isDev && !isTest : _ref$speedy,
      _ref$maxLength = _ref.maxLength,
      maxLength = _ref$maxLength === undefined ? isBrowser && oldIE ? 4000 : 65000 : _ref$maxLength;

  this.isSpeedy = speedy; // the big drawback here is that the css won't be editable in devtools
  this.sheet = undefined;
  this.tags = [];
  this.maxLength = maxLength;
  this.ctr = 0;
}

(0, _objectAssign2.default)(StyleSheet.prototype, {
  getSheet: function getSheet() {
    return sheetForTag(last(this.tags));
  },
  inject: function inject() {
    var _this = this;

    if (this.injected) {
      throw new Error('already injected stylesheet!');
    }
    if (isBrowser) {
      this.tags[0] = makeStyleTag();
    } else {
      // server side 'polyfill'. just enough behavior to be useful.
      this.sheet = {
        cssRules: [],
        insertRule: function insertRule(rule) {
          // enough 'spec compliance' to be able to extract the rules later  
          // in other words, just the cssText field 
          _this.sheet.cssRules.push({ cssText: rule });
        }
      };
    }
    this.injected = true;
  },
  speedy: function speedy(bool) {
    if (this.ctr !== 0) {
      throw new Error('cannot change speedy mode after inserting any rule to sheet. Either call speedy(' + bool + ') earlier in your app, or call flush() before speedy(' + bool + ')');
    }
    this.isSpeedy = !!bool;
  },
  _insert: function _insert(rule) {
    // this weirdness for perf, and chrome's weird bug 
    // https://stackoverflow.com/questions/20007992/chrome-suddenly-stopped-accepting-insertrule
    try {
      var sheet = this.getSheet();
      sheet.insertRule(rule, rule.indexOf('@import') !== -1 ? 0 : sheet.cssRules.length);
    } catch (e) {
      if (isDev) {
        // might need beter dx for this 
        console.warn('whoops, illegal rule inserted', rule); //eslint-disable-line no-console
      }
    }
  },
  insert: function insert(rule) {

    if (isBrowser) {
      // this is the ultrafast version, works across browsers 
      if (this.isSpeedy && this.getSheet().insertRule) {
        this._insert(rule);
      }
      // more browser weirdness. I don't even know    
      // else if(this.tags.length > 0 && this.tags::last().styleSheet) {      
      //   this.tags::last().styleSheet.cssText+= rule
      // }
      else {
          if (rule.indexOf('@import') !== -1) {
            var tag = last(this.tags);
            tag.insertBefore(document.createTextNode(rule), tag.firstChild);
          } else {
            last(this.tags).appendChild(document.createTextNode(rule));
          }
        }
    } else {
      // server side is pretty simple         
      this.sheet.insertRule(rule, rule.indexOf('@import') !== -1 ? 0 : this.sheet.cssRules.length);
    }

    this.ctr++;
    if (isBrowser && this.ctr % this.maxLength === 0) {
      this.tags.push(makeStyleTag());
    }
    return this.ctr - 1;
  },

  // commenting this out till we decide on v3's decision 
  // _replace(index, rule) {
  //   // this weirdness for perf, and chrome's weird bug 
  //   // https://stackoverflow.com/questions/20007992/chrome-suddenly-stopped-accepting-insertrule
  //   try {  
  //     let sheet = this.getSheet()        
  //     sheet.deleteRule(index) // todo - correct index here     
  //     sheet.insertRule(rule, index)
  //   }
  //   catch(e) {
  //     if(isDev) {
  //       // might need beter dx for this 
  //       console.warn('whoops, problem replacing rule', rule) //eslint-disable-line no-console
  //     }          
  //   }          

  // }
  // replace(index, rule) {
  //   if(isBrowser) {
  //     if(this.isSpeedy && this.getSheet().insertRule) {
  //       this._replace(index, rule)
  //     }
  //     else {
  //       let _slot = Math.floor((index  + this.maxLength) / this.maxLength) - 1        
  //       let _index = (index % this.maxLength) + 1
  //       let tag = this.tags[_slot]
  //       tag.replaceChild(document.createTextNode(rule), tag.childNodes[_index])
  //     }
  //   }
  //   else {
  //     let rules = this.sheet.cssRules
  //     this.sheet.cssRules = [ ...rules.slice(0, index), { cssText: rule }, ...rules.slice(index + 1) ]
  //   }
  // }
  delete: function _delete(index) {
    // we insert a blank rule when 'deleting' so previously returned indexes remain stable
    return this.replace(index, '');
  },
  flush: function flush() {
    if (isBrowser) {
      this.tags.forEach(function (tag) {
        return tag.parentNode.removeChild(tag);
      });
      this.tags = [];
      this.sheet = null;
      this.ctr = 0;
      // todo - look for remnants in document.styleSheets
    } else {
      // simpler on server 
      this.sheet.cssRules = [];
    }
    this.injected = false;
  },
  rules: function rules() {
    if (!isBrowser) {
      return this.sheet.cssRules;
    }
    var arr = [];
    this.tags.forEach(function (tag) {
      return arr.splice.apply(arr, [arr.length, 0].concat(_toConsumableArray(Array.from(sheetForTag(tag).cssRules))));
    });
    return arr;
  }
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var uppercasePattern = /[A-Z]/g;
var msPattern = /^ms-/;
var cache = {};

function hyphenateStyleName(string) {
    return string in cache
    ? cache[string]
    : cache[string] = string
      .replace(uppercasePattern, '-$&')
      .toLowerCase()
      .replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = crossFade;

var _isPrefixedValue = __webpack_require__(16);

var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// http://caniuse.com/#search=cross-fade
var prefixes = ['-webkit-', ''];
function crossFade(property, value) {
  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.indexOf('cross-fade(') > -1) {
    return prefixes.map(function (prefix) {
      return value.replace(/cross-fade\(/g, prefix + 'cross-fade(');
    });
  }
}
module.exports = exports['default'];

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = cursor;
var prefixes = ['-webkit-', '-moz-', ''];

var values = {
  'zoom-in': true,
  'zoom-out': true,
  grab: true,
  grabbing: true
};

function cursor(property, value) {
  if (property === 'cursor' && values.hasOwnProperty(value)) {
    return prefixes.map(function (prefix) {
      return prefix + value;
    });
  }
}
module.exports = exports['default'];

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = filter;

var _isPrefixedValue = __webpack_require__(16);

var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// http://caniuse.com/#feat=css-filter-function
var prefixes = ['-webkit-', ''];
function filter(property, value) {
  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.indexOf('filter(') > -1) {
    return prefixes.map(function (prefix) {
      return value.replace(/filter\(/g, prefix + 'filter(');
    });
  }
}
module.exports = exports['default'];

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = flex;
var values = {
  flex: ['-webkit-box', '-moz-box', '-ms-flexbox', '-webkit-flex', 'flex'],
  'inline-flex': ['-webkit-inline-box', '-moz-inline-box', '-ms-inline-flexbox', '-webkit-inline-flex', 'inline-flex']
};

function flex(property, value) {
  if (property === 'display' && values.hasOwnProperty(value)) {
    return values[value];
  }
}
module.exports = exports['default'];

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = flexboxOld;
var alternativeValues = {
  'space-around': 'justify',
  'space-between': 'justify',
  'flex-start': 'start',
  'flex-end': 'end',
  'wrap-reverse': 'multiple',
  wrap: 'multiple'
};

var alternativeProps = {
  alignItems: 'WebkitBoxAlign',
  justifyContent: 'WebkitBoxPack',
  flexWrap: 'WebkitBoxLines'
};

function flexboxOld(property, value, style) {
  if (property === 'flexDirection' && typeof value === 'string') {
    if (value.indexOf('column') > -1) {
      style.WebkitBoxOrient = 'vertical';
    } else {
      style.WebkitBoxOrient = 'horizontal';
    }
    if (value.indexOf('reverse') > -1) {
      style.WebkitBoxDirection = 'reverse';
    } else {
      style.WebkitBoxDirection = 'normal';
    }
  }
  if (alternativeProps.hasOwnProperty(property)) {
    style[alternativeProps[property]] = alternativeValues[value] || value;
  }
}
module.exports = exports['default'];

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = gradient;

var _isPrefixedValue = __webpack_require__(16);

var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var prefixes = ['-webkit-', '-moz-', ''];

var values = /linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/;

function gradient(property, value) {
  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && values.test(value)) {
    return prefixes.map(function (prefix) {
      return prefix + value;
    });
  }
}
module.exports = exports['default'];

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = imageSet;

var _isPrefixedValue = __webpack_require__(16);

var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// http://caniuse.com/#feat=css-image-set
var prefixes = ['-webkit-', ''];
function imageSet(property, value) {
  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.indexOf('image-set(') > -1) {
    return prefixes.map(function (prefix) {
      return value.replace(/image-set\(/g, prefix + 'image-set(');
    });
  }
}
module.exports = exports['default'];

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = position;
function position(property, value) {
  if (property === 'position' && value === 'sticky') {
    return ['-webkit-sticky', 'sticky'];
  }
}
module.exports = exports['default'];

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = sizing;
var prefixes = ['-webkit-', '-moz-', ''];

var properties = {
  maxHeight: true,
  maxWidth: true,
  width: true,
  height: true,
  columnWidth: true,
  minWidth: true,
  minHeight: true
};
var values = {
  'min-content': true,
  'max-content': true,
  'fill-available': true,
  'fit-content': true,
  'contain-floats': true
};

function sizing(property, value) {
  if (properties.hasOwnProperty(property) && values.hasOwnProperty(value)) {
    return prefixes.map(function (prefix) {
      return prefix + value;
    });
  }
}
module.exports = exports['default'];

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = transition;

var _hyphenateProperty = __webpack_require__(140);

var _hyphenateProperty2 = _interopRequireDefault(_hyphenateProperty);

var _isPrefixedValue = __webpack_require__(16);

var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

var _capitalizeString = __webpack_require__(82);

var _capitalizeString2 = _interopRequireDefault(_capitalizeString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var properties = {
  transition: true,
  transitionProperty: true,
  WebkitTransition: true,
  WebkitTransitionProperty: true,
  MozTransition: true,
  MozTransitionProperty: true
};


var prefixMapping = {
  Webkit: '-webkit-',
  Moz: '-moz-',
  ms: '-ms-'
};

function prefixValue(value, propertyPrefixMap) {
  if ((0, _isPrefixedValue2.default)(value)) {
    return value;
  }

  // only split multi values, not cubic beziers
  var multipleValues = value.split(/,(?![^()]*(?:\([^()]*\))?\))/g);

  for (var i = 0, len = multipleValues.length; i < len; ++i) {
    var singleValue = multipleValues[i];
    var values = [singleValue];
    for (var property in propertyPrefixMap) {
      var dashCaseProperty = (0, _hyphenateProperty2.default)(property);

      if (singleValue.indexOf(dashCaseProperty) > -1 && dashCaseProperty !== 'order') {
        var prefixes = propertyPrefixMap[property];
        for (var j = 0, pLen = prefixes.length; j < pLen; ++j) {
          // join all prefixes and create a new value
          values.unshift(singleValue.replace(dashCaseProperty, prefixMapping[prefixes[j]] + dashCaseProperty));
        }
      }
    }

    multipleValues[i] = values.join(',');
  }

  return multipleValues.join(',');
}

function transition(property, value, style, propertyPrefixMap) {
  // also check for already prefixed transitions
  if (typeof value === 'string' && properties.hasOwnProperty(property)) {
    var outputValue = prefixValue(value, propertyPrefixMap
    // if the property is already prefixed
    );var webkitOutput = outputValue.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function (val) {
      return !/-moz-|-ms-/.test(val);
    }).join(',');

    if (property.indexOf('Webkit') > -1) {
      return webkitOutput;
    }

    var mozOutput = outputValue.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function (val) {
      return !/-webkit-|-ms-/.test(val);
    }).join(',');

    if (property.indexOf('Moz') > -1) {
      return mozOutput;
    }

    style['Webkit' + (0, _capitalizeString2.default)(property)] = webkitOutput;
    style['Moz' + (0, _capitalizeString2.default)(property)] = mozOutput;
    return outputValue;
  }
}
module.exports = exports['default'];

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var w = ["Webkit"];
var m = ["Moz"];
var ms = ["ms"];
var wm = ["Webkit", "Moz"];
var wms = ["Webkit", "ms"];
var wmms = ["Webkit", "Moz", "ms"];

exports.default = {
  plugins: [],
  prefixMap: { "appearance": wm, "userSelect": wmms, "textEmphasisPosition": w, "textEmphasis": w, "textEmphasisStyle": w, "textEmphasisColor": w, "boxDecorationBreak": w, "clipPath": w, "maskImage": w, "maskMode": w, "maskRepeat": w, "maskPosition": w, "maskClip": w, "maskOrigin": w, "maskSize": w, "maskComposite": w, "mask": w, "maskBorderSource": w, "maskBorderMode": w, "maskBorderSlice": w, "maskBorderWidth": w, "maskBorderOutset": w, "maskBorderRepeat": w, "maskBorder": w, "maskType": w, "textDecorationStyle": w, "textDecorationSkip": w, "textDecorationLine": w, "textDecorationColor": w, "filter": w, "fontFeatureSettings": w, "breakAfter": wmms, "breakBefore": wmms, "breakInside": wmms, "columnCount": wm, "columnFill": wm, "columnGap": wm, "columnRule": wm, "columnRuleColor": wm, "columnRuleStyle": wm, "columnRuleWidth": wm, "columns": wm, "columnSpan": wm, "columnWidth": wm, "flex": w, "flexBasis": w, "flexDirection": w, "flexGrow": w, "flexFlow": w, "flexShrink": w, "flexWrap": w, "alignContent": w, "alignItems": w, "alignSelf": w, "justifyContent": w, "order": w, "transform": w, "transformOrigin": w, "transformOriginX": w, "transformOriginY": w, "backfaceVisibility": w, "perspective": w, "perspectiveOrigin": w, "transformStyle": w, "transformOriginZ": w, "animation": w, "animationDelay": w, "animationDirection": w, "animationFillMode": w, "animationDuration": w, "animationIterationCount": w, "animationName": w, "animationPlayState": w, "animationTimingFunction": w, "backdropFilter": w, "fontKerning": w, "scrollSnapType": wms, "scrollSnapPointsX": wms, "scrollSnapPointsY": wms, "scrollSnapDestination": wms, "scrollSnapCoordinate": wms, "shapeImageThreshold": w, "shapeImageMargin": w, "shapeImageOutside": w, "hyphens": wmms, "flowInto": wms, "flowFrom": wms, "regionFragment": wms, "textAlignLast": m, "tabSize": m, "wrapFlow": ms, "wrapThrough": ms, "wrapMargin": ms, "gridTemplateColumns": ms, "gridTemplateRows": ms, "gridTemplateAreas": ms, "gridTemplate": ms, "gridAutoColumns": ms, "gridAutoRows": ms, "gridAutoFlow": ms, "grid": ms, "gridRowStart": ms, "gridColumnStart": ms, "gridRowEnd": ms, "gridRow": ms, "gridColumn": ms, "gridColumnEnd": ms, "gridColumnGap": ms, "gridRowGap": ms, "gridArea": ms, "gridGap": ms, "textSizeAdjust": wms, "borderImage": w, "borderImageOutset": w, "borderImageRepeat": w, "borderImageSlice": w, "borderImageSource": w, "borderImageWidth": w, "transitionDelay": w, "transitionDuration": w, "transitionProperty": w, "transitionTimingFunction": w }
};
module.exports = exports["default"];

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = prefixProperty;

var _capitalizeString = __webpack_require__(82);

var _capitalizeString2 = _interopRequireDefault(_capitalizeString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function prefixProperty(prefixProperties, property, style) {
  if (prefixProperties.hasOwnProperty(property)) {
    var requiredPrefixes = prefixProperties[property];
    for (var i = 0, len = requiredPrefixes.length; i < len; ++i) {
      style[requiredPrefixes[i] + (0, _capitalizeString2.default)(property)] = style[property];
    }
  }
}
module.exports = exports['default'];

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = prefixValue;
function prefixValue(plugins, property, value, style, metaData) {
  for (var i = 0, len = plugins.length; i < len; ++i) {
    var processedValue = plugins[i](property, value, style, metaData

    // we can stop processing if a value is returned
    // as all plugin criteria are unique
    );if (processedValue) {
      return processedValue;
    }
  }
}
module.exports = exports["default"];

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

// this will be an object of properties that map to their corresponding rtl property (their doppelganger)
var propertiesToConvert = arrayToObject([['paddingLeft', 'paddingRight'], ['marginLeft', 'marginRight'], ['left', 'right'], ['borderLeft', 'borderRight'], ['borderLeftColor', 'borderRightColor'], ['borderLeftStyle', 'borderRightStyle'], ['borderTopLeftRadius', 'borderTopRightRadius'], ['borderBottomLeftRadius', 'borderBottomRightRadius']]);

// this is the same as the propertiesToConvert except for values
var valuesToConvert = arrayToObject([['ltr', 'rtl'], ['left', 'right'], ['w-resize', 'e-resize'], ['sw-resize', 'se-resize'], ['nw-resize', 'ne-resize']]);

// some values require a little fudging, that fudging goes here.
var propertyValueConverters = {
  padding: function padding(value) {
    if (isNumber(value)) {
      return value;
    }
    return handleQuartetValues(value);
  },
  textShadow: function textShadow(value) {
    // intentionally leaving off the `g` flag here because we only want to change the first number (which is the offset-x)
    return value.replace(/(-*)([.|\d]+)/, function (match, negative, number) {
      if (number === '0') {
        return match;
      }
      var doubleNegative = negative === '' ? '-' : '';
      return '' + doubleNegative + number;
    });
  },
  borderColor: function borderColor(value) {
    return handleQuartetValues(value);
  },
  borderRadius: function borderRadius(value) {
    if (isNumber(value)) {
      return value;
    }
    if (includes(value, '/')) {
      var _value$split = value.split('/'),
          _value$split2 = _slicedToArray(_value$split, 2),
          radius1 = _value$split2[0],
          radius2 = _value$split2[1];

      var convertedRadius1 = propertyValueConverters.borderRadius(radius1.trim());
      var convertedRadius2 = propertyValueConverters.borderRadius(radius2.trim());
      return convertedRadius1 + ' / ' + convertedRadius2;
    }
    var splitValues = getValuesAsList(value);
    switch (splitValues.length) {
      case 2:
        {
          return splitValues.reverse().join(' ');
        }
      case 4:
        {
          var _splitValues = _slicedToArray(splitValues, 4),
              topLeft = _splitValues[0],
              topRight = _splitValues[1],
              bottomRight = _splitValues[2],
              bottomLeft = _splitValues[3];

          return [topRight, topLeft, bottomLeft, bottomRight].join(' ');
        }
      default:
        {
          return value;
        }
    }
  },
  background: function background(value) {
    // Yeah, this is in need of a refactor 🙃...
    // but this property is a tough cookie 🍪
    // get the backgroundPosition out of the string by removing everything that couldn't be the backgroundPosition value
    var backgroundPositionValue = value.replace(/(url\(.*?\))|(rgba?\(.*?\))|(hsl\(.*?\))|(#[a-fA-F0-9]+)|((^| )(\D)+( |$))/g, '').trim();
    // replace that backgroundPosition value with the converted version
    value = value.replace(backgroundPositionValue, propertyValueConverters.backgroundPosition(backgroundPositionValue));
    // do the backgroundImage value replacing on the whole value (because why not?)
    return propertyValueConverters.backgroundImage(value);
  },
  backgroundImage: function backgroundImage(value) {
    if (!includes(value, 'url(')) {
      return value;
    }
    // sorry for the regex 😞, but basically this replaces _every_ instance of `ltr`, `rtl`, `right`, and `left` with
    // the corresponding opposite. A situation we're accepting here:
    // url('/left/right/rtl/ltr.png') will be changed to url('/right/left/ltr/rtl.png')
    // Definite trade-offs here, but I think it's a good call.
    return value.replace(/(^|\W|_)((ltr)|(rtl)|(left)|(right))(\W|_|$)/g, function (match, g1, group2) {
      return match.replace(group2, valuesToConvert[group2]);
    });
  },
  backgroundPosition: function backgroundPosition(value) {
    return value
    // intentionally only grabbing the first instance of this because that represents `left`
    .replace(/^((-|\d|\.)+%)/, function (match, group) {
      return calculateNewBackgroundPosition(group);
    }).replace(/(left)|(right)/, function (match) {
      return valuesToConvert[match];
    });
  },
  backgroundPositionX: function backgroundPositionX(value) {
    if (isNumber(value)) {
      return value;
    }
    return propertyValueConverters.backgroundPosition(value);
  }
};
propertyValueConverters.margin = propertyValueConverters.padding;
propertyValueConverters.borderWidth = propertyValueConverters.padding;
propertyValueConverters.boxShadow = propertyValueConverters.textShadow;
propertyValueConverters.webkitBoxShadow = propertyValueConverters.textShadow;
propertyValueConverters.mozBoxShadow = propertyValueConverters.textShadow;
propertyValueConverters.borderStyle = propertyValueConverters.borderColor;

// here's our main export! 👋
exports.default = convert;

/**
 * converts properties and values in the CSS in JS object to their corresponding RTL values
 * @param {Object} object the CSS in JS object
 * @return {Object} the RTL converted object
 */

function convert(object) {
  return Object.keys(object).reduce(function (newObj, originalKey) {
    var originalValue = object[originalKey];
    if (isString(originalValue)) {
      // you're welcome to later code 😺
      originalValue = originalValue.trim();
    }

    var _convertProperty = convertProperty(originalKey, originalValue),
        key = _convertProperty.key,
        value = _convertProperty.value;

    newObj[key] = value;
    return newObj;
  }, {});
}

/**
 * Converts a property and its value to the corresponding RTL key and value
 * @param {String} originalKey the original property key
 * @param {Number|String|Object} originalValue the original css property value
 * @return {Object} the new {key, value} pair
 */
function convertProperty(originalKey, originalValue) {
  var isNoFlip = /\/\*\s?@noflip\s?\*\//.test(originalValue);
  var key = isNoFlip ? originalKey : getPropertyDoppelganger(originalKey);
  var value = isNoFlip ? originalValue : getValueDoppelganger(key, originalValue);
  return { key: key, value: value };
}

/**
 * This gets the RTL version of the given property if it has a corresponding RTL property
 * @param {String} property the name of the property
 * @return {String} the name of the RTL property
 */
function getPropertyDoppelganger(property) {
  return propertiesToConvert[property] || property;
}

/**
 * This converts the given value to the RTL version of that value based on the key
 * @param {String} key this is the key (note: this should be the RTL version of the originalKey)
 * @param {String|Number|Object} originalValue the original css property value. If it's an object, then we'll convert that as well
 * @return {String|Number|Object} the converted value
 */
function getValueDoppelganger(key, originalValue) {
  /* eslint complexity:[2, 8] */ // let's try to keep the complexity down... If we have to do this much more, let's break this up
  if (originalValue === null || typeof originalValue === 'undefined') {
    return originalValue;
  }

  if (isObject(originalValue)) {
    return convert(originalValue); // recurssion 🌀
  }
  var isNum = isNumber(originalValue);
  var importantlessValue = isNum ? originalValue : originalValue.replace(/ !important.*?$/, '');
  var isImportant = !isNum && importantlessValue.length !== originalValue.length;
  var valueConverter = propertyValueConverters[key];
  var newValue = void 0;
  if (valueConverter) {
    newValue = valueConverter(importantlessValue);
  } else {
    newValue = valuesToConvert[importantlessValue] || importantlessValue;
  }
  if (isImportant) {
    return newValue + ' !important';
  }
  return newValue;
}

/**
 * This takes a list of CSS values and converts it to an array
 * @param {String} value - something like `1px`, `1px 2em`, or `3pt rgb(150, 230, 550) 40px calc(100% - 5px)`
 * @return {Array} the split values (for example: `['3pt', 'rgb(150, 230, 550)', '40px', 'calc(100% - 5px)']`)
 */
function getValuesAsList(value) {
  return value.replace(/ +/g, ' ') // remove all extraneous spaces
  .split(' ').map(function (i) {
    return i.trim();
  }) // get rid of extra space before/after each item
  .filter(Boolean) // get rid of empty strings
  // join items which are within parenthese
  // luckily `calc (100% - 5px)` is invalid syntax and it must be `calc(100% - 5px)`, otherwise this would be even more complex
  .reduce(function (_ref, item) {
    var list = _ref.list,
        state = _ref.state;

    var openParansCount = (item.match(/\(/g) || []).length;
    var closedParansCount = (item.match(/\)/g) || []).length;
    if (state.parensDepth > 0) {
      list[list.length - 1] = list[list.length - 1] + ' ' + item;
    } else {
      list.push(item);
    }
    state.parensDepth += openParansCount - closedParansCount;
    return { list: list, state: state };
  }, { list: [], state: { parensDepth: 0 } }).list;
}

/**
 * This is intended for properties that are `top right bottom left` and will switch them to `top left bottom right`
 * @param {String} value - `1px 2px 3px 4px` for example, but also handles cases where there are too few/too many and
 * simply returns the value in those cases (which is the correct behavior)
 * @return {String} the result - `1px 4px 3px 2px` for example.
 */
function handleQuartetValues(value) {
  var splitValues = getValuesAsList(value);
  if (splitValues.length <= 3 || splitValues.length > 4) {
    return value;
  }

  var _splitValues2 = _slicedToArray(splitValues, 4),
      top = _splitValues2[0],
      right = _splitValues2[1],
      bottom = _splitValues2[2],
      left = _splitValues2[3];

  return [top, left, bottom, right].join(' ');
}

/**
 * Takes a percentage for background position and inverts it.
 * This was copied and modified from CSSJanus:
 * https://github.com/cssjanus/cssjanus/blob/4245f834365f6cfb0239191a151432fb85abab23/src/cssjanus.js#L152-L175
 * @param {String} value - the original value (for example 77%)
 * @return {String} the result (for example 23%)
 */
function calculateNewBackgroundPosition(value) {
  var idx = value.indexOf('.');
  if (idx === -1) {
    value = 100 - parseFloat(value) + '%';
  } else {
    // Two off, one for the "%" at the end, one for the dot itself
    var len = value.length - idx - 2;
    value = 100 - parseFloat(value);
    value = value.toFixed(len) + '%';
  }
  return value;
}

/**
 * Takes an array of [keyValue1, keyValue2] pairs and creates an object of {keyValue1: keyValue2, keyValue2: keyValue1}
 * @param {Array} array the array of pairs
 * @return {Object} the {key, value} pair object
 */
function arrayToObject(array) {
  return array.reduce(function (obj, _ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
        prop1 = _ref3[0],
        prop2 = _ref3[1];

    obj[prop1] = prop2;
    obj[prop2] = prop1;
    return obj;
  }, {});
}

function isNumber(val) {
  return typeof val === 'number';
}

function isObject(val) {
  return val && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object';
}

function isString(val) {
  return typeof val === 'string';
}

function includes(inclusive, inclusee) {
  return inclusive.indexOf(inclusee) !== -1;
}

/***/ }),
/* 171 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["__extends"] = __extends;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__assign", function() { return __assign; });
/* harmony export (immutable) */ __webpack_exports__["__rest"] = __rest;
/* harmony export (immutable) */ __webpack_exports__["__decorate"] = __decorate;
/* harmony export (immutable) */ __webpack_exports__["__param"] = __param;
/* harmony export (immutable) */ __webpack_exports__["__metadata"] = __metadata;
/* harmony export (immutable) */ __webpack_exports__["__awaiter"] = __awaiter;
/* harmony export (immutable) */ __webpack_exports__["__generator"] = __generator;
/* harmony export (immutable) */ __webpack_exports__["__exportStar"] = __exportStar;
/* harmony export (immutable) */ __webpack_exports__["__values"] = __values;
/* harmony export (immutable) */ __webpack_exports__["__read"] = __read;
/* harmony export (immutable) */ __webpack_exports__["__spread"] = __spread;
/* harmony export (immutable) */ __webpack_exports__["__await"] = __await;
/* harmony export (immutable) */ __webpack_exports__["__asyncGenerator"] = __asyncGenerator;
/* harmony export (immutable) */ __webpack_exports__["__asyncDelegator"] = __asyncDelegator;
/* harmony export (immutable) */ __webpack_exports__["__asyncValues"] = __asyncValues;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = Object.setPrototypeOf ||
    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __exportStar(m, exports) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; }; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator];
    return m ? m.call(o) : typeof __values === "function" ? __values(o) : o[Symbol.iterator]();
}

/***/ }),
/* 172 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var DateTime = __webpack_require__(98);
exports.DateTime = DateTime;
var StringHelper = __webpack_require__(9);
exports.StringHelper = StringHelper;
var StringUtilities = __webpack_require__(74);
exports.StringUtilities = StringUtilities;
var IconSelector = __webpack_require__(50);
exports.IconSelector = IconSelector;
var SharingTypeHelper = __webpack_require__(52);
exports.SharingTypeHelper = SharingTypeHelper;
var SingleEventBase = __webpack_require__(1);
exports.SingleEventBase = SingleEventBase;
var Signal = __webpack_require__(12);
exports.Signal = Signal;
var ObjectUtil = __webpack_require__(6);
exports.ObjectUtil = ObjectUtil;
var AddressParser = __webpack_require__(123);
exports.AddressParser = AddressParser;
var SPAlternativeUrls = __webpack_require__(90);
exports.SPAlternativeUrls = SPAlternativeUrls;
var OfficeFileNameHelper = __webpack_require__(106);
exports.OfficeFileNameHelper = OfficeFileNameHelper;
var ImageHelper = __webpack_require__(107);
exports.ImageHelper = ImageHelper;
var Path = __webpack_require__(69);
exports.Path = Path;
var Graft = __webpack_require__(105);
exports.Graft = Graft;
var FileEntries = __webpack_require__(103);
exports.FileEntries = FileEntries;
var Api_event_1 = __webpack_require__(54);
exports.Api = Api_event_1.Api;
var PLT_event_1 = __webpack_require__(33);
exports.PLT = PLT_event_1.PLT;
var ABExperiment_1 = __webpack_require__(110);
exports.ABExperiment = ABExperiment_1.ABExperiment;
var Killswitch_1 = __webpack_require__(108);
exports.Killswitch = Killswitch_1.Killswitch;
var Modules_1 = __webpack_require__(122);
exports.loadModule = Modules_1.loadModule;
var Async_1 = __webpack_require__(4);
exports.Async = Async_1.default;
var Component_1 = __webpack_require__(94);
exports.Component = Component_1.default;
var BaseDataStore_1 = __webpack_require__(21);
exports.DataStore = BaseDataStore_1.default;
var DataStoreCachingType_1 = __webpack_require__(15);
exports.DataStoreCachingType = DataStoreCachingType_1.default;
var EventGroup_1 = __webpack_require__(27);
exports.EventGroup = EventGroup_1.default;
var FabricTheming_1 = __webpack_require__(75);
exports.FabricTheming = FabricTheming_1.default;
var Features_1 = __webpack_require__(28);
exports.Features = Features_1.default;
var GroupDataSource_1 = __webpack_require__(96);
exports.GroupDataSource = GroupDataSource_1.default;
var Guid_1 = __webpack_require__(48);
exports.Guid = Guid_1.default;
var HtmlEncoding_1 = __webpack_require__(101);
exports.HtmlEncoding = HtmlEncoding_1.default;
var Locale_1 = __webpack_require__(30);
exports.Locale = Locale_1.default;
var Manager_1 = __webpack_require__(5);
exports.Manager = Manager_1.default;
var PerformanceCollection_1 = __webpack_require__(70);
exports.PerformanceCollection = PerformanceCollection_1.default;
var PlatformDetection_1 = __webpack_require__(18);
exports.PlatformDetection = PlatformDetection_1.default;
var Promise_1 = __webpack_require__(7);
exports.Promise = Promise_1.default;
var ProtocolHandlerHelper_1 = __webpack_require__(124);
exports.ProtocolHandlerHelper = ProtocolHandlerHelper_1.default;
exports.ProtocolHandlerEncodeOption = ProtocolHandlerHelper_1.ProtocolHandlerEncodeOption;
var RgbaColor_1 = __webpack_require__(10);
exports.RgbaColor = RgbaColor_1.default;
var SiteHeaderLogoAcronym_1 = __webpack_require__(95);
exports.SiteHeaderLogoAcronym = SiteHeaderLogoAcronym_1.default;
var ThemeCache_1 = __webpack_require__(77);
exports.ThemeCache = ThemeCache_1.default;
var ThemeProvider_1 = __webpack_require__(129);
exports.ThemeProvider = ThemeProvider_1.default;
var Uri_1 = __webpack_require__(78);
exports.Uri = Uri_1.default;
var SimpleUri_1 = __webpack_require__(131);
exports.SimpleUri = SimpleUri_1.default;
var UriEncoding_1 = __webpack_require__(26);
exports.UriEncoding = UriEncoding_1.default;
var WebTheme_1 = __webpack_require__(130);
exports.WebTheme = WebTheme_1.default;
var ItemType_1 = __webpack_require__(29);
exports.ItemType = ItemType_1.default;
var DriveSpaceHelper_1 = __webpack_require__(127);
exports.DriveSpaceHelper = DriveSpaceHelper_1.default;
var ShortcutUtilities_1 = __webpack_require__(109);
exports.ShortcutUtilities = ShortcutUtilities_1.default;
var FileTypeIconMap_1 = __webpack_require__(49);
exports.FileTypeIconMap = FileTypeIconMap_1.default;
var SharingType_1 = __webpack_require__(51);
exports.SharingType = SharingType_1.default;
var Sanitize_1 = __webpack_require__(102);
exports.Sanitize = Sanitize_1.default;
var DomUtils_1 = __webpack_require__(100);
exports.DomUtils = DomUtils_1.default;
var Rectangle_1 = __webpack_require__(66);
exports.Rectangle = Rectangle_1.default;
var Size_1 = __webpack_require__(67);
exports.Size = Size_1.default;
var Point_1 = __webpack_require__(65);
exports.Point = Point_1.default;
var Semaphore_1 = __webpack_require__(92);
exports.Semaphore = Semaphore_1.default;
var Html5FileUpload_1 = __webpack_require__(104);
exports.Html5FileUpload = Html5FileUpload_1.default;


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var EventBase_1 = __webpack_require__(8);
exports.ClonedEventType = EventBase_1.ClonedEventType;
exports.ValidationErrorType = EventBase_1.ValidationErrorType;
exports.AccountType = EventBase_1.AccountType;
exports.EventBase = EventBase_1.EventBase;
var Engagement_event_1 = __webpack_require__(20);
exports.Engagement = Engagement_event_1.Engagement;
var Nav_event_1 = __webpack_require__(114);
exports.Nav = Nav_event_1.Nav;
var PLTHttpRequest_event_1 = __webpack_require__(55);
exports.PLTHttpRequest = PLTHttpRequest_event_1.PLTHttpRequest;
var Qos_event_1 = __webpack_require__(13);
exports.Qos = Qos_event_1.Qos;
var ResultTypeEnum_1 = __webpack_require__(14);
exports.ResultTypeEnum = ResultTypeEnum_1.ResultTypeEnum;
var APICallPerformanceData_1 = __webpack_require__(118);
exports.APICallPerformanceData = APICallPerformanceData_1.default;
var AriaLoggerCore_1 = __webpack_require__(91);
exports.AriaLoggerCore = AriaLoggerCore_1.default;
var Beacon_1 = __webpack_require__(116);
exports.Beacon = Beacon_1.default;
var BeaconCache_1 = __webpack_require__(61);
exports.BeaconCache = BeaconCache_1.default;
var ControlPerformanceData_1 = __webpack_require__(119);
exports.ControlPerformanceData = ControlPerformanceData_1.default;
var CorrelationVector_1 = __webpack_require__(53);
exports.CorrelationVector = CorrelationVector_1.default;
var ErrorHelper_1 = __webpack_require__(3);
exports.ErrorHelper = ErrorHelper_1.default;
var PageTransitionType_1 = __webpack_require__(63);
exports.PageTransitionType = PageTransitionType_1.default;
var RUMOneLogger_1 = __webpack_require__(34);
exports.RumOneLogger = RUMOneLogger_1.default;
var RUMOneSLAPI_1 = __webpack_require__(64);
exports.RumOneSLAPI = RUMOneSLAPI_1.default;


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var sp_telemetry_1 = __webpack_require__(2);
var SPGlobalErrorHandler = (function () {
    function SPGlobalErrorHandler() {
    }
    SPGlobalErrorHandler.basicTracingHandler = function (message, filename, lineno, colno, error) {
        var eventName = 'window.onerror';
        if (filename && SPGlobalErrorHandler._isFromFile(filename, 'CKEDITOR')) {
            SPGlobalErrorHandler._logErrorFromFile(message, SPGlobalErrorHandler._ckLogSource, lineno, colno, error, eventName);
        }
        else {
            var genericError = error ||
                new Error("Error:" + message + ", file:" + filename + ", line:" + lineno + ", column:" + colno);
            sp_telemetry_1._TraceLogger.logError(SPGlobalErrorHandler._genericLogSource, genericError, eventName);
        }
    };
    SPGlobalErrorHandler._isFromFile = function (filename, match) {
        return filename.length > 0 && filename.toUpperCase().indexOf(match) !== -1;
    };
    SPGlobalErrorHandler._logErrorFromFile = function (message, logSource, lineno, colno, error, eventName) {
        var fileError = error ||
            new Error("Error:" + message + ", line:" + lineno + ", column:" + colno);
        sp_telemetry_1._TraceLogger.logError(logSource, fileError, eventName);
    };
    SPGlobalErrorHandler._ckLogSource = sp_telemetry_1._LogSource.create('CKGlobalError');
    SPGlobalErrorHandler._genericLogSource = sp_telemetry_1._LogSource.create('OtherGlobalError');
    return SPGlobalErrorHandler;
}());
exports.default = SPGlobalErrorHandler;


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var sp_telemetry_1 = __webpack_require__(2);
var sp_core_library_1 = __webpack_require__(0);
var sp_extension_base_1 = __webpack_require__(37);
var BaseApplicationCustomizer_1 = __webpack_require__(42);
var ApplicationCustomizerContext_1 = __webpack_require__(41);
var ClientSideCustomAction_1 = __webpack_require__(177);
var PlaceholderManager_1 = __webpack_require__(23);
var ApplicationCustomizerLoader = (function () {
    function ApplicationCustomizerLoader(serviceScope, pageContext, spHttpClient, customActions) {
        var _this = this;
        this._customActionContext = new ClientSideCustomAction_1.ClientSideCustomActionContext();
        sp_core_library_1.Validate.isNotNullOrUndefined(serviceScope, 'serviceScope');
        sp_core_library_1.Validate.isNotNullOrUndefined(pageContext, 'pageContext');
        sp_core_library_1.Validate.isNotNullOrUndefined(spHttpClient, 'spHttpClient');
        this._extensionManager = new sp_extension_base_1._ExtensionManager(serviceScope, BaseApplicationCustomizer_1.default);
        this._pageContext = pageContext;
        this._spHttpClient = spHttpClient;
        this._customActions = customActions ? customActions : [];
        for (var _i = 0, _a = this._customActions; _i < _a.length; _i++) {
            var customAction = _a[_i];
            if (customAction.location === ClientSideCustomAction_1.CustomActionLocations.APPLICATION_CUSTOMIZER) {
                var clientSideCustomAction = ClientSideCustomAction_1.default._tryCreateFromPreloadedCustomAction(customAction);
                if (clientSideCustomAction) {
                    this._customActionContext.customActions.push(clientSideCustomAction);
                }
            }
        }
        serviceScope.whenFinished(function () {
            _this._placeholderManager = serviceScope.consume(PlaceholderManager_1.default.serviceKey);
        });
    }
    ApplicationCustomizerLoader.prototype.loadExtensions = function () {
        this._parseCustomActionsQueryParameter();
        var extensionPromises = [];
        var customActions = this._customActionContext.getAll();
        for (var _i = 0, customActions_1 = customActions; _i < customActions_1.length; _i++) {
            var customAction = customActions_1[_i];
            if (customAction.location === ClientSideCustomAction_1.CustomActionLocations.APPLICATION_CUSTOMIZER) {
                extensionPromises.push(this._createApplicationCustomizer(customAction));
            }
        }
        return Promise.all(extensionPromises).then(function (extensions) { return; });
    };
    ApplicationCustomizerLoader.prototype.notifyRendered = function () {
        this._extensionManager.waitForInitialization()
            .then(function (extensions) {
            for (var _i = 0, extensions_1 = extensions; _i < extensions_1.length; _i++) {
                var extension = extensions_1[_i];
                try {
                    extension.onRender();
                }
                catch (error) {
                    var manifest = extension.manifest;
                    sp_telemetry_1._TraceLogger.logError(ApplicationCustomizerLoader._logSource, new Error("The onRender() API threw an exception for application customizer '" + manifest.alias + "'. Error information is '" + error.message + ".")); 
                }
            }
        });
    };
    ApplicationCustomizerLoader.prototype._createApplicationCustomizer = function (customAction) {
        var qosMonitor = new sp_telemetry_1._QosMonitor('ApplicationCustomizer.Create');
        return this._extensionManager.createExtension(customAction.clientSideComponentId.toString(), customAction.clientSideComponentProperties, function (extensionContextParameters) {
            return new ApplicationCustomizerContext_1.default(extensionContextParameters, {
                sequence: customAction.sequence !== undefined ? customAction.sequence : 65535 
            });
        }).then(function (extension) {
            qosMonitor.writeSuccess({ customAction: customAction });
            return extension;
        }).catch(function (error) {
            var err = new Error("Failed to create application customizer '" + customAction.tag + "'. Error information is '" + error.message + "'."); 
            qosMonitor.writeExpectedFailure('FailedCreateExtension', error, { customAction: customAction });
            sp_telemetry_1._TraceLogger.logError(ApplicationCustomizerLoader._logSource, err);
            throw err;
        });
    };
    ApplicationCustomizerLoader.prototype._parseCustomActionsQueryParameter = function () {
        var parameters = new sp_core_library_1.UrlQueryParameterCollection(window.location.href);
        var parameterValue = parameters.getValue('customActions');
        if (parameterValue) {
            try {
                var decodedParameterValue = decodeURIComponent(parameterValue);
                var queryValue = JSON.parse(decodedParameterValue);
                if (queryValue) {
                    for (var _i = 0, _a = Object.keys(queryValue); _i < _a.length; _i++) {
                        var key = _a[_i];
                        var clientSideComponentId = sp_core_library_1.Guid.tryParse(key);
                        var location_1 = queryValue[key].location;
                        var properties = queryValue[key].properties;
                        sp_core_library_1.Validate.isNotNullOrUndefined(clientSideComponentId, 'clientSideComponentId');
                        sp_core_library_1.Validate.isNotNullOrUndefined(location_1, 'location');
                        if (clientSideComponentId && location_1 && properties) {
                            this._customActionContext.debugCustomActions.push(ClientSideCustomAction_1.default._tryCreateFromDebugData(location_1, clientSideComponentId, properties ? JSON.stringify(properties) : ''));
                        }
                    }
                }
            }
            catch (e) {
                sp_telemetry_1._TraceLogger.logError(ApplicationCustomizerLoader._logSource, new Error('Failed to parse the "customActions" URL query parameter:' + e.message));
                console.error('The "customActions" URL query parameter is improperly formatted: '
                    + decodeURIComponent(parameterValue));
            }
        }
    };
    ApplicationCustomizerLoader._logSource = sp_telemetry_1._LogSource.create('ApplicationCustomizerLoader');
    return ApplicationCustomizerLoader;
}());
exports.default = ApplicationCustomizerLoader;


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var sp_telemetry_1 = __webpack_require__(2);
var sp_page_context_1 = __webpack_require__(38);
var sp_core_library_1 = __webpack_require__(0);
var ClientSideCustomAction = (function () {
    function ClientSideCustomAction() {
    }
    ClientSideCustomAction._tryCreateFromPreloadedCustomAction = function (customAction) {
        var typedCustomAction = undefined;
        var qosMonitor = new sp_telemetry_1._QosMonitor('ClientSideCustomActions.CreateFromPreloadedCustomAction');
        try {
            typedCustomAction = new ClientSideCustomAction();
            sp_core_library_1.Validate.isNonemptyString(customAction.clientSideComponentId, 'customAction.clientSideComponentId');
            sp_core_library_1.Validate.isNonemptyString(customAction.location, 'customAction.location');
            typedCustomAction.title = customAction.title;
            typedCustomAction.location = customAction.location;
            typedCustomAction.clientSideComponentId = sp_core_library_1.Guid.parse(customAction.clientSideComponentId);
            typedCustomAction.clientSideComponentProperties = customAction.clientSideComponentProperties;
            typedCustomAction.registrationType = customAction.registrationType;
            typedCustomAction.registrationId = customAction.registrationId;
            typedCustomAction.sequence = customAction.sequence;
            typedCustomAction.requireSiteAdministrator = customAction.requireSiteAdministrator;
            var rights = customAction.rights;
            if (rights && rights.High !== undefined && rights.Low !== undefined) {
                typedCustomAction.rights = new sp_page_context_1.SPPermission(rights);
            }
            else {
                sp_telemetry_1._TraceLogger.logVerbose(ClientSideCustomAction._logSource, "The rights object has invalid format. One of High or Low fields cannot be undefined. Object value is '" + JSON.stringify(rights)); 
            }
            qosMonitor.writeSuccess({ customAction: customAction });
            return typedCustomAction;
        }
        catch (error) {
            sp_telemetry_1._TraceLogger.logError(ClientSideCustomAction._logSource, new Error("Failed to create client side custom action. Error information is " + error.message)); 
            qosMonitor.writeUnexpectedFailure('UnhandledCreateError', error, { customAction: customAction });
            return undefined;
        }
    };
    ClientSideCustomAction._tryCreateFromDebugData = function (location, clientSideComponentId, clientSideComponentProperties) {
        sp_core_library_1.Validate.isNotNullOrUndefined(clientSideComponentId, 'clientSideComponentId');
        sp_core_library_1.Validate.isNonemptyString(location, 'location');
        var customAction = new ClientSideCustomAction();
        customAction.location = location;
        customAction.clientSideComponentId = clientSideComponentId;
        customAction.clientSideComponentProperties = clientSideComponentProperties;
        return customAction;
    };
    Object.defineProperty(ClientSideCustomAction.prototype, "tag", {
        get: function () {
            return this.location + "." + this.clientSideComponentId.toString();
        },
        enumerable: true,
        configurable: true
    });
    ClientSideCustomAction._logSource = sp_telemetry_1._LogSource.create('ClientSideCustomAction');
    return ClientSideCustomAction;
}());
exports.default = ClientSideCustomAction;
var ClientSideCustomActionContext = (function () {
    function ClientSideCustomActionContext() {
        this.customActions = [];
        this.debugCustomActions = [];
    }
    ClientSideCustomActionContext.prototype.getAll = function () {
        return this.debugCustomActions.concat(this.customActions);
    };
    return ClientSideCustomActionContext;
}());
exports.ClientSideCustomActionContext = ClientSideCustomActionContext;
var CustomActionLocations = (function () {
    function CustomActionLocations() {
    }
    CustomActionLocations.APPLICATION_CUSTOMIZER = 'ClientSideExtension.ApplicationCustomizer';
    CustomActionLocations.LISTVIEW_COMMANDSET_CONTEXTMENU = 'ClientSideExtension.ListViewCommandSet.ContextMenu';
    CustomActionLocations.LISTVIEW_COMMANDSET_COMMANDBAR = 'ClientSideExtension.ListViewCommandSet.CommandBar';
    CustomActionLocations.LISTVIEW_COMMANDSET_DEFAULT = 'ClientSideExtension.ListViewCommandSet';
    return CustomActionLocations;
}());
exports.CustomActionLocations = CustomActionLocations;


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(88);
var styles = {
    spPageContentTransition: 'spPageContentTransition_dd91ea77',
};
exports.default = styles;


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SPWebTemplateIds = (function () {
    function SPWebTemplateIds() {
    }
    SPWebTemplateIds.teamSite = '1';
    SPWebTemplateIds.groupSite = '64';
    return SPWebTemplateIds;
}());
exports.default = SPWebTemplateIds;


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var loadThemedStyles = __webpack_require__(24);
var sp_telemetry_1 = __webpack_require__(2);
var sp_core_library_1 = __webpack_require__(0);
var sp_page_context_1 = __webpack_require__(38);
var sp_http_1 = __webpack_require__(17);
var SuiteNavManager_1 = __webpack_require__(85);
var SPPageChrome_1 = __webpack_require__(83);
var ApplicationCustomizerLoader_1 = __webpack_require__(176);
var Shell = (function () {
    function Shell() {
    }
    Shell.getInstance = function () {
        if (Shell._instance === undefined) {
            Shell._instance = new Shell();
        }
        return Shell._instance;
    };
    Object.defineProperty(Shell.prototype, "serviceScope", {
        get: function () {
            return this._rootServiceScope;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Shell.prototype, "pageContext", {
        get: function () {
            return this._pageContext;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Shell.prototype, "httpClient", {
        get: function () {
            return this._httpClient;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Shell.prototype, "spHttpClient", {
        get: function () {
            return this._spHttpClient;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Shell.prototype, "suiteNavManager", {
        get: function () {
            return this._suiteNav;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Shell.prototype, "environment", {
        get: function () {
            return this._environment;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Shell.prototype, "manifestPreloads", {
        get: function () {
            return this._manifestPreloads;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Shell.prototype, "pageManager", {
        get: function () {
            return this._pageManager;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Shell.prototype, "applicationCustomizerLoader", {
        get: function () {
            return this._applicationCustomizerLoader;
        },
        enumerable: true,
        configurable: true
    });
    Shell.prototype.start = function (module, preloadedData) {
        var application = module.default ||
            module;
        this._initializePreload(preloadedData, application);
        sp_telemetry_1._PerformanceLogger.markApplicationStart();
        return this._startApplication(application, preloadedData);
    };
    Shell.prototype._startApplication = function (application, preloadedData) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (application['__type'] !== 'BaseApplication') {
                reject(new Error('The application is not a subclass of BaseApplication'));
                return;
            }
            var qosMonitor = new sp_telemetry_1._QosMonitor('ClientApplication');
            var qosApplicationData = {
                alias: application.alias || preloadedData.manifests[0].alias,
                isInternal: preloadedData.manifests[0].isInternal,
                manifestId: preloadedData.manifests[0].id
            };
            var appDiv = undefined;
            try {
                _this._application = application;
                _this._application._load(_this);
                if (sp_core_library_1.Environment.type !== sp_core_library_1.EnvironmentType.ClassicSharePoint &&
                    preloadedData.clientSideApplicationId !== 'b1ab4aaa-f779-405c-8683-d3a750b5d18d') {
                    _this._spPageChrome = SPPageChrome_1.default.getInstance(_this._rootServiceScope);
                    _this._suiteNav = new SuiteNavManager_1.default(_this._spPageChrome.suiteNavDiv, _this.serviceScope);
                    if (!_this._application.suiteNavConfiguration().isSuiteNavDisabled()) {
                        _this.suiteNavManager.loadSuiteNav(_this._application.suiteNavConfiguration());
                    }
                    appDiv = _this._spPageChrome.appDiv;
                }
                loadThemedStyles.flush();
                loadThemedStyles.configureRunMode(0 );
                if (sp_core_library_1.Environment.type !== sp_core_library_1.EnvironmentType.ClassicSharePoint) {
                    _this._application._render(appDiv);
                }
                qosMonitor.writeSuccess(qosApplicationData);
                resolve(_this._application);
            }
            catch (e) {
                qosMonitor.writeUnexpectedFailure('GeneralError', e, qosApplicationData);
                reject(e);
            }
        });
    };
    Shell.prototype._initializePreload = function (preloadedData, application) {
        sp_telemetry_1._TraceLogger.logVerbose(Shell._logSource, 'Starting sp-client-preview');
        this._rootServiceScope = sp_core_library_1.ServiceScope.startNewRoot();
        this._rootServiceScope.provide(sp_telemetry_1._logSourceServiceKey, Shell._logSource);
        this._pageManager = this._rootServiceScope
            .createDefaultAndProvide(sp_page_context_1.PageManager.serviceKey);
        this._pageContext = this._rootServiceScope
            .createDefaultAndProvide(sp_page_context_1.PageContext.serviceKey);
        this._httpClient = this._rootServiceScope.createAndProvide(sp_http_1.HttpClient.serviceKey, sp_http_1.HttpClient);
        this._spHttpClient = this._rootServiceScope.createAndProvide(sp_http_1.SPHttpClient.serviceKey, sp_http_1.SPHttpClient);
        var graphContext;
        if (true) {
            this._rootServiceScope.createAndProvide(sp_http_1.GraphHttpClient.serviceKey, sp_http_1.GraphHttpClient);
            graphContext = this._rootServiceScope.createAndProvide(sp_http_1._GraphHttpClientContext.serviceKey, sp_http_1._GraphHttpClientContext);
        }
        this._rootServiceScope.finish();
        var INVALID_PAGE_ITEM_ID = -1;
        if (preloadedData.spPageContextInfo.pageItemId === INVALID_PAGE_ITEM_ID &&
            preloadedData.item &&
            preloadedData.item.ID !== INVALID_PAGE_ITEM_ID) {
            preloadedData.spPageContextInfo.pageItemId = preloadedData.item.ID;
        }
        this._pageManager.navigateToPage(preloadedData.spPageContextInfo.webServerRelativeUrl, 
        sp_page_context_1.SharePointPageContextDataProvider._createPageContextData(preloadedData.spPageContextInfo), 
        preloadedData.spPageContextInfo);
        if (true && graphContext) {
            graphContext.initialize(this._pageManager.pageContext.web.serverRelativeUrl);
        }
        this._initializeDigestCache(this._rootServiceScope, preloadedData);
        this._manifestPreloads = preloadedData;
        this._manifestPreloads.spPageContextInfo = undefined; 
        return this._loadApplicationCustomizers();
    };
    Shell.prototype._initializeDigestCache = function (serviceScope, preloadedData) {
        sp_core_library_1.Validate.isNotNullOrUndefined(preloadedData, 'preloadedData');
        sp_core_library_1.Validate.isNotNullOrUndefined(preloadedData.contextWebInfo, 'preloadedData.contextWebInfo');
        sp_core_library_1.Validate.isNotNullOrUndefined(preloadedData.spPageContextInfo, 'preloadedData.spPageContextInfo');
        serviceScope.whenFinished(function () {
            var digestCache = serviceScope.consume(sp_http_1.DigestCache.serviceKey);
            sp_telemetry_1._TraceLogger.logVerbose(Shell._logSource, 'Shell: Added preloaded FormDigestValue to cache');
            if (preloadedData.contextWebInfo && preloadedData.spPageContextInfo) {
                var expirationTimestamp = performance.now()
                    + 1000 * preloadedData.contextWebInfo.FormDigestTimeoutSeconds;
                digestCache.addDigestToCache(preloadedData.spPageContextInfo.webServerRelativeUrl, preloadedData.contextWebInfo.FormDigestValue, expirationTimestamp);
                digestCache.addDigestToCache(preloadedData.spPageContextInfo.webAbsoluteUrl, preloadedData.contextWebInfo.FormDigestValue, expirationTimestamp);
            }
        });
    };
    Shell.prototype._loadApplicationCustomizers = function () {
        if (true &&
            this.manifestPreloads.clientSideApplicationId !== Shell.classicPagesComponentId &&
            this.manifestPreloads.clientSideApplicationId !== Shell.workbenchComponentId) {
            this._applicationCustomizerLoader =
                new ApplicationCustomizerLoader_1.default(this.serviceScope, this.pageContext, this.spHttpClient, this.manifestPreloads.customActions);
            return this._applicationCustomizerLoader.loadExtensions();
        }
        else {
            sp_telemetry_1._TraceLogger.logVerbose(Shell._logSource, 'Application Customizer is not supported for OnPrem and local workbench.');
            return Promise.resolve();
        }
    };
    Shell.classicPagesComponentId = 'eb4b666b-5c29-4dad-9a99-23613f21a2b7';
    Shell.workbenchComponentId = '8be81a5c-af38-4bb2-af97-afa3b64dfbed';
    Shell._logSource = sp_telemetry_1._LogSource.create('Shell');
    Shell._instance = undefined;
    return Shell;
}());
exports.default = Shell;


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var sp_telemetry_1 = __webpack_require__(2);
var FlexPaneWrapper = (function () {
    function FlexPaneWrapper() {
    }
    FlexPaneWrapper.prototype.OnFlexPaneVisibilityChanged = function (callback) {
        try {
            return O365Shell.FlexPane.OnFlexPaneVisibilityChanged(callback);
        }
        catch (e) {
            this._createFlexPaneWrapperErrorLogEntry('OnFlexPaneVisibilityChanged', e);
        }
    };
    FlexPaneWrapper.prototype.OpenFlexPaneForProvider = function (provider) {
        try {
            O365Shell.FlexPane.OpenFlexPaneForProvider(provider);
        }
        catch (e) {
            this._createFlexPaneWrapperErrorLogEntry('OpenFlexPaneForProvider', e);
        }
    };
    FlexPaneWrapper.prototype._createFlexPaneWrapperErrorLogEntry = function (moduleName, errorMessage) {
        sp_telemetry_1._TraceLogger.logVerbose(FlexPaneWrapper.logSource, 'FlexPaneWrapper ' + moduleName + ' ' + errorMessage);
    };
    FlexPaneWrapper.logSource = sp_telemetry_1._LogSource.create('FlexPaneWrapper');
    return FlexPaneWrapper;
}());
exports.default = FlexPaneWrapper;


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var NavigationWrapper = (function () {
    function NavigationWrapper() {
    }
    NavigationWrapper.prototype.OnLinkClick = function (callback) {
        return O365Shell.Navigation.OnLinkClick(callback);
    };
    NavigationWrapper.prototype.OnHamburgerButtonClick = function (callback) {
        return O365Shell.Navigation.OnHamburgerButtonClick(callback);
    };
    return NavigationWrapper;
}());
exports.default = NavigationWrapper;


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var FlexPaneWrapper_1 = __webpack_require__(181);
var NavigationWrapper_1 = __webpack_require__(182);
var O365ShellWrapper = (function () {
    function O365ShellWrapper() {
        this._postRenderSignal = new Promise(function () {
            return;
        });
        this.FlexPane = new FlexPaneWrapper_1.default();
        this.Navigation = new NavigationWrapper_1.default();
    }
    O365ShellWrapper.prototype.SetData = function (shellData) {
        O365Shell.SetData(shellData);
    };
    O365ShellWrapper.prototype.Render = function (renderSettings, postRendercallback) {
        O365Shell.Render(renderSettings, postRendercallback);
    };
    O365ShellWrapper.prototype.RenderAsync = function (renderSettings, renderCallback, postRenderCallback) {
        O365Shell.RenderAsync(renderSettings, renderCallback, postRenderCallback);
    };
    O365ShellWrapper.prototype.LoadShellPlus = function () {
        O365Shell.LoadShellPlus();
    };
    O365ShellWrapper.prototype.DoesShellExist = function () {
        return typeof O365Shell !== 'undefined';
    };
    O365ShellWrapper.prototype.OnHasMember = function (memberName, callback) {
        var _this = this;
        if (this._hasMember(memberName)) {
            callback();
        }
        else {
            this._postRenderSignal.then(function () { return _this.OnHasMember(memberName, callback); });
        }
    };
    O365ShellWrapper.prototype._hasMember = function (memberName) {
        return this.DoesShellExist() && Boolean(O365Shell[memberName]);
    };
    return O365ShellWrapper;
}());
exports.default = O365ShellWrapper;


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var sp_core_library_1 = __webpack_require__(0);
var SuiteNavLinkIds_1 = __webpack_require__(187);
var SuiteNavManagerConfiguration = (function () {
    function SuiteNavManagerConfiguration(suiteNavConfig) {
        this._currentUICultureName = suiteNavConfig.currentUICultureName;
        this._settingsLinks = suiteNavConfig.settingsData;
        this._signoutUrl = suiteNavConfig.signoutUrl;
        this._siteClientTag = suiteNavConfig.siteClientTag;
        this._systemUserKey = suiteNavConfig.systemUserKey;
        this._webServerRelativeUrl = suiteNavConfig.webServerRelativeUrl;
        this._isSuiteNavDisabled = suiteNavConfig.disableSuiteNav ? true : false;
        this._o365ShellRenderSettings = {
            disableDelayLoad: false,
            disableShellPlus: false,
            layout: 'Mouse',
            top: undefined 
        };
        this._hamburgerMenuCallback = undefined;
        this._suiteNavPostRenderCallback = undefined;
    }
    SuiteNavManagerConfiguration.prototype.isSuiteNavDisabled = function () {
        return this._isSuiteNavDisabled;
    };
    SuiteNavManagerConfiguration.prototype.disableSuiteNav = function () {
        this._isSuiteNavDisabled = true;
    };
    SuiteNavManagerConfiguration.prototype.modifySuiteNavData = function (suiteNavData) {
        suiteNavData.CurrentMainLinkElementID = SuiteNavLinkIds_1.default.SITES;
        suiteNavData.CurrentWorkloadSettingsSubLinks =
            this._settingsLinks && this._settingsLinks.length > 0 ? this._settingsLinks : undefined;
        suiteNavData.FeedbackLink = undefined;
        if (suiteNavData.SignOutLink && this._signoutUrl) {
            suiteNavData.SignOutLink.Url = this._signoutUrl;
        }
        if (suiteNavData.HelpLink) {
            suiteNavData.HelpLink.Url = 'https://go.microsoft.com/fwlink/p/?linkid=827181';
        }
        return suiteNavData;
    };
    Object.defineProperty(SuiteNavManagerConfiguration.prototype, "systemUserKey", {
        get: function () {
            return this._systemUserKey || '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuiteNavManagerConfiguration.prototype, "cacheToken", {
        get: function () {
            var clientTag = this._siteClientTag;
            if (clientTag !== undefined) {
                return clientTag.substring(0, clientTag.indexOf('$$'));
            }
            return '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuiteNavManagerConfiguration.prototype, "o365ShellRenderSettings", {
        get: function () {
            return this._o365ShellRenderSettings;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuiteNavManagerConfiguration.prototype, "currentUICultureName", {
        get: function () {
            return this._currentUICultureName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuiteNavManagerConfiguration.prototype, "webServerRelativeUrl", {
        get: function () {
            return this._webServerRelativeUrl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuiteNavManagerConfiguration.prototype, "hamburgerCallback", {
        get: function () {
            return this._hamburgerMenuCallback;
        },
        set: function (hamburgerCallback) {
            this._hamburgerMenuCallback = hamburgerCallback;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuiteNavManagerConfiguration.prototype, "suiteNavPostRenderCallback", {
        get: function () {
            sp_core_library_1.Validate.isNotNullOrUndefined(this._suiteNavPostRenderCallback, 'suiteNavPostRenderCallback');
            return this._suiteNavPostRenderCallback;
        },
        set: function (suiteNavPostRenderCallback) {
            this._suiteNavPostRenderCallback = suiteNavPostRenderCallback;
        },
        enumerable: true,
        configurable: true
    });
    return SuiteNavManagerConfiguration;
}());
exports.default = SuiteNavManagerConfiguration;


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SuiteNavManager_1 = __webpack_require__(85);
var ISuiteNavDataSource_1 = __webpack_require__(36);
var sp_telemetry_1 = __webpack_require__(2);
var sp_http_1 = __webpack_require__(17);
var OnPremSuiteNavDataSource = (function () {
    function OnPremSuiteNavDataSource(httpClient, currentUICultureName, webServerRelativeUrl) {
        this.suiteNavService = ISuiteNavDataSource_1.SuiteNavSource.OnPrem;
        this._currentUICultureName = currentUICultureName;
        this._spHttpClient = httpClient;
        this._siteRelUrl = webServerRelativeUrl === '/' ? '' : webServerRelativeUrl;
    }
    OnPremSuiteNavDataSource.prototype.loadData = function () {
        var _this = this;
        var url = this._siteRelUrl
            + '/_api/Microsoft.SharePoint.Portal.SuiteNavData.GetSuiteNavData?v=2&Locale='
            + this._currentUICultureName;
        return this._spHttpClient.get(url, sp_http_1.SPHttpClient.configurations.v1)
            .then(function (response) {
            if (response.status !== 200) {
                _this._logAndThrowSuiteNavLoadingError();
            }
            return response.json().then(function (jsonString) {
                if (jsonString.value === '') {
                    _this._logAndThrowSuiteNavLoadingError();
                }
                else {
                    var suiteNavResponse = JSON.parse(jsonString.value);
                    if (suiteNavResponse.NavBarData && !suiteNavResponse.NavBarData.Dimensions) {
                        suiteNavResponse.NavBarData.Dimensions = { Top: SuiteNavManager_1.default._defaultSuiteNavHeight };
                    }
                    return suiteNavResponse; 
                }
            });
        });
    };
    OnPremSuiteNavDataSource.prototype._logAndThrowSuiteNavLoadingError = function () {
        sp_telemetry_1._TraceLogger.logVerbose(OnPremSuiteNavDataSource._logSource, 'Failed to retrieve Hybrid SuiteNavData');
        throw new Error('Failed to retrieve Hybrid SuiteNavData');
    };
    OnPremSuiteNavDataSource._logSource = sp_telemetry_1._LogSource.create('OnPremSuiteNavDataSource');
    return OnPremSuiteNavDataSource;
}());
exports.default = OnPremSuiteNavDataSource;


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ISuiteNavDataSource_1 = __webpack_require__(36);
var sp_telemetry_1 = __webpack_require__(2);
var sp_http_1 = __webpack_require__(17);
var SPOSuiteNavDataSource = (function () {
    function SPOSuiteNavDataSource(httpClient, currentUICultureName, webServerRelativeUrl) {
        this.suiteNavService = ISuiteNavDataSource_1.SuiteNavSource.SPO;
        this._currentUICultureName = currentUICultureName;
        this._spHttpClient = httpClient;
        this._siteRelUrl = webServerRelativeUrl === '/' ? '' : webServerRelativeUrl;
    }
    SPOSuiteNavDataSource.prototype.loadData = function () {
        var url = this._siteRelUrl
            + '/_layouts/15/online/handlers/SpoSuiteLinks.ashx?Locale='
            + this._currentUICultureName
            + '&v=2&mobilereq=0&msajax=1';
        return this._spHttpClient.post(url, sp_http_1.SPHttpClient.configurations.v1, {})
            .then(function (response) {
            if (response.status !== 200 || response.headers.get('SharePointError')) {
                sp_telemetry_1._TraceLogger.logVerbose(SPOSuiteNavDataSource._logSource, 'Failed to retrieve SPO SuiteNavData');
                return Promise.reject('Failed to retrieve SPO SuiteNavData');
            }
            return response.json().then(function (jsonResponse) {
                return jsonResponse;
            });
        });
    };
    SPOSuiteNavDataSource._logSource = sp_telemetry_1._LogSource.create('SPOSuiteNavDataSource');
    return SPOSuiteNavDataSource;
}());
exports.default = SPOSuiteNavDataSource;


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SuiteNavLinkIds = (function () {
    function SuiteNavLinkIds() {
    }
    SuiteNavLinkIds.CUSTOM_SETTINGS_1 = 'WorkloadSettingsSubLinks1';
    SuiteNavLinkIds.CUSTOM_SETTINGS_2 = 'WorkloadSettingsSubLinks2';
    SuiteNavLinkIds.CUSTOM_SETTINGS_3 = 'WorkloadSettingsSubLinks3';
    SuiteNavLinkIds.FEEDBACK = 'ShellFeedback';
    SuiteNavLinkIds.DIAGNOSTICS = 'Diagnostics';
    SuiteNavLinkIds.O365_SETTINGS = 'ShellO365Settings'; 
    SuiteNavLinkIds.ADD_APP = 'SuiteMenu_zz5_MenuItemCreate'; 
    SuiteNavLinkIds.CREATE_PAGE = 'SuiteMenu_MenuItemCreatePage'; 
    SuiteNavLinkIds.SITE_CONTENTS = 'SuiteMenu_zz6_MenuItem_ViewAllSiteContents'; 
    SuiteNavLinkIds.SITE_SETTINGS = 'SuiteMenu_zz7_MenuItem_Settings'; 
    SuiteNavLinkIds.USER_ACTIVITY = 'UserActivity'; 
    SuiteNavLinkIds.ABOUT_ME = 'ShellAboutMe'; 
    SuiteNavLinkIds.SETTINGS = 'ShellSettings'; 
    SuiteNavLinkIds.MY_SETTINGS = 'SuiteMenu_zz2_ID_PersonalInformation'; 
    SuiteNavLinkIds.SIGN_OUT = 'ShellSignout';
    SuiteNavLinkIds.HELP = 'HelpLink';
    SuiteNavLinkIds.COMMUNITY = 'ShellCommunity';
    SuiteNavLinkIds.PRIVACY = 'ShellPrivacy';
    SuiteNavLinkIds.LEGAL = 'ShellLegal';
    SuiteNavLinkIds.MAIL = 'ShellMail'; 
    SuiteNavLinkIds.CALENDAR = 'ShellCalendar';
    SuiteNavLinkIds.PEOPLE = 'ShellPeople';
    SuiteNavLinkIds.ONEDRIVE = 'ShellDocuments'; 
    SuiteNavLinkIds.WORD = 'ShellWordOnline';
    SuiteNavLinkIds.EXCEL = 'ShellExcelOnline';
    SuiteNavLinkIds.POWERPOINT = 'ShellPowerPointOnline';
    SuiteNavLinkIds.ONENOTE = 'ShellOneNoteOnline';
    SuiteNavLinkIds.SITES = 'ShellSites';
    SuiteNavLinkIds.YAMMER = 'ShellYammer';
    SuiteNavLinkIds.TASKS = 'ShellTasks';
    SuiteNavLinkIds.POWER_BI = 'ShellPowerBI';
    SuiteNavLinkIds.DELVE = 'ShellOfficeGraph'; 
    SuiteNavLinkIds.VIDEO = 'ShellVideo';
    SuiteNavLinkIds.ALCHEMY = 'ShellAlchemy';
    SuiteNavLinkIds.SMILE = 'ShellSendASmile';
    return SuiteNavLinkIds;
}());
exports.default = SuiteNavLinkIds;


/***/ }),
/* 188 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_188__;

/***/ }),
/* 189 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_189__;

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ApplicationCustomizerContext_1 = __webpack_require__(41);
exports.ApplicationCustomizerContext = ApplicationCustomizerContext_1.default;
var BaseApplicationCustomizer_1 = __webpack_require__(42);
exports.BaseApplicationCustomizer = BaseApplicationCustomizer_1.default;
var ApplicationAccessor_1 = __webpack_require__(40);
exports.ApplicationAccessor = ApplicationAccessor_1.default;
var PlaceholderContent_1 = __webpack_require__(45);
exports.PlaceholderContent = PlaceholderContent_1.default;
var PlaceholderName_1 = __webpack_require__(46);
exports.PlaceholderName = PlaceholderName_1.default;
var Placeholder_1 = __webpack_require__(44);
exports._Placeholder = Placeholder_1.default;
var PlaceholderProvider_1 = __webpack_require__(47);
exports.PlaceholderProvider = PlaceholderProvider_1.default;
var PlaceholderManager_1 = __webpack_require__(23);
exports._PlaceholderManager = PlaceholderManager_1.default;
var DialogManagerConfiguration_1 = __webpack_require__(43);
exports._DialogManagerConfiguration = DialogManagerConfiguration_1.default;
var _spShell_1 = __webpack_require__(87);
exports._spShell = _spShell_1.default;
var BaseApplication_1 = __webpack_require__(39);
exports.BaseApplication = BaseApplication_1.default;


/***/ })
/******/ ])});;
//# sourceMappingURL=sp-application-base.js.map