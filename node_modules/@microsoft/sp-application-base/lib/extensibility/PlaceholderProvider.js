"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var sp_telemetry_1 = require("@ms/sp-telemetry");
var PlaceholderManager_1 = require("./PlaceholderManager");
var PlaceholderProvider = (function () {
    function PlaceholderProvider(serviceScope, sequence) {
        var _this = this;
        this._placeholders = undefined;
        this._sequence = sequence;
        serviceScope.whenFinished(function () {
            _this._placeholderManager = serviceScope.consume(PlaceholderManager_1.default.serviceKey);
        });
    }
    PlaceholderProvider.prototype.tryCreateContent = function (name, options) {
        var qosMonitor = new sp_telemetry_1._QosMonitor('Placeholder.tryCreateContent');
        if (!this._tryInitialize() || !this._placeholders.has(name)) {
            var error = new Error("No placeholder found with the name '" + name + "'");
            qosMonitor.writeExpectedFailure('PlaceholderNotFound', error, { name: name });
            return undefined;
        }
        var placeholder = this._placeholders.get(name);
        if (!placeholder) {
            var error = new Error('Placeholder dictionary has only the key but not the value for the placeholder');
            qosMonitor.writeUnexpectedFailure('NoValueInPlaceholdersMap', error, { name: name });
            return undefined;
        }
        var content;
        try {
            content = placeholder.createPlaceholderContent(this._sequence, options);
        }
        catch (error) {
            qosMonitor.writeUnexpectedFailure('CreateContentFailed', error, { name: name });
            return undefined;
        }
        if (content) {
            qosMonitor.writeSuccess({ name: name });
        }
        else {
            var error = new Error('Placeholder could not create new content');
            qosMonitor.writeUnexpectedFailure('CreateContentUndefined', error, { name: name });
        }
        return content;
    };
    Object.defineProperty(PlaceholderProvider.prototype, "placeholderNames", {
        get: function () {
            if (!this._tryInitialize()) {
                return [];
            }
            var array = [];
            if (this._placeholders) {
                var iterator = this._placeholders.keys();
                for (var result = iterator.next(); !result.done; result = iterator.next()) {
                    if (result.value) {
                        array.push(result.value);
                    }
                }
            }
            return array;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlaceholderProvider.prototype, "changedEvent", {
        get: function () {
            return this._placeholderManager.changedEvent;
        },
        enumerable: true,
        configurable: true
    });
    PlaceholderProvider.prototype._tryInitialize = function () {
        if (this._placeholders) {
            return true;
        }
        if (this._placeholderManager && this._placeholderManager.placeholders) {
            this._placeholders = new Map();
            for (var _i = 0, _a = this._placeholderManager.placeholders; _i < _a.length; _i++) {
                var placeholder = _a[_i];
                this._placeholders.set(placeholder.name, placeholder);
            }
            return true;
        }
        return false;
    };
    return PlaceholderProvider;
}());
exports.default = PlaceholderProvider;
