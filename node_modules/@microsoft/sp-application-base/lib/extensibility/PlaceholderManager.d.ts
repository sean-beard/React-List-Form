import { ServiceScope, ServiceKey } from '@microsoft/sp-core-library';
import { Event, EventArgs } from '@microsoft/sp-core-library';
import Placeholder, { IPlaceholderDefinition } from './Placeholder';
/**
 * PlaceholderManager is a service registered with the application's root ServiceScope.
 * The host application uses this object to define the placeholders which will
 * be consumed by third party extensions.  The PlaceholderCollection then obtains its
 * data from the PlaceholderManager.
 *
 * @internal
 */
export default class PlaceholderManager {
    /**
     * The service key for PlaceholderManager.
     */
    static readonly serviceKey: ServiceKey<PlaceholderManager>;
    /**
     * Event name for placeholders change
     */
    private static readonly placeholdersChangedEventName;
    /**
     * The DOM attribute on a placeholder div.
     * e.g. <div data-sp-placeholder='PageHeader'>
     */
    private static readonly placeholderAttributeName;
    /**
     * undefined regions means they are not initialized yet, but empty array means there are none
     */
    private _placeholders;
    private _changedEvent;
    constructor(serviceScope: ServiceScope);
    /**
     * The event raised when the application changes placeholder definitions
     */
    readonly changedEvent: Event<EventArgs>;
    /**
     * Register the placeholders in the current page.
     */
    registerPlaceholders(): void;
    /**
     * Initializes the collection of placeholders for use by application customizers.
     */
    initializePlaceholders(definitions: IPlaceholderDefinition[]): void;
    /**
     * Returns undefined if initializePlaceholders() was not called yet.
     */
    readonly placeholders: Placeholder[] | undefined;
}
