import Placeholder from './Placeholder';
import { IPlaceholderCreateContentOptions } from './PlaceholderProvider';
import PlaceholderName from './PlaceholderName';
/**
 * Constructor parameters for PlaceholderContent
 *
 * @internal
 */
export interface IPlaceholderContentParameters {
    placeholder: Placeholder;
    domElement: HTMLDivElement;
    sequence: number;
    options?: IPlaceholderCreateContentOptions;
}
/**
 * Represents custom content that is rendered inside a placeholder on a SharePoint page.
 *
 * @remarks
 * This object is returned by {@link PlaceholderProvider.tryCreateContent}.
 * It provides access to a Document Object Model (DOM) element where the caller can render its custom content.
 *
 * @beta
 */
export default class PlaceholderContent {
    private static _logSource;
    private _domElement;
    private _placeholder;
    private _disposeHandler;
    /**
     * @internal
     */
    constructor(parameters: IPlaceholderContentParameters);
    /**
     * Identifies the placeholder that this content was added to.
     * Example: PlaceholderName.Top
     */
    readonly name: PlaceholderName;
    /**
     * The Document Object Model (DOM) element where the owner should render its custom content.
     *
     * @remarks
     * If the caller needs to be notified when the DOM element is disposed, use
     * the {@link IPlaceholderCreateContentOptions.onDispose} callback.
     */
    readonly domElement: HTMLDivElement;
    /**
     * Disposes the PlaceholderContent object and removes its attached DOM element from the page.
     *
     * @remarks
     * This method can be called to immediately dispose the attached DOM element. Otherwise, it
     * will be disposed by the application when the containing placeholder is disposed. Calling dispose()
     * invokes the {@link IPlaceholderCreateContentOptions.onDispose} callback and removes the attached DOM element
     * from the page, and disposes the PlaceholderContent object.
     */
    dispose(): void;
}
