"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_core_library_2 = require("@microsoft/sp-core-library");
var Placeholder_1 = require("./Placeholder");
var PlaceholderName_1 = require("./PlaceholderName");
var PlaceholderManager = (function () {
    function PlaceholderManager(serviceScope) {
        this._placeholders = undefined;
        this._changedEvent = new sp_core_library_2.Event(PlaceholderManager.placeholdersChangedEventName);
    }
    Object.defineProperty(PlaceholderManager.prototype, "changedEvent", {
        get: function () {
            return this._changedEvent;
        },
        enumerable: true,
        configurable: true
    });
    PlaceholderManager.prototype.registerPlaceholders = function () {
        var placeholderDivs = document.querySelectorAll("[" + PlaceholderManager.placeholderAttributeName + "]");
        var regionDef = [];
        for (var i = 0; i < placeholderDivs.length; i++) {
            var div = placeholderDivs[i];
            var name_1 = div.getAttribute(PlaceholderManager.placeholderAttributeName);
            if (div && name_1) {
                var placeholderName = PlaceholderName_1.default[name_1];
                if (typeof placeholderName !== 'number') {
                    throw new Error('Invalid placeholder definition: ' + name_1);
                }
                regionDef.push({
                    name: placeholderName,
                    domElement: div
                });
            }
        }
        this.initializePlaceholders(regionDef);
    };
    PlaceholderManager.prototype.initializePlaceholders = function (definitions) {
        var _this = this;
        sp_core_library_1.Validate.isNotNullOrUndefined(definitions, 'definitions');
        this._placeholders = [];
        this._placeholders = definitions.map(function (def) { return new Placeholder_1.default(def, _this); });
        sp_core_library_2._EventManager.instance._raiseEvent(PlaceholderManager.placeholdersChangedEventName, new sp_core_library_2.EventArgs());
    };
    Object.defineProperty(PlaceholderManager.prototype, "placeholders", {
        get: function () {
            return this._placeholders;
        },
        enumerable: true,
        configurable: true
    });
    PlaceholderManager.serviceKey = sp_core_library_1.ServiceKey.create('sp-application-base:PlaceholderManager', PlaceholderManager);
    PlaceholderManager.placeholdersChangedEventName = 'placeholders.changedEvent';
    PlaceholderManager.placeholderAttributeName = 'data-sp-placeholder';
    return PlaceholderManager;
}());
exports.default = PlaceholderManager;
