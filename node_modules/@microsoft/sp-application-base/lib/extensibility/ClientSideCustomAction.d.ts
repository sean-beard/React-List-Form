import { SPPermission } from '@microsoft/sp-page-context';
import { Guid } from '@microsoft/sp-core-library';
import { _IPreloadedCustomAction } from '@microsoft/sp-loader';
/**
 * Client side custom action.
 */
export default class ClientSideCustomAction {
    private static _logSource;
    title: string | undefined;
    location: string;
    clientSideComponentId: Guid;
    clientSideComponentProperties: string | undefined;
    registrationType: string | undefined;
    registrationId: string | undefined;
    sequence: number | undefined;
    requireSiteAdministrator: boolean | undefined;
    rights: SPPermission | undefined;
    /**
     * Try to create a custom action from the preloaded custom action data. If there is a failure
     * to create the action, log an error and return undefined. We do not want to cause application
     * loading failures in case of custom action creation failures.
     *
     * @internal
     */
    static _tryCreateFromPreloadedCustomAction(customAction: _IPreloadedCustomAction): ClientSideCustomAction | undefined;
    /**
     * Try create custom action from query string debug data
     */
    static _tryCreateFromDebugData(location: string, clientSideComponentId: Guid, clientSideComponentProperties: string): ClientSideCustomAction;
    /**
     * Returns a tag that should be used for logging and telemetry purposes.
     */
    readonly tag: string;
}
/**
 * Client side custom action context. This object contains all the custom actions.
 *
 * @alpha
 */
export declare class ClientSideCustomActionContext {
    customActions: ClientSideCustomAction[];
    debugCustomActions: ClientSideCustomAction[];
    getAll(): ClientSideCustomAction[];
}
/**
 * Constants for the custom action locations that are used with client-side extensions.
 *
 * For more info about custom actions, see this reference:
 * https://msdn.microsoft.com/en-us/library/office/ms460194.aspx
 *
 * @alpha
 */
export declare class CustomActionLocations {
    /**
     * Used to register application customizers, which run when the browser page loads.
     *
     * Manifest extension type: "ApplicationCustomizer"
     * Base class:              BaseApplicationCustomizer
     */
    static readonly APPLICATION_CUSTOMIZER: string;
    /**
     * Used to add menu items to the right-click context menu for the SharePoint list view.
     *
     * Manifest extension type: "ListViewCommandSet"
     * Base class:              BaseListViewCommandSet
     */
    static readonly LISTVIEW_COMMANDSET_CONTEXTMENU: string;
    /**
     * Used to add menu items to the top menu for a SharePoint list view.
     *
     * Manifest extension type: "ListViewCommandSet"
     * Base class:              BaseListViewCommandSet
     */
    static readonly LISTVIEW_COMMANDSET_COMMANDBAR: string;
    /**
     * Used to add menu items to the SharePoint list view; the location is up to the application's
     * discretion.
     *
     * Manifest extension type: "ListViewCommandSet"
     * Base class:              BaseListViewCommandSet
     */
    static readonly LISTVIEW_COMMANDSET_DEFAULT: string;
}
