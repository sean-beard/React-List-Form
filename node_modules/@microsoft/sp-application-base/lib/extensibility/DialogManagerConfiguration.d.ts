/**
 * A singleton class that allows the application to configure the behavior of dialog manager. If @microsoft/sp-dialog
 * package is loaded on the page and a dialog manager is instantiated on the page, it will look for this singleton
 * as its configuration.
 *
 * @internal
 */
export default class DialogManagerConfiguration {
    private static _instance;
    private _allowDialogs;
    private _domElement;
    static readonly instance: DialogManagerConfiguration;
    /**
     * If the application allows showing dialogs. Application can change this configuration in runtime. For example,
     * the application can decide to set this to false to block all dialogs based on its current state. If this property
     * is false, the dialog manager will deny all requests to show dialogs.
     *
     * Throws an error if allowDialogs is undefined.
     */
    /**
     * Sets the allowDialogs.
     * Throws an error in the parameter value is undefined.
     */
    allowDialogs: boolean;
    /**
     * The container div that the dialog manager will use to render the dialogs in.
     *
     * Throws an error if domElement is undefined.
     */
    readonly domElement: HTMLDivElement;
    /**
     * initialize dialog manager configuration.
     *
     * @param domElement - The container element for dialogs
     * @param allowDialogs - Whether the dialogs should be allowed. This defaults to true and can be updated later using
     * allowDialogs property.
     */
    initialize(domElement: HTMLDivElement, allowDialogs?: boolean): void;
    /**
     * Disposes the current configuration. Use this when the application is being disposed. This will make sure that
     * this config is not re-used in case another application is loaded on the same page.
     * IMPORTANT NOTE: SPFx assumption is that there is only one active application on the page at a given time.
     */
    dispose(): void;
}
