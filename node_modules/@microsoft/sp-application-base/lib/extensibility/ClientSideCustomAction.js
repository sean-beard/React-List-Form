"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var sp_telemetry_1 = require("@ms/sp-telemetry");
var sp_page_context_1 = require("@microsoft/sp-page-context");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var ClientSideCustomAction = (function () {
    function ClientSideCustomAction() {
    }
    ClientSideCustomAction._tryCreateFromPreloadedCustomAction = function (customAction) {
        var typedCustomAction = undefined;
        var qosMonitor = new sp_telemetry_1._QosMonitor('ClientSideCustomActions.CreateFromPreloadedCustomAction');
        try {
            typedCustomAction = new ClientSideCustomAction();
            sp_core_library_1.Validate.isNonemptyString(customAction.clientSideComponentId, 'customAction.clientSideComponentId');
            sp_core_library_1.Validate.isNonemptyString(customAction.location, 'customAction.location');
            typedCustomAction.title = customAction.title;
            typedCustomAction.location = customAction.location;
            typedCustomAction.clientSideComponentId = sp_core_library_1.Guid.parse(customAction.clientSideComponentId);
            typedCustomAction.clientSideComponentProperties = customAction.clientSideComponentProperties;
            typedCustomAction.registrationType = customAction.registrationType;
            typedCustomAction.registrationId = customAction.registrationId;
            typedCustomAction.sequence = customAction.sequence;
            typedCustomAction.requireSiteAdministrator = customAction.requireSiteAdministrator;
            var rights = customAction.rights;
            if (rights && rights.High !== undefined && rights.Low !== undefined) {
                typedCustomAction.rights = new sp_page_context_1.SPPermission(rights);
            }
            else {
                sp_telemetry_1._TraceLogger.logVerbose(ClientSideCustomAction._logSource, "The rights object has invalid format. One of High or Low fields cannot be undefined. Object value is '" + JSON.stringify(rights)); 
            }
            qosMonitor.writeSuccess({ customAction: customAction });
            return typedCustomAction;
        }
        catch (error) {
            sp_telemetry_1._TraceLogger.logError(ClientSideCustomAction._logSource, new Error("Failed to create client side custom action. Error information is " + error.message)); 
            qosMonitor.writeUnexpectedFailure('UnhandledCreateError', error, { customAction: customAction });
            return undefined;
        }
    };
    ClientSideCustomAction._tryCreateFromDebugData = function (location, clientSideComponentId, clientSideComponentProperties) {
        sp_core_library_1.Validate.isNotNullOrUndefined(clientSideComponentId, 'clientSideComponentId');
        sp_core_library_1.Validate.isNonemptyString(location, 'location');
        var customAction = new ClientSideCustomAction();
        customAction.location = location;
        customAction.clientSideComponentId = clientSideComponentId;
        customAction.clientSideComponentProperties = clientSideComponentProperties;
        return customAction;
    };
    Object.defineProperty(ClientSideCustomAction.prototype, "tag", {
        get: function () {
            return this.location + "." + this.clientSideComponentId.toString();
        },
        enumerable: true,
        configurable: true
    });
    ClientSideCustomAction._logSource = sp_telemetry_1._LogSource.create('ClientSideCustomAction');
    return ClientSideCustomAction;
}());
exports.default = ClientSideCustomAction;
var ClientSideCustomActionContext = (function () {
    function ClientSideCustomActionContext() {
        this.customActions = [];
        this.debugCustomActions = [];
    }
    ClientSideCustomActionContext.prototype.getAll = function () {
        return this.debugCustomActions.concat(this.customActions);
    };
    return ClientSideCustomActionContext;
}());
exports.ClientSideCustomActionContext = ClientSideCustomActionContext;
var CustomActionLocations = (function () {
    function CustomActionLocations() {
    }
    CustomActionLocations.APPLICATION_CUSTOMIZER = 'ClientSideExtension.ApplicationCustomizer';
    CustomActionLocations.LISTVIEW_COMMANDSET_CONTEXTMENU = 'ClientSideExtension.ListViewCommandSet.ContextMenu';
    CustomActionLocations.LISTVIEW_COMMANDSET_COMMANDBAR = 'ClientSideExtension.ListViewCommandSet.CommandBar';
    CustomActionLocations.LISTVIEW_COMMANDSET_DEFAULT = 'ClientSideExtension.ListViewCommandSet';
    return CustomActionLocations;
}());
exports.CustomActionLocations = CustomActionLocations;
