"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var sp_telemetry_1 = require("@ms/sp-telemetry");
var SPGlobalErrorHandler = (function () {
    function SPGlobalErrorHandler() {
    }
    SPGlobalErrorHandler.basicTracingHandler = function (message, filename, lineno, colno, error) {
        var eventName = 'window.onerror';
        if (filename && SPGlobalErrorHandler._isFromFile(filename, 'CKEDITOR')) {
            SPGlobalErrorHandler._logErrorFromFile(message, SPGlobalErrorHandler._ckLogSource, lineno, colno, error, eventName);
        }
        else {
            var genericError = error ||
                new Error("Error:" + message + ", file:" + filename + ", line:" + lineno + ", column:" + colno);
            sp_telemetry_1._TraceLogger.logError(SPGlobalErrorHandler._genericLogSource, genericError, eventName);
        }
    };
    SPGlobalErrorHandler._isFromFile = function (filename, match) {
        return filename.length > 0 && filename.toUpperCase().indexOf(match) !== -1;
    };
    SPGlobalErrorHandler._logErrorFromFile = function (message, logSource, lineno, colno, error, eventName) {
        var fileError = error ||
            new Error("Error:" + message + ", line:" + lineno + ", column:" + colno);
        sp_telemetry_1._TraceLogger.logError(logSource, fileError, eventName);
    };
    SPGlobalErrorHandler._ckLogSource = sp_telemetry_1._LogSource.create('CKGlobalError');
    SPGlobalErrorHandler._genericLogSource = sp_telemetry_1._LogSource.create('OtherGlobalError');
    return SPGlobalErrorHandler;
}());
exports.default = SPGlobalErrorHandler;
