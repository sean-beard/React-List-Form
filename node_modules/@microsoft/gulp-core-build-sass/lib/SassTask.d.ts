/// <reference types="node" />
import { GulpTask } from '@microsoft/gulp-core-build';
import * as Gulp from 'gulp';
export interface ISassTaskConfig {
    /** An optional parameter for text to include in the generated typescript file. */
    preamble?: string;
    /** An optional parameter for text to include at the end of the generated typescript file. */
    postamble?: string;
    /** An array of glob patterns for locating SASS files. */
    sassMatch?: string[];
    /**
     * If this option is specified, ALL files will be treated as a module.scss and will
     * automatically generate a corresponding TypeScript file. All classes will be
     * appended with a hash to help ensure uniqueness on a page. This file can be
     * imported directly, and will contain an object describing the mangled class names.
     */
    useCSSModules?: boolean;
    /**
     * If false, we will set the CSS property naming warning to verbose message while the module is generating
     * to prevent task exit with exitcode: 1.
     * Default value is true
     */
    warnOnCssInvalidPropertyName?: boolean;
    /**
     * If true, we will generate a CSS in the lib folder. If false, the CSS is directly embedded
     * into the TypeScript file
     */
    dropCssFiles?: boolean;
    /**
     * If files are matched by sassMatch which do not end in .module.scss, log a warning.
     */
    warnOnNonCSSModules?: boolean;
    /**
     * If this option is specified, module css will be exported using the name provided. If an
     * empty value is specified, the styles will be exported using 'export =', rather than a
     * named export. By default we use the 'default' export name.
     */
    moduleExportName?: string;
}
export declare class SassTask extends GulpTask<ISassTaskConfig> {
    cleanMatch: string[];
    constructor();
    loadSchema(): Object;
    executeTask(gulp: typeof Gulp, completeCallback: (error?: string) => void): Promise<{}> | NodeJS.ReadWriteStream | void;
    private _processFiles(gulp, srcPattern, completeCallback, postCSSPlugins, checkFile?);
    private _generateModuleStub(cssFileName, json);
    private generateScopedName(name, fileName, css);
}
