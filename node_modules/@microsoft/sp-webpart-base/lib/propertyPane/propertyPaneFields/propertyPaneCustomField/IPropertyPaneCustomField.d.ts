/**
 * PropertyPane CustomPropertyField props.
 *
 * @public
 */
export interface IPropertyPaneCustomFieldProps {
    /**
     * This API will be called once the custom field is mounted on the host element.
     *
     * @param domElement - DOM element on which the custom control needs to be mounted.
     * @param context (optional) - Instance specific context. This context was passed in the constructor.
     * @param changeCallback (optional) - Callback called when a field changes within the custom field.
     *  This will allow the property pane to be aware of the change and act accordingly.
     *  @param targetProperty (optional) - associated target property from the properties bag.
     *    if not provided then a custom value which is unique at the custom field level is assigned,
     *    which will be in the form of '__CustomField_<key provided when the custom field is created>'.
     *  @param newValue (optional) - new value of the property.
     *    newValue is ignored if targetProperty is not specified.
     */
    onRender: (domElement: HTMLElement, context?: any, changeCallback?: (targetProperty?: string, newValue?: any) => void) => void;
    /**
     * An UNIQUE key indicates the identity of this contorl.
     *
     * The PropertyPane uses ReactJS to render its components. ReactJS uses keys to identify a component and if it should
     * be re-rendered or not. This is a performance feature in ReactJS. Please read the following link to understand how
     * to pick the value of the key.
     *
     * @see https://facebook.github.io/react/docs/lists-and-keys.html#keys
     */
    key: string;
    /**
     * This API is called when the component is unmounted from the host element.
     *
     * @param domElement - DOM element on which the custom control is mounted.
     * @param context (optional) - Instance specific context. This context was passed in the constructor.
     */
    onDispose?: (domElement: HTMLElement, context?: any) => void;
    /**
     * Instance specific context. This context is passed back to the web part in the
     * onRender and onDispose APIs. The web part can use this context to manage state
     * information.
     */
    context?: any;
}
/**
 * PropertyPane CustomPropertyField internal props.
 *
 * @internal
 */
export interface IPropertyPaneCustomFieldInternalProps extends IPropertyPaneCustomFieldProps {
    onChanged: (targetProperty: string, value: any) => void;
}
