'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var decorators_1 = require("@microsoft/decorators");
var lodash = require("@microsoft/sp-lodash-subset");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_component_base_1 = require("@microsoft/sp-component-base");
var PropertyPaneDefinitions_1 = require("../propertyPane/propertyPane/PropertyPaneDefinitions");
var SPWebPartError_1 = require("./error/SPWebPartError");
var Object_1 = require("../utils/Object");
var ExecuteAndReThrow_1 = require("../utils/ExecuteAndReThrow");
var ClassicPageUtils_1 = require("./classicPages/ClassicPageUtils");
var ViewportLoader_1 = require("./ViewportLoader");
var Strings_resx_1 = require("./loc/Strings.resx");
var cswp_base_module_scss_1 = require("./styles/cswp-base.module.scss");
var WEBPARTLOADINVIEWPORTFLIGHT = 33;
var BaseClientSideWebPart = (function (_super) {
    __extends(BaseClientSideWebPart, _super);
    function BaseClientSideWebPart() {
        var _this = _super.call(this) || this;
        _this._initialized = false;
        _this._logSource = sp_telemetry_1._LogSource.create('BaseClientSideWebPart');
        _this._internalIsInViewport = false;
        if (_this.constructor['name'] === 'BaseClientSideWebPart') {
            throw SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.BaseConstructError);
        }
        return _this;
    }
    Object.defineProperty(BaseClientSideWebPart.prototype, "domElement", {
        get: function () { return this.context.domElement; },
        set: function (o) { this._throwReadOnlyError(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "width", {
        get: function () {
            if (this._width === undefined) {
                var width = window.getComputedStyle(this.domElement).width;
                this._width = width ? parseFloat(width) : 0;
            }
            return this._width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "dataVersion", {
        get: function () {
            return sp_core_library_1.Version.parse('1.0');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "displayMode", {
        get: function () { return this._displayMode; },
        set: function (o) { this._throwReadOnlyError(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "properties", {
        get: function () {
            if (this._initialized) {
                return this._properties;
            }
            else {
                throw SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.NotInitializedError);
            }
        },
        set: function (o) { this._throwReadOnlyError(); },
        enumerable: true,
        configurable: true
    });
    BaseClientSideWebPart.prototype._calculateMinimumHeight = function () {
        if (this.context && this.context.manifest && this.context.manifest.isInternal) {
            sp_telemetry_1._TraceLogger.logVerbose(this._logSource, "Web part " + this.context.webPartTag + " should override _calculateMinimumHeight()");
        }
        return undefined;
    };
    Object.defineProperty(BaseClientSideWebPart.prototype, "propertiesMetadata", {
        get: function () { return undefined; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "renderedOnce", {
        get: function () { return this._renderedOnce; },
        set: function (o) { this._throwReadOnlyError(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "renderedFromPersistedData", {
        get: function () { return this._renderedFromPersistedData; },
        set: function (o) { this._throwReadOnlyError(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "canOpenPopupOnRender", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "disableReactivePropertyChanges", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "previewImageUrl", {
        get: function () { return undefined; },
        set: function (o) { this._throwReadOnlyError(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "accessibleTitle", {
        get: function () { return this._getDefaultAccessibleTitle(); },
        set: function (o) { this._throwReadOnlyError(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "title", {
        get: function () { return this._title; },
        set: function (o) { this._throwReadOnlyError(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "description", {
        get: function () { return this._description; },
        set: function (o) { this._throwReadOnlyError(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "isRenderAsync", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "propertyPaneRenderedByWebPart", {
        set: function (o) { this._throwReadOnlyError(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseClientSideWebPart.prototype, "persistedProperties", {
        get: function () {
            return this._backupProperties ? this._backupProperties : this.properties;
        },
        set: function (o) { this._throwReadOnlyError(); },
        enumerable: true,
        configurable: true
    });
    BaseClientSideWebPart.prototype.onInit = function () {
        return Promise.resolve(undefined);
    };
    BaseClientSideWebPart.prototype.renderCompleted = function () {
        this._renderCompleted();
    };
    BaseClientSideWebPart.prototype.onDisplayModeChanged = function (oldDisplayMode) {
        sp_core_library_1.Validate.isTrue(oldDisplayMode !== this.displayMode, Strings_resx_1.default.OnDisplayModeChangedInvalidInvocation);
        this._renderWithAccessibleTitle();
    };
    BaseClientSideWebPart.prototype.onBeforeSerialize = function () {
        return undefined;
    };
    BaseClientSideWebPart.prototype.onAfterDeserialize = function (deserializedObject, dataVersion) {
        return deserializedObject;
    };
    BaseClientSideWebPart.prototype.onEvent = function (eventName, eventObject) {
    };
    BaseClientSideWebPart.prototype.getPropertyPaneConfiguration = function () {
        return undefined; 
    };
    BaseClientSideWebPart.prototype.onDispose = function () {
        if (sp_core_library_1._SPFlight.isEnabled(WEBPARTLOADINVIEWPORTFLIGHT) && !this.context.host.isViewportLoadingDisabled
            && !this._internalIsInViewport) {
            ViewportLoader_1.default.instance.unregister(this);
        }
    };
    BaseClientSideWebPart.prototype.onPropertyPaneFieldChanged = function (propertyPath, oldValue, newValue) {
    };
    BaseClientSideWebPart.prototype.onPropertyPaneConfigurationStart = function () {
    };
    BaseClientSideWebPart.prototype.onPropertyPaneConfigurationComplete = function () {
    };
    BaseClientSideWebPart.prototype.onAfterPropertyPaneChangesApplied = function () {
    };
    BaseClientSideWebPart.prototype.onPropertyPaneRendered = function () {
    };
    BaseClientSideWebPart.prototype.onAfterResize = function (newWidth) {
    };
    BaseClientSideWebPart.prototype.renderError = function (error) {
        this.context.statusRenderer.clearLoadingIndicator(this.domElement);
        this.context.statusRenderer.renderError(this.domElement, error);
        sp_telemetry_1._TraceLogger.logError(this._logSource, error);
    };
    BaseClientSideWebPart.prototype.clearError = function () {
        this.context.statusRenderer.clearError(this.domElement);
    };
    BaseClientSideWebPart.prototype._reInstateServerProcessedData = function (deserializedProperties, serverProcessedContent) {
        var _this = this;
        if (!deserializedProperties) {
            return {};
        }
        var fixedProperties = deserializedProperties;
        if (!this.renderedFromPersistedData) {
            return fixedProperties;
        }
        this._forEachPropertyWithMetaData(function (propPath, metadata) {
            if (_this.context.manifest.id !== 'b7dd04e1-19ce-4b24-9132-b60a1c2b910d'
                && metadata.isHtmlString) {
                lodash.set(fixedProperties, propPath, undefined);
            }
        }, fixedProperties);
        if (serverProcessedContent) {
            var htmlMaps = [
                serverProcessedContent.htmlStrings,
                serverProcessedContent.searchablePlainTexts,
                serverProcessedContent.imageSources,
                serverProcessedContent.links
            ];
            for (var _i = 0, htmlMaps_1 = htmlMaps; _i < htmlMaps_1.length; _i++) {
                var htmlMap = htmlMaps_1[_i];
                if (htmlMap) {
                    for (var propPath in htmlMap) {
                        var value = htmlMap[propPath];
                        if (typeof value === 'string') {
                            lodash.set(fixedProperties, propPath, value);
                        }
                    }
                }
            }
        }
        return fixedProperties;
    };
    BaseClientSideWebPart.prototype._forEachPropertyWithMetaData = function (callback, properties ) {
        if (this.propertiesMetadata) {
            for (var propPath in this.propertiesMetadata) {
                var metadata = this.propertiesMetadata[propPath];
                var wildcardCount = (propPath.match(/\*/g) || []).length;
                if (wildcardCount > 1) {
                    console.warn("Invalid property path: Multiple wildcards are not supported in property paths.\n Entry with path '" + propPath + "' got ignored in the properties metadata.");
                    continue;
                }
                else if (wildcardCount === 1) {
                    var index = propPath.indexOf('[*]');
                    if (index < -1) {
                        console.warn("Invalid property path: Wildcards are only supported inside brackets to select array\n indices as in 'foo[*].bar'. Entry with path '" + propPath + "' got ignored in the properties metadata.");
                        continue;
                    }
                    else {
                        var arrayPath = propPath.substr(0, index);
                        var arrayInstance = lodash.get(properties || this.properties, arrayPath);
                        if (!arrayInstance) {
                            console.warn("Invalid property path: Could not find an array named '" + arrayPath + "' in the properties.\n Entry with path '" + propPath + "' got ignored in the properties metadata.");
                            continue;
                        }
                        else {
                            for (var i = 0; i < arrayInstance.length; i++) {
                                var fixedPropPath = propPath.replace('*', "" + i);
                                callback(fixedPropPath, metadata);
                            }
                        }
                    }
                }
                else {
                    callback(propPath, metadata);
                }
            }
        }
    };
    BaseClientSideWebPart.prototype._deserialize = function (data) {
        return this._reInstateServerProcessedData(data.properties, data.serverProcessedContent);
    };
    BaseClientSideWebPart.prototype._internalInitialize = function (webPartContext) {
        sp_core_library_1.Validate.isNotNullOrUndefined(webPartContext, 'webPartContext');
        Object_1.deepFreeze(webPartContext.manifest);
        _super.prototype._initializeContext.call(this, webPartContext);
        this._logEntry = 'BaseClientSideWebPart';
        sp_telemetry_1._TraceLogger.logVerbose(this._logSource, sp_core_library_1.Text.format(Strings_resx_1.default.ConstructLog, webPartContext.webPartTag));
        this._renderedOnce = false;
        this['__type'] = 'BaseClientSideWebPart';
        this.render = this.render.bind(this);
        this.onDispose = this.onDispose.bind(this);
        this.renderError = this.renderError.bind(this);
        this.clearError = this.clearError.bind(this);
        this.renderCompleted = this.renderCompleted.bind(this);
        this.onPropertyPaneRendered = this.onPropertyPaneRendered.bind(this);
        this._initialized = true;
    };
    BaseClientSideWebPart.prototype._internalDeserialize = function (data) {
        if (data) {
            if (data.title) {
                this._title = data.title;
            }
            if (data.description) {
                this._description = data.description;
            }
            if (typeof data.dataVersion !== 'string') {
                data.dataVersion = '1.0';
            }
            var deserializedData = {
                properties: data.properties,
                serverProcessedContent: data.serverProcessedContent,
                dataVersion: sp_core_library_1.Version.tryParse(data.dataVersion)
            };
            var deserializedPropsObject = this._deserialize(deserializedData);
            var fixedProps = this.onAfterDeserialize(deserializedPropsObject, deserializedData.dataVersion);
            if (!fixedProps) {
                throw SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.OnAfterDeserializeReturnedNull, this.context.webPartTag);
            }
            this._properties = fixedProps;
        }
    };
    BaseClientSideWebPart.prototype._internalFirstTimeRender = function (addedFromPersistedData, mode, qosMonitor, data) {
        var _this = this;
        if (mode === void 0) { mode = sp_core_library_1.DisplayMode.Read; }
        if (this._renderPromiseResolver) {
            throw SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.FirstTimeRenderCalledMoreThanOnce, this.context.webPartTag);
        }
        sp_telemetry_1._TraceLogger.logVerboseData({
            source: this._logSource,
            message: sp_core_library_1.Text.format(Strings_resx_1.default.StartedFirstTimeRender, this.context.webPartTag),
            serviceScope: this.context.serviceScope
        });
        return new Promise(function (resolve) {
            if (!_this._initialized && qosMonitor) {
                qosMonitor.writeUnexpectedFailure('BaseConstructorNotCalled');
                throw SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.NotInitializedError, _this.context.webPartTag);
            }
            _this._displayMode = mode;
            _this._renderedFromPersistedData = addedFromPersistedData;
            if (!_this._renderedFromPersistedData) {
                var isInternal = _this.context.manifest.isInternal || false;
                var logEntry = new sp_telemetry_1._LogEntry(_this._logSource.id, 'WebPartAdded', sp_telemetry_1._LogType.Event, {
                    'alias': _this.context.manifest.alias,
                    'isInternal': isInternal.toString()
                });
                sp_telemetry_1._EngagementLogger.logEventWithLogEntry(logEntry);
            }
            if (data) {
                _this._internalDeserialize(data);
            }
            if (!_this._properties && qosMonitor) {
                qosMonitor.writeUnexpectedFailure('PropertyBagNull');
                throw SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.PropertyBagNull, _this.context.webPartTag);
            }
            if (!sp_core_library_1._SPKillSwitch.isActivated(sp_core_library_1.Guid.parse('5b100873-5aad-487b-aa43-7f4cdda576f4'), '08/15/2017', 'Do not set min height')) {
                var minHeight = _this._calculateMinimumHeight();
                if (minHeight) {
                    _this.domElement.style.minHeight = minHeight + "px";
                }
            }
            _this._renderPromiseResolver = resolve;
            if (sp_core_library_1._SPFlight.isEnabled(WEBPARTLOADINVIEWPORTFLIGHT) && !_this.context.host.isViewportLoadingDisabled) {
                sp_telemetry_1._PerformanceLogger.markComponent(_this.context.webPartTag, 'loadingDelayed');
                ViewportLoader_1.default.instance.register(_this);
                if (!_this._internalIsInViewport) {
                    sp_telemetry_1._TraceLogger.logVerboseData({
                        source: _this._logSource,
                        message: "Web part " + _this.context.webPartTag + " is not in initial viewport, rendering delayed.",
                        serviceScope: _this.context.serviceScope
                    });
                }
            }
            else {
                _this._internalRenderInViewPort();
            }
        });
    };
    BaseClientSideWebPart.prototype._internalGetData = function () {
        return Promise.resolve();
    };
    BaseClientSideWebPart.prototype._internalRenderInViewPort = function () {
        var _this = this;
        if (sp_core_library_1._SPFlight.isEnabled(WEBPARTLOADINVIEWPORTFLIGHT) && !this.context.host.isViewportLoadingDisabled) {
            sp_telemetry_1._PerformanceLogger.markComponent(this.context.webPartTag, 'inViewportLoading');
            sp_telemetry_1._TraceLogger.logVerboseData({
                source: this._logSource,
                message: "Actually started first time render for web part " + this.context.webPartTag + ".",
                serviceScope: this.context.serviceScope
            });
        }
        var promise = this.onInit();
        if (!promise) {
            throw SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.OnInitReturnedNullPromise, this.context.webPartTag);
        }
        promise.then(function () {
            sp_telemetry_1._TraceLogger.logVerboseData({
                source: _this._logSource,
                message: sp_core_library_1.Text.format(Strings_resx_1.default.OnInitCompleted, _this.context.webPartTag),
                serviceScope: _this.context.serviceScope
            });
            sp_telemetry_1._PerformanceLogger.markComponent(_this.context.webPartTag, 'init');
            var getDataPromise = Promise.resolve();
            if (!sp_core_library_1._SPKillSwitch.isActivated(sp_core_library_1.Guid.parse('5e5b6b82-fd3b-441b-b892-8693932bf9d2'), '07/31/2017', 'Mysite cache kill switch.')) {
                getDataPromise = _this._internalGetData();
                if (!getDataPromise) {
                    throw SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.GetDataReturnedNullPromise, _this.context.webPartTag);
                }
            }
            getDataPromise.then(function () {
                sp_telemetry_1._PerformanceLogger.markComponent(_this.context.webPartTag, 'getDataComplete');
                _this.context.statusRenderer.clearLoadingIndicator(_this.domElement);
                _this._renderWithAccessibleTitle();
                if (!_this.isRenderAsync) {
                    _this._resolveOnRenderPromise();
                }
                else {
                    sp_telemetry_1._PerformanceLogger.markComponent(_this.context.webPartTag, 'asyncRenderStart');
                    _this._startAsyncRenderGuardTimer();
                }
            });
        });
    };
    BaseClientSideWebPart.prototype._internalSetDisplayMode = function (newDisplayMode) {
        if (this._displayMode !== newDisplayMode) {
            var oldDisplayMode = this._displayMode;
            this._displayMode = newDisplayMode;
            this.onDisplayModeChanged(oldDisplayMode);
        }
    };
    BaseClientSideWebPart.prototype._internalSetWebPartData = function (webPartData) {
        this._internalDeserialize(webPartData);
        this._renderWithAccessibleTitle();
    };
    BaseClientSideWebPart.prototype._internalGetPropertyPaneData = function () {
        return {
            webPartId: this.context.instanceId,
            title: this.title,
            isReactive: !this.disableReactivePropertyChanges,
            configuration: this.getPropertyPaneConfiguration(),
            properties: lodash.cloneDeep(this.properties),
            onPropertyPaneFieldChanged: undefined,
            onConfigurationEvent: undefined,
            onRendered: this.onPropertyPaneRendered
        };
    };
    BaseClientSideWebPart.prototype._internalOnPropertyPaneFieldChanged = function (propertyPath, newValue) {
        if (this.disableReactivePropertyChanges && !this._backupProperties) {
            this._backupProperties = lodash.cloneDeep(this.properties);
        }
        var oldValue = lodash.get(this._properties, propertyPath); 
        this._updateProperty(propertyPath, newValue);
        this.onPropertyPaneFieldChanged(propertyPath, oldValue, newValue);
        this._afterPropertyUpdated(!this.disableReactivePropertyChanges);
    };
    BaseClientSideWebPart.prototype._afterPropertyUpdated = function (shouldRerender) {
        if (this.context.host.setDirty) {
            this.context.host.setDirty(this.context.instanceId);
        }
        if (shouldRerender) {
            this._renderWithAccessibleTitle();
        }
    };
    BaseClientSideWebPart.prototype._internalOnConfigurationEvent = function (configurationEvent) {
        switch (configurationEvent) {
            case PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneConfigurationStart:
                this.onPropertyPaneConfigurationStart();
                break;
            case PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneConfigurationComplete:
                if (this.disableReactivePropertyChanges && this._backupProperties) {
                    this._properties = this._backupProperties;
                    this._backupProperties = undefined;
                }
                this.onPropertyPaneConfigurationComplete();
                break;
            case PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneApplyClicked:
                this._backupProperties = this.properties;
                this.onAfterPropertyPaneChangesApplied();
                this._afterPropertyUpdated(true);
                break;
        }
    };
    BaseClientSideWebPart.prototype._internalSetDirtyBit = function () {
        if (this.displayMode === sp_core_library_1.DisplayMode.Read) {
            return;
        }
        var serializedState = this._internalSerialize();
        var newState = JSON.stringify(serializedState);
        if (!this._previousState) {
            this._previousState = newState;
        }
        else if (this._previousState !== newState && this.context.host.setDirty) {
            this.context.host.setDirty(this.context.instanceId, serializedState);
            this._previousState = newState;
        }
    };
    BaseClientSideWebPart.prototype._serialize = function () {
        var serverProcessedContent = {
            htmlStrings: {},
            searchablePlainTexts: {},
            imageSources: {},
            links: {}
        };
        var properties = lodash.cloneDeep(this.persistedProperties);
        this._forEachPropertyWithMetaData(function (propPath, metadata) {
            var key = propPath;
            var value = lodash.get(properties, propPath);
            if (serverProcessedContent && typeof value === 'string' && value !== undefined) {
                if (serverProcessedContent.htmlStrings && metadata.isHtmlString) {
                    serverProcessedContent.htmlStrings[key] = value;
                }
                else if (serverProcessedContent.searchablePlainTexts && metadata.isSearchablePlainText) {
                    serverProcessedContent.searchablePlainTexts[key] = value;
                }
                else if (serverProcessedContent.links && metadata.isLink) {
                    serverProcessedContent.links[key] = value;
                }
                else if (serverProcessedContent.imageSources && metadata.isImageSource) {
                    serverProcessedContent.imageSources[key] = value;
                }
                lodash.set(properties, propPath, undefined);
            }
        });
        return {
            dataVersion: this.dataVersion,
            properties: properties,
            serverProcessedContent: serverProcessedContent
        };
    };
    BaseClientSideWebPart.prototype._internalSerialize = function () {
        var _this = this;
        var data; 
        ExecuteAndReThrow_1.executeAndReThrow(function () {
            _this.onBeforeSerialize();
            var serializedData = _this._serialize();
            sp_core_library_1.Validate.isNotNullOrUndefined(serializedData.dataVersion, 'serialized data version');
            data = {
                id: _this.context.manifest.id,
                instanceId: _this.context.instanceId,
                title: _this.title,
                description: _this.description,
                serverProcessedContent: serializedData.serverProcessedContent,
                dataVersion: serializedData.dataVersion.toString(),
                properties: serializedData.properties
            };
        }, SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.SerializationFailed, this.context.webPartTag), this._logSource);
        return data;
    };
    BaseClientSideWebPart.prototype._internalDispose = function () {
        _super.prototype.dispose.call(this);
        sp_telemetry_1._TraceLogger.logVerbose(this._logSource, sp_core_library_1.Text.format(Strings_resx_1.default.DisposeLog, this.context.webPartTag));
    };
    BaseClientSideWebPart.prototype._internalOnAfterResize = function () {
        this._width = undefined;
        this.onAfterResize(this.width);
    };
    BaseClientSideWebPart.prototype._updateProperty = function (propertyPath, newValue) {
        lodash.update(this.properties, propertyPath, function () { return newValue; });
    };
    BaseClientSideWebPart.prototype._throwReadOnlyError = function () {
        throw SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.ReadOnlyProperty);
    };
    BaseClientSideWebPart.prototype._renderWithAccessibleTitle = function () {
        this.render();
        if (this._displayMode === sp_core_library_1.DisplayMode.Edit) {
            var accessibleContext = this.accessibleTitle || this._getDefaultAccessibleTitle();
            if (accessibleContext) {
                var contextualLabelId = "cswpAccessibleLabelContextual_" + this.context.instanceId;
                var accessibleDiv = this.domElement.querySelector("#" + contextualLabelId);
                var isNewLabelElement = !accessibleDiv;
                if (isNewLabelElement) {
                    accessibleDiv = document.createElement('div');
                    accessibleDiv.id = contextualLabelId;
                    accessibleDiv.className = cswp_base_module_scss_1.default.screenReaderOnly;
                }
                accessibleDiv.textContent = accessibleContext;
                if (isNewLabelElement) {
                    this.domElement.appendChild(accessibleDiv);
                }
            }
            ClassicPageUtils_1.default.disableAutomaticPostbacks(this.domElement, sp_core_library_1.Environment.type);
        }
        if (!sp_core_library_1._SPKillSwitch.isActivated(sp_core_library_1.Guid.parse('5b100873-5aad-487b-aa43-7f4cdda576f4'), '08/15/2017', 'Do not set min height')) {
            this.domElement.style.minHeight = null; 
        }
    };
    BaseClientSideWebPart.prototype._getDefaultAccessibleTitle = function () {
        return sp_core_library_1.Text.format(Strings_resx_1.default.GenericAccessibleLabelTemplate, this.title);
    };
    BaseClientSideWebPart.prototype._startAsyncRenderGuardTimer = function () {
        var _this = this;
        this._clearAsyncRenderGuardTimer();
        this._asyncRenderQosMonitor = new sp_telemetry_1._QosMonitor("WebPartAsyncRender");
        this._asyncRenderGuardTimer = window.setTimeout(function () {
            _this._asyncRenderTimeout();
        }, 25000);
    };
    BaseClientSideWebPart.prototype._renderCompleted = function () {
        if (this._asyncRenderGuardTimer) {
            this._clearAsyncRenderGuardTimer();
            this._asyncRenderQosMonitor.writeSuccess({
                'alias': this.context.manifest.alias,
                'webPartId': this.context.manifest.id
            });
            this._resolveOnRenderPromise();
        }
    };
    BaseClientSideWebPart.prototype._asyncRenderTimeout = function () {
        if (this._asyncRenderGuardTimer) {
            this._clearAsyncRenderGuardTimer();
            var error = SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.RenderCompletedCallNotCalled, this.context.webPartTag);
            sp_telemetry_1._TraceLogger.logErrorData({
                source: this._logSource,
                error: error,
                serviceScope: this.context.serviceScope
            });
            this._asyncRenderQosMonitor.writeUnexpectedFailure('Timeout', error, {
                'alias': this.context.manifest.alias,
                'webPartId': this.context.manifest.id,
                'instanceId': this.instanceId
            });
            this._resolveOnRenderPromise();
        }
    };
    BaseClientSideWebPart.prototype._clearAsyncRenderGuardTimer = function () {
        if (this._asyncRenderGuardTimer) {
            window.clearTimeout(this._asyncRenderGuardTimer);
            this._asyncRenderGuardTimer = undefined;
        }
    };
    BaseClientSideWebPart.prototype._resolveOnRenderPromise = function () {
        this._renderedOnce = true;
        var message = sp_core_library_1.Text.format(this.isRenderAsync ? Strings_resx_1.default.CompletedAsyncRender : Strings_resx_1.default.CompletedSyncRender, this.context.webPartTag);
        sp_telemetry_1._TraceLogger.logVerboseData({
            source: this._logSource,
            message: message,
            serviceScope: this.context.serviceScope
        });
        sp_telemetry_1._PerformanceLogger.endMarkForComponent(this.context.webPartTag);
        if (this._renderPromiseResolver) {
            this._renderPromiseResolver();
        }
        this._renderPromiseResolver = undefined;
    };
    __decorate([
        decorators_1.virtual
    ], BaseClientSideWebPart.prototype, "_calculateMinimumHeight", null);
    __decorate([
        decorators_1.virtual
    ], BaseClientSideWebPart.prototype, "propertiesMetadata", null);
    __decorate([
        decorators_1.virtual
    ], BaseClientSideWebPart.prototype, "disableReactivePropertyChanges", null);
    __decorate([
        decorators_1.virtual
    ], BaseClientSideWebPart.prototype, "previewImageUrl", null);
    __decorate([
        decorators_1.virtual
    ], BaseClientSideWebPart.prototype, "accessibleTitle", null);
    __decorate([
        decorators_1.virtual
    ], BaseClientSideWebPart.prototype, "isRenderAsync", null);
    __decorate([
        decorators_1.virtual
    ], BaseClientSideWebPart.prototype, "onInit", null);
    __decorate([
        decorators_1.virtual
    ], BaseClientSideWebPart.prototype, "onDisplayModeChanged", null);
    __decorate([
        decorators_1.virtual
    ], BaseClientSideWebPart.prototype, "onBeforeSerialize", null);
    __decorate([
        decorators_1.virtual
    ], BaseClientSideWebPart.prototype, "onAfterDeserialize", null);
    __decorate([
        decorators_1.virtual
    ], BaseClientSideWebPart.prototype, "getPropertyPaneConfiguration", null);
    __decorate([
        decorators_1.virtual
    ], BaseClientSideWebPart.prototype, "onDispose", null);
    __decorate([
        decorators_1.virtual
    ], BaseClientSideWebPart.prototype, "onPropertyPaneFieldChanged", null);
    __decorate([
        decorators_1.virtual
    ], BaseClientSideWebPart.prototype, "onPropertyPaneConfigurationStart", null);
    __decorate([
        decorators_1.virtual
    ], BaseClientSideWebPart.prototype, "onPropertyPaneConfigurationComplete", null);
    __decorate([
        decorators_1.virtual
    ], BaseClientSideWebPart.prototype, "onAfterPropertyPaneChangesApplied", null);
    __decorate([
        decorators_1.virtual
    ], BaseClientSideWebPart.prototype, "onPropertyPaneRendered", null);
    __decorate([
        decorators_1.virtual
    ], BaseClientSideWebPart.prototype, "onAfterResize", null);
    return BaseClientSideWebPart;
}(sp_component_base_1.BaseComponent));
exports.default = BaseClientSideWebPart;
