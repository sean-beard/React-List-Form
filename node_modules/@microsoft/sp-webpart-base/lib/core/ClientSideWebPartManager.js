'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var loadThemedStyles = require("@microsoft/load-themed-styles");
var lodash = require("@microsoft/sp-lodash-subset");
var sp_loader_1 = require("@microsoft/sp-loader");
var sp_http_1 = require("@microsoft/sp-http");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_page_context_1 = require("@microsoft/sp-page-context");
var BaseClientSideWebPart_1 = require("./BaseClientSideWebPart");
var ClientSideWebPartStatusRenderer_1 = require("./ClientSideWebPartStatusRenderer");
var EventAggregator_1 = require("./events/EventAggregator");
var ExecuteWithoutFailing_1 = require("../utils/ExecuteWithoutFailing");
var SPWebPartError_1 = require("./error/SPWebPartError");
var PropertyPaneDefinitions_1 = require("../propertyPane/propertyPane/PropertyPaneDefinitions");
var PropertyPaneController_1 = require("../propertyPane/propertyPaneController/PropertyPaneController");
var WebPartContext_1 = require("./WebPartContext");
var ClassicPageUtils_1 = require("./classicPages/ClassicPageUtils");
var ViewportLoader_1 = require("./ViewportLoader");
var WebPartMetrics_1 = require("./WebPartMetrics");
var Strings_resx_1 = require("./loc/Strings.resx");
var _Animations_1 = require("../components/animations/_Animations");
var WEBPARTSCROLLANIMATIONS_FLIGHT = 966; 
var THUMBNAIL_MAX_URL_LENGTH = 255; 
var ClientSideWebPartManager = (function () {
    function ClientSideWebPartManager(host) {
        this._webparts = new Map();
        this._logSource = sp_telemetry_1._LogSource.create('ClientSideWebPartManager');
        this._eventAggregator = new EventAggregator_1.default();
        this._loadWebPartRequests = 0;
        this._statusRenderer = new ClientSideWebPartStatusRenderer_1.default();
        sp_core_library_1.Validate.isNotNullOrUndefined(host, 'host');
        this._host = host;
        this._pageContext = host.serviceScope.consume(sp_page_context_1.PageContext.serviceKey);
        this._onContainerResize = this._onContainerResize.bind(this);
        this._onPropertyPaneToggled = this._onPropertyPaneToggled.bind(this);
        this.setPropertyPaneState = this.setPropertyPaneState.bind(this);
        this.isPropertyPaneRenderedByWebPart = this.isPropertyPaneRenderedByWebPart.bind(this);
        this.isPropertyPaneOpen = this.isPropertyPaneOpen.bind(this);
        this._instantiateWebPart = this._instantiateWebPart.bind(this);
        this._handleErrorLoadingWebpart = this._handleErrorLoadingWebpart.bind(this);
        this._handleModulePromiseRejection = this._handleModulePromiseRejection.bind(this);
        this._onFirstTimeWebpartRender = this._onFirstTimeWebpartRender.bind(this);
        this._getViewportRenderedEndTime = this._getViewportRenderedEndTime.bind(this);
        this._onAllWebpartsAdded = this._onAllWebpartsAdded.bind(this);
        if (ClientSideWebPartManager._webPartManagerList.length === 0) {
            this._initialzeOnResizeEventHandler();
        }
        ClientSideWebPartManager._webPartManagerList.push(this);
    }
    ClientSideWebPartManager.prototype.loadWebPart = function (context) {
        var _this = this;
        this._loadWebPartRequests++;
        var instanceRequestCount = this._loadWebPartRequests;
        return new Promise(function (resolve, reject) {
            _this._validateInput(context);
            sp_telemetry_1._TraceLogger.logVerboseData({
                source: _this._logSource,
                message: sp_core_library_1.Text.format(Strings_resx_1.default.LoadWebpartCalled, _this._loadWebPartRequests, context.totalWebparts, context.manifest.alias + "." + context.instanceId),
                serviceScope: _this._host.serviceScope
            });
            var webPartTag = _this._createWebPartTag(context.manifest, context.instanceId);
            if (context.displayMode === undefined) {
                context.displayMode = sp_core_library_1.DisplayMode.Read;
            }
            sp_telemetry_1._PageMetricsLogger.recordMetric(WebPartMetrics_1.default.webParts);
            if (!_this._validateManifest(context.manifest, context.displayMode, webPartTag)) {
                _this.renderError(context.domElement, SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.ManifestInvalid, webPartTag));
                return;
            }
            var manifest = context.manifest; 
            var instanceId = context.instanceId;
            var domElement = context.domElement;
            var qosMonitor = _this._createLoadQosMonitor(manifest);
            sp_telemetry_1._PerformanceLogger.startMarkForComponent(webPartTag);
            sp_telemetry_1._TraceLogger.logVerboseData({
                source: _this._logSource,
                message: sp_core_library_1.Text.format(Strings_resx_1.default.StartedLoadingWebPart, webPartTag),
                serviceScope: _this._host.serviceScope
            });
            var title = context.webPartData && context.webPartData.title
                ? context.webPartData.title
                : (manifest.title && manifest.title.default 
                    ? manifest.title.default 
                    : manifest.preconfiguredEntries[0].title.default);
            _this._statusRenderer.displayLoadingIndicator(domElement, title);
            var modulePromise = sp_loader_1.SPComponentLoader.loadComponent(manifest);
            if (!modulePromise) {
                var error = SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.LoaderNotFound, webPartTag);
                _this.renderError(domElement, error);
                reject();
                return;
            }
            modulePromise.then(function (moduleLibrary) {
                sp_telemetry_1._PerformanceLogger.markComponentModuleLoaded(webPartTag);
                sp_telemetry_1._TraceLogger.logVerboseData({
                    source: _this._logSource,
                    message: sp_core_library_1.Text.format(Strings_resx_1.default.ModulesLoadedForWebPart, webPartTag),
                    serviceScope: _this._host.serviceScope
                });
                if (!moduleLibrary) {
                    throw SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.ModuleUndefined, webPartTag);
                }
                try {
                    var wpi = _this._instantiateWebPart(moduleLibrary, webPartTag);
                    wpi._internalInitialize(_this._getWebPartContext(context));
                    if (!_this._instanceOfBase(wpi)) {
                        throw SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.NonBaseWebPart, webPartTag);
                    }
                    _this._webparts.set(instanceId, wpi);
                    _this._startDirtyBitTimer(context.displayMode);
                    var webPartData = lodash.cloneDeep(context.webPartData);
                    loadThemedStyles.flush();
                    var webpartFirstRenderPromise = wpi._internalFirstTimeRender(context.addedFromPersistedData, context.displayMode, qosMonitor, webPartData).then(function () {
                        _this._onFirstTimeWebpartRender(manifest, webPartTag, qosMonitor);
                        resolve();
                    });
                    if ((_this.isCountInViewportAtStartKillSwitchOn || sp_core_library_1.Environment.type === sp_core_library_1.EnvironmentType.ClassicSharePoint)
                        && ViewportLoader_1.default.isInIntialViewport(wpi)) {
                        sp_telemetry_1._PerformanceLogger.addComponent(webPartTag);
                        sp_telemetry_1._TraceLogger.logVerboseData({
                            source: _this._logSource,
                            message: "Web part " + webPartTag + " is added into EUPL calculation.",
                            serviceScope: _this._host.serviceScope
                        });
                    }
                    if (sp_core_library_1.Environment.type !== sp_core_library_1.EnvironmentType.ClassicSharePoint &&
                        context.totalWebparts && context.totalWebparts === instanceRequestCount) {
                        sp_telemetry_1._TraceLogger.logVerboseData({
                            source: _this._logSource,
                            message: "All " + context.totalWebparts + " web parts requested to load, has been processed",
                            serviceScope: _this._host.serviceScope
                        });
                        _this._onAllWebpartsAdded(context);
                    }
                    else if (instanceRequestCount === 1 &&
                        sp_core_library_1.Environment.type === sp_core_library_1.EnvironmentType.ClassicSharePoint &&
                        !_this._host.isViewportLoadingDisabled) {
                        _this._onAllWebpartsAdded(context);
                    }
                    return webpartFirstRenderPromise;
                }
                catch (ex) {
                    _this._handleErrorLoadingWebpart(manifest, instanceId, domElement, ex, qosMonitor);
                    reject();
                } 
            }).catch(
            function (err) {
                _this._handleModulePromiseRejection(manifest, instanceId, domElement, webPartTag, err, qosMonitor);
                reject();
            });
        });
    };
    ClientSideWebPartManager.prototype.setPropertyPaneControl = function (id, control) {
        sp_core_library_1.Validate.isNonemptyString(id, 'id');
        sp_core_library_1.Validate.isNotNullOrUndefined(control, 'control');
        this._webparts.set(id, control);
    };
    ClientSideWebPartManager.prototype.fetchWebPartManifests = function () {
        var _this = this;
        if (!this._toolboxManifestsPromise) {
            var qosMonitor_1 = new sp_telemetry_1._QosMonitor('ClientSideWebPartManager.FetchWebParts');
            this._toolboxManifestsPromise = new Promise(function (resolve, reject) {
                if (_this._pageContext.web &&
                    _this._pageContext.web.serverRelativeUrl &&
                    sp_core_library_1.Environment.type !== sp_core_library_1.EnvironmentType.Local &&
                    sp_core_library_1.Environment.type !== sp_core_library_1.EnvironmentType.Test) {
                    var requestUrl_1 = sp_core_library_1.UrlUtilities.removeEndSlash(_this._pageContext.web.serverRelativeUrl) + "/_api/web/GetClientSideWebParts";
                    _this._host.serviceScope.whenFinished(function () {
                        var httpClient = _this._host.serviceScope.consume(sp_http_1.SPHttpClient.serviceKey);
                        httpClient.get(requestUrl_1, sp_http_1.SPHttpClient.configurations.v1)
                            .then(function (response) {
                            return response.json();
                        })
                            .then(function (value) {
                            var manifests = value.value.map(function (manifestObject) { return JSON.parse(manifestObject.Manifest); });
                            _this._disambiguateWebPartManifestLocales(manifests);
                            sp_loader_1.SPComponentLoader.registerManifests(manifests);
                            sp_telemetry_1._TraceLogger.logVerboseData({
                                source: _this._logSource,
                                message: Strings_resx_1.default.CompletedLoadingWebPartManifests,
                                serviceScope: _this._host.serviceScope
                            });
                            qosMonitor_1.writeSuccess();
                            resolve();
                        })
                            .catch(function (error) {
                            _this._toolboxManifestsPromise = undefined;
                            sp_telemetry_1._TraceLogger.logErrorData({
                                source: _this._logSource,
                                error: error,
                                serviceScope: _this._host.serviceScope
                            });
                            qosMonitor_1.writeUnexpectedFailure('Rejected', error);
                            reject(error);
                        });
                    });
                }
                else {
                    resolve();
                }
            });
        }
        return this._toolboxManifestsPromise;
    };
    ClientSideWebPartManager.prototype.getWebPartManifests = function () {
        var manifests = sp_loader_1.SPComponentLoader.getManifests();
        var result = []; 
        if (manifests) {
            for (var _i = 0, manifests_1 = manifests; _i < manifests_1.length; _i++) {
                var manifest = manifests_1[_i];
                if (manifest && manifest.componentType === 'WebPart') {
                    result.push(manifest); 
                }
            }
        }
        return result;
    };
    ClientSideWebPartManager.prototype.setDisplayMode = function (displayMode, instanceId) {
        this._executeForIdsOrAll(this._getArrayOrUndefined(instanceId), function (wp) {
            wp._internalSetDisplayMode(displayMode);
        });
        this._startDirtyBitTimer(displayMode);
    };
    ClientSideWebPartManager.prototype.serialize = function (instanceId) {
        var sd = new Map();
        this._executeForIdsOrAll(this._getArrayOrUndefined(instanceId), function (wp, _instanceId) {
            sd.set(_instanceId, wp._internalSerialize());
        });
        return sd;
    };
    ClientSideWebPartManager.prototype.setWebPartData = function (webPartData, instanceId) {
        sp_core_library_1.Validate.isNotNullOrUndefined(webPartData, 'web part data');
        sp_core_library_1.Validate.isNonemptyString(instanceId, 'web part instance id');
        var wp = this._webparts.get(instanceId);
        if (wp) {
            wp._internalSetWebPartData(webPartData);
        }
    };
    ClientSideWebPartManager.prototype.dispose = function () {
        this.disposeWebparts();
        var currentIdx = ClientSideWebPartManager._webPartManagerList.indexOf(this);
        if (currentIdx >= 0) {
            ClientSideWebPartManager._webPartManagerList.splice(currentIdx, 1);
        }
    };
    ClientSideWebPartManager.prototype.disposeWebparts = function (instanceId) {
        var _this = this;
        this._executeForIdsOrAll(this._getArrayOrUndefined(instanceId), function (wp, _instanceId) {
            ExecuteWithoutFailing_1.executeWithoutFailing(function () { wp._internalDispose(); }, _this._logSource);
            _this._deleteWebPart(_instanceId);
        });
    };
    ClientSideWebPartManager.prototype.tryGeneratePreviewImageUrl = function (instanceIds) {
        var _this = this;
        var previewImageUrl = undefined;
        var previewFromAlias = undefined;
        this._executeForIdsOrAll(instanceIds, function (wp, id) {
            if (!previewImageUrl) {
                var webParthThumbnail = wp.previewImageUrl;
                if (webParthThumbnail) {
                    previewFromAlias = wp.context.manifest.alias;
                    if (webParthThumbnail.length < THUMBNAIL_MAX_URL_LENGTH) {
                        previewImageUrl = wp.previewImageUrl;
                    }
                    else {
                        sp_telemetry_1._TraceLogger.logVerboseData({
                            source: _this._logSource,
                            eventName: 'tryGeneratePreviewImageUrl',
                            message: previewFromAlias + " attempted preview URL of " + wp.previewImageUrl.length + " chars."
                        });
                    }
                }
            }
        });
        if (!previewImageUrl && previewFromAlias) {
            var pathLengthError = new Error('tryGeneratePreviewImageUrl PathLengthError.');
            sp_telemetry_1._TraceLogger.logError(this._logSource, pathLengthError);
            throw pathLengthError;
        }
        return previewImageUrl;
    };
    ClientSideWebPartManager.prototype.setPropertyPaneState = function (instanceId, propertyPaneState, renderedByWebPart) {
        if (propertyPaneState === void 0) { propertyPaneState = PropertyPaneDefinitions_1.PropertyPaneState.Default; }
        if (!ClientSideWebPartManager._propertyPaneController) {
            ClientSideWebPartManager._propertyPaneController =
                new PropertyPaneController_1.default(function (wpId) {
                    var wp = undefined;
                    for (var i = 0; i < ClientSideWebPartManager._webPartManagerList.length; i++) {
                        wp = ClientSideWebPartManager._webPartManagerList[i]._webparts.get(wpId);
                        if (wp) {
                            break;
                        }
                    }
                    return wp;
                }, this._onWebPartConfigurationChange);
        }
        ClientSideWebPartManager._propertyPaneController.setPropertyPaneState(instanceId, propertyPaneState, renderedByWebPart);
    };
    ClientSideWebPartManager.prototype.isPropertyPaneRenderedByWebPart = function () {
        return ClientSideWebPartManager._propertyPaneController.isRenderedByWebPart();
    };
    ClientSideWebPartManager.prototype.isPropertyPaneOpen = function () {
        if (ClientSideWebPartManager._propertyPaneController) {
            return ClientSideWebPartManager._propertyPaneController.isPropertyPaneOpen();
        }
        return false;
    };
    ClientSideWebPartManager.prototype.onWebPartDelete = function (instanceId) {
        this.disposeWebparts(instanceId);
    };
    ClientSideWebPartManager.prototype.renderError = function (domElement, error) {
        var _this = this;
        ExecuteWithoutFailing_1.executeWithoutFailing(function () {
            _this._statusRenderer.renderError(domElement, error);
            sp_telemetry_1._TraceLogger.logErrorData({
                source: _this._logSource,
                error: error,
                serviceScope: _this._host.serviceScope
            });
        }, this._logSource);
    };
    ClientSideWebPartManager.prototype.notifyWebPartContainerResize = function (instanceId) {
        this._executeForIdsOrAll(this._getArrayOrUndefined(instanceId), function (wp, _instanceId) {
            wp._internalOnAfterResize();
        });
    };
    ClientSideWebPartManager.prototype._getWebPartContext = function (context) {
        var webPartTag = this._createWebPartTag(context.manifest, context.instanceId);
        var parameters = {
            parentServiceScope: this._host.serviceScope,
            manifest: this._getManifestInstance(context),
            instanceId: context.instanceId,
            webPartTag: webPartTag,
            domElement: context.domElement,
            statusRenderer: this._statusRenderer,
            eventAggregator: this._eventAggregator,
            isPropertyPaneRenderedByWebPart: this.isPropertyPaneRenderedByWebPart,
            isPropertyPaneOpen: this.isPropertyPaneOpen,
            host: this._host,
            setPropertyPaneState: this.setPropertyPaneState,
            loggingTag: webPartTag
        };
        var webPartContext = new WebPartContext_1.default(parameters);
        return webPartContext;
    };
    ClientSideWebPartManager.prototype._disambiguateWebPartManifestLocales = function (manifests) {
        var currentLocale = this._pageContext.cultureInfo.currentUICultureName
            ? this._pageContext.cultureInfo.currentUICultureName.toLowerCase()
            : undefined;
        if (currentLocale) {
            var disambiguateLocale_1 = function (values) {
                var foundMatch = undefined;
                for (var locale in values) {
                    if (locale && locale.toLowerCase() === currentLocale && values[locale]) {
                        foundMatch = values[locale];
                        break;
                    }
                }
                return {
                    default: foundMatch || values.default
                };
            };
            manifests.forEach(function (manifest) {
                if (manifest.componentType === 'WebPart') {
                    var wpManifest = manifest;
                    wpManifest.preconfiguredEntries.forEach(function (entry) {
                        entry.title = disambiguateLocale_1(entry.title);
                        entry.description = disambiguateLocale_1(entry.description);
                        if (entry.group) {
                            entry.group = disambiguateLocale_1(entry.group);
                        }
                    });
                }
            });
        }
    };
    ClientSideWebPartManager.prototype._validateInput = function (context) {
        sp_core_library_1.Validate.isNotNullOrUndefined(context, 'web part manager context');
        sp_core_library_1.Validate.isNotNullOrUndefined(context.domElement, 'web part element');
        sp_core_library_1.Validate.isNotNullOrUndefined(context.instanceId, 'web part instanceId');
        sp_core_library_1.Validate.isNotNullOrUndefined(context.manifest, 'web part manifest');
        sp_core_library_1.Validate.isTrue(!this._webparts.get(context.instanceId), 'Duplicate web part id not allowed');
    };
    ClientSideWebPartManager.prototype._validateManifest = function (manifest,  mode, webPartTag) {
        if (!manifest) {
            if (mode === sp_core_library_1.DisplayMode.Read) {
                throw SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.ManifestNull, webPartTag);
            }
            else {
                return false;
            }
        }
        var cm = lodash.cloneDeep(manifest);
        sp_core_library_1.Validate.isTrue(cm.manifestVersion == 2, 'Only version 2 manifests are currently supported');
        sp_core_library_1.Validate.isTrue(!!cm.id, 'web part id cannot be null or undefined');
        sp_core_library_1.Validate.isNotNullOrUndefined(sp_core_library_1.Guid.tryParse(cm.id), 'web part id has to be a GUID');
        sp_core_library_1.Validate.isTrue(!!cm.version, 'webp art version cannot be null or undefined');
        return true;
    };
    ClientSideWebPartManager.prototype._executeForIdsOrAll = function (instanceIds, cb) {
        var _this = this;
        if (instanceIds) {
            instanceIds.forEach(function (id) {
                var wp = _this._webparts.get(id);
                if (wp) {
                    cb(wp, id);
                }
            });
        }
        else {
            this._webparts.forEach(function (wp, id) {
                if (_this._instanceOfBase(wp)) {
                    cb(wp, id);
                }
            });
        }
    };
    ClientSideWebPartManager.prototype._instanceOfBase = function (wpi) {
        return wpi && (wpi instanceof BaseClientSideWebPart_1.default || wpi['__type'] === 'BaseClientSideWebPart');
    };
    ClientSideWebPartManager.prototype._getLoadedModuleList = function (moduleLibrary) {
        var loadedModulesString = '';
        for (var m in moduleLibrary) {
            if (moduleLibrary.hasOwnProperty(m)) {
                if (loadedModulesString) {
                    loadedModulesString += ',';
                }
                loadedModulesString += "" + m;
            }
        }
        return loadedModulesString;
    };
    ClientSideWebPartManager.prototype._startDirtyBitTimer = function (mode) {
        var _this = this;
        if (mode === sp_core_library_1.DisplayMode.Read) {
            if (this._dirtyBitTimer && sp_core_library_1.Environment.type !== sp_core_library_1.EnvironmentType.ClassicSharePoint) {
                window.clearInterval(this._dirtyBitTimer);
                this._dirtyBitTimer = undefined;
            }
        }
        else if (!this._dirtyBitTimer) {
            this._dirtyBitTimer = window.setInterval(function () {
                _this._executeForIdsOrAll(undefined, function (wp) {
                    wp._internalSetDirtyBit();
                });
            }, 1000);
        }
    };
    ClientSideWebPartManager.prototype._createSuccessExtraData = function (alias, isInternal, manifestId) {
        var successExtraData = {
            alias: alias,
            isInternal: isInternal,
            manifestId: manifestId
        };
        return successExtraData;
    };
    ClientSideWebPartManager.prototype._createUnexpectedFailureExtraData = function (alias, instanceId, isInternal, manifestId) {
        var unexpectedFailureExtraData = {
            alias: alias,
            instanceId: instanceId,
            isInternal: isInternal,
            manifestId: manifestId
        };
        return unexpectedFailureExtraData;
    };
    ClientSideWebPartManager.prototype._createLoadQosMonitor = function (manifest) {
        return new sp_telemetry_1._QosMonitor("WebPart.Load");
    };
    ClientSideWebPartManager.prototype._createWebPartTag = function (manifest, instanceId) {
        return "WebPart." + manifest.alias + "." + instanceId;
    };
    ClientSideWebPartManager.prototype._deleteWebPart = function (id) {
        sp_core_library_1.Validate.isNotNullOrUndefined(id, 'id');
        if (ClientSideWebPartManager._propertyPaneController) {
            ClientSideWebPartManager._propertyPaneController.onWebPartDelete(id);
        }
        var wpi = this._webparts.get(id);
        if (this._instanceOfBase(wpi)) {
            sp_telemetry_1._TraceLogger.logVerboseData({
                source: this._logSource,
                message: sp_core_library_1.Text.format(Strings_resx_1.default.WebpartDeleteRequested, wpi.context.webPartTag),
                serviceScope: this._host.serviceScope
            });
            this._loadWebPartRequests--;
            if (this._loadWebPartRequests < 0) {
                sp_telemetry_1._TraceLogger.logErrorData({
                    source: this._logSource,
                    error: new Error(Strings_resx_1.default.UnexpectedLoadRequestNegativeCount),
                    serviceScope: this._host.serviceScope
                });
            }
        }
        this._webparts.delete(id);
    };
    ClientSideWebPartManager.prototype._getManifestInstance = function (context) {
        var manifest = context.manifest;
        var manifestClone = lodash.cloneDeep(manifest);
        delete manifestClone.preconfiguredEntries;
        return manifestClone;
    };
    ClientSideWebPartManager.prototype._getArrayOrUndefined = function (instanceId) {
        return instanceId ? [instanceId] : undefined;
    };
    ClientSideWebPartManager.prototype._initialzeOnResizeEventHandler = function () {
        window.addEventListener('resize', lodash.debounce(this._onContainerResize, 1000));
        window.addEventListener('message', this._onPropertyPaneToggled);
    };
    ClientSideWebPartManager.prototype._onContainerResize = function () {
        ClientSideWebPartManager._webPartManagerList.forEach(function (wpm) {
            wpm._webparts.forEach(function (wp) { wp._internalOnAfterResize(); });
        });
    };
    ClientSideWebPartManager.prototype._onPropertyPaneToggled = function (event) {
        if (event && event.origin === window.location.origin && event.data === 'Property pane toggled') {
            this._onContainerResize();
        }
    };
    ClientSideWebPartManager.prototype._onWebPartConfigurationChange = function (event, data) {
        ClientSideWebPartManager._webPartManagerList.forEach(function (wpm) {
            if (wpm._host.webPartConfigurationEventCallback &&
                (ClientSideWebPartManager._propertyPaneController.currentlyConfiguredWebPartId &&
                    wpm._webparts.get(ClientSideWebPartManager._propertyPaneController.currentlyConfiguredWebPartId) ||
                    event === PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneWebPartsSwitched)) {
                wpm._host.webPartConfigurationEventCallback(event, data);
            }
        });
    };
    ClientSideWebPartManager.prototype._onAllWebpartsAdded = function (context) {
        var _this = this;
        var endTime = this._getViewportRenderedEndTime();
        if (endTime) {
            if (!this.isCountInViewportAtStartKillSwitchOn && sp_core_library_1.Environment.type !== sp_core_library_1.EnvironmentType.ClassicSharePoint) {
                this._registerWebpartsInViewport();
                sp_telemetry_1._TraceLogger.logVerboseData({
                    source: this._logSource,
                    message: 'All Web parts in the viewports are rendered at ' + endTime,
                    serviceScope: this._host.serviceScope
                });
            }
            if (context.onViewportWebPartsRendered) {
                context.onViewportWebPartsRendered(endTime);
            }
            if (context.totalWebparts || sp_core_library_1.Environment.type === sp_core_library_1.EnvironmentType.ClassicSharePoint) {
                ViewportLoader_1.default.instance.loadOutsideViewPort();
                if (sp_core_library_1._SPFlight.isEnabled(WEBPARTSCROLLANIMATIONS_FLIGHT)) {
                    _Animations_1.default.instance.init();
                }
            }
        }
        else {
            window.setTimeout(function () { _this._onAllWebpartsAdded(context); }, 100);
        }
    };
    ClientSideWebPartManager.prototype._getViewportRenderedEndTime = function () {
        var _this = this;
        var isAllInViewportRendered = true;
        var endTime = undefined;
        var noWebPartInInitialViewport = true;
        this._webparts.forEach(function (wpi) {
            if (_this._instanceOfBase(wpi) && ViewportLoader_1.default.isInIntialViewport(wpi)) {
                noWebPartInInitialViewport = false;
                isAllInViewportRendered = isAllInViewportRendered ? wpi._renderedOnce : isAllInViewportRendered;
                if (isAllInViewportRendered) {
                    var curEndTime = sp_telemetry_1._PerformanceLogger.getComponentEndTime(wpi.context.webPartTag);
                    if (curEndTime && (!endTime || curEndTime > endTime)) {
                        endTime = curEndTime;
                    }
                }
            }
        });
        if (noWebPartInInitialViewport) {
            return sp_telemetry_1._PerformanceLogger.now();
        }
        else {
            return isAllInViewportRendered ? endTime : undefined;
        }
    };
    ClientSideWebPartManager.prototype._registerWebpartsInViewport = function () {
        var _this = this;
        this._webparts.forEach(function (wpi) {
            if (_this._instanceOfBase(wpi)) {
                if (ViewportLoader_1.default.isInIntialViewport(wpi)) {
                    sp_telemetry_1._PageMetricsLogger.recordMetric(WebPartMetrics_1.default.webPartsCountedInViewport);
                    sp_telemetry_1._PerformanceLogger.addComponent(wpi.context.webPartTag);
                    sp_telemetry_1._TraceLogger.logVerboseData({
                        source: _this._logSource,
                        message: "Web part " + wpi.context.webPartTag + " is added into EUPL calculation.",
                        serviceScope: _this._host.serviceScope
                    });
                }
                else if (wpi._internalIsInViewport) {
                    sp_telemetry_1._PageMetricsLogger.recordMetric(WebPartMetrics_1.default.webPartsLoadedNotInViewport);
                }
            }
        });
    };
    ClientSideWebPartManager.prototype._instantiateWebPart = function (moduleLibrary, webPartTag) {
        var wp = moduleLibrary; 
        if (wp && wp.default) {
            wp = wp.default;
        }
        if (!wp) {
            throw SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.ModuleNotLoaded, webPartTag, this._getLoadedModuleList(moduleLibrary));
        }
        if (typeof (wp) !== 'function' && wp.default) {
            wp = wp.default;
        }
        if (typeof (wp) !== 'function') {
            throw SPWebPartError_1.SPWebPartError.createWithLogProperties(SPWebPartError_1.SPWebPartErrorCode.IncorrectBoostrapModule, { actualType: typeof (wp), wp: wp }, webPartTag);
        }
        var typedWebPartClass = wp;
        var wpi = new typedWebPartClass();
        if (!wpi._internalInitialize) {
            throw SPWebPartError_1.SPWebPartError.createWithLogProperties(SPWebPartError_1.SPWebPartErrorCode.MissingExpectedWebPartMemberError, { actualType: typeof (wp), wp: wp }, webPartTag, '_internalInitialize');
        }
        return wpi;
    };
    ClientSideWebPartManager.prototype._handleErrorLoadingWebpart = function (manifest,  instanceId, domElement, ex, qosMonitor) {
        var _this = this;
        var wpi = this._webparts.get(instanceId);
        if (wpi) {
            ExecuteWithoutFailing_1.executeWithoutFailing(function () { _this._statusRenderer.clearLoadingIndicator(domElement); }, this._logSource);
            ExecuteWithoutFailing_1.executeWithoutFailing(function () { wpi._internalDispose(); }, this._logSource);
            ExecuteWithoutFailing_1.executeWithoutFailing(function () { _this._webparts.delete(instanceId); }, this._logSource);
        }
        ExecuteWithoutFailing_1.executeWithoutFailing(function () {
            var extraData = _this._createUnexpectedFailureExtraData(manifest.alias, instanceId, manifest.isInternal, manifest.id);
            qosMonitor.writeUnexpectedFailure('UnhandledLoadError', ex, extraData);
        }, this._logSource);
        this.renderError(domElement, ex);
    };
    ClientSideWebPartManager.prototype._handleModulePromiseRejection = function (manifest,  instanceId, domElement, webPartTag, error, qosMonitor) {
        var _this = this;
        ExecuteWithoutFailing_1.executeWithoutFailing(function () {
            var extraData = _this._createUnexpectedFailureExtraData(manifest.alias, instanceId, manifest.isInternal, manifest.id);
            qosMonitor.writeUnexpectedFailure('ScriptLoad', error, extraData);
        }, this._logSource);
        this.renderError(domElement, error);
    };
    ClientSideWebPartManager.prototype._onFirstTimeWebpartRender = function (manifest,  webPartTag, qosMonitor) {
        var extraData = this._createSuccessExtraData(manifest.alias, manifest.isInternal, manifest.id);
        qosMonitor.writeSuccess(extraData);
        ClassicPageUtils_1.default.removeFabricLinks();
        sp_telemetry_1._TraceLogger.logVerboseData({
            source: this._logSource,
            message: sp_core_library_1.Text.format(Strings_resx_1.default.ModulesLoadedForWebPart, webPartTag),
            serviceScope: this._host.serviceScope
        });
    };
    Object.defineProperty(ClientSideWebPartManager.prototype, "isCountInViewportAtStartKillSwitchOn", {
        get: function () {
            if (this._killSwitchCountInViewportAtStart === undefined) {
                this._killSwitchCountInViewportAtStart =
                    sp_core_library_1._SPKillSwitch.isActivated(sp_core_library_1.Guid.tryParse('5b7e10fc-9e1f-46ae-b9f7-a4925c48b72a'), '6/20/2017', 'Add Web part in EUPL calculation at start');
            }
            return this._killSwitchCountInViewportAtStart;
        },
        enumerable: true,
        configurable: true
    });
    ClientSideWebPartManager._webPartManagerList = [];
    return ClientSideWebPartManager;
}());
exports.default = ClientSideWebPartManager;
