'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var decorators_1 = require("@microsoft/decorators");
var lodash = require("@microsoft/sp-lodash-subset");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var ISerializedServerProcessedData_1 = require("./ISerializedServerProcessedData");
var SPWebPartError_1 = require("./error/SPWebPartError");
var WebPartDataConverter = (function () {
    function WebPartDataConverter() {
    }
    WebPartDataConverter_1 = WebPartDataConverter;
    Object.defineProperty(WebPartDataConverter, "_parsingDocument", {
        get: function () {
            if (!this._tempDoc) {
                this._tempDoc = document.implementation.createHTMLDocument('tempDocument');
            }
            return this._tempDoc;
        },
        enumerable: true,
        configurable: true
    });
    WebPartDataConverter.isWebPartHtml = function (htmlString) {
        sp_core_library_1.Validate.isNonemptyString(htmlString, 'htmlString');
        return htmlString.indexOf('<div') === 0 && htmlString.indexOf(WebPartDataConverter_1._webPartDataAttribute) !== -1;
    };
    WebPartDataConverter.convertWebPartDataToHtml = function (webpartData) {
        sp_core_library_1.Validate.isNotNullOrUndefined(webpartData, 'web part data');
        var wpdata = lodash.cloneDeep(webpartData);
        WebPartDataConverter_1._initializeIfNeeded();
        var componentIdDiv = WebPartDataConverter_1._wpComponentIdDiv.cloneNode();
        componentIdDiv.textContent = wpdata.id;
        var htmlPropsDiv = WebPartDataConverter_1._wpHtmlPropsDiv.cloneNode();
        htmlPropsDiv.innerHTML = WebPartDataConverter_1.convertServerProcessedDataToHtml(wpdata.serverProcessedContent);
        wpdata.serverProcessedContent = undefined;
        var wpHtmlDiv = WebPartDataConverter_1._wpDiv.cloneNode();
        wpHtmlDiv.setAttribute(WebPartDataConverter_1._webPartDataAttribute, JSON.stringify(wpdata));
        wpHtmlDiv.appendChild(componentIdDiv);
        wpHtmlDiv.appendChild(htmlPropsDiv);
        var wrapper = WebPartDataConverter_1._parsingDocument.createElement('div');
        wrapper.appendChild(wpHtmlDiv);
        return wrapper.innerHTML;
    };
    WebPartDataConverter.convertHtmlToWebPartData = function (htmlString, links) {
        var wpdata;
        var wrapper = WebPartDataConverter_1._parsingDocument.createElement('div');
        wrapper.innerHTML = htmlString.trim();
        var wpHtmlDiv = wrapper.children[0];
        if (wpHtmlDiv && wpHtmlDiv.hasAttribute(WebPartDataConverter_1._webPartAttribute)) {
            var wpHtmlDivWebPartAttributeData = wpHtmlDiv.getAttribute(WebPartDataConverter_1._webPartDataAttribute);
            if (wpHtmlDivWebPartAttributeData) {
                wpdata = JSON.parse(wpHtmlDivWebPartAttributeData);
            }
            if (wpdata) {
                var htmlPropsDiv = wpHtmlDiv.querySelector("[" + WebPartDataConverter_1._htmlPropertiesAttribute + "]");
                wpdata.serverProcessedContent =
                    WebPartDataConverter_1.convertServerProcessedHtmlToData(htmlPropsDiv.innerHTML, links);
            }
        }
        return wpdata || undefined;
    };
    WebPartDataConverter.convertServerProcessedDataToHtml = function (serverContent) {
        var result = '';
        if (serverContent) {
            if (serverContent.htmlStrings) {
                result += WebPartDataConverter_1._convertServerProcessedDataToHtmlByType(serverContent.htmlStrings, ISerializedServerProcessedData_1.ServerProcessedDataType.htmlString);
            }
            if (serverContent.searchablePlainTexts) {
                result += WebPartDataConverter_1._convertServerProcessedDataToHtmlByType(serverContent.searchablePlainTexts, ISerializedServerProcessedData_1.ServerProcessedDataType.searchablePlainText);
            }
            if (serverContent.links) {
                result += WebPartDataConverter_1._convertServerProcessedDataToHtmlByType(serverContent.links, ISerializedServerProcessedData_1.ServerProcessedDataType.link);
            }
            if (serverContent.imageSources) {
                result += WebPartDataConverter_1._convertServerProcessedDataToHtmlByType(serverContent.imageSources, ISerializedServerProcessedData_1.ServerProcessedDataType.imageSource);
            }
        }
        return result;
    };
    WebPartDataConverter._convertServerProcessedDataToHtmlByType = function (properties, type) {
        var result = '';
        for (var propPath in properties) {
            var value = properties[propPath];
            result += WebPartDataConverter_1._getHtmlString(propPath, type, value);
        }
        return result;
    };
    WebPartDataConverter.convertServerProcessedHtmlToData = function (htmlString, links) {
        var serverContent = {
            htmlStrings: {},
            searchablePlainTexts: {},
            links: {},
            imageSources: {}
        };
        if (!htmlString || htmlString === '') {
            return serverContent;
        }
        var tempNode = WebPartDataConverter_1._parsingDocument.createElement('DIV');
        tempNode.innerHTML = htmlString;
        var nodes = tempNode.children;
        for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            var key = node.getAttribute(WebPartDataConverter_1._propNameAttribute);
            if (key) {
                switch (node.tagName) {
                    case 'DIV':
                        if (node.hasAttribute(WebPartDataConverter_1._searchablePlainTextAttribute) &&
                            serverContent.searchablePlainTexts) {
                            serverContent.searchablePlainTexts[key] = node.innerText;
                        }
                        else if (serverContent.htmlStrings) {
                            serverContent.htmlStrings[key] = node.innerHTML;
                        }
                        break;
                    case 'LINK':
                    case 'A':
                        if (links) {
                            WebPartDataConverter_1._extractSPLink(node, links, serverContent, key, false);
                        }
                        else {
                            var aTagAttribute = node.getAttribute('href');
                            if (aTagAttribute && serverContent.links) {
                                serverContent.links[key] = aTagAttribute;
                            }
                        }
                        break;
                    case 'IMG':
                    case 'SPIMG':
                        if (links) {
                            WebPartDataConverter_1._extractSPLink(node, links, serverContent, key, true);
                        }
                        else {
                            var srcAttribute = node.getAttribute('src');
                            if (serverContent.imageSources && srcAttribute) {
                                serverContent.imageSources[key] = srcAttribute;
                            }
                            var hrefAttribute = node.getAttribute('href');
                            if (hrefAttribute && serverContent && serverContent.imageSources &&
                                (serverContent.imageSources[key] === undefined || serverContent.imageSources[key] === null)) {
                                serverContent.imageSources[key] = hrefAttribute;
                            }
                        }
                        break;
                }
            }
        }
        return serverContent;
    };
    WebPartDataConverter._getHtmlString = function (propName, propType, propValue) {
        var htmlPropsString = '';
        if (propName && typeof propValue === 'string' && propValue) {
            switch (propType) {
                case ISerializedServerProcessedData_1.ServerProcessedDataType.htmlString:
                    var htmlDiv = this._parsingDocument.createElement('DIV');
                    htmlDiv.setAttribute(WebPartDataConverter_1._propNameAttribute, propName);
                    var sanitizedValue = WebPartDataConverter_1._normalizeHTML(propValue);
                    htmlDiv.innerHTML = sanitizedValue;
                    htmlPropsString = htmlDiv.outerHTML;
                    break;
                case ISerializedServerProcessedData_1.ServerProcessedDataType.searchablePlainText:
                    var plainTextDiv = this._parsingDocument.createElement('DIV');
                    plainTextDiv.setAttribute(WebPartDataConverter_1._propNameAttribute, propName);
                    plainTextDiv.setAttribute(WebPartDataConverter_1._searchablePlainTextAttribute, 'true');
                    plainTextDiv.innerText = propValue;
                    htmlPropsString = plainTextDiv.outerHTML;
                    break;
                case ISerializedServerProcessedData_1.ServerProcessedDataType.link:
                    var anchorDiv = this._parsingDocument.createElement('A');
                    anchorDiv.setAttribute(WebPartDataConverter_1._propNameAttribute, propName);
                    anchorDiv.setAttribute('href', propValue);
                    htmlPropsString = anchorDiv.outerHTML;
                    break;
                case ISerializedServerProcessedData_1.ServerProcessedDataType.imageSource:
                    var imgDiv = this._parsingDocument.createElement('IMG');
                    imgDiv.setAttribute(WebPartDataConverter_1._propNameAttribute, propName);
                    imgDiv.setAttribute('src', propValue);
                    htmlPropsString = imgDiv.outerHTML;
                    break;
            }
        }
        return htmlPropsString;
    };
    WebPartDataConverter._normalizeHTML = function (htmlString) {
        if (!htmlString || htmlString === '') {
            return htmlString;
        }
        var tempDiv = WebPartDataConverter_1._parsingDocument.createElement('DIV');
        tempDiv.innerHTML =
            "<div class='child1'></div>" +
                ("<div class='main'>" + htmlString + "</div>") +
                "<div class='child3'></div>";
        var children = tempDiv.children;
        if (!children[0] || children[0].className !== 'child1' ||
            !children[1] || children[1].className !== 'main' ||
            !children[2] || children[2].className !== 'child3') {
            return '';
        }
        var mainDiv = children[1];
        var scriptTags = mainDiv.querySelectorAll('script');
        for (var i = 0; i < scriptTags.length; i++) {
            var scriptTag = scriptTags[0];
            if (scriptTag && scriptTag.parentElement) {
                scriptTag.parentElement.removeChild(scriptTag);
            }
        }
        return mainDiv.innerHTML;
    };
    WebPartDataConverter._initializeIfNeeded = function () {
        if (!WebPartDataConverter_1._wpDiv) {
            WebPartDataConverter_1._wpDiv = WebPartDataConverter_1._parsingDocument.createElement('div');
            WebPartDataConverter_1._wpDiv.setAttribute(WebPartDataConverter_1._webPartAttribute, '');
            WebPartDataConverter_1._wpDiv.setAttribute(WebPartDataConverter_1._webPartDataVersionAttribute, '1.0');
            WebPartDataConverter_1._wpComponentIdDiv = WebPartDataConverter_1._parsingDocument.createElement('div');
            WebPartDataConverter_1._wpComponentIdDiv.setAttribute(WebPartDataConverter_1._componentIdAttribute, '');
            WebPartDataConverter_1._wpHtmlPropsDiv = WebPartDataConverter_1._parsingDocument.createElement('div');
            WebPartDataConverter_1._wpHtmlPropsDiv.setAttribute(WebPartDataConverter_1._htmlPropertiesAttribute, '');
        }
    };
    WebPartDataConverter._extractSPLink = function (node, links, serverContent, key, isImage) {
        if (links.length <= 0) {
            return;
        }
        var spLinkAttribute = node.getAttribute('data-sp-splink');
        if (spLinkAttribute) {
            var result = WebPartDataConverter_1._linkPlaceHolderRegex.exec(spLinkAttribute);
            if (result) {
                var index = parseInt(result[1], 10);
                if (!isNaN(index) && !!links[index]) {
                    if (isImage && serverContent.imageSources) {
                        serverContent.imageSources[key] = links[index];
                    }
                    else if (serverContent.links) {
                        serverContent.links[key] = links[index];
                    }
                }
                else {
                    throw SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.InvalidSPLinkIndex, result[1]);
                }
            }
            else {
                throw SPWebPartError_1.SPWebPartError.create(SPWebPartError_1.SPWebPartErrorCode.InvalidSPLinkAttributeFormat, spLinkAttribute);
            }
        }
    };
    WebPartDataConverter._componentIdAttribute = 'data-sp-componentid';
    WebPartDataConverter._htmlPropertiesAttribute = 'data-sp-htmlproperties';
    WebPartDataConverter._propNameAttribute = 'data-sp-prop-name';
    WebPartDataConverter._searchablePlainTextAttribute = 'data-sp-searchableplaintext';
    WebPartDataConverter._webPartAttribute = 'data-sp-webpart';
    WebPartDataConverter._webPartDataAttribute = 'data-sp-webpartdata';
    WebPartDataConverter._webPartDataVersionAttribute = 'data-sp-webpartdataversion';
    WebPartDataConverter._linkPlaceHolderRegex = /^__SPLINK__(\d+)__$/;
    WebPartDataConverter = WebPartDataConverter_1 = __decorate([
        decorators_1.sealed
    ], WebPartDataConverter);
    return WebPartDataConverter;
    var WebPartDataConverter_1;
}());
exports.WebPartDataConverter = WebPartDataConverter;
exports.default = WebPartDataConverter;
