"use strict";
var ConstDependency = require('webpack/lib/dependencies/ConstDependency');
var ResolveChunkPlugin = (function () {
    function ResolveChunkPlugin() {
    }
    ResolveChunkPlugin.prototype.apply = function (compiler) {
        compiler.plugin('compilation', function (compilation, data) {
            var chunkIdMap = new Map();
            data.normalModuleFactory.plugin('parser', function (parser) {
                parser.plugin('call resolveChunk', function (expr) {
                    if (expr.arguments.length !== 1) {
                        return;
                    }
                    var param = parser.evaluateExpression(expr.arguments[0]);
                    if (param.isString()) {
                        var chunkName_1 = param.string;
                        if (!chunkIdMap.has(chunkName_1)) {
                            chunkIdMap.set(chunkName_1, []);
                        }
                        var state = parser.state.current;
                        var addDependencyFn_1 = state.addDependency.bind(state);
                        chunkIdMap.get(chunkName_1).push(function (id) {
                            var value = id
                                ? "/*resolveChunk*/(" + id + " /* " + chunkName_1 + " */)"
                                : "/*resolveChunk*/(undefined /* Invalid chunk name \"" + chunkName_1 + "\" */)";
                            var dep = new ConstDependency(value, expr.range);
                            dep.loc = expr.loc;
                            addDependencyFn_1(dep);
                        });
                        return true;
                    }
                });
            });
            compilation.plugin('after-optimize-chunk-ids', function (chunks) {
                for (var _i = 0, chunks_1 = chunks; _i < chunks_1.length; _i++) {
                    var chunk = chunks_1[_i];
                    if (chunkIdMap.has(chunk.name)) {
                        for (var _a = 0, _b = chunkIdMap.get(chunk.name); _a < _b.length; _a++) {
                            var dependencyFn = _b[_a];
                            dependencyFn(chunk.id);
                        }
                        chunkIdMap.delete(chunk.name);
                    }
                }
                chunkIdMap.forEach(function (dependencyFns, chunkName) {
                    for (var _i = 0, dependencyFns_1 = dependencyFns; _i < dependencyFns_1.length; _i++) {
                        var dependencyFn = dependencyFns_1[_i];
                        dependencyFn(undefined);
                    }
                    console.error("Referenced chunk \"" + chunkName + "\" does not exist.");
                });
            });
        });
    };
    return ResolveChunkPlugin;
}());
module.exports = ResolveChunkPlugin;
