"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var telemetryConstants_1 = require("./../utilities/telemetryConstants");
var normalizeComponentId_1 = require("./../utilities/normalizeComponentId");
var sp_core_library_2 = require("@microsoft/sp-core-library");
var SPLoader_resx_1 = require("./../SPLoader.resx");
var ComponentStore = (function () {
    function ComponentStore() {
        this._componentMap = new Map(); 
    }
    Object.defineProperty(ComponentStore, "instance", {
        get: function () {
            if (!ComponentStore._instance) {
                ComponentStore._instance = new ComponentStore();
            }
            return ComponentStore._instance;
        },
        enumerable: true,
        configurable: true
    });
    ComponentStore.prototype.getComponent = function (id, version) {
        sp_core_library_1.Validate.isNonemptyString(id, 'id');
        sp_core_library_1.Validate.isNonemptyString(version, 'version');
        return this._componentMap.get(this._getKey(id, version));
    };
    ComponentStore.prototype.tryGetComponentById = function (id, shouldLog) {
        if (shouldLog === void 0) { shouldLog = true; }
        try {
            return this._getComponentById(id, shouldLog);
        }
        catch (e) {
            return undefined;
        }
    };
    ComponentStore.prototype.getComponentById = function (id) {
        return this._getComponentById(id, true);
    };
    ComponentStore.prototype.storeComponent = function (id, version, modulePromise) {
        sp_core_library_1.Validate.isNonemptyString(id, 'id');
        sp_core_library_1.Validate.isNonemptyString(version, 'version');
        sp_core_library_1.Validate.isNotNullOrUndefined(modulePromise, 'module');
        var key = this._getKey(id, version);
        if (!this._componentMap.has(key)) {
            this._componentMap.set(key, modulePromise);
        }
    };
    ComponentStore.prototype.deleteComponent = function (id, version) {
        var key = this._getKey(id, version);
        if (this._componentMap.has(key)) {
            sp_telemetry_1._TraceLogger.logVerbose(telemetryConstants_1.componentStoreLogSource, sp_core_library_2.Text.format(SPLoader_resx_1.default.deleteComponentLog, id, version));
            this._componentMap.delete(key);
        }
    };
    ComponentStore.prototype._getComponentById = function (id, shouldLog) {
        sp_core_library_1.Validate.isNonemptyString(id, 'id');
        var returnValue = undefined;
        this._componentMap.forEach(function (value, index) {
            if (index.indexOf(id) === 0) {
                if (!returnValue) {
                    returnValue = value;
                }
                else {
                    var error = new Error(sp_core_library_2.Text.format(SPLoader_resx_1.default.tooManyComponentsError, id));
                    if (shouldLog) {
                        sp_telemetry_1._TraceLogger.logError(telemetryConstants_1.componentStoreLogSource, error);
                    }
                    throw error;
                }
            }
        });
        if (!returnValue) {
            var error = new Error(sp_core_library_2.Text.format(SPLoader_resx_1.default.noComponentFoundError, id));
            if (shouldLog) {
                sp_telemetry_1._TraceLogger.logError(telemetryConstants_1.componentStoreLogSource, error);
            }
            throw error;
        }
        return returnValue;
    };
    ComponentStore.prototype._getKey = function (id, version) {
        return normalizeComponentId_1.default(id, version);
    };
    return ComponentStore;
}());
exports.default = ComponentStore;
