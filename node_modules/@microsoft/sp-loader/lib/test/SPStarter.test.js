"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var test_api_1 = require("@microsoft/sp-core-library/test-api");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var lodash = require("@microsoft/sp-lodash-subset");
var SPStarter_1 = require("../SPStarter");
var BrowserSupport_1 = require("../utilities/BrowserSupport");
var componentConstants = require("../utilities/componentConstants");
var ManifestStore_1 = require("../stores/ManifestStore");
describe('SPStarter tests', function () {
    describe('start()', function () {
        var applicationId = 'd1d91016-032f-456d-98a4-721247c305e8';
        var applicationManifest = {
            manifestVersion: 2,
            componentType: 'Application',
            id: applicationId,
            alias: 'MyApplication',
            version: '1.0.0',
            loaderConfig: {
                internalModuleBaseUrls: ['https://cdn.net/'],
                entryModuleId: 'main.bundle',
                scriptResources: {}
            }
        };
        var platformManifest = {
            manifestVersion: 2,
            componentType: 'Library',
            id: componentConstants.spApplicationBaseComponentId,
            alias: 'Platform',
            version: '1.0.0',
            loaderConfig: {
                internalModuleBaseUrls: ['https://cdn.net/'],
                entryModuleId: 'main.bundle',
                scriptResources: {}
            }
        };
        var fullPreloadedData = {
            clientSideApplicationId: applicationId,
            manifests: [applicationManifest, platformManifest],
            spPageContextInfo: test_api_1.TEST_UNDEFINED
        };
        it('fails if no preloaded data', function (done) {
            var promise = SPStarter_1.default.start(test_api_1.TEST_UNDEFINED);
            promise.then(function (application) {
                chai_1.assert.fail();
            }).catch(function () {
            }).then(function () {
                done();
            });
        });
        it('fails if preloaded data has no application id', function (done) {
            var preloadedData = lodash.clone(fullPreloadedData);
            preloadedData.clientSideApplicationId = test_api_1.TEST_UNDEFINED;
            var promise = SPStarter_1.default.start(preloadedData);
            promise.then(function (application) {
                chai_1.assert.fail();
            }).catch(function () {
            }).then(function () {
                done();
            });
        });
        it('fails if browser is not supported', function (done) {
            var preloadedData = lodash.clone(fullPreloadedData);
            var browserSupportMock = sinon.mock(BrowserSupport_1.default);
            browserSupportMock.expects('getBrowserCompatibility').once()
                .returns({ supportLevel: sp_core_library_1.BrowserSupportLevel.Blocked });
            var promise = SPStarter_1.default.start(preloadedData);
            promise.then(function (application) {
                chai_1.assert.fail();
            }).catch(function () {
            }).then(function () {
                browserSupportMock.verify();
                browserSupportMock.restore();
                done();
            });
        });
        it('fails if bundled components are not present', function (done) {
            var preloadedData = lodash.clone(fullPreloadedData);
            SPStarter_1.default._setBundledComponents(undefined); 
            var promise = SPStarter_1.default.start(preloadedData);
            promise.then(function (application) {
                chai_1.assert.fail();
            }).catch(function () {
            }).then(function () {
                done();
            });
        });
        afterEach(function () {
            ManifestStore_1.default._instance = undefined; 
        });
    });
    describe('getBrowserCompatibility()', function () {
        it('returns BrowserSupportLevel.None in unit tests', function () {
            var browserCompatibility = SPStarter_1.default.getBrowserCompatibility();
            chai_1.assert.equal(browserCompatibility.supportLevel, sp_core_library_1.BrowserSupportLevel.None);
        });
    });
});
