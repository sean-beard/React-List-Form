import { IPreloadedData } from './IPreloadedData';
/**
 * Application loader. Includes logic to load SPFX client-side applications.
 */
export default class SPApplicationLoader {
    /**
     * Loads an application and starts its execution through the shell.
     * Relies in SPComponentLoader to load the framework and the application components.
     *
     * @param preloadedData - Application preloaded data. Must include the application id.
     */
    static startApplication<TApplication>(applicationId: string, preloadedData: IPreloadedData): Promise<TApplication>;
    private static _startApplication<TApplication>(applicationId, preloadedData, qosMonitor);
    /**
     * Gets the manifest for the platform. This is the sp-application-base manifest.
     * It throws if the manifest is not available.
     */
    private static _getPlatformManifest(error);
    /**
     * Gets the manifest for the application, defined with applicationId.
     * It throws if the manifest is not available.
     */
    private static _getApplicationManifest(applicationId, error);
    private static _getManifest(componentId, error, failureId);
    /**
     * Loads the platform, defined by the manifest passed as input.
     * Rejects the promise if the platform can't be loaded.
     */
    private static _loadPlatform<TPlatform>(manifest, error);
    /**
     * Loads the application, defined by the manifest passed as input.
     * Rejects the promise if the application can't be loaded.
     */
    private static _loadApplication<TApplication>(manifest, error);
    /**
     * Implementation for _loadPlatform and _loadApplication.
     * It loads a component through the manifest, and rejects the promise if load fails.
     *
     * Both methods do the same, but the error message and the failure id are different.
     * It requires the error message to take 3 parameters: component id, the entry module id,
     * and the original error message.
     */
    private static _loadComponent<TComponent>(manifest, error, errorMessage, failureId);
}
