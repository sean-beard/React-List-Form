"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var sp_core_library_1 = require("@microsoft/sp-core-library");
var BaseComponentLoader_1 = require("../BaseComponentLoader");
var loadComponent_1 = require("./loadComponent");
var RequireJsLoader_1 = require("./RequireJsLoader");
var ComponentOverrider_1 = require("./ComponentOverrider");
var ErrorBuilder_1 = require("../error/ErrorBuilder");
var SPRequireJsComponentLoader = (function (_super) {
    __extends(SPRequireJsComponentLoader, _super);
    function SPRequireJsComponentLoader() {
        var _this = _super.call(this) || this;
        _this._requireJsLoader = RequireJsLoader_1.default.instance;
        return _this;
    }
    SPRequireJsComponentLoader.prototype.loadScript = function (url, options) {
        sp_core_library_1.Validate.isNonemptyString(url, 'url');
        if (typeof options === 'string') {
            throw ErrorBuilder_1.default.buildLoadScriptWithStringError();
        }
        return this._requireJsLoader.requireLoad(url).then(function (module) {
            if (options && options.globalExportsName) {
                return window[options.globalExportsName]; 
            }
            else {
                return module;
            }
        });
    };
    SPRequireJsComponentLoader.prototype.loadComponent = function (manifest) {
        return loadComponent_1.default(manifest);
    };
    SPRequireJsComponentLoader.prototype._overrideComponent = function (componentId, componentModule) {
        ComponentOverrider_1.default.overrideComponent(componentId, componentModule);
    };
    return SPRequireJsComponentLoader;
}(BaseComponentLoader_1.BaseComponentLoader));
exports.default = SPRequireJsComponentLoader;
