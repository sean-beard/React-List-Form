"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var ManifestStore_1 = require("../stores/ManifestStore");
var AddressStore_1 = require("../stores/AddressStore");
var resolveAddress_1 = require("../utilities/resolveAddress");
var normalizeName_1 = require("./normalizeName");
var telemetryConstants = require("../utilities/telemetryConstants");
var RequireJsLoader = (function () {
    function RequireJsLoader() {
        this._configuredFailoverPaths = [];
        this._duplicateModuleNames = new Map();
    }
    Object.defineProperty(RequireJsLoader, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new RequireJsLoader();
                this._instance._initialize();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    RequireJsLoader.prototype.ensure = function (name, module) {
        this._requirejs.undef(name);
        this._define(name, [], module);
    };
    RequireJsLoader.prototype.requireConfig = function (config) {
        this._requirejs.config(config);
    };
    RequireJsLoader.prototype.requireLoad = function (name) {
        var _this = this;
        if (this._duplicateModuleNames.has(name)) {
            name = this._duplicateModuleNames.get(name);
        }
        try {
            return new Promise(function (resolve, reject) {
                _this._requirejs([name], function (module) { return _this._ensureProperModuleLoaded(name, module, resolve, reject); }, function (error) { return _this._handleRequireJsError(name, error, resolve, reject); });
            });
        }
        catch (error) {
            sp_telemetry_1._TraceLogger.logError(telemetryConstants.loadComponentLogSource, error, RequireJsLoader._requireEventName);
            return Promise.reject(error);
        }
    };
    RequireJsLoader.prototype.requireDelete = function (manifest) {
        this._requirejs.undef(normalizeName_1.default(manifest));
    };
    RequireJsLoader.prototype.configure = function (manifest) {
        var resources = manifest.loaderConfig.scriptResources;
        var pathConfig = {};
        var currentMapConfig = {};
        var shimConfig = {};
        for (var name_1 in resources) {
            if (resources[name_1].type === 'component') {
                var moduleConfiguration = resources[name_1];
                var resourceManifest = ManifestStore_1.default.instance.tryGetManifest(moduleConfiguration.id, moduleConfiguration.version);
                if (resourceManifest) {
                    currentMapConfig[name_1] = normalizeName_1.default(resourceManifest);
                }
                if (moduleConfiguration.failoverPath) {
                    if (this._configuredFailoverPaths.indexOf(name_1) === -1) {
                        var normalizedName = normalizeName_1.normalizeFailoverPathName(name_1);
                        pathConfig[normalizedName] = this._resolveAddress(manifest, name_1);
                        AddressStore_1.default.instance.set(normalizedName, this._resolveAddress(manifest, name_1));
                        this._configuredFailoverPaths.push(name_1);
                    }
                }
            }
            else {
                var normalizedName = void 0;
                if (name_1 === manifest.loaderConfig.entryModuleId) {
                    normalizedName = normalizeName_1.default(manifest);
                }
                else {
                    normalizedName = normalizeName_1.default(manifest, name_1);
                    currentMapConfig[name_1] = normalizedName;
                }
                var address = this._resolveAddress(manifest, name_1);
                var existingNormalizedNameForAddress = AddressStore_1.default.instance.getNormalizedName(address);
                if (existingNormalizedNameForAddress) {
                    currentMapConfig[name_1] = existingNormalizedNameForAddress;
                    this._duplicateModuleNames.set(normalizedName, existingNormalizedNameForAddress);
                }
                else {
                    pathConfig[normalizedName] = address;
                    AddressStore_1.default.instance.set(normalizedName, address);
                }
                var resource = resources[name_1];
                if (resource && resource.globalName) {
                    shimConfig[normalizedName] = {
                        exports: resource.globalName,
                        deps: resource.globalDependencies
                    };
                }
            }
        }
        var mapConfig = {};
        mapConfig[normalizeName_1.default(manifest)] = currentMapConfig;
        this.requireConfig({
            paths: pathConfig,
            map: mapConfig,
            shim: shimConfig
        });
    };
    RequireJsLoader.prototype._initialize = function () {
        if (!this._isRequireJsLoaded()) {
            this._loadRequireJs();
        }
        else {
            this._setRequireJsLocalVariables();
        }
    };
    RequireJsLoader.prototype._loadRequireJs = function () {
        var requirejs = require('exports-loader?requirejs,require,define!../../../../blobs/requirejs/2.1.20/require.min');
        RequireJsLoader._window.requirejs = requirejs.requirejs;
        RequireJsLoader._window.require = requirejs.require;
        RequireJsLoader._window.define = requirejs.define;
        var requireJsConfig = {
            baseUrl: RequireJsLoader._invalidBaseUrl
        };
        this._setRequireJsLocalVariables();
        this.requireConfig(requireJsConfig);
    };
    RequireJsLoader.prototype._isRequireJsLoaded = function () {
        return (RequireJsLoader._window.requirejs !== undefined &&
            RequireJsLoader._window.require !== undefined &&
            RequireJsLoader._window.define !== undefined);
    };
    RequireJsLoader.prototype._setRequireJsLocalVariables = function () {
        this._requirejs = RequireJsLoader._window.requirejs;
        this._define = RequireJsLoader._window.define;
    };
    RequireJsLoader.prototype._resolveAddress = function (manifest, resourceName) {
        var address = resolveAddress_1.default(manifest, resourceName);
        address = address.replace(/.js$/, '');
        return address;
    };
    RequireJsLoader.prototype._ensureProperModuleLoaded = function (moduleName, module, resolve, reject) {
        if (module === undefined && this._isSpfxComponent(moduleName)) {
            this._requireLoadForDifferentVersion(moduleName, resolve, reject);
        }
        else {
            resolve(module);
        }
    };
    RequireJsLoader.prototype._handleRequireJsError = function (moduleName, error, resolve, reject) {
        if (!this._isOrphanedVersionLoaded(moduleName)) {
            reject(error);
        }
        else {
            this._requireLoadForDifferentVersion(moduleName, resolve, reject);
        }
    };
    RequireJsLoader.prototype._isOrphanedVersionLoaded = function (moduleName) {
        var componentId = this._extractComponentIdFromModuleName(moduleName);
        var registry = this._requirejs.s.contexts._.registry;
        var registryIds = Object.keys(registry);
        return registryIds.map(function (id) { return id.indexOf(componentId) === 0; }).reduce(function (prev, curr) { return prev || curr; });
    };
    RequireJsLoader.prototype._isSpfxComponent = function (moduleName) {
        var substrings = moduleName.split('_');
        return substrings.length === 2 && sp_core_library_1.Guid.isValid(substrings[0]) && sp_core_library_1.Version.isValid(substrings[1]);
    };
    RequireJsLoader.prototype._extractComponentIdFromModuleName = function (moduleName) {
        return moduleName.split('_')[0];
    };
    RequireJsLoader.prototype._requireLoadForDifferentVersion = function (moduleName, resolve, reject) {
        var registry = this._requirejs.s.contexts._.registry;
        var requirejsInternalConfig = this._requirejs.s.contexts._.config; 
        var requestedComponentId = this._extractComponentIdFromModuleName(moduleName);
        var matchingComponentFound = false;
        for (var _i = 0, _a = Object.keys(registry); _i < _a.length; _i++) {
            var loadedModuleName = _a[_i];
            var loadedComponentId = this._extractComponentIdFromModuleName(loadedModuleName);
            if (requestedComponentId === loadedComponentId) {
                matchingComponentFound = true;
                var map = {}; 
                map[loadedModuleName] = requirejsInternalConfig.map[moduleName];
                var paths = {};
                paths[loadedModuleName] = requirejsInternalConfig.paths[moduleName];
                this._requirejs.config({
                    map: map,
                    paths: paths
                });
                this._requirejs.undef(moduleName);
                this._requirejs.undef(loadedModuleName);
                requirejsInternalConfig.paths[moduleName] = "SPFx: Use " + loadedModuleName + " instead";
                this._requirejs([loadedModuleName], function (mod) { return resolve(mod); }, function (err) { return reject(err); });
            }
        }
        if (!matchingComponentFound) {
            reject(new Error("Unknown error when loading module \"" + moduleName + "\""));
        }
    };
    RequireJsLoader._requireEventName = 'RequireJS.require';
    RequireJsLoader._invalidBaseUrl = 'https://relative-path.invalid/';
    RequireJsLoader._window = window; 
    return RequireJsLoader;
}());
exports.default = RequireJsLoader;
