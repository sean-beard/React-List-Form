"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var sp_core_library_1 = require("@microsoft/sp-core-library");
var SPApplicationLoader_1 = require("./SPApplicationLoader");
var debugManifestProvider_1 = require("./debug/debugManifestProvider");
var DebugLoaderManager_1 = require("./debug/DebugLoaderManager");
var ManifestStore_1 = require("./stores/ManifestStore");
var BaseComponentLoader = (function () {
    function BaseComponentLoader() {
        this._isInitialized = false;
        if (!BaseComponentLoader._headElement) {
            BaseComponentLoader._headElement = document.getElementsByTagName('head')[0];
        }
    }
    BaseComponentLoader.prototype.startApplication = function (applicationId, preloadedData) {
        return SPApplicationLoader_1.default.startApplication(applicationId, preloadedData).then(function (application) {
            if (window['_spLoaderCallback']) {
                var _spLoaderCallback = window['_spLoaderCallback'];
                _spLoaderCallback(application);
            }
            return application;
        });
    };
    BaseComponentLoader.prototype._initialize = function (preloadedData, bundledComponents) {
        var _this = this;
        if (this._isInitialized) {
            return Promise.resolve();
        }
        this._isInitialized = true;
        ManifestStore_1.default.instance.registerPreloadedManifests(preloadedData);
        if (NPM_BUILD) {
            require('./utilities/initializeNpmModule').initializeNpmModule();
        }
        this._listViewHostWorkaround(preloadedData);
        if (!DebugLoaderManager_1.default.instance.isDebugLoader()) {
            this._pinBundledComponents(bundledComponents);
        }
        return debugManifestProvider_1.loadDebugManifests(this).then(function () {
            _this._overrideComponents(bundledComponents);
        }).catch(function () {
        });
    };
    BaseComponentLoader.prototype.loadComponentById = function (id, version) {
        sp_core_library_1.Validate.isNonemptyString(id, 'id');
        var parsedId = sp_core_library_1.Guid.parse(id).toString();
        var manifest = ManifestStore_1.default.instance.getManifest(parsedId, version);
        return this.loadComponent(manifest);
    };
    BaseComponentLoader.prototype.registerManifests = function (manifests) {
        ManifestStore_1.default.instance.registerManifests(manifests, false);
    };
    Object.defineProperty(BaseComponentLoader.prototype, "manifests", {
        get: function () {
            return ManifestStore_1.default.instance.getRegisteredManifests();
        },
        enumerable: true,
        configurable: true
    });
    BaseComponentLoader.prototype.loadCss = function (url) {
        sp_core_library_1.Validate.isNonemptyString(url, 'url');
        var linkTag = document.createElement('link');
        linkTag.rel = 'stylesheet';
        linkTag.type = 'text/css';
        linkTag.href = url;
        BaseComponentLoader._headElement.appendChild(linkTag);
    };
    BaseComponentLoader.prototype._forceLocalManifests = function () {
        return debugManifestProvider_1.loadDebugManifests(this, ['https://localhost:4321/temp/manifests.js', 'http://localhost:4321/temp/manifests.js'], 
 true, 
 true, 
 true, 
 true);
    };
    BaseComponentLoader.prototype.tryGetManifestById = function (id, version) {
        sp_core_library_1.Validate.isNonemptyString(id, 'id');
        var parsedId = sp_core_library_1.Guid.parse(id).toString();
        return ManifestStore_1.default.instance.tryGetManifest(parsedId, version);
    };
    BaseComponentLoader.prototype._listViewHostWorkaround = function (preloadedData) {
    };
    BaseComponentLoader.prototype._pinBundledComponents = function (bundledComponents) {
        for (var id in bundledComponents) {
            if (bundledComponents.hasOwnProperty(id)) {
                ManifestStore_1.default.instance._pinManifest(id);
            }
        }
    };
    BaseComponentLoader.prototype._overrideComponents = function (bundledComponents) {
        var _this = this;
        Object.keys(bundledComponents).forEach(function (key) {
            _this._overrideComponent(key, bundledComponents[key]);
        });
    };
    return BaseComponentLoader;
}());
exports.BaseComponentLoader = BaseComponentLoader;
