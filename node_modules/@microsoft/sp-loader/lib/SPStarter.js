"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var developerToolsLoader = require("./DeveloperTools/DeveloperToolsLoader");
var SPSystemJsComponentLoader_1 = require("./systemjs/SPSystemJsComponentLoader");
var SPRequireJsComponentLoader_1 = require("./requirejs/SPRequireJsComponentLoader");
var LocaleStore_1 = require("./stores/LocaleStore");
var BrowserSupport_1 = require("./utilities/BrowserSupport");
var showBrowserDevToolsWarning_1 = require("./DeveloperTools/BrowserDeveloperToolsWarning/showBrowserDevToolsWarning");
var DebugLoaderManager_1 = require("./debug/DebugLoaderManager");
var componentConstants = require("./utilities/componentConstants");
var SPLoader_resx_1 = require("./SPLoader.resx");
if (!DEBUG && !UNIT_TEST) {
    showBrowserDevToolsWarning_1.showBrowserDevToolsWarning();
}
var REQUIREJS_FLIGHT_ID = 125;
var DEBUG_FLIGHTS_QUERY_PARAM = 'debugFlights';
var DEBUG_KILLSWITCHES_QUERY_PARAM = 'debugKillSwitches';
var COMPONENT_LOADER_GLOBAL_VARIABLE = '_spComponentLoader';
var SPStarter = (function () {
    function SPStarter() {
    }
    SPStarter._setBundledComponents = function (bundledComponents) {
        if (!SPStarter._bundledComponents) {
            SPStarter._bundledComponents = bundledComponents;
        }
        else {
            throw new Error('Bundled components can be only set once'); 
        }
    };
    SPStarter.start = function (preloadedData, handleFailure) {
        var _this = this;
        return DebugLoaderManager_1.default.instance.checkDebugLoader().then(function (shouldReload) {
            if (shouldReload) {
                window.location.reload(true);
            }
            var handleError = _this._buildErrorHandler(SPLoader_resx_1.default.loaderUserFriendlyError, handleFailure);
            var browserCompatibility = SPStarter.getBrowserCompatibility();
            if (browserCompatibility.supportLevel === sp_core_library_1.BrowserSupportLevel.Blocked) {
                var handleBrowserError = _this._buildErrorHandler(SPLoader_resx_1.default.browserNotSupportedError, handleFailure);
                return handleBrowserError(new Error(browserCompatibility.warning));
            }
            if (!preloadedData || !preloadedData.spPageContextInfo) {
                return handleError(new Error(SPLoader_resx_1.default.invalidPreloadedDataError));
            }
            sp_core_library_1.Log._initialize(new sp_telemetry_1._SPTelemetryLogHandler());
            SPStarter._initializeEnvironment();
            sp_core_library_1.Session._initialize({ applicationId: preloadedData.spPageContextInfo.CorrelationId });
            SPStarter._initializeTelemetry(preloadedData);
            _this._initializeFlightsAndKillswitches(preloadedData);
            LocaleStore_1.default.setLocale(preloadedData.spPageContextInfo.currentUICultureName);
            sp_telemetry_1._PerformanceLogger.markSpLoaderStart();
            var spLoader = require('./index');
            var componentLoader = _this._useRequireJs(preloadedData) ?
                new SPRequireJsComponentLoader_1.default() :
                new SPSystemJsComponentLoader_1.default();
            return componentLoader._initialize(preloadedData, SPStarter._getBundledComponents()).then(function () {
                spLoader.SPComponentLoader.initialize(componentLoader);
                spLoader.DeveloperTools.initialize(developerToolsLoader);
                window[COMPONENT_LOADER_GLOBAL_VARIABLE] = spLoader.SPComponentLoader;
                if (preloadedData.clientSideApplicationId) {
                    return spLoader.SPComponentLoader.startApplication(preloadedData.clientSideApplicationId, preloadedData);
                }
                else {
                    return Promise.resolve();
                }
            }).catch(function (error) {
                return handleError(error);
            });
        });
    };
    SPStarter.getBrowserCompatibility = function () {
        return BrowserSupport_1.default.getBrowserCompatibility();
    };
    SPStarter._getBundledComponents = function () {
        sp_core_library_1.Validate.isNotNullOrUndefined(SPStarter._bundledComponents, 'bundledComponents');
        return SPStarter._bundledComponents;
    };
    SPStarter._initializeEnvironment = function () {
        var type;
        if (window.location.hostname === 'localhost' ||
            window['ENVIRONMENTTYPE'] &&
                window['ENVIRONMENTTYPE'] === 'Local') {
            type = sp_core_library_1.EnvironmentType.Local;
        }
        else {
            type = sp_core_library_1.EnvironmentType.SharePoint;
        }
        sp_core_library_1.Environment._initialize({ type: type });
    };
    SPStarter._initializeTelemetry = function (preloadedData) {
        if (SPStarter._isTelemetryDisabled()) {
            return;
        }
        var pageContextInfo = preloadedData.spPageContextInfo;
        sp_telemetry_1._Telemetry.initialize(preloadedData.manifests[0].alias, {
            environment: pageContextInfo.env,
            farmLabel: pageContextInfo.farmLabel,
            clientSideApplicationId: preloadedData.clientSideApplicationId || '',
            siteSubscriptionId: pageContextInfo.siteSubscriptionId,
            version: !!BUILD_NUMBER ? BUILD_NUMBER : preloadedData.manifests[0].version,
            loginName: pageContextInfo.userLoginName,
            systemUserKey: pageContextInfo.systemUserKey,
            currentUICultureName: pageContextInfo.currentUICultureName,
            correlationId: pageContextInfo.CorrelationId,
            enableConsoleLog: SPStarter._isConsoleLogEnabled(),
            siteId: pageContextInfo.siteId,
            webId: pageContextInfo.webId
        });
    };
    SPStarter._initializeFlightsAndKillswitches = function (preloadedData) {
        var allowDebugQueryParameter = 'EDOG_Content' === preloadedData.spPageContextInfo.farmLabel
            || sp_core_library_1.Environment.type === sp_core_library_1.EnvironmentType.Local;
        var queryParams = new sp_core_library_1.UrlQueryParameterCollection(window.location.href);
        var debugFlights = allowDebugQueryParameter ? queryParams.getValue(DEBUG_FLIGHTS_QUERY_PARAM) : undefined;
        var debugKillswitches = allowDebugQueryParameter ? queryParams.getValue(DEBUG_KILLSWITCHES_QUERY_PARAM) : undefined;
        sp_core_library_1._SPFlight.initialize(preloadedData.spPageContextInfo.ExpFeatures, debugFlights);
        sp_core_library_1._SPKillSwitch.initialize(preloadedData.spPageContextInfo.killSwitches, debugKillswitches);
    };
    SPStarter._isQueryParameterTrue = function (name) {
        var parameterValue;
        try {
            var queryParams = new sp_core_library_1.UrlQueryParameterCollection(window.location.href);
            parameterValue = queryParams.getValue(name) === 'true';
        }
        catch (error) {
            parameterValue = false;
        }
        return parameterValue;
    };
    SPStarter._isConsoleLogEnabled = function () {
        return SPStarter._isQueryParameterTrue('enableConsoleLog');
    };
    SPStarter._isTelemetryDisabled = function () {
        return SPStarter._isQueryParameterTrue('disableTelemetry');
    };
    SPStarter._useRequireJs = function (preloadedData) {
        var isFlightEnabled = sp_core_library_1._SPFlight.isEnabled(REQUIREJS_FLIGHT_ID);
        var isListViewApplication = preloadedData.clientSideApplicationId === componentConstants.listViewHostComponentId;
        return isFlightEnabled || isListViewApplication;
    };
    SPStarter._buildErrorHandler = function (errorMessage, handleFailure) {
        return function (error) {
            if (handleFailure) {
                handleFailure({
                    message: errorMessage,
                    error: error
                });
            }
            return Promise.reject(error);
        };
    };
    SPStarter._bundledComponents = undefined;
    return SPStarter;
}());
exports.default = SPStarter;
