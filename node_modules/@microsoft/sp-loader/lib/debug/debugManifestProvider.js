"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var sp_core_library_1 = require("@microsoft/sp-core-library");
var ManifestStore_1 = require("./../stores/ManifestStore");
var confirmDebugAllowed_1 = require("./confirmDebugAllowed");
var showDebugError_1 = require("./showDebugError");
var debugManifestsFileQueryParameterName = 'debugManifestsFile';
var sessionStorageKey = 'sp-loader_debugManifests';
var searchParams = undefined;
var debugManifestProvider_resx_1 = require("./debugManifestProvider.resx");
function loadDebugManifests(componentLoader, alternativeManifestsFiles, noPrompt, noCache, noWarnOnFailure, registerAsNonDebug) {
    if (noPrompt === void 0) { noPrompt = false; }
    if (noCache === void 0) { noCache = false; }
    if (noWarnOnFailure === void 0) { noWarnOnFailure = false; }
    if (registerAsNonDebug === void 0) { registerAsNonDebug = false; }
    if (noPrompt) {
        confirmDebugAllowed_1.dangerouslyForceDebug();
    }
    return exports._getDebugManifestsWrapper(componentLoader, noCache, alternativeManifestsFiles, noWarnOnFailure)
        .then(function (debugManifests) {
        if (debugManifests) {
            if (registerAsNonDebug) {
                var manifests = Object.keys(debugManifests).map(function (id) {
                    return debugManifests[id];
                });
                ManifestStore_1.default.instance.registerManifests(manifests, false);
            }
            else {
                ManifestStore_1.default.instance.registerDebugManifests(debugManifests);
            }
        }
        return confirmDebugAllowed_1.confirmDebugAllowed(!!debugManifests && Object.keys(debugManifests).length > 0).then(function (result) {
        });
    });
}
exports.loadDebugManifests = loadDebugManifests;
function _getDebugManifests(componentLoader, noCache, alternativeManifestsFiles, noWarnOnFailure) {
    if (noCache === void 0) { noCache = false; }
    if (alternativeManifestsFiles === void 0) { alternativeManifestsFiles = []; }
    if (noWarnOnFailure === void 0) { noWarnOnFailure = false; }
    return new Promise(function (resolve, reject) {
        if (window.location.search.match(/\breset\b/)) {
            _trySetSessionStorageManifests(undefined);
            resolve({});
            return;
        }
        var debugManifests = _tryGetSessionStorageManifests();
        var queryParamManifestsFile = _parseManifestsFileFromFragementQueryParameter(false);
        var manifestsFiles = queryParamManifestsFile ? [queryParamManifestsFile] : alternativeManifestsFiles;
        if (manifestsFiles.length > 0 || Object.keys(debugManifests).length > 0) {
            confirmDebugAllowed_1.confirmDebugAllowed(true).then(function (isDebugAllowed) {
                if (!isDebugAllowed) {
                    _parseManifestsFileFromFragementQueryParameter(true);
                    resolve({});
                    return;
                }
                if (manifestsFiles.length > 0) {
                    var debugManifestsScriptPromise = _getDebugManifestsFromManifestFiles(componentLoader, manifestsFiles);
                    debugManifestsScriptPromise.then(function (manifests) {
                        _parseManifestsFileFromFragementQueryParameter(true);
                        for (var _i = 0, manifests_1 = manifests; _i < manifests_1.length; _i++) {
                            var manifest = manifests_1[_i];
                            debugManifests[manifest.id] = manifest;
                        }
                        if (!noCache) {
                            _trySetSessionStorageManifests(debugManifests);
                        }
                        resolve(debugManifests);
                    });
                    debugManifestsScriptPromise.catch(function (error) {
                        if (!noWarnOnFailure) {
                            var isMalformed = !manifestsFiles[0].match(/^https*\:\/\//);
                            var isHttps = !isMalformed && manifestsFiles.reduce(function (state, current) { return state || !!current.match(/^https/); }, false);
                            var errorText = isMalformed
                                ? sp_core_library_1.Text.format(debugManifestProvider_resx_1.default.errorLoadingDebugManifestMalformed, manifestsFiles[0])
                                : (isHttps
                                    ? debugManifestProvider_resx_1.default.errorLoadingDebugManifestHTTPS
                                    : debugManifestProvider_resx_1.default.errorLoadingDebugManifestHTTP);
                            showDebugError_1.default(error, errorText);
                        }
                        reject(error);
                    });
                }
                else {
                    resolve(debugManifests);
                }
            });
        }
        else {
            resolve({});
        }
    });
}
exports._getDebugManifests = _getDebugManifests;
exports._getDebugManifestsWrapper = _getDebugManifests;
function _getDebugManifestsFromManifestFiles(componentLoader, manifestsFiles) {
    var tryGetDebugManifests = function (promise) { return promise.then(function (script) { return script.getManifests(); }); };
    var debugManifestsScriptPromise = tryGetDebugManifests(componentLoader.loadScript(manifestsFiles[0]));
    var _loop_1 = function (i) {
        var oldPromise = debugManifestsScriptPromise;
        debugManifestsScriptPromise = oldPromise.catch(function () {
            return tryGetDebugManifests(componentLoader.loadScript(manifestsFiles[i]));
        });
    };
    for (var i = 1; i < manifestsFiles.length; i++) {
        _loop_1(i);
    }
    return debugManifestsScriptPromise;
}
exports._getDebugManifestsFromManifestFiles = _getDebugManifestsFromManifestFiles;
function _trySetSessionStorageManifests(debugManifests) {
    try {
        if (debugManifests) {
            window.sessionStorage.setItem(sessionStorageKey, JSON.stringify(debugManifests));
        }
        else {
            window.sessionStorage.removeItem(sessionStorageKey);
        }
    }
    catch (e) {
        console.debug("Error setting session storage. Error: " + e);
    }
}
exports._trySetSessionStorageManifests = _trySetSessionStorageManifests;
function _tryGetSessionStorageManifests() {
    try {
        var serializedManifests = window.sessionStorage.getItem(sessionStorageKey);
        if (serializedManifests) {
            return JSON.parse(serializedManifests) || {};
        }
    }
    catch (e) {
        console.debug("Error querying session storage. Error: " + e);
    }
    return {};
}
exports._tryGetSessionStorageManifests = _tryGetSessionStorageManifests;
function _parseManifestsFileFromFragementQueryParameter(clearFragmentParameter) {
    return _getAndClearFragmentQueryParameter(debugManifestsFileQueryParameterName, clearFragmentParameter);
}
function _getAndClearFragmentQueryParameter(parameter, clearFragmentParameter) {
    var result = undefined;
    if (window.location.hash) {
        var fragment = window.location.hash.indexOf('#') === 0
            ? window.location.hash.substr(1)
            : window.location.hash;
        var fragmentQueryParameters = _parseQueryParameters(fragment);
        if (fragmentQueryParameters[parameter]) {
            result = decodeURIComponent(fragmentQueryParameters[parameter].value || '');
            if (clearFragmentParameter) {
                var orderedParameters = [];
                for (var key in fragmentQueryParameters) {
                    if (fragmentQueryParameters.hasOwnProperty(key)) {
                        if (key !== parameter) {
                            var value = fragmentQueryParameters[key];
                            orderedParameters[value.position] = {
                                key: key,
                                value: value.value
                            };
                        }
                    }
                }
                var newFragment = orderedParameters
                    .filter(function (value) { return !!value; })
                    .map(function (param) { return (param.value) ? param.key + "=" + param.value : param.key; })
                    .join('&');
                if (newFragment !== '') {
                    window.history.replaceState('', document.title, "" + window.location.pathname + window.location.search + "#" + newFragment);
                }
                else {
                    window.history.replaceState('', document.title, "" + window.location.pathname + window.location.search);
                }
            }
        }
    }
    if (result === undefined) {
        result = _getQueryParameters().get(parameter) || undefined;
    }
    return result;
}
exports._getAndClearFragmentQueryParameter = _getAndClearFragmentQueryParameter;
function _parseQueryParameters(queryParameterString) {
    if (queryParameterString) {
        if (queryParameterString.indexOf('?') === 0 || queryParameterString.indexOf('#') === 0) {
            queryParameterString = queryParameterString.substr(1);
        }
        var queryParameters = queryParameterString.split('&');
        var result_1 = {};
        var index_1 = 0;
        queryParameters.forEach(function (queryParameter) {
            var equalsIndex = queryParameter.indexOf('=');
            if (equalsIndex === -1) {
                result_1[queryParameter] = {
                    value: undefined,
                    position: index_1++
                };
            }
            else {
                result_1[queryParameter.substr(0, equalsIndex)] = {
                    value: queryParameter.substr(equalsIndex + 1),
                    position: index_1++
                };
            }
        });
        return result_1;
    }
    else {
        return {};
    }
}
exports._parseQueryParameters = _parseQueryParameters;
function _getQueryParameters() {
    if (!searchParams) {
        searchParams = new URL(window.location.href).searchParams;
    }
    return searchParams;
}
