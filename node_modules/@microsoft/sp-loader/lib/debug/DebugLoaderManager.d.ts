/**
 * Provides APIs to detect the usage of a debug loader
 *
 * This is used in order to provide security measures before running arbitrary code, and to provide
 * improved debugging experience when a debug loader is used.
 *
 * @internal
 */
export default class DebugLoaderManager {
    private static _instance;
    private _isDebugLoader;
    static readonly instance: DebugLoaderManager;
    isDebugLoader(): boolean;
    /**
     * Checks if a debug loader is requested.
     * This method is the first thing called in SPStarter.start() and should not be called anywhere else.
     *
     * If there is no cookie for SPFx (usual case), it returns early.
     *
     * If there is a cookie, it checks if a debug loader is requested, and if the user hasn't confirmed
     * through the UI, it shows a dialog to confirm.
     * If user confirms, it reloads the page with the new loader.
     *
     * @returns Promise with a boolean, that indicates if the page should reload.
     */
    checkDebugLoader(): Promise<boolean>;
    /**
     * Returns the value for the module loader value in the cookie, or undefined it there is none.
     * If correct, it has the form of a URL
     * @param spfxCookie Cookie value for SPFx, in the form from getSpfxCookie()
     */
    private _getModuleLoaderCookieValue(spfxCookie);
    private _getModuleLoaderQueryParam();
    /**
     * Returns true if 'confirmDebugLoader' is in the cookie, and its value is 'true'
     * @param spfxCookie Cookie value for SPFx, in the form from getSpfxCookie()
     */
    private _getConfirmDebugLoaderCookieValue(spfxCookie);
    /**
     * Auxiliary function to get a value from the SPFx cookie
     * @param spfxCookie Cookie value for SPFx, in the form from getSpfxCookie()
     * @param key Key for the requested value. It is case insensitive
     */
    private _getCookieValue(spfxCookie, key);
    /**
     * Given a SPFx cookie, it returns another value for the SPFx cookie, potentially modifying values for
     * 'moduleLoader' and 'confirmDebugLoader'.
     * It adds path ('/') and expires (now + 1 day) attributes to mimic the cookie from the server
     * @param spfxCookie Cookie value for SPFx, in the form from getSpfxCookie()
     * @param useDebugLoader If true, sets the cookie to use the debug loader
     * @param loaderUrl URL that points to the debug loader
     */
    private _rebuildSpfxCookie(spfxCookie, useDebugLoader, loaderUrl);
}
