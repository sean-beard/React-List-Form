"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ensureDebugComponents_1 = require("./ensureDebugComponents");
var Cookie_1 = require("../utilities/Cookie");
var SPFX_COOKIE_ID = 'SPClientSideFrameworkDevCookie-9076A2B0-2161-43C6-8BEA-9FECB7EA459B';
var MODULE_LOADER_COOKIE_ID = 'moduleloader';
var CONFIRM_DEBUG_LOADER_COOKIE_ID = 'confirmdebugloader';
var CONFIRM_DEBUG_LOADER_TRUE = 'true';
var DebugLoaderManager = (function () {
    function DebugLoaderManager() {
        this._isDebugLoader = false;
    }
    Object.defineProperty(DebugLoaderManager, "instance", {
        get: function () {
            if (this._instance === undefined) {
                this._instance = new DebugLoaderManager();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    DebugLoaderManager.prototype.isDebugLoader = function () {
        return this._isDebugLoader;
    };
    DebugLoaderManager.prototype.checkDebugLoader = function () {
        var _this = this;
        var spfxCookie = Cookie_1.default.tryGetCookie(SPFX_COOKIE_ID);
        if (!spfxCookie) {
            return Promise.resolve(false);
        }
        var moduleLoaderCookieValue = this._getModuleLoaderCookieValue(spfxCookie);
        var moduleLoaderQueryParam = this._getModuleLoaderQueryParam();
        var confirmDebugLoaderCookieValue = this._getConfirmDebugLoaderCookieValue(spfxCookie);
        if (moduleLoaderCookieValue || moduleLoaderQueryParam) {
            if (confirmDebugLoaderCookieValue) {
                this._isDebugLoader = true;
                return Promise.resolve(false);
            }
            else {
                var edogTabTenantRegex = /https\:\/\/testtab\.spoppe\.com/;
                var spdfTabTenantRegex = /https\:\/\/a830edad9050849testss01\.sharepoint\.com/;
                var debugPromptPromise = void 0;
                if (window.location.href.match(edogTabTenantRegex) || window.location.href.match(spdfTabTenantRegex)) {
                    debugPromptPromise = Promise.resolve(true);
                }
                else {
                    debugPromptPromise = ensureDebugComponents_1.default().then(function (debugPrompt) { return debugPrompt.showDebugLoaderPrompt(); });
                }
                return debugPromptPromise.then(function (allowed) {
                    document.cookie = _this._rebuildSpfxCookie(spfxCookie, allowed, moduleLoaderQueryParam);
                    return allowed;
                });
            }
        }
        else {
            return Promise.resolve(false);
        }
    };
    DebugLoaderManager.prototype._getModuleLoaderCookieValue = function (spfxCookie) {
        return this._getCookieValue(spfxCookie, MODULE_LOADER_COOKIE_ID);
    };
    DebugLoaderManager.prototype._getModuleLoaderQueryParam = function () {
        var queryParam = new URL(window.location.href).searchParams.get(MODULE_LOADER_COOKIE_ID);
        return queryParam || undefined;
    };
    DebugLoaderManager.prototype._getConfirmDebugLoaderCookieValue = function (spfxCookie) {
        var value = this._getCookieValue(spfxCookie, CONFIRM_DEBUG_LOADER_COOKIE_ID);
        return !!value && value.toLowerCase() === CONFIRM_DEBUG_LOADER_TRUE;
    };
    DebugLoaderManager.prototype._getCookieValue = function (spfxCookie, key) {
        var values = new URLSearchParams(spfxCookie);
        var value = values.get(key);
        return value || undefined;
    };
    DebugLoaderManager.prototype._rebuildSpfxCookie = function (spfxCookie, useDebugLoader, loaderUrl) {
        var values = new URLSearchParams(spfxCookie);
        if (useDebugLoader) {
            values.append(MODULE_LOADER_COOKIE_ID, loaderUrl);
            values.append(CONFIRM_DEBUG_LOADER_COOKIE_ID, CONFIRM_DEBUG_LOADER_TRUE);
        }
        else {
            values.delete(MODULE_LOADER_COOKIE_ID);
        }
        var expirationDate = new Date(Date.now());
        expirationDate.setDate(expirationDate.getDate() + 1);
        var cookieAttributes = {
            path: '/',
            expires: expirationDate
        };
        var cookieData = Cookie_1.default.buildCookie(SPFX_COOKIE_ID, values.toString(), cookieAttributes);
        return cookieData;
    };
    return DebugLoaderManager;
}());
exports.default = DebugLoaderManager;
