/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * This assists with parsing debug manifests from the URL fragment or from sessionStorage.
 *
 * We allow developers to specify a set of manifests in the URL to override the manifests we get from the server.
 * The format is: <url-to-page>.aspx#debugManifestsFile=<path to manifests init script>
 *
 * When a manifest file is specified in the URL, we cache its contents in sessionStorage so the developer doesn't need
 * to supply it on every request. This also reads the "reset=1" query parameter to clear the cached debug
 * manifests from sessionStorage.
 *
 * @file debugManifestProvider.ts
 */
import { IClientSideComponentManifest } from '@microsoft/sp-module-interfaces';
import { ISPComponentLoader } from './../ISPComponentLoader';
export interface IManifestMap {
    [id: string]: IClientSideComponentManifest;
}
export interface IManifestScript {
    getManifests: () => IClientSideComponentManifest[];
}
export interface IParameter {
    value: string | undefined;
    position: number;
}
export interface IParameterCollection {
    [parameterId: string]: IParameter;
}
/**
 * Loads debug manifests from the specified URLs. URLs are tried in order until one succeeds.
 *
 * @param componentLoader - The component loader, used to load the manifests scripts.
 * @param noPrompt - If true, do not show the security warning dialog. Defaults to false.
 * @param noCache - If true, do not cache the debug manifests in session storage. Defaults to false.
 * @param noWarnOnFailure - If true, do not show an error message if debug manifests fail to load. Defaults to false.
 * @param registerAsNonDebug - If true, load manifests as non-debug.
 */
export declare function loadDebugManifests(componentLoader: ISPComponentLoader, alternativeManifestsFiles?: string[], noPrompt?: boolean, noCache?: boolean, noWarnOnFailure?: boolean, registerAsNonDebug?: boolean): Promise<void>;
export declare function _getDebugManifests(componentLoader: ISPComponentLoader, noCache?: boolean, alternativeManifestsFiles?: string[], noWarnOnFailure?: boolean): Promise<IManifestMap | undefined>;
/**
 * This export exists so _getDebugManifests can be mocked.
 */
export declare let _getDebugManifestsWrapper: typeof _getDebugManifests;
export declare function _getDebugManifestsFromManifestFiles(componentLoader: ISPComponentLoader, manifestsFiles: string[]): Promise<IClientSideComponentManifest[]>;
export declare function _trySetSessionStorageManifests(debugManifests: IManifestMap | undefined): void;
export declare function _tryGetSessionStorageManifests(): IManifestMap;
export declare function _getAndClearFragmentQueryParameter(parameter: string, clearFragmentParameter: boolean): string | undefined;
export declare function _parseQueryParameters(queryParameterString: string | undefined): IParameterCollection;
