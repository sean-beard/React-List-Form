"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var Dialog_1 = require("office-ui-fabric-react/lib/Dialog");
var Button_1 = require("office-ui-fabric-react/lib/Button");
var Callout_1 = require("office-ui-fabric-react/lib/Callout");
var css_1 = require("@uifabric/utilities/lib/css");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var DebugPrompt_resx_1 = require("./DebugPrompt.resx");
var debugComponents_module_scss_1 = require("././../debugComponents.module.scss");
var DebugPrompt_module_scss_1 = require("./DebugPrompt.module.scss");
var DebugPrompt = (function (_super) {
    __extends(DebugPrompt, _super);
    function DebugPrompt(props) {
        var _this = _super.call(this, props) || this;
        _this._calloutTarget = undefined;
        _this.state = {
            showDialog: true,
            showCallout: false,
            dismissed: false
        };
        return _this;
    }
    DebugPrompt.prototype.componentDidMount = function () {
        var _this = this;
        setTimeout(function () { return _this.setState({
            showCallout: _this.state.showDialog 
        }); }, 5000); 
    };
    DebugPrompt.prototype.render = function () {
        var _this = this;
        var callback = function (allow) {
            setTimeout(function () { return _this.setState({ dismissed: true }); }, 200);
            _this.setState({
                showCallout: false,
                showDialog: false
            });
            _this.props.callback(allow);
        };
        return !this.state.dismissed
            ? (React.createElement("div", { role: 'dialog', "data-automation-id": 'debugManifestPromptDialog', "aria-labelledby": 'manifestWarningLabel' },
                React.createElement(Dialog_1.Dialog, { dialogContentProps: {
                        type: Dialog_1.DialogType.largeHeader
                    }, isOpen: this.state.showDialog, title: this.props.title, isBlocking: true, containerClassName: debugComponents_module_scss_1.default.dialogContainer },
                    React.createElement("p", { className: DebugPrompt_module_scss_1.default.warningText }, DebugPrompt_resx_1.default.debugManifestLoadingWarning),
                    React.createElement("p", { className: DebugPrompt_module_scss_1.default.warningText }, sp_core_library_1.Text.format(DebugPrompt_resx_1.default.debugManifestLoadingWarning2, DebugPrompt_resx_1.default.debugManifestLoadingCancel)),
                    React.createElement(Dialog_1.DialogFooter, null,
                        React.createElement(Button_1.DefaultButton, { "data-automation-id": 'debugManifestConfirmButton', onClick: function () { return callback(true); } }, DebugPrompt_resx_1.default.debugManifestLoadingConfirm),
                        React.createElement(Button_1.PrimaryButton, { "data-automation-id": 'debugManifestCancelButton', onClick: function () { return callback(false); } },
                            React.createElement("div", { ref: function (calloutTarget) { return _this._calloutTarget = calloutTarget || _this._calloutTarget; } }, DebugPrompt_resx_1.default.debugManifestLoadingCancel)))),
                React.createElement(Callout_1.Callout, { className: css_1.css(DebugPrompt_module_scss_1.default.callout, (_a = {}, _a[DebugPrompt_module_scss_1.default.calloutFadeIn] = !!this.state.showCallout, _a)), target: this._calloutTarget, directionalHint: Callout_1.DirectionalHint.bottomCenter, gapSpace: 10 },
                    React.createElement("div", { className: DebugPrompt_module_scss_1.default.calloutText }, DebugPrompt_resx_1.default.debugManifestLoadingCalloutText))))
            : null; 
        var _a;
    };
    return DebugPrompt;
}(React.Component));
exports.default = DebugPrompt;
