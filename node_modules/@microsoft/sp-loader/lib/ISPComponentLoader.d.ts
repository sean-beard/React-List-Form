import { IClientSideComponentManifest } from '@microsoft/sp-module-interfaces';
import { IPreloadedData } from './IPreloadedData';
/**
 * Options for the loadScript() method in ISPComponentLoader
 *
 * @public
 */
export interface ILoadScriptOptions {
    /**
     * If set, the loaded script will be stored in a global variable under this name.
     */
    globalExportsName?: string;
}
/**
 * Interface for the module loader.
 * It allows to load modules and scripts (through SystemJS) and CSS on the page.
 * Also allows access to the manifests that exist in the page.
 *
 * @public
 */
export interface ISPComponentLoader {
    /**
     * All registered manifests.
     *
     * @readonly
     * @alpha
     */
    readonly manifests: IClientSideComponentManifest[];
    /**
     * Starts the application.
     * This is called by the page scripts to start loading the framework. Do not call it from your own code.
     *
     * @param applicationId - Id of the application.
     * @param preloadedData - Preloaded data for the application.
     *
     * @internal
     */
    startApplication<TApplication>(applicationId: string, preloadedData: IPreloadedData): Promise<TApplication>;
    /**
     * Initializes the component loader.
     * Registers all manifests (including debug manifests, if it applies)
     * and sets up internal logic before allowing to load components.
     *
     * @param preloadedData -     Preloaded data for the application.
     * @param bundledComponents - Map with all the components that are bundled in the same file as the loader.
     *
     * @internal
     */
    _initialize(preloadedData: IPreloadedData, bundledComponents: {
        [id: string]: Object;
    }): Promise<void>;
    /**
     * Inserts a <link ... /> tag for a stylesheet.
     *
     * @param url - The CSS file URL.
     */
    loadCss(url: string): void;
    /**
     * Given a URL, load a script.
     *
     * @param url     - The script URL.
     * @param options - globalExportsName: If the script isn't an AMD module and loads a global member on the page,
     *                    specify the global member's name.
     * @returns         A promise containing the loaded module.
     */
    loadScript<TModule>(url: string, options?: ILoadScriptOptions): Promise<TModule>;
    /**
     * Loads a component from a manifest.
     *
     * @param manifest - Manifest of the module to load.
     * @returns          A promise containing the loaded module.
     */
    loadComponent<TComponent>(manifest: IClientSideComponentManifest): Promise<TComponent>;
    /**
     * Resolve a component id and version, and load it.
     *
     * @param id      - The id of the component to load.
     * @param version - The version of the component to load. If version is not defined, the method
     *                    will load any version of the component.
     * @returns         A promise containing the loaded module.
     *
     * @alpha
     */
    loadComponentById<TComponent>(id: string, version?: string): Promise<TComponent>;
    /**
     * If manifests from localhost haven't already been loaded, force them to load without prompting the user.
     *
     * @returns A promise that is fulfilled when the manifests are loaded.
     *
     * @internal
     */
    _forceLocalManifests(): Promise<void>;
    /**
     * Get a component manifest from the component id and version.
     *
     * @param id      - GUID id of the component.
     * @param version - Version of the component. If version is not defined, the method
     *                    will return the manifest for any version of the component.
     * @returns         Manifest for the component.
     *
     * @alpha
     */
    tryGetManifestById(id: string, version?: string): IClientSideComponentManifest | undefined;
    /**
     * Registers manifests in the manifest store.
     *
     * @param manifests - The manifests to register in the store.
     *
     * @alpha
     */
    registerManifests(manifests: IClientSideComponentManifest[]): void;
}
