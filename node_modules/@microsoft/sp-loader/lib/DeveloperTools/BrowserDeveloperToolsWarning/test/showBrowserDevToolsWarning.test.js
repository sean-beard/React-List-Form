"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var showBrowserDevToolsWarning_1 = require("./../showBrowserDevToolsWarning");
describe('showBrowserDevToolsWarning', function () {
    var sandbox;
    var consoleLogStub;
    function stubBrowser(browser) {
        sandbox.stub(sp_core_library_1._BrowserDetection, 'getBrowserInformation', function () {
            return {
                browser: browser,
                os: sp_core_library_1._OS.Other 
            };
        });
    }
    beforeEach(function () {
        sandbox = sinon.sandbox.create();
        consoleLogStub = sandbox.stub(console, 'log');
    });
    afterEach(function () {
        sandbox.restore();
    });
    function missingFeatureBrowserTests(browser) {
        beforeEach(function () { return stubBrowser(browser); });
        it('prints one log message', function () {
            showBrowserDevToolsWarning_1.showBrowserDevToolsWarning();
            chai_1.expect(consoleLogStub.calledOnce).to.be.true;
        });
        it('prints log messages without CSS', function () {
            showBrowserDevToolsWarning_1.showBrowserDevToolsWarning();
            var args = consoleLogStub.getCall(0).args;
            chai_1.expect(args.length).to.equal(1);
            chai_1.expect(args[0].match(/%c.+/)).to.be.null;
        });
    }
    function fullFeaturedBrowserTests(browser) {
        var args;
        var headingCss;
        var otherLinesCss;
        beforeEach(function () {
            stubBrowser(browser);
            showBrowserDevToolsWarning_1.showBrowserDevToolsWarning();
            try {
                args = consoleLogStub.getCall(0).args;
                headingCss = args[1];
                otherLinesCss = args[2];
            }
            catch (e) {
            }
        });
        it('prints one log messages', function () {
            chai_1.expect(consoleLogStub.calledOnce).to.be.true;
        });
        it('prints log messages with CSS', function () {
            chai_1.expect(args.length).to.equal(3);
            chai_1.expect(args[0]).to.match(/%c.+%c/);
        });
        it('prints log messages with valid CSS', function () {
            var headingCssSegments = headingCss.split(';').map(function (segment) { return segment.trim(); });
            var line1CssSegments = otherLinesCss.split(';').map(function (segment) { return segment.trim(); });
            headingCssSegments.concat(line1CssSegments).forEach(function (segment) { return chai_1.expect(segment).to.match(/^.+:.+$/); });
        });
        it('prints log messages with correct CSS colors', function () {
            chai_1.expect(headingCss).to.match(/color\s*:\s*red/);
            chai_1.expect(otherLinesCss).to.not.match(/color\s*:\s*.+/);
        });
        it('prints log messages with bold text', function () {
            chai_1.expect(headingCss).to.match(/font-weight\s*:\s*700/);
            chai_1.expect(otherLinesCss).to.match(/font-weight\s*:\s*700/);
        });
        it('prints log messages with the correct font sizes', function () {
            chai_1.expect(headingCss).to.match(/font-size\s*:\s*70px/);
            chai_1.expect(otherLinesCss).to.match(/font-size\s*:\s*15px/);
        });
        it('prints log messages with the correct typeface', function () {
            chai_1.expect(headingCss).to.match(/font-family\s*:[^;]*Helvetica/);
            chai_1.expect(otherLinesCss).to.match(/font-family\s*:[^;]*Helvetica/);
        });
    }
    describe('browser is IE', function () { return missingFeatureBrowserTests(sp_core_library_1._Browser.IE); });
    describe('browser is Edge', function () { return missingFeatureBrowserTests(sp_core_library_1._Browser.Edge); });
    describe('browser is unknown', function () { return missingFeatureBrowserTests(sp_core_library_1._Browser.Other); });
    describe('browser is Chrome', function () { return fullFeaturedBrowserTests(sp_core_library_1._Browser.Chrome); });
    describe('browser is Firefox', function () { return fullFeaturedBrowserTests(sp_core_library_1._Browser.Firefox); });
    describe('browser is Safari', function () { return fullFeaturedBrowserTests(sp_core_library_1._Browser.Safari); });
});
