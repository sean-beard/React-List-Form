"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ManifestStore_1 = require("./../../../../stores/ManifestStore");
var normalizeComponentId_1 = require("./../../../../utilities/normalizeComponentId");
var ManifestDetails_1 = require("./ManifestDetails/ManifestDetails");
var DeveloperToolsFabric_1 = require("./../../../DeveloperToolsFabric");
var ManifestManager_module_scss_1 = require("./ManifestManager.module.scss");
var ManifestManager_resx_1 = require("./ManifestManager.resx");
var ManifestManager = (function (_super) {
    __extends(ManifestManager, _super);
    function ManifestManager() {
        var _this = _super.call(this) || this;
        _this._selection = new DeveloperToolsFabric_1.Selection({
            getKey: function (item) { return item.id; },
            onSelectionChanged: function () {
                var selectedModule = _this._selection.getSelection()[0];
                if (!selectedModule) {
                    ManifestManager._selectedManifestId = undefined;
                }
                else {
                    ManifestManager._selectedManifestId = normalizeComponentId_1.default(selectedModule.id, selectedModule.version);
                }
                _this.setState(_this.getUpdatedState());
            }
        });
        _this.state = _this.getUpdatedState();
        return _this;
    }
    ManifestManager.prototype.render = function () {
        var selectedManifest = this.state.selectedManifest;
        var manifestDetailsBox = selectedManifest
            ? React.createElement(ManifestDetails_1.default, { manifest: selectedManifest })
            : React.createElement("div", { className: ManifestManager_module_scss_1.default.noManifestSelectedContainer },
                React.createElement("div", null, ManifestManager_resx_1.default.noManifestSelected));
        var columns = [{
                key: 'alias',
                name: 'alias',
                fieldName: 'alias',
                minWidth: 100,
                maxWidth: 150,
                onRender: function (item) { return React.createElement("span", null, item.manifest.alias); }
            },
            {
                key: 'id',
                name: 'id',
                fieldName: 'id',
                minWidth: 300,
                maxWidth: 300
            }];
        return React.createElement("div", { className: ManifestManager_module_scss_1.default.container },
            React.createElement("div", { className: ManifestManager_module_scss_1.default.manifestListContainer },
                React.createElement(DeveloperToolsFabric_1.DetailsList, { items: this.state.manifests, columns: columns, isHeaderVisible: false, selectionMode: DeveloperToolsFabric_1.SelectionMode.single, selection: this._selection, setKey: 'set', constrainMode: DeveloperToolsFabric_1.ConstrainMode.unconstrained })),
            React.createElement("div", { className: ManifestManager_module_scss_1.default.manifestDetailsContainer }, manifestDetailsBox));
    };
    ManifestManager.prototype.getUpdatedState = function () {
        var manifestMap = ManifestStore_1.default.instance._getManifestMap();
        var manifests = [];
        manifestMap.forEach(function (entry) { return manifests.push(entry); });
        return {
            manifests: manifests,
            selectedManifest: ManifestManager._selectedManifestId ?
                manifestMap.get(ManifestManager._selectedManifestId) :
                undefined
        };
    };
    ManifestManager._selectedManifestId = undefined;
    return ManifestManager;
}(React.Component));
exports.default = ManifestManager;
