"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var TraceDisplayStore_1 = require("../../../../Stores/TraceDisplayStore");
var traceFormatting_1 = require("./traceFormatting");
var TraceDisplay_resx_1 = require("./../TraceDisplay.resx");
var HEADER = 'data:text/csv;charset=utf-8';
var NEWLINE = '\n';
var FILENAME = 'spfx_trace_logs.csv';
function triggerCsvDownload(traces) {
    var tracesLength = traces.length;
    if (tracesLength === 0) {
        return;
    }
    var csvContent = _generateCsvContent(traces);
    var link = document.createElement('a');
    link.setAttribute('href', encodeURI(HEADER + "," + csvContent));
    link.setAttribute('download', FILENAME);
    link.setAttribute('data-automation-id', 'trace-csv-download-anchor');
    document.body.appendChild(link);
    link.click(); 
    document.body.removeChild(link);
}
exports.triggerCsvDownload = triggerCsvDownload;
function _generateCsvContent(traces) {
    var headerLine = [
        TraceDisplay_resx_1.default.TimestampHeaderLabel,
        TraceDisplay_resx_1.default.LevelHeaderLabel,
        TraceDisplay_resx_1.default.ScopeHeaderLabel,
        TraceDisplay_resx_1.default.SourceHeaderLabel,
        TraceDisplay_resx_1.default.MessageHeaderLabel
    ].map(_escapeCsvField).join(',');
    return "" + headerLine + NEWLINE + traces.map(_generateCsvLine).join(NEWLINE);
}
function _generateCsvLine(trace) {
    var logEventArray = [
        traceFormatting_1.formatTimestamp(trace.timestamp),
        (trace.level) ? TraceDisplayStore_1.LogLevel[trace.level] : ' ',
        trace.source,
        (trace.message) ? trace.message : ((trace.error) ? trace.error.message : ' ')
    ];
    return logEventArray.map(_escapeCsvField).join(',');
}
function _escapeCsvField(rawField) {
    if (!rawField) {
        return ''; 
    }
    var escapedField = rawField.replace(/(")/g, '""'); 
    if (escapedField.match(/([,"\n])/)) {
        escapedField = "\"" + escapedField + "\""; 
    }
    return escapedField;
}
