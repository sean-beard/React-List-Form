"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var CsvRenderer_1 = require("./../CsvRenderer");
var TraceDisplay_resx_1 = require("./../../TraceDisplay.resx");
var csvHeader = 'data:text/csv;charset=utf-8,';
var expectedCsvFirstRow = TraceDisplay_resx_1.default.TimestampHeaderLabel + "," + TraceDisplay_resx_1.default.LevelHeaderLabel + "," + TraceDisplay_resx_1.default.ScopeHeaderLabel + "," + TraceDisplay_resx_1.default.SourceHeaderLabel + "," + TraceDisplay_resx_1.default.MessageHeaderLabel;
var encodedNewline = '%0A';
var encodedSpace = '%20';
var encodedQuote = '%22';
var testTimestamp = 1489511456279 + (new Date().getTimezoneOffset() * 60 * 1000); 
var expectedDateTime = "2017/03/14" + encodedSpace + "17:10:56.279";
describe('CsvRenderer', function () {
    describe('triggerCsvDownload', function () {
        var sandbox;
        var appendChildSpy;
        var removeChildStub;
        var clickStub;
        var simpleTestData;
        beforeEach(function () {
            sandbox = sinon.sandbox.create();
            appendChildSpy = sandbox.spy(document.body, 'appendChild');
            removeChildStub = sandbox.stub(document.body, 'removeChild');
            clickStub = sandbox.stub(HTMLAnchorElement.prototype, 'click');
            simpleTestData = [new sp_telemetry_1._LogEvent('src', 'message', sp_telemetry_1._LogLevel.Error, undefined)];
            setTimestamp(simpleTestData[0]);
        });
        afterEach(function () {
            sandbox.restore();
            var element = getElement();
            if (element) {
                element.remove();
            }
        });
        function setTimestamp(logEntry) {
            logEntry._timestamp = testTimestamp; 
        }
        function getElement() {
            return document.body.querySelector('[data-automation-id="trace-csv-download-anchor"]');
        }
        it('doesn\'t do anything if there are no traces provided', function () {
            CsvRenderer_1.triggerCsvDownload([]);
            chai_1.assert.isTrue(appendChildSpy.notCalled);
            chai_1.assert.isTrue(clickStub.notCalled);
            chai_1.assert.isTrue(removeChildStub.notCalled);
        });
        it('injects the link', function () {
            CsvRenderer_1.triggerCsvDownload(simpleTestData);
            chai_1.assert.isTrue(appendChildSpy.calledOnce);
            chai_1.assert.isDefined(getElement());
        });
        it('has the right filename', function () {
            CsvRenderer_1.triggerCsvDownload(simpleTestData);
            var linkElement = getElement();
            chai_1.assert.equal(linkElement.download, 'spfx_trace_logs.csv');
        });
        it('is clicked', function () {
            CsvRenderer_1.triggerCsvDownload(simpleTestData);
            chai_1.assert.isTrue(clickStub.calledOnce);
        });
        it('is removed', function () {
            removeChildStub.restore();
            var removeChildSpy = sandbox.spy(document.body, 'removeChild');
            CsvRenderer_1.triggerCsvDownload(simpleTestData);
            chai_1.assert.isTrue(removeChildSpy.calledOnce);
            chai_1.assert.isNull(getElement());
        });
        describe('the file contents', function () {
            function trimHeader(csv) {
                if (csv.indexOf(csvHeader) === 0) {
                    return csv.substr(csvHeader.length);
                }
                else {
                    return csv;
                }
            }
            function trimHeaderAndFirstRow(csv) {
                csv = trimHeader(csv);
                var firstRowWithNewline = "" + expectedCsvFirstRow + encodedNewline;
                if (csv.indexOf(firstRowWithNewline) === 0) {
                    return csv.substr(firstRowWithNewline.length);
                }
                else {
                    return csv;
                }
            }
            it('has a CSV header', function () {
                CsvRenderer_1.triggerCsvDownload(simpleTestData);
                var linkElement = getElement();
                var linkData = linkElement.href;
                chai_1.assert.equal(linkData.indexOf(csvHeader), 0);
            });
            it('has the header row', function () {
                CsvRenderer_1.triggerCsvDownload(simpleTestData);
                var linkElement = getElement();
                var linkData = trimHeader(linkElement.href);
                chai_1.assert.equal(linkData.indexOf(expectedCsvFirstRow), 0);
            });
            it('correctly formats the time', function () {
                CsvRenderer_1.triggerCsvDownload(simpleTestData);
                var linkElement = getElement();
                var linkData = trimHeaderAndFirstRow(linkElement.href);
                chai_1.assert.equal(linkData.indexOf(expectedDateTime), 0);
            });
            it('includes all of the values', function () {
                CsvRenderer_1.triggerCsvDownload(simpleTestData);
                var linkElement = getElement();
                var linkData = trimHeaderAndFirstRow(linkElement.href);
                chai_1.assert.equal(linkData, expectedDateTime + ",error,src,message");
            });
            it('formats multiple lines correctly', function () {
                var testData = [
                    new sp_telemetry_1._LogEvent('src1', 'message1', sp_telemetry_1._LogLevel.Error, undefined),
                    new sp_telemetry_1._LogEvent('src2', 'message2', sp_telemetry_1._LogLevel.Verbose, undefined)
                ];
                setTimestamp(testData[0]);
                setTimestamp(testData[1]);
                CsvRenderer_1.triggerCsvDownload(testData);
                var linkElement = getElement();
                var linkData = trimHeaderAndFirstRow(linkElement.href);
                var expected = expectedDateTime + ",error,src1,message1" + encodedNewline + expectedDateTime + ",verbose,src2,message2";
                chai_1.assert.equal(linkData, expected);
            });
            it('prints the "error" level correctly', function () {
                var testData = [
                    new sp_telemetry_1._LogEvent('src', 'message', sp_telemetry_1._LogLevel.Error, undefined)
                ];
                setTimestamp(testData[0]);
                CsvRenderer_1.triggerCsvDownload(testData);
                var linkElement = getElement();
                var linkData = trimHeaderAndFirstRow(linkElement.href);
                chai_1.assert.equal(linkData, expectedDateTime + ",error,src,message");
            });
            it('prints the "warning" level correctly', function () {
                var testData = [
                    new sp_telemetry_1._LogEvent('src', 'message', sp_telemetry_1._LogLevel.Warning, undefined)
                ];
                setTimestamp(testData[0]);
                CsvRenderer_1.triggerCsvDownload(testData);
                var linkElement = getElement();
                var linkData = trimHeaderAndFirstRow(linkElement.href);
                chai_1.assert.equal(linkData, expectedDateTime + ",warning,src,message");
            });
            it('prints the "info" level correctly', function () {
                var testData = [
                    new sp_telemetry_1._LogEvent('src', 'message', sp_telemetry_1._LogLevel.Info, undefined)
                ];
                setTimestamp(testData[0]);
                CsvRenderer_1.triggerCsvDownload(testData);
                var linkElement = getElement();
                var linkData = trimHeaderAndFirstRow(linkElement.href);
                chai_1.assert.equal(linkData, expectedDateTime + ",info,src,message");
            });
            it('prints the "verbose" level correctly', function () {
                var testData = [
                    new sp_telemetry_1._LogEvent('src', 'message', sp_telemetry_1._LogLevel.Verbose, undefined)
                ];
                setTimestamp(testData[0]);
                CsvRenderer_1.triggerCsvDownload(testData);
                var linkElement = getElement();
                var linkData = trimHeaderAndFirstRow(linkElement.href);
                chai_1.assert.equal(linkData, expectedDateTime + ",verbose,src,message");
            });
            it('escapes quotes inside a field correctly', function () {
                var testData = [
                    new sp_telemetry_1._LogEvent('a"b', 'message', sp_telemetry_1._LogLevel.Error, undefined)
                ];
                setTimestamp(testData[0]);
                CsvRenderer_1.triggerCsvDownload(testData);
                var linkElement = getElement();
                var linkData = trimHeaderAndFirstRow(linkElement.href);
                var expected = expectedDateTime + ",error," + encodedQuote + "a" + encodedQuote + encodedQuote + "b" + encodedQuote + ",message";
                chai_1.assert.equal(linkData, expected);
            });
            it('escapes newlines inside a field correctly', function () {
                var testData = [
                    new sp_telemetry_1._LogEvent('a\nb', 'message', sp_telemetry_1._LogLevel.Error, undefined)
                ];
                setTimestamp(testData[0]);
                CsvRenderer_1.triggerCsvDownload(testData);
                var linkElement = getElement();
                var linkData = trimHeaderAndFirstRow(linkElement.href);
                var expected = expectedDateTime + ",error," + encodedQuote + "a" + encodedNewline + "b" + encodedQuote + ",message";
                chai_1.assert.equal(linkData, expected);
            });
            it('escapes commas inside a field correctly', function () {
                var testData = [
                    new sp_telemetry_1._LogEvent('a,b', 'message', sp_telemetry_1._LogLevel.Error, undefined)
                ];
                setTimestamp(testData[0]);
                CsvRenderer_1.triggerCsvDownload(testData);
                var linkElement = getElement();
                var linkData = trimHeaderAndFirstRow(linkElement.href);
                chai_1.assert.equal(linkData, expectedDateTime + ",error," + encodedQuote + "a,b" + encodedQuote + ",message");
            });
        });
    });
});
