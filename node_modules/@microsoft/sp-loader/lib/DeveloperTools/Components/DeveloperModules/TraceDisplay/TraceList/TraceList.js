"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var TraceDisplayStore_1 = require("../../../../Stores/TraceDisplayStore");
var TraceListHeader_1 = require("./TraceListHeader/TraceListHeader");
var TraceListItem_1 = require("./TraceListItem/TraceListItem");
var CsvRenderer_1 = require("./CsvRenderer");
var TraceList_module_scss_1 = require("./TraceList.module.scss");
var TraceDisplay_resx_1 = require("./../TraceDisplay.resx");
var TraceList = (function (_super) {
    __extends(TraceList, _super);
    function TraceList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TraceList.prototype.render = function () {
        var _this = this;
        var idCounter = 0;
        var displayedTraces = [];
        var levelFilters = this.props.filters.level;
        var scopeFilters = this.props.filters.scope;
        var sourceFilters = this.props.filters.source;
        if (!this.props.allTraces) {
            return React.createElement("div", null,
                React.createElement(TraceListHeader_1.default, { filters: this.props.filters }),
                TraceDisplay_resx_1.default.EmptyTraceData);
        }
        this.props.allTraces.forEach(function (trace) {
            if (levelFilters[TraceDisplayStore_1.LogLevel[trace.level]] === false) {
                return;
            }
            if (trace.scope) {
                _this._addFilterLabel(trace.scope.id, scopeFilters);
                if (!scopeFilters[trace.scope.id]) {
                    return;
                }
            }
            else if (scopeFilters.none === false) {
                return;
            }
            if (trace.source) {
                _this._addFilterLabel(trace.source, sourceFilters);
                if (!sourceFilters[trace.source]) {
                    return;
                }
            }
            displayedTraces.push(React.createElement(TraceListItem_1.default, { key: idCounter, id: idCounter, trace: trace }));
            idCounter++;
        });
        return (React.createElement("div", { className: TraceList_module_scss_1.default.container },
            React.createElement("button", { onClick: function () { return CsvRenderer_1.triggerCsvDownload(_this.props.allTraces); } }, TraceDisplay_resx_1.default.ExportCSVButtonLabel),
            React.createElement(TraceListHeader_1.default, { filters: this.props.filters }),
            React.createElement("ul", { className: TraceList_module_scss_1.default.traceListItemsContainer }, displayedTraces)));
    };
    TraceList.prototype._addFilterLabel = function (filterLabel, multiFilter) {
        if (filterLabel && !(filterLabel in multiFilter)) {
            multiFilter[filterLabel] = true;
        }
    };
    return TraceList;
}(React.Component));
exports.default = TraceList;
