"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var gulp_core_build_1 = require("@microsoft/gulp-core-build");
/**
 * On Windows, this task removes the certificate with the expected serial number from the user's
 *  root certification authorities list. On macOS, it finds the SHA signature of the certificate
 *  with the expected serial number and then removes that certificate from the keychain. On
 *  other platforms, the user must untrust the certificate manually. On all platforms,
 *  the certificate and private key are deleted from the user's home directory.
 */
var UntrustCertTask = (function (_super) {
    __extends(UntrustCertTask, _super);
    function UntrustCertTask() {
        return _super.call(this, 'untrust-cert') || this;
    }
    UntrustCertTask.prototype.executeTask = function (gulp, completeCallback) {
        /* tslint:disable */
        var CertificateStore = require('./CertificateStore').default;
        var untrustCertificate = require('./certificates').untrustCertificate;
        /* tslint:enable */
        var untrustCertResult = untrustCertificate(this);
        var certificateStore = CertificateStore.instance;
        // Clear out the certificate store
        certificateStore.certificateData = undefined;
        certificateStore.keyData = undefined;
        if (untrustCertResult) {
            completeCallback();
        }
        else {
            completeCallback('Error untrusting certificate.');
        }
    };
    return UntrustCertTask;
}(gulp_core_build_1.GulpTask));
exports.default = UntrustCertTask;

//# sourceMappingURL=UntrustCertTask.js.map
