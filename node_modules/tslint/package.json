{
  "_args": [
    [
      {
        "raw": "tslint@~5.5.0",
        "scope": null,
        "escapedName": "tslint",
        "name": "tslint",
        "rawSpec": "~5.5.0",
        "spec": ">=5.5.0 <5.6.0",
        "type": "range"
      },
      "E:\\Development\\React-List-Form\\node_modules\\@microsoft\\gulp-core-build-typescript"
    ]
  ],
  "_from": "tslint@>=5.5.0 <5.6.0",
  "_id": "tslint@5.5.0",
  "_inCache": true,
  "_location": "/tslint",
  "_nodeVersion": "4.2.6",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/tslint-5.5.0.tgz_1499280565363_0.710217027226463"
  },
  "_npmUser": {
    "name": "palantir",
    "email": "pt-vendor-npm@palantir.com"
  },
  "_npmVersion": "2.14.12",
  "_phantomChildren": {},
  "_requested": {
    "raw": "tslint@~5.5.0",
    "scope": null,
    "escapedName": "tslint",
    "name": "tslint",
    "rawSpec": "~5.5.0",
    "spec": ">=5.5.0 <5.6.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@microsoft/gulp-core-build-typescript"
  ],
  "_resolved": "https://registry.npmjs.org/tslint/-/tslint-5.5.0.tgz",
  "_shasum": "10e8dab3e3061fa61e9442e8cee3982acf20a6aa",
  "_shrinkwrap": null,
  "_spec": "tslint@~5.5.0",
  "_where": "E:\\Development\\React-List-Form\\node_modules\\@microsoft\\gulp-core-build-typescript",
  "bin": {
    "tslint": "./bin/tslint"
  },
  "bugs": {
    "url": "https://github.com/palantir/tslint/issues"
  },
  "dependencies": {
    "babel-code-frame": "^6.22.0",
    "colors": "^1.1.2",
    "commander": "^2.9.0",
    "diff": "^3.2.0",
    "glob": "^7.1.1",
    "minimatch": "^3.0.4",
    "resolve": "^1.3.2",
    "semver": "^5.3.0",
    "tslib": "^1.7.1",
    "tsutils": "^2.5.1"
  },
  "description": "An extensible static analysis linter for the TypeScript language",
  "devDependencies": {
    "@types/babel-code-frame": "^6.20.0",
    "@types/chai": "^3.5.0",
    "@types/colors": "^1.1.3",
    "@types/commander": "^2.9.0",
    "@types/diff": "^3.2.0",
    "@types/glob": "^5.0.30",
    "@types/js-yaml": "^3.5.31",
    "@types/minimatch": "^2.0.29",
    "@types/mocha": "^2.2.35",
    "@types/node": "^7.0.29",
    "@types/resolve": "^0.0.4",
    "@types/semver": "^5.3.30",
    "chai": "^3.5.0",
    "github": "^8.2.1",
    "js-yaml": "^3.7.0",
    "json-stringify-pretty-compact": "^1.0.3",
    "mocha": "^3.2.0",
    "npm-run-all": "^4.0.2",
    "nyc": "^10.2.0",
    "rimraf": "^2.5.4",
    "tslint": "^5.4.2",
    "tslint-test-config-non-relative": "file:test/external/tslint-test-config-non-relative",
    "typescript": "2.1"
  },
  "directories": {},
  "dist": {
    "shasum": "10e8dab3e3061fa61e9442e8cee3982acf20a6aa",
    "tarball": "https://registry.npmjs.org/tslint/-/tslint-5.5.0.tgz"
  },
  "engines": {
    "node": ">=4.1.2"
  },
  "homepage": "https://github.com/palantir/tslint#readme",
  "keywords": [
    "cli",
    "typescript",
    "linter"
  ],
  "license": "Apache-2.0",
  "main": "./lib/index.js",
  "maintainers": [
    {
      "name": "palantir",
      "email": "pt-vendor-npm@palantir.com"
    }
  ],
  "name": "tslint",
  "optionalDependencies": {},
  "peerDependencies": {
    "typescript": ">=2.1.0 || >=2.1.0-dev || >=2.2.0-dev || >=2.3.0-dev || >=2.4.0-dev || >=2.5.0-dev || >=2.6.0-dev"
  },
  "readme": "[![NPM version](https://badge.fury.io/js/tslint.svg)](http://badge.fury.io/js/tslint)\n[![Downloads](http://img.shields.io/npm/dm/tslint.svg)](https://npmjs.org/package/tslint)\n[![Circle CI](https://circleci.com/gh/palantir/tslint.svg?style=svg)](https://circleci.com/gh/palantir/tslint)\n[![Join the chat at https://gitter.im/palantir/tslint](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/palantir/tslint?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nTSLint\n======\n\nTSLint is an extensible static analysis tool that checks [TypeScript](https://github.com/Microsoft/TypeScript) code for readability, maintainability, and functionality errors. It is widely supported across modern editors & build systems and can be customized with your own lint rules, configurations, and formatters.\n\nTSLint supports:\n\n- custom lint rules\n- custom formatters (failure reporters)\n- inline disabling and enabling of rules with comment flags\n- configuration presets (`tslint:latest`, `tslint-react`, etc.) and plugin composition\n- automatic fixing of formatting & style violations\n- integration with [msbuild](https://github.com/joshuakgoldberg/tslint.msbuild), [grunt](https://github.com/palantir/grunt-tslint), [gulp](https://github.com/panuhorsmalahti/gulp-tslint), [atom](https://github.com/AtomLinter/linter-tslint), [eclipse](https://github.com/palantir/eclipse-tslint), [emacs](http://flycheck.org), [sublime](https://packagecontrol.io/packages/SublimeLinter-contrib-tslint), [vim](https://github.com/scrooloose/syntastic), [visual studio 2015](https://marketplace.visualstudio.com/items?itemName=MadsKristensen.WebAnalyzer), [visual studio 2017](https://marketplace.visualstudio.com/items?itemName=RichNewman.TypeScriptAnalyzer) [vscode](https://marketplace.visualstudio.com/items?itemName=eg2.tslint), [webstorm](https://www.jetbrains.com/webstorm/help/tslint.html), and more\n\nInstallation & Usage\n------------\n\nPlease refer to the full installation & usage documentation on the [TSLint website](https://palantir.github.io/tslint/). There, you'll find information about\n- [configuration](https://palantir.github.io/tslint/usage/configuration/),\n- [core rules](https://palantir.github.io/tslint/rules/),\n- [core formatters](https://palantir.github.io/tslint/formatters/), and\n- [customization of TSLint](https://palantir.github.io/tslint/develop/custom-rules/).\n- [inline disabling and enabling of rules with comment flags](https://palantir.github.io/tslint/usage/rule-flags/)\n\nCustom Rules & Plugins\n------------\n\n#### Custom rule sets from Palantir\n\n- [tslint-react](https://github.com/palantir/tslint-react) - Lint rules related to React & JSX.\n- [tslint-blueprint](https://github.com/palantir/tslint-blueprint) - Lint rules to enforce best practices with [blueprintjs libraries](https://github.com/palantir/blueprint)\n\n#### Custom rule sets from the community\n\nIf we don't have all the rules you're looking for, you can either write your own [custom rules](https://palantir.github.io/tslint/develop/custom-rules/) or use rules implementations developed by the community. The repos below are a good source of custom rules:\n\n- [ESLint rules for TSLint](https://github.com/buzinas/tslint-eslint-rules) - Improve your TSLint with the missing ESLint Rules\n- [tslint-microsoft-contrib](https://github.com/Microsoft/tslint-microsoft-contrib) - A set of TSLint rules used on some Microsoft projects\n- [codelyzer](https://github.com/mgechev/codelyzer) - A set of tslint rules for static code analysis of Angular TypeScript projects\n- [vrsource-tslint-rules](https://github.com/vrsource/vrsource-tslint-rules)\n- [tslint-immutable](https://github.com/jonaskello/tslint-immutable) - TSLint rules to disable mutation in TypeScript\n- [tslint-consistent-codestyle](https://github.com/ajafff/tslint-consistent-codestyle) - TSLint rules to enforce consistent code style in TypeScript\n\nDevelopment\n-----------\n\nRequirements:\n\n- `node` v7\n- `yarn` v0.23+\n\n#### Quick Start\n\n```bash\ngit clone git@github.com:palantir/tslint.git --config core.autocrlf=input --config core.eol=lf\nyarn\nyarn compile\nyarn test\n```\n\nCreating a new release\n----------------------\n\n1. Bump the version number in `package.json` and `src/linter.ts`\n2. Add release notes in `CHANGELOG.md`\n3. `yarn verify` to build the latest sources from a clean state\n4. Commit with message `Prepare release <version>`\n5. Run `npm publish`\n6. Create a git tag for the new release and push it ([see existing tags here](https://github.com/palantir/tslint/tags))\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/palantir/tslint.git"
  },
  "scripts": {
    "clean": "npm-run-all -p clean:core clean:test",
    "clean:core": "rimraf lib",
    "clean:test": "rimraf build && rimraf test/config/node_modules",
    "compile": "npm-run-all -p compile:core compile:test -s compile:scripts",
    "compile:core": "tsc -p src",
    "compile:scripts": "tsc -p scripts",
    "compile:test": "tsc -p test",
    "coverage": "rimraf coverage .nyc_output && nyc npm test",
    "docs": "node scripts/buildDocs.js",
    "lint": "npm-run-all -p lint:global lint:from-bin",
    "lint:from-bin": "node bin/tslint --project test/tsconfig.json --format stylish",
    "lint:global": "tslint --project test/tsconfig.json --format stylish # test includes 'src' too",
    "test": "npm-run-all test:pre -p test:mocha test:rules",
    "test:mocha": "mocha --reporter spec --colors \"build/test/**/*Tests.js\"",
    "test:pre": "cd ./test/config && npm install --no-save",
    "test:rules": "node ./build/test/ruleTestRunner.js",
    "verify": "npm-run-all clean compile lint test docs"
  },
  "typings": "./lib/index.d.ts",
  "version": "5.5.0"
}
