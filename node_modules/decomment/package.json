{
  "_args": [
    [
      {
        "raw": "decomment@^0.8.2",
        "scope": null,
        "escapedName": "decomment",
        "name": "decomment",
        "rawSpec": "^0.8.2",
        "spec": ">=0.8.2 <0.9.0",
        "type": "range"
      },
      "E:\\Development\\React-List-Form\\node_modules\\gulp-decomment"
    ]
  ],
  "_from": "decomment@>=0.8.2 <0.9.0",
  "_id": "decomment@0.8.8",
  "_inCache": true,
  "_location": "/decomment",
  "_nodeVersion": "8.1.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/decomment-0.8.8.tgz_1497781151353_0.35559933609329164"
  },
  "_npmUser": {
    "name": "vitaly.tomilov",
    "email": "vitaly.tomilov@gmail.com"
  },
  "_npmVersion": "5.0.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "decomment@^0.8.2",
    "scope": null,
    "escapedName": "decomment",
    "name": "decomment",
    "rawSpec": "^0.8.2",
    "spec": ">=0.8.2 <0.9.0",
    "type": "range"
  },
  "_requiredBy": [
    "/gulp-decomment"
  ],
  "_resolved": "https://registry.npmjs.org/decomment/-/decomment-0.8.8.tgz",
  "_shasum": "83d112fd5a812dcecc0823c2532bb17a72995f62",
  "_shrinkwrap": null,
  "_spec": "decomment@^0.8.2",
  "_where": "E:\\Development\\React-List-Form\\node_modules\\gulp-decomment",
  "author": {
    "name": "Vitaly Tomilov",
    "email": "vitaly.tomilov@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/vitaly-t/decomment/issues",
    "email": "vitaly.tomilov@gmail.com"
  },
  "dependencies": {
    "esprima": "^4.0.0"
  },
  "description": "Removes comments from JSON/JavaScript, CSS/HTML, CPP/H, etc.",
  "devDependencies": {
    "coveralls": "2.11",
    "eslint": "^4.0.0",
    "istanbul": "0.4",
    "jasmine-node": "1.x"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-xVbmniKld/kjjmoHjT0Ex35aa16zw29WEzSAflBcMawjqDtZlrR6wkSwYV0mwJYytDz8JEAYia5Pl8IJRXdWLg==",
    "shasum": "83d112fd5a812dcecc0823c2532bb17a72995f62",
    "tarball": "https://registry.npmjs.org/decomment/-/decomment-0.8.8.tgz"
  },
  "engines": {
    "node": ">=0.10",
    "npm": ">=1.4"
  },
  "files": [
    "lib",
    "test"
  ],
  "gitHead": "3090a3ae602163e7bfb7ea4b52e3c6de356212e7",
  "homepage": "https://github.com/vitaly-t/decomment",
  "keywords": [
    "remove comments",
    "JavaScript",
    "JSON",
    "CSS",
    "HTML",
    "CPP",
    "C++",
    "Text"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "vitaly.tomilov",
      "email": "vitaly.tomilov@gmail.com"
    }
  ],
  "name": "decomment",
  "optionalDependencies": {},
  "readme": "decomment\r\n=========\r\n\r\nRemoves comments from JSON/JavaScript, CSS/HTML, CPP/H, etc.\r\n\r\n[![Build Status](https://travis-ci.org/vitaly-t/decomment.svg?branch=master)](https://travis-ci.org/vitaly-t/decomment)\r\n[![Coverage Status](https://coveralls.io/repos/vitaly-t/decomment/badge.svg?branch=master)](https://coveralls.io/r/vitaly-t/decomment?branch=master)\r\n[![Downloads Count](http://img.shields.io/npm/dm/decomment.svg)](https://www.npmjs.com/package/decomment)\r\n\r\n## Installing\r\n\r\n```\r\n$ npm install decomment\r\n```\r\n\r\n## Testing\r\n\r\n```\r\n$ npm test\r\n```\r\n\r\nTesting with coverage:\r\n\r\n```\r\n$ npm run coverage\r\n```\r\n\r\n## Usage\r\n\r\n```js\r\nvar decomment = require('decomment');\r\n\r\nvar code = 'var t; // comments';\r\n\r\ndecomment(code); //=> var t;\r\n```\r\n\r\nFor build systems / task runners see [gulp-decomment] and [grunt-decomment].\r\n\r\n## Features\r\n\r\n* Removes both single and multi-line comments from JSON, JavaScript and CSS/Text\r\n* Automatically recognizes HTML and removes all `<!-- comments -->` from it\r\n* Does not change layout / formatting of the original document\r\n* Removes lines that have only comments on them\r\n* Compatible with CSS3, JSON5 and ECMAScript 6\r\n\r\nThe library does not support mixed content - HTML with JavaScript or CSS in it.\r\nOnce the input code is recognized as HTML, only the HTML comments will be removed from it.\r\n\r\n## Performance\r\n\r\nFor JSON and JavaScript this library uses [esprima] to guarantee correct processing for regular expressions.\r\n\r\nAs an example, it can process [AngularJS 1.5 Core](https://code.angularjs.org/1.5.0/angular.js)\r\nin under 100ms, which is 1.1MB ~ 30,000 lines of JavaScript.   \r\n\r\n## API\r\n\r\n### decomment(code, [options]) ⇒ String\r\n\r\nThis method first checks if the code starts with `<`, as an HTML, and if so, all `<!-- comment -->` entries\r\nare removed, according to the `options`.\r\n\r\nWhen the `code` is not recognized as HTML, it is assumed to be either JSON or JavaScript. It is then parsed\r\nthrough [esprima] for ECMAScript 6 compliance, and to extract details about regular expressions.\r\n\r\nIf [esprima] fails to validate the code, it will throw a parsing error. When successful, this method will remove\r\n`//` and `/**/` comments according to the `options` (see below).\r\n\r\n##### options.safe ⇒ Boolean\r\n\r\n* `false (default)` - remove all multi-line comments\r\n* `true` - keep special multi-line comments that begin with:\r\n - `<!--[if` - for conditional comments in HTML\r\n - `/*!` - for everything else (other than HTML)\r\n\r\nExample:\r\n\r\n```js\r\nvar decomment = require('decomment');\r\nvar code = '/*! special */ var a; /* normal */';\r\ndecomment(code); //=> var a;\r\ndecomment(code, {safe: true}); //=> /*! special */ var a;\r\n```\r\n\r\n##### options.ignore ⇒ RegExp | [RegExp,...]\r\n\r\nTakes either a single or an array of regular expressions to match against. \r\nAll matching blocks are then skipped, as well as any comment-like content inside them.\r\n\r\nExamples:\r\n\r\n* CSS may contain Base64-encoded strings with comment-like symbols:\r\n\r\n```css\r\n  src: url(data:font/woff;base64,d09GRg//ABAAAAAAZ)\r\n```\r\n\r\nYou can isolate all `url(*)` blocks by using:\r\n\r\n```js\r\n  {ignore: /url\\([\\w\\s:\\/=\\-\\+;,]*\\)/g}\r\n```\r\n\r\n* If you want to isolate jsDoc blocks (start with `/**`, followed by a line break, end with `*/`),\r\nyou can use the following:\r\n\r\n```js\r\n{ignore: /\\/\\*\\*\\s*\\n([^\\*]*(\\*[^\\/])?)*\\*\\//g}\r\n``` \r\n\r\n##### options.space ⇒ Boolean\r\n\r\n* `false (default)` - remove comment blocks entirely\r\n* `true` - replace comment blocks with white spaces where needed, in order to preserve\r\nthe original line + column position of every code element.\r\n\r\nExample:\r\n \r\n```js\r\nvar decomment = require('decomment');\r\nvar code = 'var a/*text*/, b'; \r\ndecomment(code); //=> var a, b\r\ndecomment(code, {space: true}); //=> var a        , b\r\n```\r\n\r\nNOTE: When this option is enabled, option `trim` is ignored.\r\n\r\n##### options.trim ⇒ Boolean\r\n\r\n* `false (default)` - do not trim comments\r\n* `true` - remove empty lines that follow removed full-line comments\r\n\r\nExample:\r\n \r\n```js\r\nvar decomment = require('decomment');\r\nvar code = '/* comment */\\r\\n\\r\\n var test = 123'; \r\ndecomment(code); //=> \\r\\n var test = 123\r\ndecomment(code, {trim: true}); //=> var test = 123\r\n```\r\n\r\nNOTE: This option has no effect when option `space` is enabled.\r\n\r\n### decomment.text(text, [options]) ⇒ String\r\n\r\nUnlike the default **decomment**, it instructs the library that `text` is not a JSON,\r\nJavaScript or HTML, rather a plain text that needs no parsing or validation,\r\nonly to remove `//` and `/**/` comments from it according to the `options`.\r\n\r\nThis method is good for any text file that uses syntax `//` and `/**/` for comments,\r\nsuch as: `.CSS`, `.CPP`, `.H`, etc.\r\n\r\nExample:\r\n\r\n```js\r\nvar decomment = require('decomment');\r\nvar text = '.my-class{color:Red;}// comments';\r\ndecomment.text(text); //=> .my-class{color:Red;}\r\n```\r\n\r\nPlease note that while the same rules apply for the text blocks (`''`, `\"\"` and \\`\\`),\r\nyou should not use this method for JSON or JavaScript, as it can break your regular expressions.\r\n\r\n### decomment.html(html, [options]) ⇒ String\r\n\r\nUnlike the default **decomment** method, it instructs the library not to parse\r\nor validate the input in any way, rather assume it to be HTML, and remove all\r\n`<!-- comment -->` entries from it according to the `options`.\r\n\r\n### decomment.getEOL(text) ⇒ String\r\n\r\nReturns End-of-Line string used within the `text`, based on the occurrence frequency:\r\n\r\n* `\\n` - for Unix-encoded text\r\n* `\\r\\n` - for Windows-encoded text \r\n\r\nWhen impossible to conclude (the same or 0 occurrence), it returns the default End-of-Line\r\nfor the current OS.\r\n\r\n## License\r\n\r\nCopyright © 2017 [Vitaly Tomilov](https://github.com/vitaly-t);\r\nReleased under the MIT license.\r\n\r\n[esprima]:https://github.com/jquery/esprima\r\n[grunt-decomment]:https://github.com/vitaly-t/grunt-decomment\r\n[gulp-decomment]:https://github.com/vitaly-t/gulp-decomment\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/vitaly-t/decomment.git"
  },
  "scripts": {
    "coverage": "istanbul cover ./node_modules/jasmine-node/bin/jasmine-node test",
    "lint": "eslint ./lib ./test",
    "test": "jasmine-node test",
    "travis": "istanbul cover ./node_modules/jasmine-node/bin/jasmine-node test --captureExceptions && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage"
  },
  "version": "0.8.8"
}
