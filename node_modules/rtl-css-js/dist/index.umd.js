(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["rtlCSSJS"] = factory();
	else
		root["rtlCSSJS"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var mainExport = __webpack_require__(1);
	
	module.exports = mainExport.default;
	for (var key in mainExport) {
	  if (mainExport.hasOwnProperty(key)) {
	    module.exports[key] = mainExport[key];
	  }
	}

/***/ }),
/* 1 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	// this will be an object of properties that map to their corresponding rtl property (their doppelganger)
	var propertiesToConvert = arrayToObject([['paddingLeft', 'paddingRight'], ['marginLeft', 'marginRight'], ['left', 'right'], ['borderLeft', 'borderRight'], ['borderLeftColor', 'borderRightColor'], ['borderLeftStyle', 'borderRightStyle'], ['borderTopLeftRadius', 'borderTopRightRadius'], ['borderBottomLeftRadius', 'borderBottomRightRadius']]);
	
	// this is the same as the propertiesToConvert except for values
	var valuesToConvert = arrayToObject([['ltr', 'rtl'], ['left', 'right'], ['w-resize', 'e-resize'], ['sw-resize', 'se-resize'], ['nw-resize', 'ne-resize']]);
	
	// some values require a little fudging, that fudging goes here.
	var propertyValueConverters = {
	  padding: function padding(value) {
	    if (isNumber(value)) {
	      return value;
	    }
	    return handleQuartetValues(value);
	  },
	  textShadow: function textShadow(value) {
	    // intentionally leaving off the `g` flag here because we only want to change the first number (which is the offset-x)
	    return value.replace(/(-*)([.|\d]+)/, function (match, negative, number) {
	      if (number === '0') {
	        return match;
	      }
	      var doubleNegative = negative === '' ? '-' : '';
	      return '' + doubleNegative + number;
	    });
	  },
	  borderColor: function borderColor(value) {
	    return handleQuartetValues(value);
	  },
	  borderRadius: function borderRadius(value) {
	    if (isNumber(value)) {
	      return value;
	    }
	    if (includes(value, '/')) {
	      var _value$split = value.split('/'),
	          _value$split2 = _slicedToArray(_value$split, 2),
	          radius1 = _value$split2[0],
	          radius2 = _value$split2[1];
	
	      var convertedRadius1 = propertyValueConverters.borderRadius(radius1.trim());
	      var convertedRadius2 = propertyValueConverters.borderRadius(radius2.trim());
	      return convertedRadius1 + ' / ' + convertedRadius2;
	    }
	    var splitValues = getValuesAsList(value);
	    switch (splitValues.length) {
	      case 2:
	        {
	          return splitValues.reverse().join(' ');
	        }
	      case 4:
	        {
	          var _splitValues = _slicedToArray(splitValues, 4),
	              topLeft = _splitValues[0],
	              topRight = _splitValues[1],
	              bottomRight = _splitValues[2],
	              bottomLeft = _splitValues[3];
	
	          return [topRight, topLeft, bottomLeft, bottomRight].join(' ');
	        }
	      default:
	        {
	          return value;
	        }
	    }
	  },
	  background: function background(value) {
	    // Yeah, this is in need of a refactor üôÉ...
	    // but this property is a tough cookie üç™
	    // get the backgroundPosition out of the string by removing everything that couldn't be the backgroundPosition value
	    var backgroundPositionValue = value.replace(/(url\(.*?\))|(rgba?\(.*?\))|(hsl\(.*?\))|(#[a-fA-F0-9]+)|((^| )(\D)+( |$))/g, '').trim();
	    // replace that backgroundPosition value with the converted version
	    value = value.replace(backgroundPositionValue, propertyValueConverters.backgroundPosition(backgroundPositionValue));
	    // do the backgroundImage value replacing on the whole value (because why not?)
	    return propertyValueConverters.backgroundImage(value);
	  },
	  backgroundImage: function backgroundImage(value) {
	    if (!includes(value, 'url(')) {
	      return value;
	    }
	    // sorry for the regex üòû, but basically this replaces _every_ instance of `ltr`, `rtl`, `right`, and `left` with
	    // the corresponding opposite. A situation we're accepting here:
	    // url('/left/right/rtl/ltr.png') will be changed to url('/right/left/ltr/rtl.png')
	    // Definite trade-offs here, but I think it's a good call.
	    return value.replace(/(^|\W|_)((ltr)|(rtl)|(left)|(right))(\W|_|$)/g, function (match, g1, group2) {
	      return match.replace(group2, valuesToConvert[group2]);
	    });
	  },
	  backgroundPosition: function backgroundPosition(value) {
	    return value
	    // intentionally only grabbing the first instance of this because that represents `left`
	    .replace(/^((-|\d|\.)+%)/, function (match, group) {
	      return calculateNewBackgroundPosition(group);
	    }).replace(/(left)|(right)/, function (match) {
	      return valuesToConvert[match];
	    });
	  },
	  backgroundPositionX: function backgroundPositionX(value) {
	    if (isNumber(value)) {
	      return value;
	    }
	    return propertyValueConverters.backgroundPosition(value);
	  }
	};
	propertyValueConverters.margin = propertyValueConverters.padding;
	propertyValueConverters.borderWidth = propertyValueConverters.padding;
	propertyValueConverters.boxShadow = propertyValueConverters.textShadow;
	propertyValueConverters.webkitBoxShadow = propertyValueConverters.textShadow;
	propertyValueConverters.mozBoxShadow = propertyValueConverters.textShadow;
	propertyValueConverters.borderStyle = propertyValueConverters.borderColor;
	
	// here's our main export! üëã
	exports.default = convert;
	
	/**
	 * converts properties and values in the CSS in JS object to their corresponding RTL values
	 * @param {Object} object the CSS in JS object
	 * @return {Object} the RTL converted object
	 */
	
	function convert(object) {
	  return Object.keys(object).reduce(function (newObj, originalKey) {
	    var originalValue = object[originalKey];
	    if (isString(originalValue)) {
	      // you're welcome to later code üò∫
	      originalValue = originalValue.trim();
	    }
	
	    var _convertProperty = convertProperty(originalKey, originalValue),
	        key = _convertProperty.key,
	        value = _convertProperty.value;
	
	    newObj[key] = value;
	    return newObj;
	  }, {});
	}
	
	/**
	 * Converts a property and its value to the corresponding RTL key and value
	 * @param {String} originalKey the original property key
	 * @param {Number|String|Object} originalValue the original css property value
	 * @return {Object} the new {key, value} pair
	 */
	function convertProperty(originalKey, originalValue) {
	  var isNoFlip = /\/\*\s?@noflip\s?\*\//.test(originalValue);
	  var key = isNoFlip ? originalKey : getPropertyDoppelganger(originalKey);
	  var value = isNoFlip ? originalValue : getValueDoppelganger(key, originalValue);
	  return { key: key, value: value };
	}
	
	/**
	 * This gets the RTL version of the given property if it has a corresponding RTL property
	 * @param {String} property the name of the property
	 * @return {String} the name of the RTL property
	 */
	function getPropertyDoppelganger(property) {
	  return propertiesToConvert[property] || property;
	}
	
	/**
	 * This converts the given value to the RTL version of that value based on the key
	 * @param {String} key this is the key (note: this should be the RTL version of the originalKey)
	 * @param {String|Number|Object} originalValue the original css property value. If it's an object, then we'll convert that as well
	 * @return {String|Number|Object} the converted value
	 */
	function getValueDoppelganger(key, originalValue) {
	  /* eslint complexity:[2, 8] */ // let's try to keep the complexity down... If we have to do this much more, let's break this up
	  if (originalValue === null || typeof originalValue === 'undefined') {
	    return originalValue;
	  }
	
	  if (isObject(originalValue)) {
	    return convert(originalValue); // recurssion üåÄ
	  }
	  var isNum = isNumber(originalValue);
	  var importantlessValue = isNum ? originalValue : originalValue.replace(/ !important.*?$/, '');
	  var isImportant = !isNum && importantlessValue.length !== originalValue.length;
	  var valueConverter = propertyValueConverters[key];
	  var newValue = void 0;
	  if (valueConverter) {
	    newValue = valueConverter(importantlessValue);
	  } else {
	    newValue = valuesToConvert[importantlessValue] || importantlessValue;
	  }
	  if (isImportant) {
	    return newValue + ' !important';
	  }
	  return newValue;
	}
	
	/**
	 * This takes a list of CSS values and converts it to an array
	 * @param {String} value - something like `1px`, `1px 2em`, or `3pt rgb(150, 230, 550) 40px calc(100% - 5px)`
	 * @return {Array} the split values (for example: `['3pt', 'rgb(150, 230, 550)', '40px', 'calc(100% - 5px)']`)
	 */
	function getValuesAsList(value) {
	  return value.replace(/ +/g, ' ') // remove all extraneous spaces
	  .split(' ').map(function (i) {
	    return i.trim();
	  }) // get rid of extra space before/after each item
	  .filter(Boolean) // get rid of empty strings
	  // join items which are within parenthese
	  // luckily `calc (100% - 5px)` is invalid syntax and it must be `calc(100% - 5px)`, otherwise this would be even more complex
	  .reduce(function (_ref, item) {
	    var list = _ref.list,
	        state = _ref.state;
	
	    var openParansCount = (item.match(/\(/g) || []).length;
	    var closedParansCount = (item.match(/\)/g) || []).length;
	    if (state.parensDepth > 0) {
	      list[list.length - 1] = list[list.length - 1] + ' ' + item;
	    } else {
	      list.push(item);
	    }
	    state.parensDepth += openParansCount - closedParansCount;
	    return { list: list, state: state };
	  }, { list: [], state: { parensDepth: 0 } }).list;
	}
	
	/**
	 * This is intended for properties that are `top right bottom left` and will switch them to `top left bottom right`
	 * @param {String} value - `1px 2px 3px 4px` for example, but also handles cases where there are too few/too many and
	 * simply returns the value in those cases (which is the correct behavior)
	 * @return {String} the result - `1px 4px 3px 2px` for example.
	 */
	function handleQuartetValues(value) {
	  var splitValues = getValuesAsList(value);
	  if (splitValues.length <= 3 || splitValues.length > 4) {
	    return value;
	  }
	
	  var _splitValues2 = _slicedToArray(splitValues, 4),
	      top = _splitValues2[0],
	      right = _splitValues2[1],
	      bottom = _splitValues2[2],
	      left = _splitValues2[3];
	
	  return [top, left, bottom, right].join(' ');
	}
	
	/**
	 * Takes a percentage for background position and inverts it.
	 * This was copied and modified from CSSJanus:
	 * https://github.com/cssjanus/cssjanus/blob/4245f834365f6cfb0239191a151432fb85abab23/src/cssjanus.js#L152-L175
	 * @param {String} value - the original value (for example 77%)
	 * @return {String} the result (for example 23%)
	 */
	function calculateNewBackgroundPosition(value) {
	  var idx = value.indexOf('.');
	  if (idx === -1) {
	    value = 100 - parseFloat(value) + '%';
	  } else {
	    // Two off, one for the "%" at the end, one for the dot itself
	    var len = value.length - idx - 2;
	    value = 100 - parseFloat(value);
	    value = value.toFixed(len) + '%';
	  }
	  return value;
	}
	
	/**
	 * Takes an array of [keyValue1, keyValue2] pairs and creates an object of {keyValue1: keyValue2, keyValue2: keyValue1}
	 * @param {Array} array the array of pairs
	 * @return {Object} the {key, value} pair object
	 */
	function arrayToObject(array) {
	  return array.reduce(function (obj, _ref2) {
	    var _ref3 = _slicedToArray(_ref2, 2),
	        prop1 = _ref3[0],
	        prop2 = _ref3[1];
	
	    obj[prop1] = prop2;
	    obj[prop2] = prop1;
	    return obj;
	  }, {});
	}
	
	function isNumber(val) {
	  return typeof val === 'number';
	}
	
	function isObject(val) {
	  return val && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object';
	}
	
	function isString(val) {
	  return typeof val === 'string';
	}
	
	function includes(inclusive, inclusee) {
	  return inclusive.indexOf(inclusee) !== -1;
	}

/***/ })
/******/ ])
});
;
//# sourceMappingURL=index.umd.js.map